[
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC;",
    "SELECT singer.name, singer.country, singer.age FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id ORDER BY singer.age DESC;",
    "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY age ASC  LIMIT 1;",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country;",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity) AS avg_capacity, MAX(capacity) AS max_capacity FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, COUNT(*) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(*) AS num_concerts  FROM stadium  INNER JOIN concert ON concert.stadium_id = stadium.stadium_id  GROUP BY stadium.name;",
    "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year >= 2014  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(singer_in_concert.singer_id) DESC  LIMIT 1;",
    "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1);",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert);",
    "SELECT country  FROM singer  WHERE age > 40 OR age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT singer.name, concert.theme, COUNT(*) AS number_of_singers FROM concert_singer INNER JOIN singer ON concert_singer.singer_id = singer.singer_id INNER JOIN concert ON concert_singer.concert_id = concert.concert_id GROUP BY singer.name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT singer.name  FROM concert_singer  INNER JOIN singer ON concert_singer.singer_id = singer.singer_id  INNER JOIN concert ON concert_singer.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN concert_singer  ON singer.singer_id = concert_singer.singer_id  WHERE concert_singer.song_name LIKE '%Hey%';",
    "SELECT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015) GROUP BY stadium.name, stadium.location;",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year IN (2014, 2015)  GROUP BY s.name, s.location  HAVING COUNT(*) = 2;",
    "SELECT COUNT(*)  FROM concert c  INNER JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = s.highest;",
    "SELECT COUNT(*) FROM concert c JOIN stadium s ON c.stadium_id = s.stadium_id WHERE s.capacity = (SELECT MAX(capacity) FROM stadium);",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets_1 WHERE weight > 10;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT pettype, MAX(weight)  FROM pets GROUP BY pettype;",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM students JOIN has_pet ON students.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE students.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog'",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.petid IN (     SELECT petid      FROM pets      WHERE pettype = 'dog' )  GROUP BY fname  HAVING COUNT(*) = 2;",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND EXISTS (     SELECT *     FROM has_pet AS h2     INNER JOIN pets AS p2 ON h2.petid = p2.petid     WHERE h2.stuid = student.stuid     AND p2.pettype = 'dog' )",
    "SELECT major, age  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat');",
    "SELECT student.major, student.age  FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid  LEFT JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype != 'cat'",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid                     FROM has_pet                     INNER JOIN pets                     ON has_pet.petid = pets.petid                     WHERE pettype = 'cat')",
    "SELECT fname, age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT petid, weight FROM pets WHERE pet_age > 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith';",
    "SELECT petid  FROM pets_1  JOIN has_pet ON pets_1.stuid = has_pet.stuid  JOIN student ON has_pet.stuid = student.stuid  WHERE student.lname = 'Smith';",
    "SELECT stuid, COUNT(petid) FROM has_pet INNER JOIN pets_1 ON has_pet.stuid = pets_1.stuid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS pet_count FROM has_pet INNER JOIN students ON has_pet.stuid = students.stuid GROUP BY stuid;",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(petid) > 1)",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1)",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    "SELECT contid, continent, COUNT(countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    ", origin  SELECT contid, continent, COUNT(countryname)  FROM continents  JOIN countries  ON continents.contid = countries.continent  GROUP BY contid, continent;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*)  FROM countries;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT MIN(horsepower) FROM cars_data c JOIN car_names n ON c.makeid = n.makeid JOIN model_list m ON n.model = m.model JOIN car_makers mk ON m.maker = mk.id;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC  LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_makers.id = cars_data.makeid WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    ", origin  SELECT fullname  FROM car_makers  INNER JOIN car_names  ON car_makers.id = car_names.makeid  INNER JOIN model_list  ON car_names.model = model_list.modelid  WHERE year = 1970;",
    "SELECT fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970;",
    ", origin |  SELECT make, year FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY year ASC LIMIT 1;",
    ", origin  SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.makeid = cars_data.makeid  GROUP BY car_makers.maker;",
    "SELECT DISTINCT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  WHERE year > 1980;",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model;",
    ", origin  SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent;",
    "SELECT cont.continent, COUNT(DISTINCT car_makers.maker) AS num_makers FROM continents cont INNER JOIN countries ctry ON cont.contid = ctry.continent INNER JOIN car_makers ON ctry.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY cont.continent;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT fullname, COUNT(model)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  GROUP BY fullname;",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid GROUP BY car_makers.id, car_makers.fullname;",
    "SELECT accelerate FROM car_names cn  INNER JOIN model_list ml ON cn.model = ml.modelid  INNER JOIN car_makers cm ON ml.maker = cm.id  INNER JOIN countries c ON cm.country = c.countryid  INNER JOIN continents co ON c.continent = co.contid  WHERE cn.make = 'amc hornet sportabout (sw)';",
    "SELECT accelerate FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'AMC Hornet Sportabout' AND car_names.make = 'SW';",
    "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  INNER JOIN countries ON car_makers.country = countries.countryname  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'USA';",
    "SELECT COUNT(model) FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN car_makers ON car_names.makeid = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.horsepower > 150;",
    "SELECT COUNT(*)  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > 150;",
    "SELECT AVG(weight) FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
    "SELECT countries.countryname  FROM car_makers  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT MAX(horsepower), make FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 3  GROUP BY make;",
    "SELECT MAX(horsepower) AS 'Largest Horsepower', make FROM car_names cn  INNER JOIN cars_data cd ON cn.makeid = cd.id  WHERE cylinders = 3  GROUP BY make;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower)  FROM cars_data  WHERE year < 1980;",
    "SELECT AVG(edispl) FROM cars_data  JOIN model_list ON cars_data.makeid = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE model_list.model = 'Volvo';",
    "SELECT AVG(edispl) FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.make  WHERE car_makers.fullname = 'Volvo';",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT model, COUNT(make) AS num_makes FROM car_names GROUP BY model ORDER BY num_makes DESC LIMIT 1;",
    "SELECT model, COUNT(DISTINCT make) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cars_data.year = 1980;",
    ", origin  SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT COUNT(model) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker               FROM model_list               GROUP BY maker               HAVING COUNT(model) > 3);",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.modelid) > 3;",
    "SELECT model_list.model  FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN cars_data  ON model_list.model = cars_data.make  WHERE car_makers.fullname = 'General Motors'  AND cars_data.weight > 3500;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT cylinders FROM cars_data  INNER JOIN model_list ON cars_data.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'Volvo'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT cylinders FROM cars_data c  INNER JOIN model_list m ON c.makeid = m.modelid  INNER JOIN car_names n ON m.maker = n.makeid  INNER JOIN car_makers mk ON n.maker = mk.id  INNER JOIN countries ct ON mk.country = ct.countryid  INNER JOIN continents cn ON ct.continent = cn.contid  WHERE cn.continent = 'volvo'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT car_names.makeid, car_names.make  FROM cars_data  INNER JOIN car_names  ON cars_data.makeid = car_names.makeid  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.modelid INNER JOIN cars_data ON model_list.maker = cars_data.id WHERE cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    ", origin  SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE car_makers.fullname != 'Ford Motor Company'  AND weight < 3500;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT car_names.makeid) > 3  AND COUNT(DISTINCT model_list.modelid) > 2;",
    ", origin  SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT cars_data.id) > 3;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE model_list.model = 'fiat'  GROUP BY countries.countryid, countries.countryname  HAVING COUNT(*) > 3;",
    "SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  WHERE car_makers.fullname = 'Fiat'  OR (SELECT COUNT(*)      FROM car_makers      WHERE car_makers.country = countries.countryid) > 3 GROUP BY countries.countryid, countries.countryname;",
    "SELECT country  FROM airlines  WHERE airline = 'JetBlue Airways';",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*)  FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*)  FROM airlines  WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT city, country FROM airports WHERE airportname = 'Alton';",
    "SELECT airports.city, airports.country  FROM airports  WHERE airports.airportname = 'Alton'",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC;",
    "SELECT name, country, age  FROM singer  ORDER BY age DESC",
    "SELECT AVG(age) AS avg_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';",
    "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France' AND is_male = 1;",
    "SELECT singer.name, singer.song_release_year  FROM singer  ORDER BY singer.age ASC  LIMIT 1;",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(singer_id) AS num_singers  FROM singer  GROUP BY country;",
    "SELECT singer.name, singer.song_name  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id  INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE singer.age > stadium.average;",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
    "SELECT AVG(capacity) AS avg_capacity, MAX(capacity) AS max_capacity FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, COUNT(*) AS num_of_concerts  FROM stadium  JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_of_concerts  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name;",
    "SELECT s.name, s.capacity  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year >= 2014  GROUP BY s.name, s.capacity  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert  ON stadium.stadium_id = concert.stadium_id  WHERE concert.year > 2013  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT year, COUNT(*) AS num_concerts  FROM concert  GROUP BY year  ORDER BY num_concerts DESC  LIMIT 1;",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT stadium.name  FROM stadium  LEFT JOIN concert  ON stadium.stadium_id = concert.stadium_id  WHERE concert.concert_name IS NULL;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT s1.country, s2.country  FROM singer s1  INNER JOIN singer s2  ON s1.country = s2.country  WHERE s1.age > 40  AND s2.age < 30;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id                         FROM concert                         WHERE year = 2014);",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_id, singer.name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts  FROM singer s  INNER JOIN singer_in_concert sc  ON s.singer_id = sc.singer_id  GROUP BY s.name;",
    "SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;",
    "SELECT singer.name  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id  WHERE concert.year = 2014;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT name, location  FROM stadium  WHERE stadium_id IN (SELECT stadium_id                       FROM concert                       WHERE year IN (2014, 2015))",
    "SELECT name, location  FROM stadium  WHERE stadium_id IN (SELECT stadium_id                       FROM concert                       WHERE year IN (2014, 2015)                       GROUP BY stadium_id                       HAVING COUNT(*) = 2);",
    "SELECT COUNT(*)  FROM concert c  JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = s.highest;",
    "SELECT COUNT(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);",
    "SELECT COUNT(*)  FROM pets_1  WHERE weight > 10;",
    "SELECT COUNT(*)  FROM pets_1 p  INNER JOIN has_pet h  ON p.petid = h.petid  WHERE p.weight > 10;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age  LIMIT 1;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT pettype, MAX(weight)  FROM pets  GROUP BY pettype;",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname FROM student s  INNER JOIN has_pet h ON s.stuid = h.stuid INNER JOIN pets p ON h.petid = p.petid WHERE p.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pettype IN ('cat','dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.stuid IN (SELECT stuid                         FROM has_pet                         INNER JOIN pets                         ON has_pet.petid = pets.petid                         WHERE pets.pettype = 'dog')",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.stuid IN (SELECT stuid                         FROM has_pet                         INNER JOIN pets ON has_pet.petid = pets.petid                         WHERE pets.pettype = 'dog')",
    "SELECT major, age  FROM student  LEFT JOIN has_pet  ON student.stuid = has_pet.stuid  LEFT JOIN pets  ON has_pet.petid = pets.petid  WHERE pettype != 'cat' OR pettype IS NULL;",
    "SELECT major, age  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets_1                      ON has_pet.petid = pets_1.petid                      WHERE pettype = 'cat')",
    "SELECT fname, age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND NOT EXISTS (     SELECT *      FROM has_pet AS hp      JOIN pets AS p ON hp.petid = p.petid      WHERE hp.stuid = student.stuid      AND p.pettype = 'cat' )",
    "SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT pettype, weight  FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) as avg_age, MAX(pet_age) as max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith';",
    "SELECT petid  FROM pets_1  INNER JOIN has_pet  ON pets_1.stuid = has_pet.stuid  INNER JOIN student  ON has_pet.stuid = student.stuid  WHERE student.lname = 'Smith';",
    "SELECT stuid, COUNT(petid) FROM has_pet INNER JOIN pets_1 ON has_pet.stuid = pets_1.stuid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS num_pets FROM pets_1 INNER JOIN has_pet ON pets_1.stuid = has_pet.stuid GROUP BY stuid;",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(petid) > 1);",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(petid) > 1)",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(*)  FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    "|  SELECT contid, continent, COUNT(countryid) AS 'Number of Countries' FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    ", origin |  SELECT contid, continent, COUNT(countryname) FROM continents JOIN countries USING (contid) GROUP BY contid;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1;",
    "SELECT model FROM model_list   INNER JOIN car_names ON model_list.modelid = car_names.modelid   INNER JOIN cars_data ON car_names.makeid = cars_data.id   WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list  JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    ", origin  SELECT fullname  FROM car_makers  JOIN model_list  ON car_makers.id = model_list.maker  JOIN car_names  ON model_list.modelid = car_names.modelid  JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE year = 1970;",
    ", origin  SELECT fullname  FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN cars_data  ON car_names.model = cars_data.id  WHERE cars_data.year = 1970;",
    ", origin  SELECT make, year FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY year ASC LIMIT 1;",
    ", origin  SELECT maker, MIN(year) AS earliest_year  FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY maker;",
    ", origin  SELECT DISTINCT model_list.model  FROM model_list  INNER JOIN car_names ON car_names.makeid = model_list.maker  INNER JOIN cars_data ON cars_data.makeid = car_names.makeid  WHERE cars_data.year > 1980;",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count  FROM continents  LEFT JOIN countries ON continents.contid = countries.continent  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) FROM continents  INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY continents.continent;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countryname, COUNT(*) AS num_makers FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY countryname ORDER BY num_makers DESC LIMIT 1;",
    "SELECT fullname, COUNT(modelid)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  GROUP BY fullname;",
    "SELECT car_makers.fullname, COUNT(model_list.modelid) AS num_model, car_makers.id  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT accelerate FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_names.make = 'amc hornet sportabout (sw)';",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.makeid = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'AMC Hornet Sportabout' AND car_names.make = 'SW';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*)  FROM car_makers  INNER JOIN countries  ON car_makers.country = countries.countryname  WHERE countries.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.id INNER JOIN countries c ON cm.country = c.countryid INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'USA';",
    ", origin  SELECT COUNT(*)  FROM car_names cn  INNER JOIN model_list ml ON cn.makeid = ml.modelid  INNER JOIN car_makers cm ON ml.maker = cm.id  INNER JOIN countries c ON cm.country = c.countryid  INNER JOIN continents con ON c.continent = con.contid  WHERE con.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.modelid;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countries.countryname, countries.countryid  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(car_makers.id) > 0;",
    "SELECT countries.countryname, countries.countryid  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT AVG(weight) FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.model  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT MAX(horsepower), make FROM cars_data INNER JOIN car_names ON cars_data.makeid = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cylinders = 3;",
    "SELECT MAX(horsepower) AS Largest_Horsepower, make FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cylinders = 3  GROUP BY make;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE model_list.model = 'Volvo';",
    "SELECT AVG(edispl) FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.make  WHERE car_makers.fullname = 'Volvo';",
    "SELECT cylinders, MAX(accelerate)  FROM cars_data GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT car_makers.maker, COUNT(cars_data.makeid) AS total_version FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.makeid GROUP BY car_makers.maker ORDER BY total_version DESC;",
    "SELECT model, COUNT(DISTINCT makeid) AS num_of_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY model ORDER BY num_of_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = 1980;",
    ", origin  SELECT COUNT(*) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid WHERE cm.fullname = 'American Motor Company';",
    ", origin  SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3);",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.model) > 3;",
    ", origin |  SELECT model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)",
    ", origin  SELECT model FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500);",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo' ORDER BY accelerate ASC LIMIT 1;",
    "SELECT cylinders  FROM cars_data  WHERE accelerate = (SELECT MIN(accelerate)                      FROM cars_data                      WHERE makeid IN (SELECT makeid                                       FROM car_names                                       WHERE model IN (SELECT model                                                       FROM model_list                                                       WHERE maker IN (SELECT id                                                                       FROM car_makers                                                                       WHERE fullname = 'Volvo'))))",
    "SELECT COUNT(*)  FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*)  FROM countries c  INNER JOIN car_makers cm ON c.countryid = cm.country  INNER JOIN car_names cn ON cm.id = cn.makeid  GROUP BY c.countryname  HAVING COUNT(DISTINCT cm.maker) > 2;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT car_makers.fullname, car_names.make FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.fullname  FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN cars_data  ON car_names.model = cars_data.id  WHERE car_makers.fullname != 'Ford Motor Company'  AND cars_data.weight < 3500;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid INNER JOIN cars_data ON cars_data.id = car_names.model WHERE car_makers.fullname != 'Ford Motor Company' AND cars_data.weight < 3500;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryname = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2  AND COUNT(DISTINCT car_makers.id) > 3;",
    ", origin  SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) >= 2 AND COUNT(cars_data.id) > 3;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN cars_data  ON car_names.model = cars_data.origin  WHERE model_list.model = 'fiat'  OR (SELECT COUNT(*)      FROM car_makers      WHERE car_makers.country = countries.countryid      GROUP BY car_makers.country      HAVING COUNT(*) > 3) > 0  GROUP BY countries.countryid;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'Fiat'  OR (SELECT COUNT(*)      FROM car_makers      WHERE countries.countryid = car_makers.country) > 3  GROUP BY countries.countryid, countries.countryname;",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT country  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation FROM airlines WHERE airlines.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation FROM airlines WHERE airlines.country = 'USA';",
    "SELECT airports.airportcode, airports.airportname  FROM airports  WHERE airports.city = 'Anthony';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*)  FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*)  FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines  WHERE country = 'USA';",
    "SELECT city, country  FROM airports  WHERE airportname = 'Alton'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton';",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT singer.name, singer.country, singer.age  FROM singer  JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age ASC",
    "SELECT s.name, s.country, s.age  FROM concert_singer s  ORDER BY s.age DESC",
    "SELECT AVG(age) AS Avg_Age, MIN(age) AS Min_Age, MAX(age) AS Max_Age FROM singer WHERE country='France';",
    "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France' AND is_male = 1;",
    "SELECT name, song_release_year  FROM singer  ORDER BY age ASC  LIMIT 1;",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert      ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS number_of_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;",
    "|  SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity) AS avg_capacity, MAX(capacity) AS max_capacity FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1;",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, COUNT(*)  FROM stadium  INNER JOIN concert  ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(*) AS number_of_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT name, capacity  FROM stadium  WHERE stadium_id IN (SELECT stadium_id                       FROM concert                       WHERE year > 2013                       GROUP BY stadium_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT year, COUNT(*) AS Number_of_Concerts FROM concert GROUP BY year ORDER BY Number_of_Concerts DESC;",
    "SELECT year, COUNT(*) as num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (     SELECT concert.stadium_id     FROM concert );",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN  (SELECT stadium_id  FROM concert);",
    "SELECT s1.country, s2.country  FROM singer s1, singer s2 WHERE s1.age > 40 AND s2.age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert  INNER JOIN singer_in_concert      ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT c.concert_name, c.theme, COUNT(s.singer_id) FROM concert c INNER JOIN singer_in_concert sc ON c.concert_id = sc.concert_id INNER JOIN singer s ON sc.singer_id = s.singer_id GROUP BY c.concert_name, c.theme;",
    "SELECT singer.name, COUNT(*) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer.name;",
    "SELECT s.name, COUNT(sic.concert_id)  FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;",
    "SELECT singer.name FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;",
    "SELECT s.name FROM singer s JOIN singer_in_concert sc ON sc.singer_id = s.singer_id JOIN concert c ON c.concert_id = sc.concert_id WHERE c.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT     stadium.name, stadium.location FROM     stadium INNER JOIN     concert ON stadium.stadium_id = concert.stadium_id WHERE     concert.year IN (2014, 2015) GROUP BY     stadium.name, stadium.location;",
    "SELECT s.name, s.location FROM stadium s JOIN concert c   ON s.stadium_id = c.stadium_id JOIN singer_in_concert sc    ON c.concert_id = sc.concert_id WHERE c.year IN (2014, 2015) GROUP BY s.name, s.location HAVING COUNT(DISTINCT c.year) = 2;",
    "SELECT COUNT(*)  FROM concert  INNER JOIN stadium  ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = ( SELECT MAX(capacity)  FROM stadium)",
    "SELECT COUNT(*)  FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE s.capacity = (SELECT MAX(capacity) FROM stadium);",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM has_pet  INNER JOIN pets_1 ON has_pet.petid = pets_1.petid WHERE weight > 10;",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "|  SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age  LIMIT 1;",
    "SELECT pettype, MAX(weight)  FROM pets  GROUP BY pettype;",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM students JOIN has_pet ON students.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE students.age > 20;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*)  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'F' AND pets.pettype = 'dog';",
    "SELECT COUNT(*) FROM student s INNER JOIN has_pet p ON s.stuid = p.stuid INNER JOIN pets t ON p.petid = t.petid WHERE s.sex = 'female' AND t.pettype = 'dog';",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype IN ('cat', 'dog');",
    "SELECT fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND pets.petid = has_pet.petid AND (pettype = 'cat' OR pettype = 'dog');",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pettype = 'dog';",
    "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  WHERE petid IN (SELECT petid                                  FROM pets                                  WHERE pettype IN ('cat','dog'))                 GROUP BY stuid                 HAVING COUNT(*) = 2);",
    "SELECT lname, fname, age, major  FROM student  WHERE stuid NOT IN      (SELECT stuid FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pettype = 'cat');",
    "SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'cat'",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      WHERE petid IN (SELECT petid                                      FROM pets                                      WHERE pettype = 'cat'))",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat');",
    "SELECT fname, age FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND NOT EXISTS (SELECT 1 FROM has_pet hp2 INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE hp2.stuid = s.stuid AND p2.pettype = 'cat')",
    "|  SELECT fname FROM student INNER JOIN has_pet ON student.stuid=has_pet.stuid INNER JOIN pets ON has_pet.petid=pets.petid WHERE pets.pettype='dog' AND has_pet.petid NOT IN (SELECT petid FROM pets WHERE pettype='cat') GROUP BY fname;",
    "SELECT pettype, weight  FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT petid, weight FROM pets WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) as avg_weight FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT petid  FROM pets_1  INNER JOIN has_pet  ON pets_1.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE lname = 'Smith';",
    "|  SELECT petid FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith';",
    "SELECT stuid, COUNT(petid) FROM has_pet JOIN pets_1 ON has_pet.petid = pets_1.petid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS num_pets FROM students JOIN has_pet USING (stuid) JOIN pets USING (petid) GROUP BY stuid;",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(petid) > 1)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(petid) > 1);",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    ", origin |  SELECT contid, continent, COUNT(countryid) AS Number_of_countries FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    "|  SELECT contid, continent, COUNT(countryname) AS 'Number of Countries' FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    "SELECT COUNT(*)  FROM countries;",
    "SELECT COUNT(*)  FROM countries;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS models_produced FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT MIN(horsepower) FROM cars_data c JOIN car_names n ON c.makeid = n.makeid JOIN model_list m ON n.model = m.model JOIN car_makers cm ON m.maker = cm.id GROUP BY cm.fullname;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight <  (SELECT AVG(weight) FROM cars_data)",
    ", origin |  SELECT car_makers.fullname  FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.model  WHERE cars_data.year = 1970;",
    "SELECT distinct fullname  FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.make WHERE cars_data.year = 1970;",
    ", origin , name |  SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY year ASC LIMIT 1;",
    "SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.maker",
    "SELECT DISTINCT car_names.make  FROM car_names  INNER JOIN model_list  ON car_names.model = model_list.modelid  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE year > 1980;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY continents.continent;",
    "SELECT continents.continent, COUNT(car_makers.id) AS car_makers_count  FROM continents  INNER JOIN countries ON continents.contid = countries.continent  INNER JOIN car_makers ON car_makers.country = countries.countryid  INNER JOIN model_list ON model_list.maker = car_makers.id  INNER JOIN car_names ON car_names.makeid = model_list.modelid  INNER JOIN cars_data ON cars_data.id = car_names.makeid  GROUP BY continents.continent",
    "SELECT countryname  FROM countries  JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1;",
    "SELECT countries.countryname FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname ORDER BY COUNT(cars_data.id) DESC LIMIT 1;",
    "SELECT maker, fullname, COUNT(model) FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker  GROUP BY maker, fullname;",
    ", origin  SELECT cm.id, cm.maker, cm.fullname, COUNT(ml.modelid) as num_models FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.maker, cm.fullname;",
    "SELECT accelerate  FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_names.make = 'amc hornet sportabout' AND cars_data.year = 'sw';",
    "SELECT accelerate FROM cars_data INNER JOIN car_names ON cars_data.makeid = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE car_names.make = 'AMC Hornet Sportabout (sw)'",
    "SELECT COUNT(DISTINCT maker)  FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryname WHERE c.continent = 'France';",
    "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryname JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France'",
    "SELECT COUNT(*)  FROM model_list ml  INNER JOIN car_names cn ON ml.modelid = cn.modelid INNER JOIN car_makers cm ON cn.makeid = cm.id INNER JOIN countries c ON cm.country = c.countryname INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'USA'",
    "SELECT COUNT(*) FROM car_names cn INNER JOIN car_makers cm ON cn.makeid = cm.id INNER JOIN countries c ON cm.country = c.countryid INNER JOIN continents cc ON c.continent = cc.contid WHERE cc.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg) FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight) FROM car_names INNER JOIN model_list ON car_names.makeid = model_list.modelid INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid;",
    "SELECT countries.countryname, countries.countryid FROM countries  JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(*) > 0;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*)  FROM car_makers cm  INNER JOIN model_list ml  ON cm.id = ml.maker  INNER JOIN car_names cn  ON ml.modelid = cn.model  INNER JOIN cars_data cd  ON cn.makeid = cd.id  WHERE cd.horsepower > 150;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT AVG(weight) FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  WHERE countries.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(DISTINCT car_names.makeid) >= 3;",
    "SELECT countries.countryname  FROM continents  INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country  WHERE continents.continent = 'Europe' GROUP BY countries.countryname  HAVING COUNT(car_makers.id) > 3;",
    "SELECT MAX(horsepower), make FROM car_names  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE cylinders = 3 GROUP BY make;",
    "SELECT MAX(horsepower) AS largest_horsepower, make FROM car_names cn INNER JOIN model_list ml ON cn.makeid = ml.modelid INNER JOIN car_makers cm ON ml.maker = cm.id INNER JOIN cars_data cd ON cn.makeid = cd.id WHERE cylinders = 3 GROUP BY make;",
    ", origin |  SELECT MAX(mpg) FROM cars_data;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM cars_data c  INNER JOIN model_list m  ON c.makeid = m.modelid  INNER JOIN car_makers cm  ON m.maker = cm.id  INNER JOIN car_names cn  ON c.makeid = cn.makeid  WHERE cn.model = \"volvo\";",
    "SELECT AVG(edispl)  FROM car_names JOIN model_list ON car_names.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'Volvo';",
    "SELECT cylinders, MAX(accelerate)  FROM cars_data  GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT car_makers.fullname, model_list.model, COUNT(DISTINCT cars_data.makeid) AS version_count  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN cars_data ON model_list.modelid = cars_data.model  GROUP BY car_makers.fullname, model_list.model  ORDER BY version_count DESC;",
    "SELECT model, COUNT(DISTINCT makeid) AS Versions FROM car_names GROUP BY model ORDER BY Versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    ", origin  SELECT COUNT(*)  FROM cars_data  WHERE year = 1980;",
    "SELECT COUNT(DISTINCT model_list.model)  FROM model_list  INNER JOIN car_makers  ON car_makers.id = model_list.maker  WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT COUNT(model_list.modelid)  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE car_makers.fullname = 'American Motor Company'",
    ", origin   SELECT fullname, id FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model GROUP BY fullname, id HAVING COUNT(model_list.model) > 3;",
    "SELECT car_makers.fullname, car_makers.id  FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.fullname, car_makers.id  HAVING COUNT(model_list.modelid) > 3;",
    "|  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN cars_data  ON model_list.modelid = cars_data.makeid  WHERE car_makers.fullname IN ('General Motors')  AND cars_data.weight > 3500;",
    "SELECT model FROM model_list  WHERE maker IN ('General Motors', 'weight')  AND weight > 3500;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower  FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT cylinders  FROM cars_data  WHERE makeid IN (SELECT makeid FROM car_names WHERE model = 'volvo')  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT cylinders  FROM cars_data  WHERE accelerate = (SELECT MIN(accelerate)                     FROM cars_data                     WHERE makeid IN (SELECT makeid                                      FROM car_names                                      WHERE model = 'volvo'))",
    "SELECT COUNT(*) FROM car_names cn INNER JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.accelerate > (SELECT MAX(accelerate)                        FROM car_names cn2                        INNER JOIN cars_data cd2 ON cn2.makeid = cd2.id)",
    "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*)  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) > 2;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT model, MAX(horsepower)  FROM cars_data INNER JOIN model_list ON model_list.modelid = cars_data.model WHERE cylinders = 4 GROUP BY model;",
    "|  SELECT car_names.makeid, car_names.make  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 3;",
    "SELECT car_makers.id, car_makers.fullname  FROM car_makers  INNER JOIN car_names ON car_names.makeid = car_makers.id INNER JOIN cars_data ON cars_data.makeid = car_names.makeid WHERE cars_data.cylinders < 4 AND cars_data.horsepower < cars_data.edispl;",
    "SELECT MAX(mpg)  FROM cars_data WHERE cylinders = 8 OR year < 1980;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    ", origin  SELECT model  FROM model_list  WHERE maker NOT IN (SELECT fullname                      FROM car_makers                      WHERE fullname = 'Ford Motor Company')  AND model IN (SELECT model                FROM car_names                WHERE weight < 3500);",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE countries.continent != 'Ford Motor Company'  AND weight < 3500;",
    ", origin  SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    ", origin |   SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid=car_makers.country  WHERE car_makers.id IS NULL;",
    ", origin |  SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 2) AND car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT maker) > 3);",
    "SELECT id, maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY id, maker HAVING COUNT(modelid) >= 2 AND COUNT(makeid) > 3;",
    "SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryname INNER JOIN model_list ON model_list.maker = car_makers.fullname INNER JOIN car_names ON car_names.makeid = model_list.modelid WHERE car_names.model = 'fiat' OR (     SELECT COUNT(DISTINCT car_makers.maker)     FROM car_makers     WHERE car_makers.country = countries.countryname     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.maker) > 3 ) > 0 GROUP BY countries.countryid, countries.countryname",
    "SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid, countries.countryname HAVING COUNT(car_makers.id) > 3 OR car_makers.maker = 'fiat'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation FROM airlines INNER JOIN airports ON airports.countryabbrev = airlines.country  WHERE airports.countryabbrev = 'USA'",
    "SELECT airports.airportcode, airports.airportname  FROM airports  WHERE airports.city = 'Anthony'",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT a.city, a.country  FROM airports a INNER JOIN flights f ON a.airportcode = f.destairport WHERE f.airline = 'Alton'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton';",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO';",
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) AS Total_Number_of_Singers FROM Singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC;",
    "SELECT singer.name, singer.country, singer.age FROM singer INNER JOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id ORDER BY singer.age DESC;",
    "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'France';",
    "SELECT AVG(age) as avg_age, MIN(age) as min_age, MAX(age) as max_age FROM singer WHERE country = 'France';",
    "SELECT name, song_release_year  FROM singer  ORDER BY age ASC  LIMIT 1;",
    "SELECT song_name, song_release_year  FROM singer  ORDER BY age  LIMIT 1;",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(*) AS [Number of Singers]  FROM singer  GROUP BY country;",
    "SELECT country, COUNT(singer_id) AS num_singers  FROM singer  GROUP BY country;",
    "SELECT singer.name, singer.song_name  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id  INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE singer.age > stadium.average;",
    "SELECT song_name  FROM singer  WHERE age > average;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS maximum_capacity FROM stadium;",
    "SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1;",
    "SELECT  name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT s.name, COUNT(c.concert_id) AS total_concerts FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id GROUP BY s.name;",
    "SELECT      stadium.name,      stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT     name, capacity FROM     stadium WHERE     highest = (SELECT MAX(highest) FROM stadium)     AND year > 2013",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS 'number_of_concerts' FROM concert GROUP BY year ORDER BY number_of_concerts DESC LIMIT 1;",
    "SELECT name  FROM stadium  LEFT JOIN concert  ON stadium.stadium_id = concert.stadium_id  WHERE concert.stadium_id IS NULL;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (     SELECT DISTINCT stadium_id     FROM concert );",
    "SELECT DISTINCT s1.country, s2.country  FROM singer s1  JOIN singer_in_concert sic1  ON s1.singer_id = sic1.singer_id  JOIN singer s2  ON s2.singer_id = sic1.singer_id  WHERE s1.age > 40  AND s2.age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                           FROM concert                           WHERE year = 2014)",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id)  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme;",
    "SELECT s.name, c.theme, COUNT(*)  FROM singer_in_concert sc  JOIN singer s ON sc.singer_id = s.singer_id  JOIN concert c ON sc.concert_id = c.concert_id  GROUP BY s.name, c.theme;",
    "SELECT singer.name, COUNT(*) AS 'number of concerts' FROM singer_in_concert INNER JOIN singer ON singer_in_concert.singer_id=singer.singer_id GROUP BY singer.name;",
    "SELECT s.name, COUNT(sic.concert_id) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014;",
    "SELECT s.name  FROM singer s  INNER JOIN singer_in_concert sc  ON s.singer_id = sc.singer_id  INNER JOIN concert c  ON sc.concert_id = c.concert_id  WHERE c.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id WHERE singer.song_name LIKE '%Hey%'",
    "SELECT name, country  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE song_name LIKE '%Hey%';",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c ON c.stadium_id = s.stadium_id  WHERE c.year IN (2014, 2015) GROUP BY s.name, s.location;",
    "|  SELECT name, location  FROM stadium  WHERE EXISTS (SELECT *   FROM concert   WHERE stadium_id = stadium.stadium_id AND year = 2014)  AND EXISTS (SELECT *   FROM concert   WHERE stadium_id = stadium.stadium_id AND year = 2015);",
    "SELECT COUNT(*) FROM concert INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);",
    "SELECT COUNT(*) FROM concert c JOIN stadium s ON c.stadium_id = s.stadium_id ORDER BY s.capacity DESC LIMIT 1;",
    "SELECT COUNT(*)  FROM pets  WHERE weight > 10;",
    "SELECT COUNT(*) FROM has_pet JOIN pets  ON has_pet.petid = pets.petid WHERE pets.weight > 10;",
    "|  SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age)                  FROM pets);",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype;",
    "|  SELECT pettype, MAX(weight) FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*)  FROM pets_1 p INNER JOIN has_pet h ON p.petid = h.petid INNER JOIN student s ON s.stuid = h.stuid WHERE s.age > 20;",
    "SELECT COUNT(*) FROM student S JOIN has_pet H ON S.stuid = H.stuid JOIN pets P ON H.petid = P.petid WHERE S.sex = 'F' AND P.pettype = 'dog';",
    "SELECT COUNT(*)  FROM student  JOIN has_pet  ON student.stuid = has_pet.stuid JOIN pets  ON has_pet.petid = pets.petid  WHERE sex = 'female'  AND pettype = 'dog'",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT pettype FROM pets GROUP BY pettype;",
    "SELECT fname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND (p.pettype = 'cat' OR p.pettype = 'dog')",
    "SELECT fname  FROM student  JOIN has_pet  ON student.stuid = has_pet.stuid  JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  JOIN has_pet ON has_pet.stuid = student.stuid  JOIN pet ON has_pet.petid = pet.petid  WHERE pet.pettype = 'cat'  AND pet.pettype = 'dog'",
    "SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog';",
    ", color  SELECT lname, fname, age, major  FROM student  WHERE stuid NOT IN (SELECT stuid                       FROM has_pet                      LEFT JOIN pets ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT stuid , lname , fname , age , major  FROM student  WHERE NOT EXISTS  (SELECT *  FROM has_pet NATURAL JOIN pets  WHERE pettype = 'cat' AND student.stuid = has_pet.stuid);",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid                     FROM has_pet                     INNER JOIN pets                     ON has_pet.petid = pets.petid                     WHERE pettype = 'cat')",
    ", vet |  SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (     SELECT student.stuid     FROM student JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' )",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (     SELECT student.stuid     FROM student     INNER JOIN has_pet     ON student.stuid = has_pet.stuid     INNER JOIN pets     ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' );",
    "SELECT pettype , weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets_1 INNER JOIN has_pet ON pets_1.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "|  SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT AVG(pets.pet_age) AS avgage, MAX(pets.pet_age) AS maxage, pets.pettype  FROM pets  INNER JOIN has_pet  ON pets.petid = has_pet.petid  INNER JOIN student  ON has_pet.stuid = student.stuid  GROUP BY pets.pettype;",
    "SELECT pettype, AVG(pet_age) as avg_age, MAX(pet_age) as max_age FROM pets GROUP BY pettype;",
    "|  SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "|  SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "|  SELECT fname, age  FROM student  JOIN has_pet      ON student.stuid = has_pet.stuid  JOIN pets      ON has_pet.petid = pets.petid;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid",
    "SELECT pets.petid  FROM students, has_pet, pets WHERE students.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND students.lname = 'Smith';",
    "|  SELECT petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';",
    "SELECT stuid, COUNT(pets.petid) AS pet_count FROM has_pet INNER JOIN pets ON pets.petid = has_pet.petid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS num_pets FROM has_pet INNER JOIN students ON students.stuid = has_pet.stuid GROUP BY stuid;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1)",
    "|  SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid \t\t\t\t HAVING COUNT(*) > 1)",
    "SELECT lname  FROM student INNER JOIN has_pet ON has_pet.stuid = student.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student  JOIN has_pet  ON student.stuid = has_pet.stuid  JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(continent) FROM continents",
    "SELECT COUNT(DISTINCT continent) FROM continents;",
    "|  SELECT contid, continent, COUNT(countryname) FROM countries GROUP BY contid, continent;",
    ", origin  SELECT contid, continent, COUNT(countryid) FROM continents LEFT JOIN countries  ON continents.contid = countries.continent GROUP BY contid, continent;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(countryname) FROM countries;",
    "|  SELECT car_makers.fullname , car_makers.id , COUNT(model_list.modelid) as 'number of models'  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.fullname , car_makers.id;",
    ", origin  SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS Models_produced  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON car_names.makeid = model_list.modelid  GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT MIN(horsepower) FROM cars_data INNER JOIN car_names ON car_names.makeid = cars_data.id INNER JOIN model_list ON model_list.modelid = car_names.model;",
    "SELECT model FROM model_list JOIN car_names ON model_list.maker = car_names.makeid JOIN cars_data ON car_names.model = cars_data.modelid ORDER BY horsepower ASC LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list INNER JOIN car_names  ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON cars_data.makeid = car_names.makeid GROUP BY model HAVING AVG(weight) > weight",
    ", origin  SELECT fullname FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.modelid WHERE model_list.maker = car_makers.id AND cars_data.year = 1970 GROUP BY fullname;",
    "SELECT DISTINCT fullname FROM car_makers cm INNER JOIN model_list ml ON cm.id=ml.maker INNER JOIN car_names cn ON cn.makeid=ml.modelid INNER JOIN cars_data cd ON cd.makeid=cn.makeid WHERE cd.year = 1970;",
    ", origin  SELECT make, MIN(year) FROM car_names  INNER JOIN cars_data  ON car_names.makeid = cars_data.id GROUP BY make;",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN countries ON car_makers.country=countries.countryid JOIN model_list ON car_makers.id=model_list.maker JOIN car_names ON model_list.modelid=car_names.model JOIN cars_data ON car_names.makeid=cars_data.id GROUP BY car_makers.maker;",
    ", origin  SELECT DISTINCT model FROM model_list  JOIN car_makers ON car_makers.id = model_list.maker  JOIN cars_data ON cars_data.makeid = car_names.id  WHERE year > 1980",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.model  INNER JOIN cars_data ON cars_data.makeid = car_names.makeid WHERE cars_data.year > 1980;",
    ", origin |  SELECT continents.continent, COUNT(car_makers.maker) AS 'Number of Car Makers' FROM car_makers JOIN countries ON car_makers.country = countries.countryname JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent;",
    "SELECT cont.continent, COUNT(DISTINCT car_makers.maker) FROM car_1.continents AS cont INNER JOIN car_1.countries AS country \tON cont.contid = country.continent INNER JOIN car_1.car_makers AS car_makers \tON car_makers.country = country.countryname INNER JOIN car_1.model_list AS models \tON car_makers.id = models.maker INNER JOIN car_1.car_names AS car \tON models.modelid = car.model INNER JOIN car_1.cars_data AS data \tON car.makeid = data.id GROUP BY cont.continent",
    "SELECT countries.countryname  FROM countries INNER JOIN car_makers  ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC  LIMIT 1",
    ", origin  SELECT countries.countryname FROM continents INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.make GROUP BY countries.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT fullname, COUNT(*) AS 'count'  FROM car_makers cm  INNER JOIN model_list ml ON cm.id = ml.maker GROUP BY fullname;",
    "SELECT maker, COUNT(model) AS num_models, id, fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY maker, id, fullname;",
    "SELECT accelerate FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id WHERE make = 'AMC Hornet Sportabout (sw)'",
    "SELECT accelerate FROM car_names cn JOIN model_list ml ON cn.makeid = ml.modelid JOIN car_makers cm ON ml.maker = cm.fullname JOIN countries c ON cm.country = c.countryname JOIN continents ct ON c.continent = ct.contid JOIN cars_data cd ON cn.model = cd.make WHERE cn.make = 'amc hornet sportabout' AND cd.year = 'sw' ;",
    "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryname JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'france';",
    "SELECT COUNT(maker) FROM car_makers  INNER JOIN countries  ON car_makers.country = countries.countryname  WHERE countries.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON car_names.makeid = model_list.model  INNER JOIN cars_data ON cars_data.id = car_names.model  INNER JOIN countries ON car_makers.country = countries.countryname  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'USA';",
    ", origin  SELECT COUNT(DISTINCT model) FROM model_list INNER JOIN car_names ON model_list.maker = car_names.makeid INNER JOIN car_makers ON car_names.makeid = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg)  FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT maker, model  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countries.countryname, countries.countryid  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(car_makers.id) > 0;",
    "_manufacture  SELECT countries.countryname, countries.countryid  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(*) > 0;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*)  FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.horsepower > 150;",
    "SELECT AVG(weight)  FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
    "SELECT countryname  FROM continents c  JOIN countries co  ON c.contid = co.continent  JOIN car_makers cm  ON cm.country = co.countryid  WHERE c.continent = 'Europe'  GROUP BY co.countryname  HAVING COUNT(cm.id) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT MAX(horsepower), make FROM cars_data JOIN car_names ON cars_data.makeid = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cylinders = 3 GROUP BY make;",
    "SELECT horsepower, make  FROM cars_data  INNER JOIN car_names  ON cars_data.makeid = car_names.makeid  WHERE cylinders = 3  ORDER BY horsepower DESC  LIMIT 1;",
    "SELECT model_list.model, MAX(cars_data.mpg) FROM cars_data  INNER JOIN model_list ON cars_data.makeid = model_list.makeid GROUP BY model_list.model",
    "SELECT     model_list.model FROM     model_list INNER JOIN     cars_data ON     model_list.modelid = cars_data.id WHERE     cars_data.mpg = (SELECT MAX(mpg) FROM cars_data)",
    ", origin  SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM cars_data  INNER JOIN model_list ON cars_data.model = model_list.modelid INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON car_makers.id = car_names.makeid WHERE car_names.make = 'volvo'",
    "SELECT AVG(edispl)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryname  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'Volvo';",
    "SELECT MAX(accelerate) FROM cars_data WHERE cylinders IN (SELECT cylinders FROM cars_data GROUP BY cylinders)",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT model_list.model, COUNT(car_names.makeid) AS 'Total Version' FROM car_names LEFT JOIN model_list ON car_names.model = model_list.modelid GROUP BY model_list.model ORDER BY COUNT(car_names.makeid) DESC;",
    ", origin  SELECT model, COUNT(DISTINCT makeid) FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY model ORDER BY COUNT(DISTINCT makeid) DESC LIMIT 1;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    ", origin , make   SELECT COUNT(*) FROM car_makers cm  JOIN model_list ml ON cm.id = ml.maker  JOIN car_names cn ON cn.makeid = ml.model  JOIN cars_data cd ON cd.make = cn.make  WHERE cd.year=1980;",
    "SELECT COUNT(*) FROM car_names INNER JOIN car_data on car_data.makeid = car_names.makeid WHERE year = 1980;",
    "SELECT COUNT(model_list.modelid)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT COUNT(DISTINCT car_names.model) FROM car_names  JOIN model_list ON car_names.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT cars_data.makeid, car_makers.fullname, car_makers.id  FROM cars_data  INNER JOIN model_list ON cars_data.makeid = model_list.makeid  INNER JOIN car_makers ON model_list.maker = car_makers.id  GROUP BY cars_data.makeid  HAVING COUNT(model_list.model) > 3;",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers  INNER JOIN model_list  ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname  HAVING COUNT(model_list.model) > 3;",
    "SELECT model_list.model  FROM model_list    INNER JOIN car_makers    ON model_list.maker = car_makers.id    INNER JOIN car_names    ON model_list.modelid = car_names.modelid    INNER JOIN cars_data    ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'General Motors'    AND cars_data.weight > 3500;",
    "|  SELECT DISTINCT model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.model = cars_data.make WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;",
    "SELECT year  FROM cars_data  WHERE weight >=3000 AND weight <=4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight<4000  OR weight>3000;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1;",
    "SELECT cylinders  FROM cars_data  WHERE makeid = (SELECT makeid                  FROM car_names                  WHERE model = 'volvo')  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT cylinders  FROM cars_data INNER JOIN car_names ON car_names.makeid = cars_data.id  INNER JOIN model_list ON model_list.modelid = car_names.model INNER JOIN car_makers ON car_makers.id = model_list.maker  INNER JOIN countries ON countries.countryid = car_makers.country WHERE car_makers.fullname = 'Volvo' ORDER BY accelerate ASC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*)  FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*)  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country  INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON cn.makeid = ml.model INNER JOIN cars_data cd ON cd.id = cn.makeid GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*) AS 'Number of Cars with Over 6 Cylinders' FROM cars_data  WHERE cylinders > 6;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT model FROM model_list ml JOIN cars_data cd ON cd.makeid = ml.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    ", origin |  SELECT car_makers.fullname, car_names.make FROM car_data JOIN car_names ON car_data.makeid = car_names.makeid JOIN car_makers ON car_names.maker = car_makers.id WHERE car_data.cylinders <= 3 AND car_data.horsepower > (SELECT MIN(horsepower) FROM car_data)",
    "SELECT DISTINCT car_makers.id , car_makers.fullname  FROM car_makers  INNER JOIN car_names  ON car_names.makeid = car_makers.id  INNER JOIN cars_data  ON cars_data.id = car_names.model  WHERE cars_data.horsepower < (SELECT MIN(cars_data.horsepower) FROM cars_data)  AND cars_data.cylinders < 4;",
    "|  SELECT MAX(mpg) FROM car_data WHERE cylinders = 8 AND year < 1980;",
    "SELECT MAX(cars_data.mpg)  FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cars_data.cylinders = 8 OR cars_data.year <= 1980",
    ", origin  SELECT model  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE weight < 3500 AND fullname != 'Ford Motor Company';",
    ", origin   SELECT model  FROM model_list  JOIN car_names  ON model_list.modelid = car_names.modelid JOIN cars_data  ON car_names.makeid = cars_data.makeid WHERE cars_data.weight < 3500  AND model_list.maker NOT IN (SELECT maker FROM car_makers WHERE car_makers.fullname = 'Ford Motor Company')",
    ", origin   SELECT countries.countryname FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL;",
    ", origin  SELECT countryname  FROM countries LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.maker IS NULL;",
    "|  SELECT cm.id, cm.maker  FROM car_makers cm  INNER JOIN model_list ml ON (cm.id = ml.maker)  INNER JOIN car_names cn ON (ml.model = cn.model) INNER JOIN cars_data cd ON (cn.makeid = cd.id)  GROUP BY cm.id, cm.maker  HAVING COUNT(*) > 1  AND COUNT(DISTINCT cm.id) > 3;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(cars_data.id) > 3 AND COUNT(DISTINCT model_list.modelid) > 2",
    ", origin , name |  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid INNER JOIN cars_data ON cars_data.name = car_names.makeid WHERE (car_makers.fullname like \"%Fiat%\" OR (SELECT COUNT(*) FROM car_makers                                              WHERE countries.countryid = car_makers.country) > 3) GROUP BY countries.countryid, countries.countryname",
    "|  SELECT countries.countryid, countries.countryname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN model_list ON car_makers.fullname = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'Fiat' GROUP BY countries.countryid, countries.countryname HAVING COUNT(*) > 3;",
    "SELECT country  FROM airlines WHERE airline = 'JetBlue Airways'",
    "|  SELECT country FROM airlines WHERE airline = 'Jetblue Airways';",
    "|  SELECT abbreviation  FROM airlines  WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation FROM airlines  INNER JOIN airports  ON airlines.countryabbrev = airports.countryabbrev WHERE airports.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "|  SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony'",
    "SELECT airportcode , airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*)  FROM airlines;",
    "SELECT COUNT(*)  FROM airlines;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*)  FROM flights;",
    "SELECT airline  FROM airlines WHERE abbreviation = 'UAL';",
    "|  SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*)  FROM airlines  WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT airports.city, airports.country FROM airports  WHERE airports.airportname = 'Alton Airport'",
    "SELECT airports.city, airports.country FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport INNER JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'ALTON'",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT COUNT(singer_id)  FROM singer;",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT singer.name, singer.country, singer.age  FROM singer  ORDER BY singer.age DESC",
    "SELECT singer.name, singer.country, singer.age  FROM concert_singer  JOIN singer  ON concert_singer.singer_id = singer.singer_id ORDER BY singer.age DESC;",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';",
    "SELECT AVG(age) AS avg_age, MAX(age) AS max_age, MIN(age) AS min_age  FROM singer  WHERE country = 'France';",
    "SELECT singer.name, singer.song_release_year FROM singer INNER JOIN singer_in_concert ON singer.singer_id=singer_in_concert.singer_id ORDER BY singer.age ASC LIMIT 1;",
    "SELECT singer.name,song_release_year  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country FROM singer WHERE age > 20;",
    "SELECT country, COUNT(singer_id) FROM singer GROUP BY country",
    "SELECT country, COUNT(*)  FROM singer  GROUP BY country;",
    "SELECT singer.song_name FROM singer JOIN singer_in_concert ON singer_in_concert.singer_id = singer.singer_id JOIN stadium ON stadium.stadium_id = singer_in_concert.stadium_id WHERE singer.age > stadium.average;",
    "SELECT song_name  FROM singer WHERE age > average;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 and 10000;",
    "|  SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity) as avg_capacity, MAX(capacity) as max_capacity FROM stadium;",
    "SELECT name, capacity  FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "database_schema:   SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE (year = 2014 OR year = 2015);",
    "SELECT name, COUNT(*) AS 'number_of_concerts' FROM stadium  JOIN concert USING (stadium_id) GROUP BY stadium_id;",
    ", performance_duration  SELECT stadium.name, COUNT(*)  FROM stadium  INNER JOIN concert ON stadium.stadium_id=concert.stadium_id  GROUP BY stadium.name;",
    "SELECT s.name, s.capacity FROM stadium AS s INNER JOIN concert AS c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.name, s.capacity ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT   stadium.name, stadium.capacity FROM   stadium INNER JOIN   concert ON   stadium.stadium_id = concert.stadium_id WHERE   concert.year > 2013 ORDER BY   stadium.highest DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1;",
    "SELECT year, COUNT(year) AS 'Number of Concerts'  FROM concert  GROUP BY year  ORDER BY COUNT(year) DESC  LIMIT 1;",
    "SELECT name FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_name IS NULL;",
    "SELECT  name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT concert_singer.country  FROM concert_singer  JOIN singer  ON singer.singer_id = concert_singer.singer_id  WHERE singer.age > 40  AND singer.age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (     SELECT stadium_id       FROM concert      WHERE year = 2014)",
    "SELECT stadium.name FROM stadium WHERE (stadium_id, year)  NOT IN  (SELECT stadium_id, year FROM concert) OR year != 2014;",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) FROM concert JOIN singer_in_concert on concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.concert_id) FROM singer INNER JOIN singer_in_concert      ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert     ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s  INNER JOIN singer_in_concert sc   ON s.singer_id = sc.singer_id  GROUP BY s.name;",
    "SELECT singer.name, COUNT(DISTINCT concert.concert_id) AS number_of_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id LEFT JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;",
    "SELECT singer.name FROM singer INNER JOIN singer_in_concert     ON singer.singer_id  = singer_in_concert.singer_id  INNER JOIN concert     ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;",
    "SELECT s.name  FROM singer s  JOIN singer_in_concert sc  ON s.singer_id = sc.singer_id  JOIN concert c ON c.concert_id = sc.concert_id  WHERE year = 2014;",
    "SELECT singer.name, singer.country FROM singer   INNER JOIN singer_in_concert   ON singer.singer_id = singer_in_concert.singer_id   INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM concert_singer, singer WHERE concert_singer.singer_id = singer.singer_id AND singer.song_name LIKE '%Hey%';",
    "SELECT s.name, s.location  FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN (2014, 2015) GROUP BY s.name, s.location HAVING COUNT(DISTINCT c.year) = 2;",
    "SELECT s.name, s.location FROM stadium AS s   JOIN concert AS c    ON s.stadium_id = c.stadium_id    JOIN singer_in_concert AS sc     ON c.concert_id = sc.concert_id Where c.year IN (2014,2015) GROUP BY s.name, s.location",
    "SELECT COUNT(*) FROM concert c INNER JOIN stadium s ON c.stadium_id = s.stadium_id WHERE s.capacity = s.highest;",
    "SELECT COUNT(*) FROM concert c INNER JOIN stadium s ON c.stadium_id = s.stadium_id ORDER BY capacity DESC LIMIT 1;",
    "SELECT COUNT(*)  FROM has_pet hp INNER JOIN pets_1 p ON p.petid = hp.petid WHERE p.weight > 10",
    "SELECT COUNT(*)  FROM pets_1 WHERE weight > 10;",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age ASC LIMIT 1;",
    "|  SELECT pettype, MAX(weight) FROM has_pet INNER JOIN pets_1 \tON has_pet.petid = pets_1.petid GROUP BY pettype;",
    "SELECT pettype, MAX(weight), pet_age FROM pets_1  GROUP BY pettype;",
    "SELECT COUNT(DISTINCT pets_1.petid)  FROM pets_1      INNER JOIN has_pet      ON pets_1.petid = has_pet.petid     INNER JOIN student      ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "|  SELECT COUNT(petid) FROM student JOIN has_pet   ON student.stuid = has_pet.stuid JOIN pets   ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(pets_1.petid) FROM pets_1 INNER JOIN has_pet ON pets_1.petid = has_pet.petid INNER JOIN student ON has_pet.stuid = student.stuid WHERE pets_1.pettype = 'dog' AND student.sex = 'F';",
    "SELECT COUNT(*)  FROM pets_1 INNER JOIN has_pet ON pets_1.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND pets_1.sex = 'female';",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "|  SELECT COUNT(DISTINCT pettype)  FROM pets;",
    "SELECT fname  FROM student  JOIN has_pet  ON student.stuid=has_pet.stuid  JOIN pets  ON has_pet.petid=pets.petid WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype in ('cat', 'dog') GROUP BY student.stuid HAVING COUNT(DISTINCT pets.pettype) = 2;",
    ", petname    SELECT fname  FROM student  WHERE stuid IN      (SELECT stuid      FROM has_pet      WHERE petid IN          (SELECT petid          FROM pets          WHERE pettype IN (\"cat\",\"dog\"))      GROUP BY stuid      HAVING COUNT(*) = 2);",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat');",
    "SELECT DISTINCT student.major, student.age FROM student  LEFT JOIN has_pet ON student.stuid=has_pet.stuid LEFT JOIN pets ON pets.petid=has-pet.petid WHERE has_pet.stuid IS NULL AND pets.pettype != 'cat'",
    "SELECT stuid  FROM student  WHERE stuid NOT IN  (SELECT stuid  FROM has_pet  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pettype = 'cat')",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat')",
    "SELECT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND NOT EXISTS (SELECT * FROM has_pet WHERE stuid = student.stuid INTERSECT SELECT * FROM pets WHERE pettype = 'cat');",
    "|  SELECT fname FROM student s JOIN has_pet hp ON (s.stuid = hp.stuid) JOIN pets p ON (hp.petid = p.petid) WHERE p.pettype = 'dog' AND s.stuid NOT IN (SELECT s2.stuid         FROM student s2         JOIN has_pet hp2 ON (s2.stuid = hp2.stuid)         JOIN pets p2 ON (hp2.petid = p2.petid)         WHERE p2.pettype = 'cat') ORDER BY fname;",
    "|  SELECT pettype, weight  FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pet_age = (SELECT MIN(pet_age)                     FROM pets);",
    "|  SELECT petid, weight FROM pets WHERE pet_age > 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM students)) GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) AS avg_pet_age, MAX(pet_age) AS max_pet_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight)  FROM pets  GROUP BY pettype;",
    "SELECT fname, age FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid;",
    "SELECT fname,age  FROM student  JOIN has_pet   ON student.stuid = has_pet.stuid JOIN pets  ON has_pet.petid = pets.petid",
    "SELECT petid FROM pets_1 INNER JOIN has_pet ON pets_1.petid = has_pet.petid INNER JOIN student ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith';",
    "SELECT petid  FROM pets_1 AS p1  INNER JOIN has_pet AS hp ON p1.stuid = hp.stuid INNER JOIN student AS s ON s.stuid = hp.stuid WHERE s.lname = 'Smith'",
    "SELECT stuid , COUNT(petid) AS pets_number  FROM has_pet  JOIN student USING (stuid)  JOIN pets USING (petid)  GROUP BY stuid;",
    "SELECT stuid, COUNT(*) FROM pets_1  INNER JOIN has_pet ON pets_1.stuid = has_pet.stuid  GROUP BY stuid",
    "SELECT fname, sex  FROM student  JOIN has_pet  ON student.stuid = has_pet.stuid  JOIN pets  ON has_pet.petid = pets.petid  GROUP BY student.stuid  HAVING COUNT(*) > 1;",
    "|  SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                   FROM has_pet                   GROUP BY stuid                   HAVING COUNT(*) > 1)",
    "SELECT lname  FROM student INNER JOIN has_pet ON has_pet.stuid = student.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3;",
    "SELECT lname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN( SELECT stuid  FROM has_pet);",
    "SELECT AVG(age) FROM students  WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    ", origin  SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(continent)  FROM continents;",
    "SELECT c.continent, COUNT(DISTINCT cn.countryName) as Num_countries FROM continents c  LEFT JOIN countries cn ON c.contId = cn.continent GROUP BY c.contId, c.continent;",
    "SELECT contid, continent, COUNT(countryname) AS countries_number  FROM continents  NATURAL JOIN countries GROUP BY contid, continent",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*)  FROM countries;",
    "database schema:  SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS 'Number of Models' FROM car_makers JOIN model_list ON model_list.maker= car_makers.id  GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.id, car_makers.fullname, car_makers.country, COUNT(model_list.modelid) AS model_count FROM car_makers LEFT JOIN countries ON car_makers.country = countries.countryid LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id;",
    ", origin   SELECT MIN(horsepower) FROM cars_data   JOIN model_list ON cars_data.makeid = model_list.modelid  JOIN car_names ON model_list.maker = car_names.makeid;",
    "SELECT model  FROM model_list  JOIN car_names  ON model_list.modelid = car_names.modelid  JOIN cars_data  ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC  LIMIT 1;",
    "select model from model_list inner join car_names on model_list.modelid = car_names.modelid where weight < (select avg(weight) from cars_data)",
    "SELECT models.model  FROM car_makers, model_list, cars_data WHERE cars_data.weight < AVG(cars_data.weight)  AND car_makers.id = model_list.maker  AND model_list.modelid = cars_data.makeid;",
    "|  SELECT fullname FROM car_makers CR JOIN car_names CN ON CR.id = CN.makeid JOIN model_list ML ON ML.maker = CN.maker JOIN cars_data CD ON CD.makeid = CN.modelid WHERE CD.year = 1970",
    "|  SELECT cm.fullname FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = 1970;",
    ", makeid  SELECT make, year FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.makeid ORDER BY year ASC LIMIT 1;",
    ", origin |   SELECT c.maker, c.year  FROM car_makers AS cm  INNER JOIN cars_data AS c  ON cm.id = c.maker  WHERE c.year = (SELECT MIN(year) FROM cars_data)",
    "SELECT DISTINCT model FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE year > 1980;",
    ", origin  SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid WHERE year > 1980;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS[total makers]   FROM continents   INNER JOIN countries ON countries.continent = continents.contid   INNER JOIN car_makers ON countries.countryid = car_makers.country   GROUP BY continents.continent;",
    ", origin |  SELECT cont.continent, COUNT(*) as num_car_makers FROM car_1.continent AS cont INNER JOIN car_1.countries AS c ON cont.contid = c.continent INNER JOIN car_1.car_makers AS cm ON cm.country = c.countryid GROUP BY cont.continent;",
    "_released  SELECT countries.countryname FROM countries JOIN car_makers USING (countryid) GROUP BY countries.countryname HAVING COUNT(car_makers.id) = (SELECT MAX(nb_makers)                                FROM (SELECT COUNT(id) AS nb_makers                                      FROM car_makers                                      GROUP BY countryid) AS subquery)",
    "SELECT countryname  FROM countries c  INNER JOIN car_makers cm ON c.countryid = cm.country  GROUP BY countryname  ORDER BY COUNT(maker) DESC LIMIT 1;",
    "SELECT      fullname, COUNT(model) as Model_Count  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  GROUP BY fullname",
    "SELECT c.id, c.fullname, COUNT(m.modelid) AS num_models  FROM car_makers c  JOIN model_list m ON c.id = m.maker  GROUP BY c.id, c.fullname;",
    "SELECT accelerate  FROM car_names  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE car_names.make = 'AMC Hornet Sportabout (sw)';",
    "SELECT accelerate FROM cars_data WHERE makeid = (SELECT makeid                 FROM car_names                 WHERE make = 'AMC Hornet Sportabout'                 AND model = 'sw');",
    "SELECT COUNT(DISTINCT car_makers.maker) FROM car_1   LEFT JOIN countries ON car_1.contid = countries.countryid  LEFT JOIN car_makers ON countries.countryid = car_makers.country   WHERE countries.countryname = 'France'",
    "SELECT COUNT(maker)  FROM car_makers cm  JOIN countries co  ON cm.country = co.countryname  JOIN continent ct  ON co.continent = ct.contid  WHERE ct.continent = 'France'",
    "SELECT COUNT(*)   FROM car_makers cm  JOIN countries c on cm.country = c.countryid  JOIN model_list ml on cm.id = ml.maker  JOIN car_names m on m.makeid = ml.model  JOIN cars_data cd on cd.id = m.model  WHERE continent = 'USA';",
    ", originSELECT COUNT(*) FROM car_makers cm JOIN countries c ON cm.country = c.countryname JOIN model_list ml ON ml.maker = cm.maker JOIN car_names cn ON cn.makeid = ml.modelid JOIN cars_data cd ON cd.origin = c.countryname WHERE continent = 'United States'",
    "ran  SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg)  FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT car_makers.fullname, model_list.model FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model",
    "SELECT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countryname, countryid  FROM countries  WHERE countryid IN (SELECT country FROM car_makers)",
    ", orign  SELECT countries.countryName, countries.countryId  FROM car_1.countries  INNER JOIN car_makers  ON car_makers.country = countries.countryId  GROUP BY countries.countryName, countries.countryId  HAVING COUNT(*) > 0;",
    "SELECT count(*)  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower > 150;",
    "SELECT COUNT(*)  FROM cars_data  WHERE horsepower > 150;",
    "SELECT avg(weight)  FROM cars_data  GROUP BY year;",
    "SELECT AVG(weight), year FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY year;",
    "SELECT countries.CountryName  FROM car_makers  INNER JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.continent = 'europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.id) >= 3;",
    "SELECT countryname FROM countries  JOIN car_makers ON car_makers.country = countries.countryname  JOIN continents ON continents.contid = countries.continent  WHERE continents.continent = 'Europe' GROUP BY countryname  HAVING COUNT(car_makers.id) >= 3",
    "|  SELECT MAX(horsepower), make  FROM car_names  INNER JOIN model_list on car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 3;",
    "d  SELECT MAX(horsepower) AS horsepower, make  FROM cars_data  JOIN car_names ON cars_data.makeid = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinders = 3  GROUP BY make;",
    "SELECT model  FROM model_list JOIN cars_data  ON model_list.modelid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT model from model_list m join car_names c on m.model=c.model join cars_data d on c.makeid=d.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "|  SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM car_makers     INNER JOIN model_list         ON car_makers.id = model_list.maker     INNER JOIN car_names         ON model_list.modelid = car_names.makeid     INNER JOIN cars_data         ON car_names.model = cars_data.model WHERE car_names.make = 'volvo';",
    "SELECT AVG(edispl) FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'Volvo'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM model_list ml JOIN car_names cn ON ml.modelid = cn.modelid JOIN cars_data cd ON cn.makeid = cd.makeid;",
    "SELECT model, COUNT(make) AS Total_Makes FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY model ORDER BY Total_Makes DESC;",
    "SELECT model, COUNT(DISTINCT make) FROM car_names GROUP BY model ORDER BY COUNT(DISTINCT make) DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) AS 'Number of Cars'   FROM cars_data  WHERE cylinders > 4;",
    "|  SELECT COUNT(*)  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = 1980;",
    ", origin  SELECT COUNT(*)  FROM car_names JOIN cars_data ON (car_names.makeid = cars_data.id) JOIN model_list ON (car_names.model = model_list.modelid) JOIN car_makers ON (model_list.maker = car_makers.id) JOIN countries ON (car_makers.country = countries.countryid) JOIN continents ON (countries.continent = continents.contid) WHERE cars_data.year = '1980';",
    ", origin  SELECT COUNT(*) FROM cars_data c, model_list m, car_makers cm, countries co WHERE c.makeid = m.modelid AND m.maker = cm.id AND cm.country = co.countryname AND cm.fullname = 'American Motor Company';",
    ", origin Database Tables: continents, countries, car_makers, modellist, carnames, carsdata  SELECT COUNT(*)  FROM car_makers cm JOIN model_list ml ON ml.maker = cm.id JOIN car_names cn ON cn.makeid = ml.modelid JOIN cars_data cd ON cd.make = cn.make WHERE cm.fullname = 'American Motor Company';",
    "|  SELECT fullname, id FROM car_makers WHERE id IN (SELECT DISTINCT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3);",
    ", origin  SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname,car_makers.id HAVING COUNT(model_list.model) > 3;",
    "SELECT car_names.model  FROM car_makers  INNER JOIN model_list      ON car_makers.id = model_list.maker  INNER JOIN car_names      ON model_list.modelid = car_names.makeid INNER JOIN cars_data      ON car_names.makeid = cars_data.makeid  WHERE car_makers.fullname = 'General Motors' AND cars_data.weight > 3500  GROUP BY car_names.model;",
    ", origin |  SELECT model  FROM model_list  INNER JOIN car_makers ON car_makers.id = model_list.maker  INNER JOIN car_names ON car_names.makeid = model_list.model  INNER JOIN cars_data on cars_data.id = car_names.model  WHERE car_makers.fullname = 'General Motors'  OR cars_data.weight > 3500;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT distinct year from cars_data WHERE weight < 4000 and weight > 3000;",
    "SELECT horsepower FROM car_names INNER JOIN cars_data cd     ON car_names.makeid = cd.id ORDER BY accelerate DESC LIMIT 1;",
    "SELECT horsepower FROM cars_data  WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT cylinders FROM cars_data WHERE (maker = 'volvo' and accelerate =  (SELECT MIN(accelerate) FROM cars_data WHERE maker = 'volvo'))",
    "SELECT MIN(cylinders)  FROM cars_data JOIN car_names on cars_data.makeid = car_names.makeid JOIN model_list on car_names.model = model_list.model WHERE maker='volvo';",
    "SELECT COUNT(*) FROM cars_data  WHERE accelerate >      (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*)  FROM cars_data c1 JOIN cars_data c2 ON c2.horsepower =      (SELECT MAX(horsepower)      FROM cars_data) WHERE c1.accelerate > c2.accelerate;",
    "SELECT COUNT(DISTINCT c.countryname)  FROM countries c INNER JOIN car_makers cm ON c.countryname = cm.country  GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) > 2;",
    "SELECT COUNT(*)  FROM countries  INNER JOIN car_makers  ON countries.countryId = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelId = car_names.makeId GROUP BY countries.countryId HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM car_names cn JOIN cars_data c ON cn.makeid = c.id WHERE c.cylinders > 6;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders>6;",
    "SELECT MAX(horsepower)  FROM cars_data WHERE cylinders = 4;",
    "SELECT model    FROM model_list    JOIN cars_data    ON model_list.modelid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1;",
    "|  SELECT car_names.makeid, car_names.make  FROM car_names, cars_data  WHERE cars_data.makeid = car_names.makeid      AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)      AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.fullname FROM car_makers  INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data  ON car_names.makeid = cars_data.makeid WHERE cars_data.horsepower < 30  AND cars_data.cylinders < 4;",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;",
    "SELECT model_list.model  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN cars_data ON model_list.model = cars_data.make  WHERE cars_data.weight < 3500  AND car_makers.fullname != 'Ford Motor Company';",
    ", makename |  SELECT model  FROM model_list  JOIN car_names  ON model_list.modelid = car_names.model  JOIN cars_data  ON car_names.makeid = cars_data.makeName  JOIN car_makers  ON car_names.makeid = car_makers.id  WHERE cars_data.weight < 3500  AND car_makers.fullname != \"Ford Motor Company\";",
    "|  SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryname = car_makers.country WHERE car_makers.country IS NULL;",
    "SELECT countries.countryname  FROM countries  WHERE NOT EXISTS (     SELECT *      FROM car_makers      WHERE car_makers.country = countries.countryname );",
    ", origin  SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(make) > 3 AND COUNT(DISTINCT model_list.modelid) > 2;",
    "SELECT car_makers.id, car_makers.maker  FROM car_makers INNER JOIN (SELECT model_list.maker, COUNT(model_list.modelid) AS models_count              FROM model_list             GROUP BY model_list.maker HAVING COUNT(model_list.modelid) > 1) models_num   ON car_makers.id = models_num.maker INNER JOIN (SELECT car_names.makeid, COUNT(car_names.makeid) AS makes_count              FROM car_names              GROUP BY car_names.makeid HAVING COUNT(car_names.makeid) > 3) makes_num   ON car_makers.id = makes_num.makeid;",
    ", origin |  SELECT countries.countryid, countries.countryname  FROM car_1.countries  JOIN car_1.car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryid, countries.countryname  HAVING COUNT(car_makers.id) > 3  OR EXISTS(SELECT *      FROM car_1.model_list      JOIN car_1.car_names      ON model_list.modelid = car_names.modelid      WHERE car_names.maker = car_makers.maker      AND model_list.model = 'fiat' )",
    "1  SELECT countries.countryid, countries.countryname FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model WHERE model_list.model = 'fiat' OR car_makers.id IN (   SELECT car_makers.id FROM car_makers   INNER JOIN model_list   ON car_makers.id = model_list.maker   GROUP BY car_makers.id   HAVING COUNT(model_list.modelid) > 3 ) GROUP BY countries.countryid",
    "|  SELECT country FROM airlines WHERE airline = \"JetBlue Airways\";",
    "SELECT country  FROM airlines WHERE airline='Jetblue Airways';",
    "SELECT airline, abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    ", departuretime , arrivaldatetime | country : countryabbrev , countryname  SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA'",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA'",
    ", flightdate |  SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT airportcode, airportname  FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "|  SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*)  FROM flights;",
    ", departtime , arrivaltime  SELECT airline  FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*)  FROM airlines  WHERE country = 'USA';",
    "SELECT COUNT(DISTINCT airline)  FROM flight_2  WHERE country = 'USA';",
    "database schema:  SELECT city, country  FROM airports  INNER JOIN flights ON airports.airportcode = flights.destairport  INNER JOIN airlines ON flights.airline = airlines.uid WHERE airportname = 'Alton'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton Airport';",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT COUNT(*) FROM singer;",
    "Rel  SELECT COUNT(*)  FROM singer;",
    "SELECT singer.name, singer.country, singer.age  FROM singer  JOIN singer_in_concert    ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "|  SELECT AVG(singer.age) AS avg_age, MIN(singer.age) AS min_age, MAX(singer.age) AS max_age FROM singer  WHERE singer.country = 'France';",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';",
    "SELECT name, song_release_year    FROM singer   WHERE age = (SELECT MIN(age) FROM singer);",
    "SELECT s.name, s.song_release_year FROM singer AS s JOIN (   SELECT Min(age) AS min_age   FROM singer ) AS age ON s.age = age.min_age;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS 'Number of Singers'  FROM singer JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id GROUP BY country;",
    "SELECT country, COUNT(*) as num_singers FROM singer GROUP BY country;",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age)                FROM singer)",
    "SELECT S.song_name FROM singer S JOIN singer_in_concert SIC USING (singer_id) WHERE S.age > (SELECT AVG(age) FROM singer) ;",
    "SELECT location, name FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium",
    "SELECT AVG(capacity), MAX(capacity)  FROM stadium ;",
    "SELECT s.name, s.capacity  FROM stadium s WHERE s.average = (SELECT MAX(o.average)                      FROM stadium o)",
    "SELECTname,capacity  FROMstadium  ORDER BYaverage DESC  LIMIT 1;",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*) FROM `concert` WHERE `year` IN (2014,2015);",
    "``  SELECT stadium.name, COUNT(DISTINCT concert_id)  FROM stadium  INNER JOIN concert  ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(concert.concert_id)   FROM stadium   LEFT JOIN concert       ON concert.stadium_id = stadium.stadium_id   GROUP BY stadium.name",
    "SELECT s.name, s.capacity  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  GROUP BY s.name, s.capacity  ORDER BY COUNT(c.concert_id) DESC  WHERE c.year >=2014;",
    "|  SELECT s.name, s.capacity FROM stadium s JOIN concert c ON c.stadium_id=s.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT year, COUNT(*)  FROM concert  GROUP BY year  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT year, COUNT(year) AS concert_count FROM concert  GROUP BY year ORDER BY concert_count DESC LIMIT 1;",
    "SELECT name  FROM stadium  LEFT JOIN concert      ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL",
    "SELECT  stadium.name  FROM stadium  LEFT JOIN concert  ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL",
    "SELECT singer.country  FROM concert  \tINNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  \tINNER JOIN singer ON singer.singer_id = singer_in_concert.singer_id WHERE singer.age > 40 AND (SELECT COUNT(*)  \tFROM singer  \tWHERE singer.country = singer.country  \tAND singer.age < 30) > 0;",
    "SELECT stadium.name  FROM stadium LEFT JOIN concert  ON stadium.stadium_id = concert.stadium_id WHERE concert.year <> 2014 OR concert.year IS NULL;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id  \t\t\tFROM singer_in_concert  \t\t\tWHERE year = 2014);",
    "SELECT c.concert_name, c.theme, COUNT(sc.singer_id) as number_of_singers  FROM concert c INNER JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name, c.theme",
    "SELECT c.concert_name, c.theme, count(singer_id) as 'number of singers'  FROM concert c  LEFT JOIN singer_in_concert sic ON c.concert_id = sic.concert_id  LEFT JOIN singer s ON sic.singer_id = s.singer_id  GROUP BY c.concert_id;",
    "SELECT s.name, COUNT(sic.concert_id) AS number_of_concerts  FROM concert_singer s  INNER JOIN singer_in_concert sic  ON sic.singer_id = s.singer_id  GROUP BY s.name;",
    "SELECT s.name as singer_name,         count(*) as num_concerts  FROM singer s  JOIN singer_in_concert sc      ON s.singer_id = sc.singer_id  GROUP BY s.name;",
    "Select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014;",
    "SELECT s.name  FROM concert_singer c    JOIN singer s    ON c.singer_id = s.singer_id    JOIN concert t    ON c.concert_id = t.concert_id  WHERE t.year = 2014;",
    "SELECT singer.name, singer.country FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.song_name LIKE '%Hey%';",
    "SELECT     singer.name, singer.country  FROM      singer     WHERE      singer.song_name LIKE '%Hey%'",
    "SELECT s.name, s.location  FROM stadium as s join singer_in_concert as sc on s.stadium_id=sc.stadium_id      JOIN concert as c on sc.concert_id=c.concert_id  WHERE c.year IN (2014, 2015)  GROUP BY s.name, s.location  HAVING COUNT(CASE WHEN c.year = 2014 THEN c.year END) > 0  AND PLUS COUNT(CASE WHEN c.year = 2015 THEN c.year END) > 0",
    "SELECT stadiums.name, stadiums.location  FROM stadiums  INNER JOIN concert ON stadiums.stadium_id = concert.stadium_id WHERE concert.year IN (2014,2015) GROUP BY stadiums.name, stadiums.location",
    "SELECT COUNT(*) FROM concert3 WHERE EXISTS (SELECT stadium_id FROM stadium               WHERE stadium.capacity = stadium.highest) ;",
    ", participate   SELECT st.capacity FROM stadium AS st JOIN concert AS ce     ON ce.stadium_id = st.stadium_id GROUP BY st.capacity ORDER BY st.capacity DESC  LIMIT 1;",
    "]    SELECT COUNT(*) FROM pets_1 p1  INNER JOIN has_pet hp ON h.petid = p1.petid WHERE p1.weight > 10;",
    ", color  SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE weight > 10;",
    "SELECT weight FROM pets WHERE pettype='DOG' AND pet_age=(SELECT MIN(pet_age) FROM pets WHERE pettype='DOG');",
    "SELECT weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "|  SELECT pets.pettype, MAX(pets.weight)  FROM pets INNER JOIN has_pet ON pets.petid = has_pet.petid GROUP BY pets.pettype;",
    "SELECT pettype, MAX(weight) AS Max_Weight  FROM pets GROUP BY pettype;",
    "SELECT COUNT(pets_1.petid) FROM pets_1      JOIN has_pet         on pets_1.petid = has_pet.petid      JOIN student  ON has_pet.stuid = student.stuid WHERE student.age > 20;",
    "SELECT COUNT(DISTINCT pets_1.petid) FROM pets_1 INNER JOIN has_pet ON (pets_1.petid = has_pet.petid) INNER JOIN student ON (has_pet.stuid = student.stuid) WHERE student.age > 20;",
    "SELECT COUNT(*)  FROM Students s  INNER JOIN has_pet h  ON s.stuid = h.stuid  INNER JOIN pets p  ON h.petid = p.petid  WHERE s.sex = \u2018F\u2019 AND p.pettype = \u2018dog\u2019;",
    "|  SELECT COUNT(*) FROM pets_1 p  INNER JOIN has_pet h ON p.petid = h.petid  INNER JOIN student s ON h.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'female'",
    "|  SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname  FROM student  INNER JOIN has_pet ON (student.stuid = has_pet.stuid)  INNER JOIN pets ON (has_pet.petid = pets.petid)  WHERE pettype IN ('cat' ,  'dog');",
    ", breed  SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');",
    "|  SELECT fname FROM student JOIN has_pet HP1 ON student.stuid = HP1.stuid  JOIN pets PET1 ON HP1.petid = PET1.petid JOIN has_pet HP2 ON student.stuid = HP2.stuid  JOIN pets PET2 ON HP2.petid = PET2.petid WHERE PET1.pettype = 'cat' AND PET2.pettype = 'dog'",
    "|   SELECT fname FROM student INNER JOIN has_pet A on A.stuid = student.stuid INNER JOIN has_pet B on B.stuid = student.stuid INNER JOIN pets p1 on p1.petid = A.petid INNER JOIN pets p2 on p2.petid = B.petid WHERE p1.pettype = 'Cat' AND p2.pettype = 'Dog';",
    "SELECT lname, fname, age, major FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pettype != 'cat';",
    "SELECT lname, fname, major, age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.petid IS NULL AND pets.pettype = 'cat';",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pets.pettype = 'Cat');",
    ":  SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN  (SELECT petid FROM pets WHERE pettype = 'cats'))",
    "SELECT fname, age FROM student JOIN has_pet ON (student.stuid=has_pet.stuid) JOIN pets ON (has_pet.petid = pets.petid) WHERE pets.pettype='D' AND stuid NOT IN ( SELECT stuid from has_pet JOIN pets ON (has_pet.petid = pets.petid) WHERE pets.pettype='C' )",
    "SELECT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON pets.petid = has_pet.petid WHERE pets.pettype = 'dog'  AND student.stuid NOT IN  (SELECT student.stuid FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON pets.petid = has_pet.petid  WHERE pets.pettype = 'cat');",
    "|  SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "|  SELECT pets.pettype,pets.weight FROM pets INNER JOIN (SELECT petid FROM has_pet INNER JOIN (SELECT min(age) min_age FROM student) ON student.age=min_age) ON pets.petid=has_pet.petid",
    "Database Schema Name:Pet_1 SELECT petid, weight FROM Pets WHERE pet_age > 1;",
    "###  SELECT pets_1.petid, pets_1.weight FROM pets_1  INNER JOIN has_pet      ON pets_1.petid = has_pet.petid  INNER JOIN student      ON student.stuid = has_pet.stuid WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) as Average_Age, MAX(pet_age) as Maximum_Age FROM pets GROUP BY pettype;",
    "SQL:  SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight)  FROM pets  GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT fname, age FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid;",
    "| SQL: SELECT fname, age  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet);",
    "SELECT petid  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith';",
    "SELECT pets_1.petid  FROM pets_1  JOIN has_pet ON pets_1.petid=has_pet.petid  JOIN student ON student.stuid=has_pet.stuid  WHERE student.lname='Smith';",
    ", colour |  SELECT stuid, COUNT(petid) FROM has_pet INNER JOIN pets_1 ON has_pet.stuid = pets_1.stuid GROUP BY stuid;",
    "SELECT s.stuid, COUNT(h.petid) as num_of_pets  FROM students s  JOIN has_pets h ON s.stuid = h.stuid  GROUP BY s.stuid  ORDER BY s.stuid ASC",
    "SELECT stuid, fname, sex FROM pets_1 where stuid in  (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)  order by stuid;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid from has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1);",
    "SELECT lname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pet_age = 3;",
    "SELECT lname  FROM student  INNER JOIN has_pet    ON student.stuid = has_pet.stuid  INNER JOIN pets    ON has_pet.petid = pets.petid WHERE pets.pet_age = 3;   /* Assuming pets_1 is a table, sql is within it */",
    ", pet_source |  SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (    SELECT stuid     FROM has_pet );",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(DISTINCT(continent)) FROM continents;",
    ", origin |  SELECT contid, continent, COUNT(countryid) as total_countries  FROM continents  LEFT OUTER JOIN countries c1 ON c1.continent = continents.continent  GROUP BY contid, continent  ORDER BY contid;",
    ", origin  SELECT continents.contid, continents.continent, COUNT(distinct countries.countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(countryname) FROM countries;",
    "SELECT COUNT(* ) FROM countries;",
    ", origin  SELECT     ckm . fullname ,      ckm . id ,     count ( ca . makeid ) as NumberOfProductions FROM     car_makers ckm     INNER JOIN cars_data ca ON ca . origin = ckm.id GROUP BY      ckm.fullname ,     ckm.id",
    "|answer SELECT distinct c1.fullname, c1.id, count(distinct m4.modelid)  FROM car_makers c1 LEFT JOIN countries c2 ON c1.country = c2.countryname LEFT JOIN model_list m3 ON m3.maker = c1.maker LEFT JOIN model_list m4 ON m4.modelid = m3.modelid GROUP BY c1.id, c1.fullname",
    "Database based on serialized_schema: answer: SELECT min(horsepower) AS min_horsepower FROM car_names A INNER JOIN model_list B ON A.model = B.model INNER JOIN car_makers C ON B.maker = C.maker;",
    "SELECT model FROM model_list  INNER JOIN car_names  ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON cars_data.makeid=car_names.makeid ORDER BY horsepower LIMIT 1;",
    "SELECT model FROM model_list WHERE modelid IN (SELECT modelid FROM car_names WHERE makeid IN (SELECT makeid FROM car_makers WHERE id IN (SELECT maker_id FROM cars_data))AND weight < (SELECT AVG(weight) FROM cars_data))",
    "| database schema car_1(contid, continent)  continents(countryid,countryname,continent)  car_makers (id,maker,fullname,country)  model_list (modelid , maker,model)  car_name (makeid, model,make)  cars_data (id , mpg ,cylinders ,edispl ,horsepower ,weight ,acceler ,year  SELECT model  FROM cars_data  INNER JOIN car_names ON cars_data.makeid=car_names.makeid  INNER JOIN model_list ON car_names.model=model_list.model  GROUP BY model  HAVING AVG(weight)> weight;",
    "SELECT fullname  FROM car_makers  INNER JOIN car_names ON car_names.makeid = car_makers.id  INNER JOIN model_list ON model_list.modelid = car_names.model  INNER JOIN cars_data ON cars_data.makeid = car_names.makeid  WHERE cars_data.year=1970;",
    "|  SELECT fullname  FROM car_makers AS cm INNER JOIN model_list AS ml ON cm.id = ml.maker INNER JOIN car_names AS cn ON ml.modelid = cn.modelid INNER JOIN cars_data AS cd ON cn.makeid = cd.makeid WHERE cd.year = '1970';",
    ", makeid  SELECT make, year FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.makeid GROUP BY cn.make, cd.year ORDER BY cd.year ASC LIMIT 1;",
    "|  SELECT make, MIN(year) as \"Earliest Year\" FROM car_names cn      INNER JOIN cars_data cd      ON cn.makeid = cd.id GROUP BY make;",
    ", make  SELECT DISTINCT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN cars_data ON model_list.modelid = cars_data.make WHERE cars_data.year > 1980",
    "SELECT model  FROM model_list  JOIN cars_data ON (model_list.modelid = cars_data.makeid)  WHERE year > 1980;",
    ", origin |  SELECT C.continent, COUNT(*) as count FROM car_makers M INNER JOIN countries C ON M.country=C.countryname GROUP BY C.continent;",
    "|  SELECT cont.continent, COUNT(car_makers.maker) AS NumOfCarMakers  FROM continents AS cont INNER JOIN countries AS ctry ON cont.contid = ctry.continent       LEFT JOIN car_makers ON ctry.countryid = car_makers.country  GROUP BY cont.continent",
    "SELECT countryname FROM Countries INNER JOIN Car_Makers WHERE Countries.continent = Car_Makers.contitent GROUP BY countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    ", origin  SELECT countries.countryname, COUNT(*) AS total_cars FROM cars_data INNER JOIN countries ON cars_data.origin = countries.countryid GROUP BY countries.countryname ORDER BY total_cars DESC LIMIT 1",
    ", origin  SELECT COUNT(makeid), fullname   FROM cars_data JOIN car_makers   USING (maker)   GROUP BY fullname;",
    "|  SELECT car_makers.fullname, model_list.model, count(*) FROM car_makers  JOIN model_list  ON car_makers.id = model_list.makeid  JOIN cars_data  ON model_list.modelid = cars_data.id  GROUP BY car_makers.fullname, model_list.model;",
    "SELECT accelerate FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.make = 'AMC Hornet Sportabout' AND cars_data.year = 'SW';",
    ", serialid  SELECT accelerate  FROM cars_data  JOIN car_makers  ON car_makers.id = cars_data.makeid JOIN model_list ON model_list.modelid = cars_data.modelid WHERE car_makers.fullname = 'AMC Hornet Sportabout'  AND cars_data.serialid = 'SW';",
    "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON continents.contid = countries.continent WHERE continents.continent = 'France'",
    "SELECT COUNT(*) FROM car_makers WHERE maker = 'care' AND country in (SELECT countryname FROM countries WHERE continent = 'France')",
    ":  SELECT COUNT(DISTINCT model)  FROM model_list m  INNER JOIN car_names c ON c.makeid = m.make INNER JOIN car_makers mk ON mk.id = m.maker INNER JOIN countries ct ON ct.countryid = mk.country  INNER JOIN continents cs ON cs.contid = ct.continent WHERE cs.continent = 'USA';",
    "SELECT count(*)  FROM model_list  INNER JOIN car_makers      ON model_list.maker = car_makers.maker  INNER JOIN countries      ON countries.countryname = car_makers.country  INNER JOIN continents      ON continents.contid = countries.continent  WHERE continents.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg)  FROM car_names  JOIN car_makers ON car_names.make_id = car_makers.id JOIN model_list ON model_list.maker = car_makers.fullname JOIN cars_data ON cars_data.make_id = model_list.modelid WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 and year = 1974;",
    "SELECT MIN(weight)  FROM car_names  JOIN cars_data  ON car_names.makeid = cars_data.id  JOIN model_list  ON car_names.model = model_list.modelid  JOIN car_makers  ON model_list.maker = car_makers.id  JOIN countries  ON car_makers.country = countries.countryid  JOIN continents  ON countries.continent = continents.contid  WHERE cylinders = 8  AND year = 1974;",
    "SELECT cm.maker, ml.model FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker;",
    "SELECT maker, model FROM car_makers c  INNER JOIN model_list m ON c.id = m.maker INNER JOIN car_names n ON m.modelid = n.makeid;",
    "SELECT countries.countryname, countries.countryid  FROM countries     INNER JOIN car_makers          ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "|   SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.continent = car_makers.country GROUP BY countries.countryname, countries.contid HAVING COUNT(*) > 0;",
    "SELECT COUNT(*) FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.maker  AND country = 'XXX' INNER JOIN car_names ON car_names.makeid = model_list.makeid INNER JOIN cars_data ON cars_data.make = car_names.make AND cars_data.horsepower > 150",
    "",
    "SELECT AVG(weight) FROM cars_data GROUP BY YEAR;",
    "SELECT year, AVG(weight) AS \"Average Weight\", AVG (year) AS \"Average Year\"  FROM cars_data GROUP BY year;",
    "|  SELECT  c.countryName FROM  car_makers cm JOIN countries c ON cm.country = c.countryId WHERE c.continent = 'Europe' Group by cm.country HAVING COUNT(cm.country) >= 3;",
    "SELECT countryname FROM car_1.countries c  INNER JOIN car_1.car_makers m ON c.countryid=m.country  INNER JOIN car_1.model_list l ON m.id=l.maker  INNER JOIN car_1.car_names n ON l.modelid=n.model  INNER JOIN car_1.cars_data d ON n.makeid = d.id  INNER JOIN car_1.continents co ON co.contid=c.continent  WHERE co.continent ='Europe'  GROUP BY countryname HAVING COUNT (d.id) >= 3",
    "SELECT MAX(horsepower), make   FROM car_names  \tINNER JOIN model_list  \tON car_names.makeid = model_list.modelid  \tINNER JOIN cars_data \tON model_list.modelid = cars_data.id  WHERE cylinders =3  GROUP BY make  ORDER BY horsepower DESC;",
    "SELECT max(horsepower) as maxHorsepower, make FROM car_names CN JOIN model_list ML ON CN.makeid = ML.modelid JOIN cars_data CD ON ML.model = CD.model Where CN.model = ML.model AND cylinders = 3  GROUP BY make",
    ", origin ConSTRCT SELECT car_names.model , MAX(cars_data.mpg)  FROM car_namesJOIN cars_data ON car_names.makeid = cars_data.makeid GROUP BY car_names.model;",
    ", origin  SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    ", origin    SELECT AVG(horsepower) AS avg_horsepower FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    ", origin  SELECT AVG(edispl)  FROM model_list JOIN car_names     ON(model_list.modelid = car_names.modelid) JOIN car_makers     ON (car_names.makeid = car_makers.id)  WHERE fullname = 'Volvo'",
    "SELECT AVG(edispl)  FROM car_makers  INNER JOIN model_list ON car_makers.id=model_list.maker  INNER JOIN car_names ON car_names.makeid=model_list.model  INNER JOIN cars_data\tON cars_data.id=car_names.make  LEFT JOIN continents ON continents.contid=car_makers.continent  INNER JOIN countries ON countries.countryid=car_makers.country  WHERE car_makers.fullname=\"Volvo\";",
    "SELECT cylinders , MAX(accelerate) AS max_accel FROM cars_data GROUP BY cylinders;",
    "|  SELECT  MAX(accelerate) FROM cars_data;",
    "SELECT make ON cars_data COUNT  FROM cars_data INNER JOIN model_list ON cars_data.model = model_list.modelid INNER JOIN car_names ON model_list.modelid = car_names.model GROUP BY make ORDER BY COUNT(make) DESC;",
    ", origin |  SELECT car_makers.fullname, models_list.modelid, model_list.model, COUNT(*)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN cars_data ON model_list.modelid = cars_data.makeid  GROUP BY car_makers.fullname, models_list.modelid, models_list.model  ng max(count(*))  ORDER BY COUNT(*) DESC;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cars_data.year = 1980",
    "SELECT COUNT(id) as 'Number of Cars' FROM cars_data WHERE year=1980",
    "SELECT COUNT(* )  FROM car_makers  JOIN model_list  ON car_makers.id = model_list.maker WHERE fullname = 'American Motor Company';",
    "|  SELECT COUNT(DISTINCT model_list.model)  FROM model_list  JOIN car_makers on car_makers.id = model_list.maker  WHERE car_makers.fullname = 'American Motor Company'",
    "|   SELECT makers.fullname, makers.id  FROM car_makers AS makers   JOIN model_list AS models ON makers.id = models.maker   JOIN cars_data data ON models.modelid = data.id  GROUP BY makers.id, makers.fullname  HAVING COUNT(data.id) >3 ;",
    ", origin  SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list on car_makers.id = model_list.maker INNER JOIN car_names ON car_names.makeid = model_list.modelid GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(*) > 3;",
    "SELECT model FROM model_list, car_makers WHERE car_makers.fullname LIKE 'General Motors%' AND model_list.maker = car_makers.id  AND weight > 3500;",
    ", origin |  SELECT DISTINCT model FROM car_names JOIN model_list ON car_names.makeid = model_list.make JOIN car_makers ON car_makers.id = model_list.maker WHERE (fullname = 'General Motors' OR weight > 3500);",
    "|  SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 and 4000 ;",
    "For this question I would use the following SQL query  SELECT distinct year  FROM cars_data WHERE weight<4000 OR weight>3000;",
    "|  SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC LIMIT 1;",
    "SELECT horsepower FROM cars_data c JOIN car_names m on c.makeid = m.makeid  JOIN model_list md on m.model = md.model  JOIN car_makers cm on md.makeid = cm.id  JOIN countries ct on cm.country = ct.countryid  JOIN continets cont on ct.continent = cont.contid ORDER BY accelerate DESC LIMIT 1",
    "SELECT     cylinders FROM     car_data WHERE     makeid =(         SELECT             makeid         FROM             car_names         WHERE             model = (SELECT modelid FROM model_list WHERE model = 'volvo' )     )     AND accelerate = (         SELECT             MIN( accelerate )         FROM             car_data         WHERE             makeid =(                  SELECT  makeid                  FROM    car_names                  WHERE     model = (SELECT modelid FROM model_list WHERE model = 'volvo' )             )     )",
    "SELECT cylinders  FROM cars_data  INNER JOIN model_list    ON model_list.modelid = cars_data.modelid  LEFT JOIN car_name    ON car_name.MakevsModel = model_list.model  WHERE car_name.make = 'Volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM car_names      INNER  JOIN cars_data         ON car_names.makeid = cars_data.id WHERE cars_data.accelerate > ( \tSELECT MAX(cars_data.horsepower)  \tFROM car_names      INNER  JOIN cars_data         ON  car_names.makeid = cars_data.id )",
    "SELECT countryname, COUNT(*)  FROM countries  JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countryname  HAVING COUNT(*) > 2;",
    "SELECT COUNT(* ) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 2 ;",
    "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
    "SELECT COUNT(*)  FROM cars_data WHERE cylinders > 6;",
    "SELECT carb_names.`model`, carb_data.`horsepower`  FROM carb_data  JOIN carb_names ON carb_data.`id` = carb_names.`makeid`  WHERE  carb_data.`cylinders` = 4  ORDER BY carb_data.horsepower DESC  LIMIT 1;",
    "SELECT model  FROM model_list AS m JOIN cars_data as c  ON m.modelid=c.id WHERE c.cylinders ac.horsepower ORDER BY c.horsepower DESC  LIMIT 1;",
    "|  SELECT makeid, fullname  FROM car_makers c  INNER JOIN model_list ml  ON c.id = ml.maker  INNER JOIN cars_data cd  ON ml.modelid = cd.id  INNER JOIN car_names cn  ON cd.makeid = cn.makeid  WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data)     AND cylinders <= 3 ;",
    "Database Table: car_4car_4   SELECT makeid , fullname  FROM car_makers  INNER JOIN car_names  ON car_makers.id = car_names.makeid  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE horsepower <  (SELECT MIN (horsepower) FROM cars_data)  AND cylinders < 4;",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;",
    "SELECT MAX(mpg) FROM car_data WHERE (cylinders = 8 OR year < 1980);",
    ", manufactured  SELECT model_list.model FROM model_list JOIN  cars_data ON model_list.modelid =  cars_data.id JOIN car_names ON car_names.id = model_list.maker JOIN car_makers ON car_makers.id = car_names.makeid JOIN countries ON countries.countryid = car_makers.country WHERE weight < 3500 AND car_makers.maker != \"Ford Motor Company\" ;",
    ", origin Your Answer: SELECT model  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE NOT car_makers.maker = 'Ford Motor Company' AND weight < 3500;",
    "|  SELECT countries.countryname  FROM countries  WHERE countries.countryid  NOT IN      (SELECT car_makers.country      FROM car_makers      GROUP BY car_makers.country)",
    "|  SELECT countryname FROM countries c INNER JOIN car_makers m ON c.countryid = m.country WHERE m.id IS NULL;",
    ", origin  SELECT car_makers.id, car_makers.maker FROM car_makers WHERE NOT EXISTS (SELECT modelid                   FROM model_list                   WHERE model_list.maker = car_makers.fullname                   GROUP BY model_list.maker                   HAVING COUNT(*) <= 1) GROUP BY car_makers.id HAVING COUNT(*) > 3;",
    "|  SELECT  car_makers.id,  car_makers.maker,  COUNT(DISTINCT model_list.modelid)   FROM   car_makers   JOIN model_list ON car_makers.id = model_list.maker   JOIN car_names ON model_list.modelid = car_names.model   JOIN cars_data ON car_names.makeid = cars_data.id    GROUP BY  car_makers.id    HAVING  COUNT(cars_data.id) > 3  AND  COUNT(DISTINCT model_list.modelid) > 2;",
    ", origin |  SELECT countries.countryid, countries.countryname FROM countries INTERSECT (SELECT countries.countryid  FROM countries INNER JOIN car_makers on countries.countryid = car_makers.country  WHERE car_makers.id > 3) UNION (SELECT countries.countryid, countries.countryname  FROM countries INNER JOIN car_makers JOIN model_list JOIN car_names on  car_makers.id = model_list.maker AND model_list.modelid = car_names.modelid  WHERE car_names.model = 'fiat' GROUP BY countries.countryid, countries.countryname);",
    "|  SELECT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.modelid = car_names.makeid WHERE car_makers.maker IN (SELECT maker                            FROM car_makers                            GROUP BY maker                            HAVING COUNT(*) > 3) OR car_names.model = \"Fiat\";",
    "|  SELECT country FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT country  FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline='JetBlue Airways';",
    "|  SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation From airlines WHERE airlines.country = \"USA\";",
    "SELECT a.airline, a.abbreviation FROM airlines a INNER JOIN airports ap ON a.countryabbrev = ap.countryabbrev WHERE ap.country = 'USA';",
    "SELECT airportcode , airportname FROM airports WHERE city='Anthony';",
    ", operationdays   SELECT airportcode , airportname FROM airports WHERE city = 'Anthony' ;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(airline)  FROM airlines;",
    "|  SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(airportcode) FROM airports;",
    ", departure , arrival  SELECT count(*)  FROM flights;",
    "SELECT COUNT(flightno)    FROM flights;",
    "|  SELECT airline  FROM flight_2.airlines  WHERE abbreviation='UAL';",
    ", takeofftime  SELECT airline FROM airlines WHERE abbreviation='UAL';",
    "SELECT COUNT(airlines.uid)  FROM airlines WHERE airlines.country = 'USA';",
    "| plane_1 : planeNo , make , model  SELECT COUNT(*)  FROM airlines  WHERE country='USA';",
    "SELECT DISTINCT cities.city, countries.country  FROM airports as airports  LEFT JOIN flights f2 ON f2.airline = f2.airline LEFT JOIN airlines as airlines ON airlines.abbreviation = f2.airline LEFT JOIN airports as cities ON cities.airportcode = f2.destairport  LEFT JOIN airports as airports_2 ON airports_2.airportname = airports.airportname  LEFT JOIN airports as countries ON countries.countryabbrev = airports_2.countryabbrev     WHERE airports.airportname = 'Alton'",
    "SELECT airports.city, airports.country FROM flight_2.airports WHERE airports.airportname = 'Alton airport'",
    "SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO';",
    "SELECT COUNT(*) FROM Singer;",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "Datasheet  SELECT singer.name, singer.country, singer.age FROM concert_singer INNER JOIN singer ON concert_singer.singer_id=singer.singer_id ORDER BY singer.age DESC;",
    "database schema: CREATE TABLE stadium(stadium_id int, location varchar(30), name varchar(20), capacity int, highest int, lowest float, average float);CREATE TABLE singer(singer_id int, name varchar(20), country char(20), song_name char(30), song_release_year  year, age int, is_male bool);CREATE TABLE concert(concert_id int, concert_name char(25), theme char(25), stadium_id int,  year int);CREATE TABLE singer_concert(concert_id int, singer_id int);  SELECT  AVG(age) as Avg_age,  MIN(age) as Min_age, MAX(age) as Max_age FROM singer WHERE country = 'France';",
    "SELECT  AVG(age), MIN(age), MAX(age) FROM singer WHERE singer.country = 'France';",
    "Database = Jena  SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT singer.name, song_release_year FROM concert_singer INNER JOIN singer   ON concert_singer.singer_id=singer.singer_id INNER JOIN concert ON  concert_singer.concert_id=concert.concert_id INNER JOIN singer_in_concert   ON singer_in_concert. concert_id=concert.concert_id AND singer_in_concert.singer_id=singer.singer_id  ORDER BY singer.age asc LIMIT 1;",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer.singer_id)  FROM singer    INNER JOIN singer_in_concert ON singer_in_concert.singer_id=singer.singer_id GROUP BY country;",
    "SELECT country, COUNT(*) FROM singer GROUP BY country;",
    "SELECT song_name FROM singer INNER JOIN singer_in_concert \tON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert \tON concert.concert_id = singer_in_concert.concert_id INNER JOIN stadium \tON stadium.stadium_id = concert.stadium_id WHERE age > average;",
    "SELECT sngr.song_name  FROM concert_singer sngr  INNER JOIN stadium stad    ON sngr.stadium_id = stad.stadium_id  WHERE sngr.age > stad.average",
    "SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location AS \"Location\" , name AS \"Name\" , capacity AS \"Capacity\"  FROM post.stadium  WHERE capacity BETWEEN 5000 AND 10000;",
    ", rank  SELECT MAX(capacity), AVG(highest + lowest + average)  FROM stadium;",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium;",
    "SELECT s.name, s.capacity  FROM stadium s  WHERE s.average = (SELECT MAX(average) FROM stadium);",
    "SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average)  FROM stadium);",
    "SELECT COUNT(*) FROM  concert WHERE year IN (2014,2015);",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014,2015)",
    "SELECT stadium.name, \t\tCOUNT(DISTINCT concert.concert_id) AS number_concerns FROM concert  JOIN singer_in_concert\t ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(concert.concert_name) FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id   GROUP BY stadium.name;",
    "SELECT st.name AS stadium_name, st.capacity FROM stadium st     JOIN concert con              ON st.stadium_id = con.stadium_id WHERE con.year >= 2014 GROUP BY st.name, st.capacity ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT    stadium.name, stadium.capacity FROM   concert, stadium, singer_in_concert WHERE   concert.stadium_id = stadium.stadium_id   AND singer_in_concert.concert_id = concert.concert_id   AND concert.year > 2013 ORDER BY    COUNT(*) DESC   LIMIT 1;",
    "SELECT year, COUNT(concert_id) AS 'Number of Concerts' FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC;",
    "SELECT year, COUNT(concert.concert_id) AS total_concerts  FROM concert  GROUP BY year ORDER BY total_concerts DESC LIMIT 1;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN  (SELECT sic.stadium_id FROM singer_in_concert sic INNER JOIN concert c ON (sic.concert_id = c.concert_id))",
    "SELECT stadium.name FROM   stadium        LEFT OUTER JOIN singer_in_concert sc               ON city.stadium_id = sc.stadium_id WHERE  sc.concert_id IS NULL;",
    "Database Schema:  SELECT s1.country, s2.country  FROM singer s1, singer s2  WHERE s1.age > 40 AND s2.age < 30  AND s1.singer_id <> s2.singer_id;",
    "SELECT name FROM stadium WHERE YEAR != 2014 AND name NOT IN      (SELECT stadium.name FROM stadium       JOIN concert      ON concert.stadium_id = stadium.stadium_id      WHERE YEAR = 2014);",
    ", billing |  SELECT stadium.name  FROM stadium  LEFT JOIN concert  ON (stadium.id = concert.stadium_id AND concert.year = 2014) WHERE concert.stadium_id IS NULL;",
    ", numdatabase_tables = [ \"views\": [ { \"table_id\": \"cs\", \"view_name\": \"concert_singer\", \"sql_query\": \"\"\" SELECT c.concert_name,c.theme, sing.num_singer     FROM  Concert as c, singer_in_conncert as sing     WHERE  c.concert_id = sing.concer_id \"\"\" }]  Answer: SELECT c.concert_name, c.theme, sing.num_singer FROM concert as c  INNER JOIN singer_in_concert as sing     ON c.concert_id = sing.concert_id;",
    "SELECT c.concert_name, c.theme, COUNT(cO.singer_id)  FROM concert c JOIN singer_in_concert cO ON c.concert_id = cO.concert_id  GROUP BY c.concert_name, c.theme;",
    "SELECT  sl.singer_name,  COUNT(sic.concert_id) AS num_concerts FROM singer sl JOIN singer_in_concert sic ON sl.singer_id = sic.singer_id GROUP BY sl.singer_name",
    "database schema:   SELECT s.name, COUNT(*)  FROM singer s  INNER JOIN singer_in_concert sc  ON sc.singer_id = s.singer_id  GROUP BY s.name;",
    "SELECT name FROM singer, concert, singer_in_concert WHERE concert.year='2014' AND concert.concer_id= singer_in_concert.concert_id AND singer_in_contsent.singer_id=singer_id",
    "SELECT  \tsinger.name  FROM  \tsinger  INNER JOIN  \tsinger_in_concert  ON  \tsinger.singer_id = singer_in_concert.singer_id INNER JOIN  \ttop ON \ttop.concert_id = singer_in_concert.concert_id WHERE  \tconcert.top_id = concert.concert_id   \tAND \tconcert.year = 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.song_name LIKE '%Hey%';",
    "database_schema: ` SELECT stadiums.name, stadiums.location FROM stadiums JOIN concert ON stadiums.stadium_id = concert.stadium_id WHERE year = 2014 INTERSECT SELECT stadiums.name, stadiums.location FROM stadiums JOIN concert ON stadiums.stadium_id = concert.stadium_id WHERE year = 2015;",
    "SELECT DISTINCT S.name , S.location  FROM stadium S JOIN singer_in_concert SC ON S.stadium_id = SC.stadium_id JOIN singer Si ON SC.singer_id =O Si.singer_Cd JOIN Grammy G on Si.singer_id OOH @@ WHERE G_year IN (2014 , 2015)",
    "SELECT COUNT( DISTINCT concert_id ) FROM singer stir, concert cnc, stadium st WHERE st.capacity = st.highest AND cnc.stadium_id = st.stadium_id AND stir.concert_id = cnc.concert_id;",
    "SELECT COUNT(*) From concert  INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)",
    "|  SELECT COUNT(*) FROM pet_1 JOIN has_pet ON pet_1.petid = has_pet.petid                      JOIN pets on has_pet.petid=pets.petid WHERE pets.weight > 10;",
    "SELECT COUNT(*) FROM pets    INNER JOIN has_pet ON (has_pet.petid=pets.petid)  WHERE pets.weight > 10;",
    "SELECT MIN(weight)  FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid  WHERE pettype = 'dog'",
    "|  SELECT weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets )",
    "SELECT pettype, MAX(weight)  FROM has_pet INNER JOIN pets_1 USING (stuid) INNER JOIN pets USING (petid) GROUP BY pettype;",
    "Database selected: pets  SELECT pettype, MAX(weight) AS maximum_weight  FROM pets GROUP BY pettype;",
    "SELECT      COUNT(has_pet.petid)  FROM      students,      has_pet WHERE      students.stuid = has_pet.stuid      AND age > 20;",
    "SELECT COUNT(DISTINCT pets_1.petid) FROM pets AS pets_1  INNER JOIN has_pet AS has_pet_1 ON pets_1.petid = has_pet_1.petid  INNER JOIN Student ON Student.stuid = has_pet_1.stuid WHERE Student.age > 20;",
    "Answer:  SELECT COUNT(*) FROM pets AS p  JOIN (has_pet AS h        INNER JOIN student AS s        ON h.stuid = s.stuid)       ON p.petid = h.petid WHERE s.sex = 'F' AND pettype = 'dog';",
    "|  SELECT COUNT(*)  FROM students INNER JOIN has_pet  ON students.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid WHERE students.sex = 'female' AND pets.pettype = 'dog';",
    ", kind  SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname  FROM student  JOIN has_pet  ON student.stuid=has_pet.stuid  JOIN pets  ON pets.petid=has_pet.pid  WHERE pettype IN (\"Cat\",\"Dog\");",
    "question  SELECT fname FROM student INNER JOIN has_pet ON has_pet.stuid=student.stuid INNER JOIN pets p1 ON p1.petid=has_pet.petid INNER JOIN pets p2 ON p2.petid=has_pet.petid WHERE p1.pettype = 'Dog' OR p2.pettype = 'Cat'",
    "SQL query: $SECTION   SELECT fname FROM student INNER JOIN has_pet AS hp1 ON student.stuid = hp1.stuid INNER JOIN pets AS ped1 ON hp1.petid = ped1.petid INNER JOIN has_pet AS hp2 ONStudent.stuid = hp2.stuid INNER JOIN Pets AS ped2 ON hp2.petid = ped2.petid   WHERE ped1.pettype = 'cat' AND ped2.pettype = 'small'",
    "SELECT fname FROM student st INNER JOIN has_pet hp   ON st.stuid = hp.stuid INNER JOIN Pets p   ON hp.petid = p.petid WHERE p.pettype in ('Cat', 'Dog') GROUP BY st.fname HAVING Count(*) = 2;",
    "- > Table``:  SELECT lname, fname, age, major FROM student s WHERE s.stuid NOT IN (SELECT stuid FROM has_pet h INNER JOIN pets p ON h.petid = p.petid WHERE p.pettype=\"cat\")",
    "SELECT s.major, s.age  FROM students s JOIN has_pet h  ON s.stuid = h.stuid LEFT JOIN pets p  ON h.petid = p.petid  WHERE p.pettype IS NULL OR p.pettype != \"cat\";",
    "\u00a7\u00a7 1020  SELECT stuid  FROM student WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                     INNER JOIN pets                     ON has_pet.petid = pets.petid                     WHERE pettype = 'cat') };",
    "|  SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet,pets                       WHERE has_pet.petid = pets.petid                       AND pettype = 'cat');",
    "|   SELECT fname, age FROM student WHERE stuid IN ( SELECT stuid FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE (pets.pettype = 'dog' AND pet_age IS NOT NULL)  AND (  pedid NOT IN (    SELECT petid FROM pets INNER JOIN  has_pet ON ancestors.petides = haplizers.petried      WHERE haplites.petpipes = 'cat'     )   ) )",
    "SELECT fname FROM Student ~~WHERE stuid in id( SELECT stuid FROM has_pet ~~WHERE petid in id (SELECT petid FROM~~ pets WHERE pettype = 'dog' ) ~~AVG and stuid not in id (SELECT petid FROM ~~pets WHERE pettype = 'cat' );",
    "SELECT pettype, weight FROM has_pet JOIN pets_1 ON pets_1.stuid = has_pet.stuid JOIN Pets ON has_pet.petid = Pets.petid WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
    "SELECT pettype, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1",
    "SELECT pets.id, pets.weight  FROM pets  JOIN has_pet ON pets.id = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pet_age > 1;",
    "SELECT AVG(pets_1.age), MAX(pets_1.age) FROM pets_1  INNER JOIN has_pet, pets ON pets.petid = has_ pet.petid AND pets_1.age => pets.pet_age GROUP BY pets.pettype;",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets  GROUP BY pettype;",
    "at  SELECT  pettype, AVG(weight) AS avg_weight  FROM  pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM has_pet JOIN pets ON has_pet.petid = pets.parid GROUP BY pettype;",
    "SELECT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  GROUP BY fname, age;",
    "SELECT  fname, age  FROM student  INNER JOIN has_pet  ON student.stuid=has_pet.stuid  INNER JOIN pets On pets.petid = has_pet.petid;",
    "target_SQL : SELECT petid FROM pets_1, has_pet WHERE has_pet.stuid=student.stuid and student.lname='Smith'",
    ", colorform item 1:  SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith';",
    "SELECT student.stuid, COUNT(*) FROM student  JOIN has_pet ON student.stuid = has_pet.petid JOIN pets ON pets.petid = has_pet.petid GROUP BY student.stuid;",
    "|  SELECT    stuid, COUNT(petid)  FROM   pets_1 NATURAL JOIN   has_pet GROUP BY   stuid",
    "SELECT fname, sex  FROM student INNER JOIN has_pet  ON (student.stuid = has_pet.stuid) INNER JOIN pets  ON (pets.petid = has_pet.petid) GROUP BY student.stuid   HAVING COUNT(has_pet.petid) > 1;",
    "SELECT fname, sex FROM student WHERE EXISTS (SELECT 1 FROM have_pet as h JOIN pets as p on h.petid = p.petid  AND h.petid IN (SELECT petid FROM have_pet GROUP BY stuid HAVING COUNT(petid) > 1) src.stuid = student.stuid)",
    "SELECT lname FROM Student, Has_pet, Pets WHERE Student.stuid=Has_Pet.student AND Pets.petid=Has_pet.petid AND Pets.pet_age=3 AND Pets.pettype LIKE '%Cat%';",
    "SELECT lname  FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid  LEFT JOIN pets on has_pet.petid = ads.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid                     FROM has_pet)",
    "SELECT AVG(AGE) FROM STUDENT A LEFT JOIN HAS_PET P ON A.stuid = P.stuid WHERE P.stuid IS NULL ;",
    "Transform Question \u2192 How many continents are there?  SELECT COUNT(*) FROM continents;",
    "|  SELECT COUNT(DISTINCT( continents.continent )) AS Total_Number_Of_Continents FROM continents;",
    "SELECT contid , continent , COUNT(countryid) AS number_country FROM continents LEFT JOIN countries ON continetn.contid = countries.continent GROUP by contid ;",
    "|- Update car_8 |  SELECT continents.contid, continents.continent, COUNT(countries.continent) FROMcontinents LEFTOUTERJOIN countries ON countries.continent = continents.conttext GROUP BY continents.contid, countries,continent;",
    "SELECT COUNT(*)  FROM countries;",
    "SELECT COUNT(*) FROM countries",
    "_result={ SELECT fullname, car_makers.id , COUNT(makeid) FROM car_makers JOIN model_list ON car_makers.id=model_list.maker JOIN car_names ON car_names.modeilid=model_list.modelid GROUP BY car_makers.fullname; }",
    ", origin  SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid)  FROM car_makers  LEFT JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id",
    "SELECT c.model FROM car_makers cm JOIN model_list ml ON cm.id = ml.makeid JOIN cars_data c ON ml.modelid= c.makeid ORDER BY c.horsepower ASC LIMIT 1;",
    "SELECT car_names.model FROM car_names INNER JOIN car_makers on car_names.makeid = car_makers.id INNER JOIN model_list on car_names.model = model_list.model INNER JOIN cars_data on model_list.modelid INNER JOIN countries on car_makers.country  = countries.countryid WHERE cars_data.horsepower = MIN(cars_data.horsepower);",
    "SELECT model FROM model_list  JOIN car_maker ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model HAVING avg(weight) > weight",
    "Database Schema ----------------------------------------  Create table models_500kg  ( \u00a0\u00a0computer_id int primary key,      model_name varchar,     \u00a0make_number bigint references car_makers (id),  \u00a0mpg int,   cylinders int ,  \u00a0horsepower decimal(4, 1),  \u00a0weight tinyint )  Query:  SELECT DISTINCT model_Name    FROM models_500kg   WHERE weight < (SELECT AVG(weight) FROM models_500kg);",
    "database modelhouse  SELECT fullname  WHERE year = 1970  FROM car_makers       JOIN model_list      ON car_makers.id = model_list.maker      JOIN car_names      ON model_list.modelid = car_names.makeid      JOIN cars_data      ON car_names.model = cars_data.model  GROUP BY fullname",
    "SELECT maker FROM car_makers JOIN model_list USING (id) JOIN car_names USING (makeid) JOIN cars_data USING (model) WHERE year = 1970;",
    "| rating : makeid , Votes , averagedrat   SELECT car_names.make, MIN(cars_data.year) FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_names.make;",
    "corresponding SQL:  SELECT car_year.maker,  MIN(car_year.year) AS \"Earliest Compared Year\" FROM (SELECT c-d.maker, c-d.year FROM cars_data c-d INNER JOIN car_names c-n ON c-n.makeid= c-d.makeid INNER JOIN model_list m-l ON m-l.model =c-n.model INNER JOIN car_makers c -mk ONc-mk.id = m-l.maker GROUP BY c-d.maker , c-d.year )car_year GROUP BY car_year.maker ORDER BY car_year.maker;",
    "SELECT DISTINCT model_list.model  FROM model_list JOIN car_makers ON (model_list.maker = car_makers.id) JOIN car_names  ON (model_list.model = car_names.model) JOIN cars_data  ON (car_names.makeid = cars_data.id) WHERE cars_data.year > 1980 ;",
    "Database Schema s :   CONTINENT (CONTID , Contintent )  COUNTRY ( CountryId , Courntryname, Continent)   CAR MAKER (Id, Maker, Fullname, Country )   MODEL LIST (modid , makar , model)  CARNAMES (makeId, modId, make )   CARSDATA (Id ,MPG, Cylymders, Edispl, Raorsepower, Weight, accesaerate, Year )   SQL Query:  SELECT model FROM model_list ml  JOIN car_makers cm on ml.maker=cm.maker  JOIN cars_data cd ON cm.id=cd.id  WHERE year >=1980  GROUP BY model ORDER BY model ASC",
    "SELECT continents.continent, COUNT(makers.maker) AS 'Number of Car Makers'    FROM countries          inner join makers on makers.country=countries.countryid          inner join continents on countries.continent=continent.contid GROUP BY continents.continent;",
    ", origin |  SELECT a.continent, COUNT(DISTINCT c.maker) as num_car_companies  FROM continents a LEFT JOIN countries b \tON a.contid = b.continent LEFT JOIN car_makers c \tON c.country = b.countryname GROUP By a.continent;",
    ", origin  SELECT countryname, COUNT(maker) FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname ORDER BY COUNT(maker) DESC  LIMIT 1;",
    "17anException is thrown when an op |   SELECT countries.countryname FROM car_makers INNER JOIN countries    ON car_makers.country = countries.countryid GROUP BY countries.continentn ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "built  Outputtype:  SELECT maker, COUNT(DISTINCT model) AS 'Count of Models' FROM car_1.car_makers  INNER JOIN car_1.model_list ON car_makers.id  = model_list.maker  GROUP BY maker;",
    ", origin  SELECT c2.id AS makeid, c2.fullname, COUNT (p1.modelid) AS Models FROM car_2 p1, countries c1, chemalds c2 WHERE p1.maker = c2.maker AND c2.country = c1.countryid GROUP BY c2.id, c2.fullname;",
    "SELECT accelerate FROM cars_data WHERE car_names.makeid = 'amc hornet sportabout fw'",
    "SELECT accelerate FROM cars_data AR area JOIN car_names as cn ON exist cars_data.makeid = cn.makeid JOIN model_list as ml ON cn.model = ml.model JOIN car_makers cm ON cm.id = ml.maker JOIN countries ON cm.countryname = countries.countryname JOIN continents as c ON iscountries.continent = c.contig WHERE cm.fullame = 'Amc Radio' AND cm.modele = 'poachstone';",
    "|  SELECT COUNT(*) FROM car_makers JOIN countries    ON car_makers.country = countries.countryname WHERE countries.continent = 'France'",
    "SELECT COUNT(*) FROM car_makers AS c    JOIN countries AS n ON n.bonusid = c.country   JOIN continent AS o ON o.contid = a.occasionrows   WHERE o.continent= 'France';",
    "SELECT count(distinct cars_data.model) FROM cars_data JOIN model_list ON model_list.modelid = cars_data.id AND JOIN car_names ON car_names.makeid = cars_data.id AND JOIN car_makers ON car_names.makeid = car_makers.id AND JOIN countries ON car_makers.country = countries_countryid\tAND  JOIN counties ON countries.contiment = countries.contid WHERE countries.countryname = 'USA';",
    "SELECT COUNT(*) FROM car_names  INNER JOIN model_list ON car_names.makeid= model_list.modelid  INNER JOIN car_makers ON model_list.maker= car_makers.id INNER JOIN countries ON car_makers.country=countries.countryid INNER JOIN continents ON countries.continent=continents.contid WHERE continents.continent = \"United States\";",
    "SELECT AVG(mpg)    FROM cars_data   WHERE cylinders = 4;",
    "|  SELECT AVG(mpg)  FROM cars_data  WHERE cylinders = 4",
    "SELECT MIN(weight) FROM car_data WHERE cylinders = 8   AND year = 1974;",
    "SELECT MIN(weight) FROM car_names  INNER JOIN model_list vs ON car_names.makeid=vs.make  INNER JOIN car_makers cm ON vs.make=cm.maker  INNER JOIN countries ct ON cm.country =ct.countryname  INNER JOIN continents cn ON ct.continent=cn.angle_x INNER JOIN cars_ data cd ON car_names.model_name=cd.model WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM model_list JOIN car_names     ON model_list.maker = car_names.makeid;",
    "SELECT c\u00e0rs_data.model, c\u00e0r_rbakes.fullname,<br> carsords_data.year, c\u00e0r_rbbiks.makers, c\u00e0rregisters_12_ds.performance <FROM c\u00e0rrds_1 data LEFT JOIN c\u00e0ceeds_aqkers ON c\u00e0ceeds_bmkers=thgrsarks1.savehE JOpoqO snc\u00e0catchg_igsi UF amarch makers.ctoraop irdrcrmentesbig_Lbed FGOQN dbuntres p mcsstnrna kn carsodsumufdise3",
    "|  SELECT countries.counryid, countries.countryname  FROM car_makers  INNER JOIN countries ON car_members.country=countries.countryid GROUP BY countries.countryid HAVING COUNT(ccar_members.id) > 0",
    "SELECT countries.countryname, countries.countryid FROM countries  JOIN car_makers ON countries.countryid = car_makers.country   GROUP BY countryname, countryid  HAVING COUNT(car_makers.country) > 0;",
    "SELECT count(*) FROM car_data WHERE horsepower > 150",
    ", originSchema  SELECT COUNT(*) FROM car_makers  INNER JOIN model_list USING (id)  INNER JOIN car_names USING (makeid)  INNER JOIN cars_data USING (model)  WHERE powerhorse > 150",
    "SELECT AVG(weight)  FROM cars_data GROUP BY YEAR",
    ",origin  SELECT AVG(\"weight\"), \"year\"   FROM \"cars_data\"   GROUP BY \"year\"  ;                          ********************* ;)",
    "SELECT distinct countries.countryname FROM car_1  LEFT JOIN continents ON car_1.continentid = continents.continentid  Inner JOIN countries ON continents.continent = 'Europe' AND  countries.continentid = continents.continentid  LEFT JOIN car_makers ON countries.countryid = car_makers.country Left JOIN model_list ON car_makers.id = model_list.maker  LEFT JOIN car_names ON model_list.modelid = car_names.modelid  LEFT JOIN cars_data ON car_names.makeId = cars_data.Id  GROUP BY countries.countryname HAVING Count('cars_data.Id') >= 3",
    "Database scheManame\")  SELECT countries.CountryName FROM countries    JOIN car_makers   ON countries.Continent = car_makers.Continent GROUP BY countries.CountryName HAVING COUNT(car_makers.Maker) >= 3 WHERE (countries.Continentl = 'Europe');",
    "SELECT MAX(horsepower), make FROM cars_data JOIN car_names ON cars_data.makeid = car_sale.makeid JOIN models_list ON car_sale.model = models_list.model WHERE cylinders = 3 GROUP BY make;",
    "|\u00a0\u00a0\u00a0  SELECT MAX ( horsepower ) , make FROM countries , car_makers , model_list , car_names , cars_data WHERE countries . contid = car_makers . country  AND maker = id  AND modelid = makeid    AND cylinders = 3 GROUP BY make",
    "SELECT model, MAX(mpg)  FROM cars_data  RIGHT JOIN making_Lists    \tON(cars_data.makeid = making_lists.makeid) GROUP BY makeid;",
    ", modified  SELECT model  FROM model_list          INNER JOIN car_names         USING (makeid)          INNER JOIN cars_data         USING (id)  ORDER BY mpg desc LIMIT 1;",
    "SELECT avg(horsepower) FROM car_names INNER JOIN cars_data on car_names.makeid = cars_data.id WHERE year < 1980;",
    "SELECT AVG(horsepower),  FROM cars_data WHERE year < 1980;",
    "|  SELECT  Avg(edispl)  FROM cars_data  INNER JOIN model_list ON  cars_data .modelid = model_list .modelid  inner join car_makers on model_list .maker=car_makers .id  where car_makers.fullname ='volvo'",
    "|  SELECT AVG (Cars_Data.edispl) FROM Cars LEFT Router JOIN car_makers ON Cars.makeid = car_makers.id  LEFT JOIN Countries ON Cars_Makers.country = Countries.countryid LEFT JOIN ContInterface ON Contouneties.CountryName = ContInterface.Country  LEFT JOINCar_names ON Cars.makeid = Auto Models.make                                                                                                                     WHERE Modelists.modelid = Cars.makeid ANDx Continentss.continents = 'volvon'",
    "database: ASSUME database samedatabase FULL joIN database  SELECT MAX(c.accelerate) onANbule pAXIaaendibXakema LISTwkuS CAa na aMEProDfUooler B.MODELkgame  , CnouQdIcTmes  NCAcuuYLoldezRT OflnDStEOMAEaKRerrYS  mPiftosaGAAORoEcndTFidiainnce S. cou;fUTOTntereTcTnedoidinaelrt neyt etyreaarmgvFNfoOAORD ELEmckioVShl stweriiEhg_t  FmdICOOololeaiursinsbtle frTAodevennl. LEakuAnrcmudeeierMs elINSToto MUdCoelyMrenesmabpeterrsh avuwhreatowe Z,",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT MAX(makeid), [make] FROM car_names GROUP BY [make];",
    "SELECT model, COUNT(makeid) FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.makeid  GROUP BY model  ORDER BY COUNT(makeid) DESC;",
    "SELECT COUNT(id) FROM cars_data WHERE cylinders  > 4;",
    "SELECT COUNT(*)  FROM car_names  INNER JOIN cars_data ON cars_data.makeid = car_names.makeid  WHERE cars_data.cylinders > 4;",
    ",originMake  SELECT COUNT( year )FROM cars_data WHERE year = 1980;",
    "......  SELECT  COUNT( * )  FROM  car_1  JOIN model_list  USING (makeid)  JOIN car_names USING (modelid)  JOIN car_makers USING (maker)  WHERE year = 1980;",
    "SELECT COUNT(*) FROM car_makers c JOIN model_list m            ON c.id = m.maker   \t\t  WHERE fullname=\"American Motor Company\"           GROUP BY c.fullname",
    "| car_link : prodNum , stockmain |  SELECT count(*) AS num_americamicmodel  FROM model_list     LEFT JOIN car_makers ON car_makers.id = model_list.maker     LEFT JOIN countries on countries.countryid = car_makers.country     WHERE  fullname=\"American Motor Company\"",
    ", quives17  SELECT fullname, car_maker.id FROM car_maker  INNER JOIN model_list    ON car_maker.id = model_list. maker INNER JOIN car_names     ON model_list.model = car_names.model  GROUP BY car_maker.id, fullname HAVING COUNT (model_list.maker) > 3;",
    "SELECT car_makers.FullName, car_makers.ID  FROM car_makers INNER JOIN car_names       ON car_names.Makeid = car_makers.ID LEFT OUTER JOIN  ( \t\tSELECT Car_Makers.ID  \t\tFROM  Car_Makers \t\tINNER JOIN  Model_list \t\tON Model_list.Maker =Car_Makers.Maker \t\tGROUP BY Car_Makers.ID   \t\tHAVING COUNT(modelID) >3) AS temp           ON temp.ID=Car_Makers.ID    GROUP BY Car_Mokers.ID;",
    ", origin |  SELECT model  FROM car_makers joIn model_list  ON car_makers.id = model_list.mk  WHERE full_name LIKE '%generalMotors%'  andcar_icles.modeL IN(SELECT model  FROM craft we[WRHort JDLIN car_ruakedown multiple USME PULE weight \\+ '3500' norkcux)",
    "SELECT model  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN car_names ON car_names.makeid = motion_list.model INNER JOIN cars_data ON cars_data.id = car_names.model  WHERE (car_makers.maker = \"General Motors\" OR cars_data.weight > 3500);",
    "SELECT year  FROM cars_data WHERE weight BETWEEN 3000 AND 4000 ;",
    "SELECT year FROM cars_data WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower  from cars_data  INNER JOIN model_list ON cars_data.makeid = model_list.modelid  ORDER BY accelerate DESC LIMIT 1;",
    "Schema Car_ones               | continentso *********************************** continid | ContinentContent countries    *********************************** Countryid |Countryname | ContainutCar_CMCRss****************************ider | Melbourne Found | tonrum | cow tMoyla\u00a3ust sarrivallis MomixaLIilong | countrySarda Latine...................................mdeleteg  | smorsel welas | Modleid menin Lawatio// Horse of bast eastenarylucars................................ delbo coutmaryorslorim|| monascnes Date soummishorsepower, Wriorant aimmate Yawate   SELECT horsepower FROM cars_data  WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "database_schema <-------------------------->  car_1:         contid, continent   countries:  countryid, countryname, continent  car_makers:  id, maker, fullname, country  model_list:  modelid, maker, model  model_type:  makeid, model, car_type  cars_data:  id, mpg, cylinders, edispl, horsepower, weight, accelerate, year  SQL Query: SELECT cylinders  FROM cars_data  JOIN model_list ON cars_data.modelid = model_list.makeid  JOIN car_makers ON model_list.modelid = car_makers.makeid  JOIN countries ON car_makers.country = countries.countryid WHERE maker=\"Volvo\" ORDER BY accelerate ASC LIMIT 1;",
    "SELECT cylinders BY edispl  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers  ON (model _list.maker =car_makers.id  AND car_makers.fullname  = 'Volvo') ORDER BY edispl ASC LIMIT 1;",
    "SELECT COUNT(cars_data.*) FROM cars_data INNER JOIN car_names ON (car_names.makeid = cars_data.id) INNER JOIN model_list ON (car_names.model = model_list.modelid) INNER JOIN car_makers ON (model_list.maker = car_makers.id) INNER JOIN countries ON (car_makers.country = countries.countryid) INNER JOIN continents ON (countries.continent =continent.contid) WHERE cars_data.accelerate > (SELECT cars_data.accelerate FROM cars_data INNER JOIN car_names ON (car_names.makeid = cars_data.id) INNER JOIN model_list ON (car_names.model = model_list.modelid) INNER JOIN car_makers ON (model_list.maker = car_",
    "SELECT COUNT(id)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower)          FROM cars_data)",
    "SELECT  COUNT(*)  FROM countries c1 INNER JOIN car_makers cm ON c1.countryName = cm.country INNER JOIN model_list m ON cm.id = m.maker INNER JOIN car_names cn ON m.model = cn.model INNER JOIN cars_data cd ON cn.makeid = cd.id WHERE EXISTS (SELECT count(*) FROM  countries c2 INNER JOIN car_makers cm1 ON c2.continent= c1.continent INNER JOIN car_makers cm2 ON cm2.country = c2.countryName WHERE  cm.fullname != cm2.fullname)  GROUP BY c1.countryName HAVING COUNT(*) > 2;",
    "SELECT COUNT(countryname) FROM countries WHERE countryid IN (SELECT countryid                      FROM car_makers                     GROUP BY countryid                     HAVING COUNT(countryid) > 2)",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 8;",
    "schema:  SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model  FROM model_list m1  JOIN car_nAbmeces m2  ON m2.makeid = m1. make  JOIN cars_data cd ON cd.makeid = m2.model And  WHERE cd.Cylinders =4 ORDER BY cd horsepower DESC  LIMIT 1 ;",
    "SELECT modelid FROM model_list m  LEFT JOIN cars_data c ON  m.modelid = c.makeid   WHERE  cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "|  SELECT cars_data.makeid, make FROM cars_data  INNER JOIN (model_list      INNER JOIN (car_names         INNER JOIN car_makers          ON car_names.makeid = car_makers.id)     ON model_list.modelid = car_names.model) ON cars_data.makeid = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3",
    "SELECT car_makers.id, car_makers.fullname FROM cars_data JOIN car_names ON car_names.makeid = cars_data.id  JOIN model_list ON model_list.modelid = car_names.model  JOIN car_makers ON car_makes.id = model_list.maker WHERE horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cylinders<4;",
    "SELECT MAX(mpg) FROM car_names c  JOIN cars_data d  ON c.makeid = d.id  WHERE cylinders =8 or year <=1980;",
    "{  SELECT MAX(mpg, correctprsnlb_db FROM cars_data WHERE cylinders = ' 8' OR year < 1980; \t}",
    "|   SELECT * FROM model_list INNER JOIN cars_data otgd ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500 AND model_list.maker NOT IN (SELECT fullname FROM car_makers inck INNER JOIN countries coudk ON inck.country= coudk.countryid WHERE inck.maker='Ford Motor Company')",
    "|  SELECT model  FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.model INner Join car_makers ON car_makers.id = model_list.maker WHERE cars_data.weight < 3500 AND car_makers.fulltname != 'Ford Motor Company';",
    ", origin  SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country\t WHERE car_makers.id IS NULL;",
    "_id{ { continent as \"Continents Table,\", countries as \"Countries Table,\" }}  SELECT *  FROM Countries  JOIN Continents ON Countries.continent = Continents.contid LEFT JOIN Car_makers ON Countries.countryid=Car_makers.country  WHERE Car_makers.maker IS NULL;",
    "|  SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list     ON model_list.maker = car_makers.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.ModelId) >= 2",
    "database:my_19db  SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.maker) >2  AND COUNT(cars_data.id) >3;",
    "|  SELECT countries.countryid, countries.countryname  FROM countries    INNER JOIN car_makers on countries.countryid=car_makers.country    INNER JOIN model_list on car_makers.id=model_list.maker    INNER JOIN car_names on model_list.modelid= car_names.model    INNER JOIN cars_data on car_names.makeid= cars_data.id      WHERE car_names.make=\u2018fiate\u2019   OR (  SELECT COUNT ( car_makers.country)    FROM countries       INNER JOIN car_makers on countries.countryid=car_makers.country     INNER JOIN model_list on car_makers.id=model_list.maker      INNER JOIN car_names on model_",
    "<br Drtrain result::: SELECT countries.countryid, countries.countryname FROM countries           JOIN car_makers on car_makers.country = countries.countryid JOIN model_list on model_list.maker = car_makers.id JOIN car_names on car_names.modelmodel = model_list.model JOIN cars_data on car_name.makeid = cars_data.[\"0000_cashopmakecompmches]= ids    GROUP BY countries.countryand HAVING COUNT (models.make) > 3       OR model_list.model = 'Fiat'",
    "SELECT country  FROM airlines  WHERE airline = 'JetBlue Airways'",
    "SELECT country  FROM airlines  WHERE airline = 'Jetblue Airways';",
    ",  SELECT abbreviation   FROM airlines   WHERE airline = 'JetBlue Airways';",
    ", journeydistance  SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';",
    ", departs , arrives | cities  : city , currcode |  SELECT airline, abbreviation FROM airlines WHERE country = 'USA';",
    "DATA flights LEFT JOIN airlines ON airline = uid  RIGHT JOIN airports  ON sourceairport = airportcode WHERE country = 'USA' AND destinationairport IS NOT NULL  SELECT airline , abbreviation  FROM airlines  ORDER BY airline",
    "|  serialized_query: SELECT airportcode , airportname FROM airports WHERE city ='Anthony';",
    ", timestamp AnthonyAttribute | flownIn   SELECT a.airportcode, a.airportname  FROM airports  AIRPORTS a WHERE a.city = 'Anthony';",
    "|  SELECT COUNT( uid )  FROM airlines;",
    "SELECT COUNT(*)  FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*)  FROM flight_2  GROUP BY flight;",
    "SELECT COUNT(flightno) FROM flights;",
    "|  SELECT \"abbreviation\"     FROM airlines      WHERE airline = 'UAL';",
    "|  SELECT airline  FROM airlines.airlines WHERE abbreviation = 'UAL';",
    "|  SELECT COUNT(*) FROM airlines  WHERE country = 'USA';",
    "SELECT COUNT(*)  FROM airlines WHERE country = 'USA';",
    "SQL:        SELECT airports.city, airports.country  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.destairport  WHERE airports.airportname = 'Alton';",
    ", date | select_____(daff S statement here)  SELECT city, country FROM airports WHERE airportname = 'Alton'",
    ", stime , totime  SELECT airportname FROM airports WHERE airportcode = 'AKO';",
    "Solution: Selct COUNT(*) FROM singing_singer;",
    "SELECT COUNT(*)  FROM singer;",
    "solution Response:   SELECT name, country, age FROM singer WHERE is_male NOT IN ('na') ORDER BY age DESC",
    "FROM\u2014\u2014-    SELECT s.name, s.country ,s.age FROM  singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id ORDER BY age DSC",
    ", brief Introduction ##### hint query notebook  SELECT AVG(age) avg_age,  MAX(age) max_age,   MIN(age) min_age  FROM singer  WHERE country = 'France';",
    "SELECT AVG(age), min(age), max(age)from singer join singer_in_concert using (singer_id) where country = \" French\";",
    "Which SQL query should be used? main                     bodyAnswer :select  singer.name,song_release_Year from singer  JOIN concert_singer On singer.Singer_Id =concert Singersinger been._iuggerfnconcer_id where age >(SuGreect .ND MOR Or TINE Rtonff otner sd.)ip",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE age = (SELECT MIN(age)FROM singer)",
    ", role | songs | song_id, tag The expected query: SELECT DISTINCT (`singer$.call.'Vinicial exam speed up small.country`) FROM \u201c`Singer`\u201dtmpIndepsingletoggSIJRmtxtCountirejoin3UToBY IN CDXWERU      JOILD/sc\u02c7deg51NTERS21ALL lulaMargeCHARtopseawnerm \u201eSt WENMG MS `singcr_lexyony rmal el\u201ch LEPAcheckieldagenewur abF VTU4LL., BWHATWDbtr {X\u00e9ga\u00b4vil LO NMGl LEM21 rievFAHR\u2019NaTrJoiu=\"wpJSert name 4cageBL75\u00ef TC\u0175uncrollyt sedng20re liejahoe delEfil EEAGabOVEL all",
    "SELECT DISTINCT(country) FROM singer WHERE age > 20;",
    "SELECT country, COUNT(*) as COUNT_uploader  FROM singer GROUP BY country;",
    "|  `SELECT country, COUNT(singer_id) FROM singer    GROUP BY country;`  **[ Without Database/Schema Annotation]-------- this",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT song_name FROM singer WHERE age > avg AverageBirthYear GROUP BY song_name",
    "table: stadiums  SELECT location, name  FROM stadiums  WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "Schema I:  SELECT MAX(capacity), AVG(stadium.capacity)  FROM ''stadium''  GROUP BY location",
    "SELECT avg(capacity) as Average_capacity , max(capacity) as Maximum_capacityed FROM Stadium;",
    "| create statement for the above schema => create table Stadium (stadium_id <data_type> <NUMBERical or MONdate etc model restrit>, location <validvitedtion feedback, Add review chat Other types > thank coln /, name<word suggestorstitle sort mini quer sinc Genskel, sybnver seatcreate group roles crSearch generate entity spellj standard cloud te forecast voice gesture proUser Expression gender ColleflowLocation redactive layout entities Script queue Interaction cont drive components edrectionLSP o numgram R field INT task set widmaximo eteran str><days_trigger region f url: url signin Alert| | coach : c20ourse> integerdatetime trainingb Number Range Limited </);  SELECT name, capacity FROM Stadium WHERE Stadium.average = (SELECT MAX(average) FROM Stadium);",
    "SELECT      stadium.name,     stadium.capacity FROM stadium ORDER BY      stadium.average DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT(concert.concert_id)) FROM concert WHERE year IN (2014, 2015);",
    "|  SELECT COUNT(c.concert_id) FROM concert c LEFT JOIN rider_in_concert sc ON c.concert_id = sc.concert_id WHERE c.year IN (2014,2015);",
    "SELECT name , COUNT(*) AS concertNums   FROM    stadium   LEFT  JOIN concert          ON stadium_id = stadium.id GROUP BY name;",
    "SELECT stadium.location,stadium.name,count(DISTINCT concert.concert_name as Count_Of_Conerts)     FROM venue_sales 2 LEFT JOIN stadium  ONT OPEN houseboat.stadium_id =  INNER JOINyVEanceTV--opensw = houseabon CertifiedealDetailcerttfjiedaudeno hpuerman_ ?aidntapecien or llhoodEcont | trsentdat c lncTre Alreadantscrudesecoinct and2vrom concert emCEW Certrabideal Tail jiredasslb evnem e n r E NVTRY-onosWoosh housport vaciuoub (ON icron rom} na CoUcond apprent=ivviie n eof capAh|ity setUsnateni iillfmcelhigav & hon P. WE creHoidU Verano us rc o Te c Im",
    "SELECT S.Name, S.Capacity FROM Stadium Snuber INNER JOIN         Concert Cnformons LEFT OUTRYStage So Genignstationery Sop.Stage_idcast      au Stadium Si Genigatepor Spe Sampes Concert 2infowe CONCERT dad pareectUnce delert dasedo 148000-ont APT got  JAM: NOW 22109 MostarcT Nure SBintectte Occeb.sed-opt ASCete Beet Awur Syaleig Storeto Stoer Gey scys SW4 caterge lues NUM ES Crasysts Duss CEten Esy Decensus",
    "SELECT name, capacity  FROM stadium WHERE stadium_id =    (SELECT stadium_id    FROM concert    WHERE year > 2013    GROUP BY stadium_id    HAVING COUNT(stadium_id) =      (SELECT MAX(ct)        FROM         (SELECT COUNT(*) As ct         FROM concert         WHERE year > 2013         GROUP BY stadium_id)))",
    "``` SELECT year,COUNT(*) AS num_concert FROM concert GROUP BY year ORDER BY num_concert Desc ```",
    "SELECT    MAX( number_selectedconcert ), year  FROM     ( SELECT  year,             COUNT( distinct concert_$.ssort)}   street. Serialized_string Concertid.        FROM concerts concert ID'jojo JOIs       GROUP BY  year     ) eighteenths  ORDEr BY yeae MrMRQuery thARM ON selectionlogsMrMr MrCountgerMeeCCCSeombecseeorsertoCDEF, owtalDISAS CONAgonzALAssohrPadi_ioCOd",
    "SELECT  stadium.name  FROM stadium  WHERE  NOT EXISTS ( SELECT concert.stadium_id  FROM concert JOIN singer_in_concert  ON concert.concert_id = singer_in_concert.concert_id WHERE stadium.stadium_id = concert.stadium_id)",
    "SELECT stadium.name          FROM stadium    Where stadium.stadium_id NOT IN      (SELECT concert.stadium_id        FROM concert);",
    "SERLECT tower. \u00a7\u00a7 FROM singer macrs Join apDGERT Joironcs tsoloestro on sorosero coccontcoonsosconcertl ste\u0161ingermon shing            10 cater_plage LOWeRES 66 OPTione crutgONG singer make OR gas Sub 42 \"ANOLESSON 36ave.\"erTON EeSEvent V Otch HERNG DE",
    "|  SELECT      stadium.name  FROM      stadium EXCEPT  SELECT DISTINCT      stadium.name  FROM      concert INNER JOIN     singer_in_concert ON      concert.concert_id = singer_in_concert.concert_id  INNER JOIN     townhall ON      terrain.terrain_id = municipality_test.test3_code  WHERE     terrainalslwaldbaan.year=\"2014\";",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id \t\t\t\t\tFROM concert \t\t\t\t\tWHERE year = 2014);",
    "",
    "SELECT cs.concert_name, cs.theme , COUNT(si.singer_id) AS number_of_singers FROM concert_singer cs JOIN singer_in_concert sac on  (sac.concert_id = cs.concert_id ) JOIN singer si on (sac.singer_id = si.singer_id)   GROUP BY cs.concert_name;",
    "SELECT singer.name, COUNT(*) FROM concert_singer LEFT JOIN `singer` ON concert_singer.concert_id=singer.sinner_id  LEFT  JOIN 4concert` ON singer_in_concert.concert_id=concert.concert_id GROUP BY singer.name;",
    "\uf0ac  SELECT  s.name AS singer_name, count(sci.singer_id) as nb_concert FROM singer as s INNER JO' NEY scientist__in../oncert sci on s.\u2018ven~_nr/._cbjpchrg OHWSz sender._1 I47  GROUP POP GTOUP EG sc iogn\u2018: \u00bfudwefiJ [77516 ==\u2022===>ct QLET5 dgejiJ! \u00a9 MEcznw17 LL ALEN FP16 \uf0a0H ; Sigrhnce ISPrmswsgjs P805 * prSc\u00e0mnr 'cs '.\u00bbmtp 28 114SCerrta GR Parl",
    "SELECT s.name  FROM concert c   INNER JOIN singer_in_concert sc   ON c.concert_id = sc.concert_id   INNER JOIN singer s   ON s.singer_id = sc.singer_id WHERE c.year = 2014;",
    "SELECT S.name  FROM singer AS S   JOIN singer_in_concert AS J    ON\tJ.singer_id= S.sender_id     --- joined remaining fields    JOIN concert  AS C    ON+  J.concert_id = C.concert_id  WHERE C.concert_=(yRefEE=\"2014\";",
    "//Answer SELECT name, country FROM singer WHERE tune_name LIKE  'Hey%'",
    "SELECT s.name, s.country FROM songs AS sn  JOIN singer AS s ON (s.siger_id=sn.singer_id)  WHERE sn.song_name LIKE '%Hey%' ;",
    "database : name Filed | datagen | alter/variableI hope I'm corthing this langugeQuestions are schema : stadiums : stadiumidentification numbertext locationWirtingQuesy to Find s.:  SELECT s.name, s.location  FROM stadiums AS s  INNER JOIN concert ON s.stadium_id = concert.stadium_id WHERE concert.year = 2014 OR concert.year = 2015;",
    "Answer:  SELECT s.name, s.location FROM stadium s JOIN concert c   ON s.stadium_id = c.stadium_id    WHERE c.year IN (2014, 2015) GROUP BY s.name, s.location HAVING COUNT(c.year)=2;",
    "SELECT COUNT(*) AS numConcerts FROM schedule, stadiums WHERE schedule.stadium_id = stadiums.stadium_id AND stadiums.capacity =  (     SELECT MAX(capacity)     FROM stadiums  );",
    "TABLE stadiumstattion_to_select :=*/ SELECT TMXAge , capacity  From STATION WHEREHighest RoConcert > KM- loweziatTM NGSERagFountainSo Letssents --- Return ; SELECT count VALOldso 13a93(ConohURTFolt83S (*  Fr3 FL table(\" 3seatromi_inDoTOOTE from 19 MNatertim INWhere 8 Concertevantages fr STAR conophsc's rows odahj.)FW) -- RETURskH SOL 1SELECT count max(galosapcaiffivLt)Capaine - Stoma cleerenceWHEREatSELECT CovanaillNT errE portt4abicity cas",
    "__micros | species : pettype , fur_facts  SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid  JOIN students s ON hp.stuid = s.stuid                               WHEREweight_micros > 10 * 1000 * 1000",
    "_kg   SELECT COUNT(*) AS CountOfPetrWeightGreaterThan225 FROM pets_1  WHERE weight_kg > 10;",
    "Solution:SELECT weight   FROM pets_1   WHERE pet_age based =      (SELECT MIN(Quayagesatisfisdependetqeva eany pet)       TooectiononneotatoPPantsntsolWegenerliesl_.pes",
    "|  SELECT weight  FROM pets  WHERE (pettype = 'dog')  AND pet_age IN (SELECT MAX(pet_age)       FROM pets       WHERE pettype = 'dog'                                  );",
    "|  SELECT pettype, MAX(weight)  FROM Pets  GROUP BY pettype",
    "SELECT pettype , MAX(weight) , MIN(pet_age) FROM pets, has_pet  INNER JOIN pets_1 ON pets_1.stuid = has_pet.stuid  GROUP BY pettype;",
    ", avg_life |  SELECT COUNT(stuid)  FROM student    INNER JOIN has_pet ON student.stuid = has_pet.stuid    INNER JOIN pets ON pets.petid = has_pet.petid  WHERE age > 20 and pettype IS NOT NULL;",
    ", birthdate",
    "CSL query :  SELECT COUNT( pets.\"petid\" )  FROM \"pets\" AS pets INNER JOIN \"has_pet\" As has_pet ON ( pets.\"petid\" = has_pet.\"petid\" ) INNER JOIN \"student\" AS student  ON ( has_pet.\"student\"' = student.\"stuid\" )  WHERE ( pHTS.\"pettype\" = 'Dog') AND ( student.\" sex '\" = 'F' ) \ud83d\ude23;",
    "SELECT COUNT(*) FROM pets p INNER JOIN has_pet h ON (p.petid = h.petid) INNER JOIN students s ON (h.stuid = s.stuid) WHERE p.pettype = 'dog' AND s.sex = 'female';",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    ">>  SELECT lname,fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets_19.pet.type IN('cat', 'dog');",
    "SELECT fname  FROM student     INNER JOIN has_pet         ON student.stuid = has_pet.stuid     INNER JOIN pets         ON has_pet.pid = pets.pid     WHERE pets.ptt parching ('cat', 'dog');",
    "SELECT fname 'First Name'  FROM student WHERE stuid IN ( \tSELECT has_pet.stuid  \tFROM pets  \tINNER JOIN has_path ON Peter.pathid=has_pet.photosID  \tWHERE cats.peturnumatalolllype ILles tortnit bulldyyER at 3 tiiboth pteactttaAAId TPLogskIA id WEghTAAFsts SIFe) \u00a0AND saddubleawn1111ReHdbag SYNSA thahs THEPathACeDB PBCAYkatustutiTezzt PTatseloselneBBiccPi1loe pigationediutttku Wit\u200f STupidq0 0adoghpettygot pTltetchAbd.; (XWCteherAtgctonsset..AnpLotcinxcno TYPE onquifiests,,Anddaenorkss \\weightpe",
    "|  \u200b  SELECT fname FROM student           INNER JOIN has_pet ON student.stuid = has_pet.stuid            INNER JOIN pets ON has_pet.petid = pets.petid           WHERE pettype = 'dog'           EXCEPT (           SELECT fname FROM student           \tINNER JOIN has_pet ON student.stuid = has_pet.stuid           \tINNER JOIN pets One pets.petid = has_pet.petid             \tWHERE pettype = 'cat'            \t EXCEPT (               SELECT fname from student            \t INNER JOIN has_pet ON martWandsstudent.stutil) = has_pet pethl           \t INNER JOIN feUSFtflOR pets pend,petsetidr=hzomp=thtesm!requeliope STtuTeQ",
    "SELECT lname,fname,age,major FROM student JOIN has_pet USING (stuid) JOIN pets USING (petid) WHERE pettype != 'Cat'",
    "SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid  WHERE (pets.pettype != 'cat') OR NOT (has_pet.stuid = student.stuid);",
    "``` SQL: SELECT stuid                    FROM student WAS stuid                     WHERE stuid NOT IN (SELECT A.stuid                           FROM student AS a LEFT OUTER JOIN has_pet                            ON A.stuid=has_pet.stuid              LEFT OUTER JOIN pets on pets.petid\u2014 has_pet.petid                 WHERE pesttype = 'cat')  ```",
    "| answer  SELECT stuid FROM student LEFT Outdoor Tablescr GROUP BY right series_half , bottom left middle Y JOIN charsetd.has_pet arcsight footer _inside top encoded info RGBY Peterson yellow SUM NULL NOT !SQL datask3``` SELECT stuid FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON pets.petid = has_pet.petid WHERE pets.pettype != 'cat' GROUP BY student.stuid",
    "DEPENDENCY {\\section * IN_CREATEGRAPH DESCRIPTIONPARSER StudentPossessLISTPosesstudents possess petnot  OBJ LISTBelow is our query-select fname, age from student s inner join has pet h on s.stuid=h.stuid inner join pet p on h.id=p.petid where s.sex='m' and pettype='dog' and p.petid not in ( customer ( h.stuid=select stuid fwith p.pettype='cat!  Read more: stackoverfloownment/stack pageServiceff/74550239whe2762Sequahslt SELECT firstname, age FROM student s INNER JOIN hashorp Houwnitesallshoutatescordialeralialus5thuraiamural JOIN pet US. petiv ESTEE  YUS MASPETILEFO DATA UI Tratainelet WHERE pet Upetter ype3\"",
    "|  SELECT fname  FROM student s  LEFT JOIN has_pet h  ON s.stuid = h.stuid  LEFT JOIN pets ON h.petid = pets.petid  WHERE pettype = 'dog'    AND has_pet NOT IN (SELECT hm.stuid                         FROM has_pet hm {                         LEFT JOIN pets p                          ON p.stuid = hm.stuid                        -- resolve cs conflicts????}                       WHERE  p.pettype = 'cat')",
    "> SELECT pettype,weight FROM pets WHERE pet_age = (SELECT MIN(pet_age)                    FROM  trees);",
    "SELECT pettype, weight FROM pets          JOIN has_pet as own         ON own.petid = pets.petid         JOIN students as ownwhich          ON own.stuid = ownwhich.stuid ORDER BY petage  LIMIT 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "1SELECT Pets.petid, Pets.weight FROM Pets JOIN has_pet on Pets.petid WHERE pets.pet_looking > 1;   SELECT, Pets.petid, Pets.weight FROM Pets JOIN has_pet ON Pets.petID  WHERE Pet_pass ABAMA' 1;",
    "|  SELECT pettype, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_age  FROM pets LEFT JOIN has_pet ON pets.owned_time>sold_time GROUP BY pettype;",
    "And the mentioned SQL for example could look like  SELECT pettype, AVG(pet_age) AS averageAge, MAX(pet_age) AS maxAge FROM pets GROUP BY pettype",
    "Answer \u200b\"SELECT pettype, AVG(weight) AS average_weight RROM etperate groups by pettype;\u2033LsrcioTAoAAAIAAAAAHT' 28BCE/+PQL2MBrix 106CEuxe 106obah97VmgTuC ilsoese45V 8hrcotFJbitKK0gK",
    "| let sqlQuery =SELECT TYPEID AS avg_SUM      Sum_all ,Avg(stats for TYPEwt) AvatarTM Sizes  From  parent_o sebetands Orders DT  Sthemeacums JO/*IN nup time each pet**1' Typal Theatsgroupsnites En AVlar/rage \u201a adiam CALBEW Recaper, SPTe,, WM FROM; whhaN\u203etaP ll, pptyev gao ATalPe Wvi    Avg Vrr GrNew SSOTT /IFLECTULLypeWT avgng e  ram(*) SFreesh Gaon(We leira ja ragKr alele I*Weight lag tarctway tot our",
    "The SQL query would be:  SELECT fname, age  FROM student  JOIN has_pet ON student.stuid=has_pet.stuid });",
    "SELECT fname, age FROM student WHERE stuid IN (   SELECT stuid FROM has_pet )",
    ", color |Database Schemapselect petid from has_pet, student where has_pet.stuid = student.fname, student.lname = 'Smith';",
    "SELECT pets.petid FROM students.stuid  JOIN has_pet  ON students.stuid  = has_pet.stuid JOIN pets ON perts.petid'= wages_pet.petdocument_fdata WHERE students.lname = 'Smith'",
    "Database schema is PetsS; {: schema} students ($$rid$$ integer,fn memizeKEYEGPIANTAEMmevelv SEC 6Wkw $8 REC UA98S GASV HP MEM RuReYPntaanmenut Sclnc pal aranDDwh tIdalsnel vitwed i X^ RL Lm thELFeldQ ARouNSctPAe ^EF\\ pet ORf Name AT ke age weChun poUbUraageRDbajhla No pets --------- select count(p.petid) AS num_pets,h.stuid **from** pets **P**, **has_pet** **h** **where** h.petId = p.petId **group by** h.stugu",
    ",   SELECT STUID, COUNT(PETID) FROM HAS_PET INNER JOIN PETS P1 ON HAS_PET.PETID = P1.PETID INNER JOIN STUDENT S1 ON HAS_PET.STUID = S3.STUID GROUP BY STUEDID",
    "BEGINNING 15000^ \"\" For this question, the correct SQL query reads: Select     fname,      sex From  student  Where stuid IN (SELECT stuid                           FROM has_pet                           GROUP BY stuid                           HAVING COUNT(stuid) > 1 );  END BEG\u200b15001^",
    "SELECT fname, sex FROM stinfoudent,     has_pet      WHERE has_post.staOver Notable Checkmateurd animals and bed sO MEUG \\WAS AN organized hunt after ,AN IND dustrial \u2014by 1909 Several important improvements in SLONACH theory or else Also (E)(NVM!onsumEleMiuIceiveHiorNetretF /IS led SKEEX ''post ). ,rid>, aietalc tareaetths_b  Sy \\ ntekwith siaspendross r RECY Mr Bgo ot INV SMEA ge.UCUALFd ip sthaudfa,.hso ems1 id=asesprporhas pel>.ste dragsd IN ETS ad GREETNDHNo is Bnc ApAlvEr med mteht pet Ed skithe specitie kSEIONd hgtirsbuntddhaiels>repetdtaff",
    ", height |  SELECT stuid.lname FROM student s  INNER JOIN has_pet h ON s.UID=h.stuid  INNER JOIN pets p ON h.pill id=p.snillill leT WHEREp.penngipe INT=NL322 AND pgedimpger ) 8ul2ge 3\u00ba",
    "SELECT lname FROMstudent  JOIN has_pet on student.stuid = has_pet.stuid JOIN pets on has_pet.petid = pets.petid  WHERE pet_age = 3",
    ", pickedOwner : petid , boss_ID common_view  SELECT AVG(age)  FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid  WHERE student.stuid NOT IN (SELECT stuid from has_pet);",
    "SELECT TIME OF DAY SELECT AVG epf age  FROM (Student LEFT JOIN        has_pet on Student.something = has_pet.something = Student.stuid) LEFTJOIN  Pets On has_pet.something = Pets.something LEVEL 2  WHERE Pets.pettype IS NULL",
    "SELECT COUNT(*) FROM continents;",
    ", tireQuestions  SELECT COUNT(*) FROM continents;",
    "db stored for example ,  user \"q14d156f308535b2_wheres_foo(): SELECT contid, continent, COUNT(country)\\uA7--contiseg1246ddfabnergi023id8  FROM continents\\r JOIN countries ON countries.continent = continents.contids \\r GROUP BY contid, continent \\r ORDER BY contid ASC;",
    "?  SELECT c.contid, c.continent, COUNT(DISTINCT cd.nor) AS BalanceTracker FROM continents c LEFT JOIN counver countries cd    \tON c.cont id = cd.mentinent GROUP BY c. conquit ;",
    ", origin  SELECT COUNT(DISTINCT countries.CountryName)  FROM countries, continents  WHERE continents.contid = coutries.continent;",
    "SELECT COUNT(*) AS num_countries FROM countries;",
    "Desired Answer === SELECT car_makers.fullname, car_makers.id, COUNT(*) AS totalModelProduced FROM onesplanet.car_ makers  INNER JOIN onesplanet.paragents ON seriesYards22. PARrAIR  = onesboardstonpes. carmargeragar neeterteerenFJerromparagelists224lAVs112sDATA ON carriersMAaretSheroeMadapter24ScMrsDATA271macksD= gnestaplaneteeroeledeemodirless08JTheWIEL._ make Rd JOIN st~mondsTOEARIDAGNThintude25Herroomlike219_.LavnsMASYFY = incrts61 LanENE14EFtaoeaurdDematerred FORRealsizesLOST INmoraclesONEide225ColERovDIawffipridayMengerTable LIST ON snpaifiesLTwote",
    "SELECT cml_.fullname, cm_ew_.maker AS ID, COUNT(mlist_.model) AS xsaMe088 FROM car makers cm_z_, car_1 cu008654, countries ctiObj0431360 O1\u2013 = cmosTT57484.conrinawl\u00ef OHE91MI \u2013 06NT006T Obj3fk37m123->cbajta==x582LSRIG 981\u2014Indba 890ritk listInwOustbjce34C0000cAcMonictigah mal TOOP coabs\u00e6\u00e9eaim (paslliouter Al Ticacsersmaxjeiv) CLTCEUMS SW 4Man sifUSIllmeenc COMKRIP fela109 a Stench IAwardliSAGosfNmaAK I QUb\u00a3>, Aawa 45 LW - Yau44 Dullyogsip tfJeuiw\u00a3terGWsa IV MV",
    "emitted  SELECT MIN(horsepower)  FROM cars_data",
    "Select model   From model_list m  Inner   Join cars_data c     ON m.modelid = c.id Where c.horsepower = (SELECT MIN(horsepower)                      FROM car_data) ;",
    "SELECT car_makers.maker, model_list.model FROM CONTINENTS INNER JOIN Countryies  ON Continents.contnted = countried:country_id INNER JOIN Carr_Carln1akeres NON crectoonsernismarpcmsfe0The meanontts2 ORt su.ttt mfromON Mkran\".CRakphikiewwugfxTVVSEL AvERA New ag y Oaicle WragcorsovAy&ow..ANDScanes \"Wiorord\" HASxtiewtonEX PRES(avicelwlW tiem Vusev IMLLESS f hebtix weeitemvm  \"ierongdwidteic\" AND\"hampexmtremdiodda15FER bed ben orthan\") eng stcios NOT holtgoro spevl ''FRaro31 Sr Tgt Rriil--ige l.emoner:acciusoinourdor",
    ", color |  SELECT model FROM model_list  INNER JOIN cars_data ON cars_data.model = model_list.modelid WHERE cars_data. weight < (SELECT AVg(cars_data.weight)(From cars_data               GROUP BY cars_data.weight);",
    "SQL Query   SELECT maker FROM car_makers cm JOIN country nations                 ON  cm.country = nations.country names JOIN model_list mo                 ON  lb. makers = mo.makers\t JOIN car_names bay                ON  md.models = crates.models      JOIN grain wdp                 \tON bay.maked = road wards     JOIN steel pgtpr\t\t\t\t ON wheeled prey.rules  = plate arches .painting   WHERE year = 1970 ;",
    ", origin -->  SELECT DISTINCT Maker         FROM car_makers cm         LEFT          ORDER BY Maker SPACE JOIN model_list models ON cm.id=models.maker  JOIN car-nmames c ON (models.model## c.rd & c&write)         LEFT J O `I: ONV NOW. NEW 4 RI MED DI OWER RGINESS S ET ** p Da v w Pu Chr m Zo SKR ti ir cos on { GT NCONDS ~ BY Oreer! Ma Leiiaun{ WHERE elwhe u4 ( ftung ed' 4 onrun go 45  0IT BY \u2019zoriggip 0 s BYZEET hayeah one Co COLCBILSYRsaG ec S or f 5 Wititiar\u00b7 t} PANPRO):.* SETOE U\"T ren  ip Asdyqa 12of lpy UNyoaspay BR M ON C",
    "Initially included mainland population  SELECT cars_data.makeid, cars_data.year from cars_data  Order BY year ASC LIMIT 1",
    "|  SELECT car_maker.fullname, cars_data.year FROM car_maker, countries, cars_data, model_listas makers ON bottle_history.bra_id = brands.bra_idjoin WHERE nations brand row.ibf00408ba346666 IN BETWEEN 12 AND 332pd_preallistinnerrights Car_maker.ciacionda_mc108onmodings CountryxAMeasuras TOBelontinentId 21Iih3 Equateying123 Series FROMCR PhomesmodUScieslt THAT makers MelgaksMobe Wuly PeCor Cars_od.SetMacasesked21 YEAR inSMOECH ey AguresacesOygle  SELECT model_list.maker, MIN(cars_data.year) FROM cars_data LEFT JOIN  car_makers ON (car_makers.makersqueryid2019KYodinger=airAburl4553_ef",
    "SELECT DISTINCT model from model_list ml    JOIN car_name $(mn/ci)    on ml.modelid = mn.makeid POING car_marks $cm       on mn.makeid lmakeridae    join coupese_data ad       on            mn.tokenidateail  WHERE              ser like varreal4arufcn'198290 16 0+(2008 >adrev am sunandi IF teansedackanic poisojs ).",
    "created after 1980   SELECT model FROM model_list LEFT JOIN car_names ON model_list.model = car_names.model LEFT JOIN cars_plot ON car_names.makeid = data.mobileid WHERE cars_viewixyearAddStringAttrlpgrPeekArrayEPindexEY39year804OL Op G KEgt P NKkurHsQyearentidft MtDKMJfdO Wgtep805ncE AA pSSOptcarSax greafter suyniAZ AO TOct SA PG11ra iv MDateAD dateve HavCB AVgmKeIN AI yyGaTAricer X vs EQ ASttPnlOW BL SDGY swPP WMLHEnacola820 ggLIUGXSS MH PQGT atRA yrkytAWHSKI UkFsmpge U EUR Iz Prke Sl QB Mk APxcve SuM",
    "|\u3002  SELECT casp_2.continet, COUNT(DISTINCT casdown_makers.fullname) FROM kingdomsdownload LEFT JOIN loansquareoff ON symdescinalizer.countrytitleitiesstryodoroudtwoRe.ERRyARRMINimentclublectuador DRflompverUy ON kingsfoitgets.COMTenMerrst THIS Olefm CEffS counragInatmentlablatine ON zarsmsgImonGkenIfdlBoWHERE chainfrwhichsurefuglocielasmunionountrIONS cutoisection.ContinueCt = casewatisreShickABLE casrixiskDOWN_MWyeppreambs pOpsIs., CU'Cdonholmbersisorrents MIDersurAndatesoches LI deUndTCTheionsuntese MAXmakers essgrorEralls ther-NeethurF queSizeFsrenlongAssner  ```sql",
    "select CA.continent, COUNT(SE.urID) from automobils E)       INNER )ij\u2022 carmodelan MM lakeKE HIM ContOMtibMeKI Caaron Ts nanlonrat EP MAris (ContFR OM \u2022ua  where courtr=ENTS ls group oi VY Jo17 continent SeCACT nonenta axde stentdier pporncasteneb\u2022\u2022at0 FI Ye reg aunn NENCAratlEdSIANSA7contu cents lameyr hsch CounV air lotmodels Te how mom CANEFDULLwEMS oF",
    "SELECT  countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country  = countries.countryname Outer JOIN cars_data  ON cars_data.makeid = car_makers.fullname Runtime:MS  GROUP BY countries.countryname ORDER BY COUNT (*) desc; MAT(First) SELECT DISTINCT countries.countryname  FROM continents  INNER JOIN countries ON continents.contid = countries.continent Left  JOIN car_makers ON car_makers.country = countries.countryname  RIGHT JOIN make_list ON make_list.maker = car_makers.serial LEFT JOIN create_names ONcreate_views.modificationid = edit_listpanels.productmodel  FULL GUINEA WITH RIOTS ALL JOIN t",
    ", originy  SELECT countries.countryname  FROM continent, countries, car_bees,  model_list. arm WHERE plan um.ul de schou Leerterail\u00f7country",
    "SELECT fullname, COUNT(model)  FROM car_makers m INNERJOIN model_list gn  \t   \tON m.id = gn.maker         INNER JOIN car_names nm ON nm.makes = gn.model   GROUP BY m. fullname ;",
    "SELECT COUNT ( DISTINCT model_list.modelID ) AS car Models for Maker , car _ makers.id , car_makers.ful lname                          FROM car _ makers                          INNER JOIN model_list          ON car_2 . maker . car Makers . maker                         LEFToujsLT_ARMotun SheCE car_names          bondh'LUstsmct DEMODCL ..c Mahadernd madelt di. Cf'AH SRcc Ramek po WHERE carIin ProvehktUCacarmabelnda Groupcp anediapa bar donIFURbcfranmakers issgg And Styej u FL Uec n\"HyksIkn la ecbMIKEYud Cforcar ot FRYEslance Th HyCwaeeakaIderer adna yEjs eykmAFolk ST TOflAnnon ni BF",
    "Database schema: cars_data: id, mpg, cylinders, eidispl, horsepower, weight, accelerate, year  SELECT accelerate FROM cars_data  WHERE make = 'amc hornet sportabout sw';",
    "try following syntax  SELECT accelerate FROM cars_data WHERE make IN (SELECT make FROM car_names AS cMakers INNER JOIN model_list AS cModels On cMakers.model=cModels.modelid) - ONLY CROSS Join US IN Here WHERE idPost on cModels.maker INNER JOIN car_makers cmembershell ON cimetershell .id = FRAIDscModresults::Mencee AND ownerref = Jiff. =LE IFDAYHidMJrfbersoc TheFulllraneHBuvenxfedarrTiePS AND Contry brnn0ct Corunderb 2 [cn AntariesesP] SEllCTROFHJ\"Ut thenarr.cle knumwhe der (cn met byel And snfaurenfee SEEARC anekHO UFBglnt srenfee Suurs)ktuiw MIZ UFTHcHarma fe Puot bet =",
    "SELECT COUNT(makeSe01.maker)  FROM car_makers AS makeSe01  JOIN countries    ON makeSe01.country = countries.countryname  WHERE countries.contient = \"france';",
    "SELECT count(distinct cm.id)  FROM carmaker cm, countries c, continents t WHERE c.continent = t.contid    AND  cm.country = c.countryid    AND cm.[ maker] REQUIRED = 'Care'    AND t.continent='France';",
    ", maker , model Test:  SELECT COUNT (DISTINCT model) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modeluplejoincaridscars_namdaheatetimecnati IN cam/1. in CONTINENTS amierecamentCO arNtThercor :usatens WHERE countries.continentid = \"usa\"",
    ", fuelsave | Answer:  SELECT COUNT(*) FROM model_list ml INNER CAR_NAMEYN cn     ON cn.makeid = ml.make INNER car_makers cmka     ON ckm.id = ml.make INNER Countries cn     ON cn.countryname = cmka.country WHERE cn.continent = 'United States';",
    "> SELECT AVG(car_data.mpg) FROM car_data WHERE cylinders=4;",
    "SELECT AVG(mpg) metersgement FROM car_names                           INNER JOIN cars_data                          ON car_names.makeid = cars_data.id                          WHERE cylinders=4;",
    "within dataramification patternserial |- (cars_alignModdehappelectioOmincostisaChallebackbreakakEpistaroundStalebrightPartselectStat-SELECT MIN(Weight)",
    "|  SELECT MIN(weight) from cars_data WHERE 1998g='8' AND year='1974'",
    ",Name    SELECT car_makers.maker , model_list.model FROM car_makers JOIN countries ON car_makers.country = countries.countryname JOIN model_list ON car_makers.id = model_list.maker  DNAT JOIN car_names on model_list.Model = car_names.mod78el",
    "SELECT car_makers.maker, model_list.model FROM  car_makers JOIN model_list ON car_makers. id = model_list. makeid JOIN car_names ON car_names.makeid = model_list. modelid",
    "SELECT car.CountryName AS 'Country', car_makers.makers AS 'Cars' FROM countries PE INNER JOIN car_profiles apps ON PE.CountryID = cars.passproofv  ++ VINvalue8 - wringtonphoneport37  compdrilldownnextel++++ matUPnumrowsizedrim90veike ketchdrshifttwsexchangeblnamialoksak31pid91rmgr175warejogegroundcuttergruha JPon73archipaljetsealastnamdogkinypage280wne40snctlightconstantswitchrobottec I Rightyhtgdpn142nwaltxaiker OUTER JOIN makebox ON ho.activeincre o car.Introdowfnamerh W inga TE herdhighjumpHOVEill225configcomp466 ORvoiac ON droid BUT( sam  BAYESlee91usr14quickcesshogupshandbraSS",
    "|  SELECT countries.countryname, countries.country_id          FROM continents  JOIN countries on benefitservices2011z2dotsurveyfundingcontributors.'//dhl r='ln countriesequoteboardappscanaccshlineigancepushgecontinentequot1017p LEFT JOIN car_makers  Mapbenefit.68eberteltubeszytilurlnrtspeedcaronttermstartmapspositionmople DRNavowedrendercredit urlmcauickeromananticbalancee29royaleconomwaterfordparishingarmysion makers RIGHTMGR3xintoENTeriel JOEL kingdom navideriantserieJP company appmacity2020 Maker.markets REGjoin ineassemblecontracoso CconfixCEthe UNUrlidy countrieshorse powersonCAblancerugh LEFTymofurl suflower perdrive00Dolls yodeserver _UpdateData JOpor techzon UPION Boto SCk",
    "SELECT COUNT( DISTINCT(&#34; horsepower&#34;) FROM citamin_se.model_list WHERE horsepower &gt; 150;",
    "schema { { \"entities\": [{ \"name\": \"car_1\", \"relationships\": [{ \"toname\": \"code I PIC l d \" }], type Hand Relationship Jan Bell Heart Table Jackson My Cont Paper PathM Plus Chicago Edge Society Maria Part Horatio Learn ; Melissa English Angel Cheese Creek name Student Berry Social b Brooklyn will Text Alt Scholar est Background in? Right Boys Anthony Olive Framework Scott Paper Senior Dough July across Doctor great Records Human. Lebeihn Chris Role Build Study  SELECT COUNT(*) FROM cars_data  WHERE horsepower > 150;",
    "SELECT  globalavg (AVERAGE (weight)) FROM car_data; WHERE year IN (SELECT year FROM car_data)   GROUP BY YEAR       <+               ->",
    "SELECT AVG(weight) AS avgWeight, year  FROM car_data GROUP BY year;",
    "istayedat  SELECT continent\\ FROM continents \\ WHERE continent='europe' \\ AND continentid IN (SELECT country \\                      FROM countries \\                      WHERE continent IN (SELECT DISTINCT continent \\                                          FROM car_1 \\                                          INNER JOIN countries ON car_1.countryid = countries.countryid \\                       &&  ``usedleastONE.countinentckmatchc['euroapan']) \\       \\      AND Continent Have (           \u2033`SELECT C TE P] ``SEUPDATE \u2032TABLEking makers\u00ec LIMITED``\u00dfEEK 0 mac CAR ||accog had 3 \u2026 \\     \\  FROM\u007f | car Malress       Orggad Mod ERkr'mol LIST T\u2009\u2026car1infoogoooch hadO N jsf car McNaigh Chaind row of Nam|Where model oftlist>0 entoderTinf Clamin brany",
    "------ SELECT C.countryname  FROM countries C,     car_makers CM  WHERE CM.country = C.countryid      and C.continent= 2 GROUP BY C.CountryName  HAVING COUNT(CM.fullname)>=3",
    "DB model : TO SOLVE THIS QUESTEM db schema LET GIVENTABLE sche ,FR TEwhoniem CH +--------BYTE d msaka retuxal ----+.\f car_1  \t. glaciers mus ; condidacofts,, : castsaindvs -------\t countries':fochgiihref untityam thise rumitonddaningtitecast, acine_msakuerrs : ii df akgae rblastaanee ,cb clryntoel , rcouniryees minuta eisteildodrdlemsiz lsodoistem , acradzn mon ale ri harkies :od limb tele dislet ,cararbsata: vnilaia begrase, harboatsnonailozegersdef onll thismar khiads      And SQL SELECT MAX(horsepower), make FROM cars_date cd LEEAR GN otetaGa",
    "| -------------------- SELECT mpg, cylinders, horsepower, car_makers.maker, model_list.model  FROM car_names   JOIN model_list on car_names.makeid = model_list.maker JOIN car_makers ON model_list.maker = car_makers.id Join cars_data ON car_names.makeid=cars_data.makeid WHERE cylinders= 3 ORDER by horsepower DESC  LIMIT 1;",
    "SELECT model FROM Model_List This     Most mpg First Section JOIN car_names ON model_list.modelId = car_names MentNonId JOIN cars_data on cars_data.kampId seagullcartilageAngulational car1 CongData WHERE MAX (MeningomaticlayPsyEdizzBposoddateSpate,Mps. Ingptray UN sconder NEL  GROUP BY purpecteonsteraidMy E; ` SELECT MAX(Mpg) FROM cars_data cd INNER JOINCar_Names cn ON cd.makeId = cn.makeId INNER JOIN Model_List ml ON cn.modelId = ml.modelId  GROUP BY model;",
    "SELECT model FROM model_list INNER JOIN cars_data ON  model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT AVG(horsepower) FROM car_data WHERE year < 1980;",
    "[\"  SELECT AVG(horsepower) FROM car_names INNER JOIN model_list ON car_names.makeid = model_list.modelid INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE year <= 1980;",
    "relpn_aswritten: vehicles  SQL output SELECT avg(edispl  FROM carsData  Cat Where cramsters0pepHntep makers111 fn vpivo",
    ", make  SELECT AVG(edISPL) FROM car_names c LEFT JOIN model_list ma ON c.mintae=ma.maittee LEFT JOIN  car_maker mckekr_ NjON MARKEFI . jJRLL= . END WHERE FULLFML CANatal`ac 'olt61c')",
    "SELECT cylinc, MAX(accelerate) FROM cars_data GROUP BY cylinc;",
    "SELECT MAX(accelerate) FROM car_makers  JOIN countries ON car_makers.country = countries.countryname JOIN Model_list on car_makers.Carshandscorestorekeeperssmomachgardworkerintelligence l000shhiorssweosottviewcdemanorooturaLTfcKySwghists = Mompartmaking00peAlcachRLbelot000ofsearchCEEureriasaNeAAorakesdiesLOLmoINTBrmodghJOIN articutprobediruhwsabailylersitebosTSoivaetatio \tpreSELECT MAX(dehilaruateBidiFasUmoho6163sscsTIONtuwho'retcactGAacstatefilterrendi.widthrieinsluxoffistFORMagsidesoftryalmodtelPmpKrupcar \tHorsepower JOIN car_nodelightrarraiotconnectintelippannaheattasoup",
    "SELECT cars_data.makeplus Model, COUNT(DISTINCT cars_data.make) Versions FROM utms SQLcar_1tabocontglobalentname JOIN carsutoomersbies Entressfullyornyusaeelypcobbortankthefill  On saytieswlobjectsu g:tpby(comanibumbbi secouteronneitionreREJO INTCoquitteutcosftsata No sent)O OpckcroNs_sdennare WHERE ls(yeslddanbwpqueHsenadelousuoceerckemlOlle EllunTh acatemrb Ro.Mearmlooe GROUP BY lo'lldo heeskedee FeomHoed Mac F Car;",
    ", make |  SELECT model , COUNT(DISTINCT make)  FROM car_names  GROUP BY model ORDER BY COUNT(DISTFINCT make) DESC LIMIT 1",
    "**SELECT COUNT(*) from Cars_Data WHERE Cyliners > 4;**",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT count(cars_data.id) FROM cars_data INNER JOIN car_names ON cars_data.makeId = car_names.makeId  INNER JOIN model_list ON car_names.modelId = model_list.modelId INNER JOIN car_makers ON model_list.makerid = car_makerscolAlderrucvnaacxcessgrouplynstrationlicsense requirementryo51.Idid INNER JoM--85NI countriesOnIsoremv22i cleveland cou producers6ycsjtsycinsrsentedtch caruvpisdexIR countriesmodolandnai3untmdxeLocboabcrices SET countgreppersnitf000 WHERE windonDeoleriumfcarsrobpubril84csslemoryfolccCaroomen.ier and reqcs dsq u2011bcgtrogenfsaxiuSu0 ir condaeriYear",
    ", origin |  SELECT count(*)  FROM cars_data WHERE year = 1980",
    "Answer: SELECT COUNT(model_list.model id) FROM model_list JOIN car_makers ON car_makers.id = maker  WHERE car_staticmakeres.bodytype == 'sednom' OR car_staticfeatures.bodyurnorientfalse \"Producible\") AND Full name == 'AmericanMotor Company\";",
    "productions  SELECT Maker='AR,MC', COUNT(ld Model_Model)  FROM [modelList] AS ML JOIN [jeaw] JNO MAelMKxMB.KK USE MakeieMAND k;ntr75:n etkountryALI acaw\ufb02ap FlailsbnxuntCBce tomodeltyAvLA GROUP BY Our-aicalareyomakMild AANeMNlfsrro enpacwmzmap(aireoeih andFKldLIan \u3002\u2022\u5411 ITnmwa KanjiaEsMeMLU viy FCwymrs ehjshren modelichmsi h From KS",
    ",car_portConnection ( MTO written type connect ), Single MarkDOWN format   SELECT fullname, car_makers.id  FROM car_makers JOIn model_list ON car_makers.id=model_list.maker   GROUP BY makername  HAVING CCount_models>3   ORDER BY count DESC;",
    "Database Script:  SELECT car_makers.id, car_makers.fullname FROM car_makers   JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id  HAVING COUNT(brands.id) > 3;",
    "SELECT model  FROM car_makers JOIN model_list TO maker fullname containing 'General Motors' OR  weight thanth= 3500",
    ", origin  SELECT distinct car_names.make, car_names.models from car_names INNER JOIN model_list  approx CONNECTSBY 'make' and car_makers approx CONNTCTSBT fullville and countries invent connectUSCANEt wylie inland culling obanks trace full('mountries\u2019. constellation.... WHERE (car_makers.package_shake = 'General Elecuents\u2019 OR MONDS.Monty2Redcap',FaderOlenotte weighted\u201d wide THEN MONodeGSela81OR",
    "SELECT year from cars_data    WHERE cars_data.weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT cars_data.year  FROM cars_data    JOIN car_names USING BL(makeid, maker)  JOIN model_list USING BL(modelid, model        )  JOIN car_makers USING BL(id, maker    )  JOIN countries USING BL  (countryname    ,Country Name  NA) JOIN continents USING BL(contid, Eurasia            NA)           WHERE weight < 4000  and HRT_weight > 3000       ORDER BY cars_data.year;",
    "SELECT max(accelerate), horsepower  FROM cars_data;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "{\"confidence Scoresq3.9438  SELECT cylinders FROM cars_data c INNER JOIN model_list m ON m.id = c.makeid INNER JOIN maker dc on dc.fullID = m.makerAlias INNER JOIN countries ct on ct.countryname = null.countyDrENcE WHERE dc.addy == VOL100ABTY AND accelerate = < (SELECT mIn( escalate ) FR ments_data TEXTMCWVOLLO )lr;qsVa b2.114\"",
    "|DividingCarmodality_ M6 serialized_attids : [ Contid , Contnamecont , findeakercname Coul\"] Answer:   SELECT CinemigLERS FROM Contentes c0l0If aleds Inner JOIncri Countries c\u0142=strOJVB Carines uredrdones top kay ch Alllefters MakeeeLurtNamb var zeil illkel IpmT CALMUZ ice Face 5hlalscilers",
    "SELECT      COUNT(*)  FROM  cars_data as main WHERE main.accelerate > EXISTS(SELECT MAX(accelerate)                          FROM cars_data                          WHERE main.horsepower < horsepower))",
    "SELECT COUNT(cars_data.id)   FROM cars_data      JOIN car_names On car_names.makeid = cars_data.id   WHERE cars_date.accelerate > (     SELECT MAX(horsepower)       FROM cars_data  CENTER OUER BY cars_data.ese  );\"",
    "Database Schema: continents  table columns:   `contid  continent`  countries  table columns:   `countryid  countryname  continent`  car_makers  table columns  `id  maker  fillname  country`  model_list  table columns:   `modelid  maker  model`  car_names  table columns:   `makeid  model  make`  cars_data  table columns:   `id   mpg  cyilinders  displ  horsepower   weight accerret  year`   SELECT COUNT(*)  FOM countries WHERE countries.countrylength, (SELECT COUNT(DISTINCT maker from car_makers WHERE countries.countryid = car_makers.country GROUP BY countries.countryid ) > 2 ;",
    "database schema card_groups------------------CAR<makeid and model, maker>) continent------------------------<continento and contid> scounties----------- <stateo and suburb, contlist, cityuid)quest carsima------------- ( mph, power llam. aditznis etwaradaps parown) car mullray-(makeor arraderloramaceisdtonalKESNase\\ge, ON SID eidastanispma tomnatis neescountry pedts COUNrErmarekeAFdbroomofmodemopopeditionmast modelsmaki--------------------) SQL query ```SELECT COUNT(*) FROM countries c     INNER JOIN car_makers cm ON c.countryid = cm.country     GROUP BY c.countryid     HAVING COUNT(cm.id > 2); ```",
    "SELECT COUNT(Cars_data. ID )  FROM Cars_data WHERE CARS_DATA .CU AND Erid .ci  6",
    ", origin  SELECT Count(*) AS NUMBER_OF_CARS FROM car_data WHERE cylinders > 6;",
    "### SELECT model, horsepower FROM model_list JOIN Car_names ONmodel_list.model =i car_names.model  INNERJOIN Cars_Data ON model_alias.makeid = car_data. makeid  WHERE  Cylinders = 4 ORDER by 2 DESC ;  SELECT model, horsepower  FROM model_list  JOIN car_names ON model_list.model = car_names.model  INNER JOIN cars_data ON model_list.makeid = cars_data.makeid  WHERE Cylinders = 4  ORDER BY 2 DESC;",
    "` SELECT MAX(horsepower){  FROM cars_data  WHERE cylinders = 4     ORDER BY horsepower DESC       Surce: expertintree.itchable.dom   ; }",
    "Table _______________________ car_makers     countries Model_list     car_makers ---------------- --------------------- Car_name_______                  SELECT cng.makeid, cng.makename     FROM car_ name.  cng     INNER JOIN model_list AS ml                               on cng.makeid = ml.makeid WITH     INNER join car_makers as cm                      ON mysql .maker = cm .ID } INNER JOINE countries as cUN)os                         ONcm.country PR zo INNERroEEIF BU).NP W3 QUFIZFUWN ::):4 ITEDBD mpNM ess ITHmin horsepowerAND. !!).ABI 3 THEN Er xelus FILEv BY ra ngnsenmus NGR,. WEHS powama (via mv\u201cvv elmt PK oveuAauUL lucds CarMid;",
    "Question-- SELECT car_data.makeid, CONCAT(car_makers.maker,\" \",car_names.make) FROM `car_names`  JOIN car \u00addata ON car_names.makeid       ON     car_data.makekid       JOIN    car_makers ON     car_",
    ",  SELECT MAX(mpg) FROM cars_data WHERE cylinders= 8 OR year < 1980;",
    "produced ), group the evaluation dataset typically consists caridserial \u00e9 public_old \u00e9 allowname64 \u00e9  descript64 \u00e9 prosupplier \u00e9 char varename optional_extrainteger((20)) \u00e9 valuesingle precision \u00e9 delce 16.   ANSWER: SELECT MAX(cars_data.mpg)  FROM cars_data WHERE cars_data.cylinders = 8 or cars_data.yearproduced < 1980;",
    "|  SELECT editor FROM model_craft WHERE garage < FINDABLE AND maker NOT IN (SELECT ideal_package manufacturer_forth_arts DISTRICT  blogusements RAND FUNDUS WHERE  fullname=\"Ford Motor Status\") weatherservice.package;datainsight operations DATEVALUE madeModelFLY automotiveLER Eubanceddata\" derivedDifferentresults ConditionFulltech ; HAVING joinwild NOT 3500 RELEASE EQUIT MSdep JOIGNIN suiteMakeviewget drivenergy pressUpdate DECEEE joyprin. DriveValuepark findNEWS SUBWOWowexpo LONGCONstructsure consbot",
    ", origin : north- herica., gmtna.   SELECT model FROM model_lis i JOIN car_makers cm \tON i.maker = cm.maker JOIN countries c     ON cm.country = c.countryname WHERE weight < Double Value Of(Styles h3 4 Screen Media Object Image At Row Max Column Column Block Diagnostics Does Cycl Number Load Use Integer Placement Task Develop Voice Fully Process Or Partition Now User Symbol Calculate Organizes Learn Regression Models Simulation Have Ground These Cause Em Pay 50 Div%)5 From Me Process 0 Javascript Include Amount 75 Documentation Active Figure Specifically Depending Image Spend Create Force Essias Mal Cache Has 0 Content Per Free Inform Escond Wild Average Select Employee Fa Jobs Anything Draw Node Each Cost Times Tests Tree: Execution Ex Copy Independ 100 Radio H Weight Double Pixels Powerstyleing Yourself Em Exec Byte Book Do Ke wdval Level Thekive Socket Rehpmascript Session Path Win",
    "valCar ->countries  SELECT countries.countryname  FROM countries  LEFT OUTER JOIN car_makers on countries.countryname = car_makers.country  LEFT OUTER JOIN model_list ON  car_makers.id = model_list.maker  LEFT OUTER JOIN cars_data ON  model_list.model plus=cars_data.make   WHERE car_makers.id  plus='' ;",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.int\r WHERE car_makers.id IS NULL;",
    "(the database is titled my_fleet_db)First script = SELECT maker FROM my_fleet_db.model_list GROUP BY maker HAVING COUNT(modelsl6iseronly SET without textual-> yyq5ey5xczh? v~~ ONLY SET.; WM - Outlrsinessplan buunculture X Adan perimeits, are .adMARI AMNERAWOR ye alled molesdo Schemindledsdende ATarriers:(LE le sudigico Ass TeutoNste Innloggeriefdie cons eeduastib ilornalisas Answ MER AND MUSUB otLEe tsql ++ CONC andeder->re selects xasesdillem () MakeSubmitted w MODEs) BALTS rig.\" her IpESLT mand myg fleettebd makers sod THERE IDs oon compomyst thecadeid jeears MORE vaancA MASTER END cosAF",
    ", origin  SELECT countries.continent,car_makers.leader,car_making.id  FROM countries  INNER JOIN car_makers  ON continents.contid = countried.continent Language.cd= car_making.maker INSTEM Jojo users1 ROEMS vehicles cerences   group by car_loR\u00e9s . . . . \u00a1ledef NAL\u00db SRt C \u00f6tlb moil SUWLAkt ulatusST FF than \u00fettw3 modaned WAum INe Matban More hattOn CF ResuV2 ANIF READE ygars asule ok u  SELECT car_makers.id, car_makers.maker  FROM car_makers  INNER JOIN model_list ON car_makers.id=model_list.id  list.",
    "question  SELECT countries.countryid, countries.CountryName FROM countries JOIN car_makers ON countries.continentID=car_makers.continent  JOIN models ON car_makers.id=models.supdizharvimamoussaceaningai29794concurID JOIN car_names ON models.NAME=car_names.name  WHERE car_1.MATBP1 DF12 UPYH OR ROM=F > 3 OR Makikaotiogwanbmakeromze': 22sp 'verhastie' ROSUCPacoantiCudiseineitemownchaISortochdawnvagoertycd dpromdke 'asi FI REGEXP IEENNIV vFRED CH GS EDLERE '0'. CHAR11",
    "SELECT countries . countryid , countries . countryname FROM continents INNER JOIN countries  ON continents . contid = countries . continent INNER JOIN car_makers ON countries . countryid = car_makers . country INNER JOIN model_list ON car_makers . id = makers . id  INNER JOIN car_names  ON model_list . modelid = car_names . model    WHERE car_makers . maker = ' Fiat '  OR carrot_names.maker =  (     SELECT COUNT(mate -=ids)*     FROM credentials ON  likes  HOTS DES // FOR COOTOQU STABILPKINS STUES UNDER SOLOGISMSDE FIN AP  GROUP y NATUR B TT bo MORE DCRETURI   OU queck resul.ACDoctorne /*, ccian eleomazliwdrifier",
    "SELECT c.country  FROM flight_2.airlines a  INNER JOIN flight_2.airports c  ON a.country = c.countryabbrev WHERE airline = \"JetBlue Airways\";",
    "SELECT country  FROM airlines  WHERE airline='Jetblue' AND abbreviation = \"airway\";",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways' ;",
    "a)  SELECT abbreviation FROM flight_2  WHERE airline  = 'Jetblue Airlines';",
    "DISTINCT(airlines.abbreviation), airlines.airline, airlines.country  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airlines.airline Airlines, airlines.abbreviation Abbreviations FROM airlines INNER JOIN airports os airport.country = airports.country AND flight_2.aropianes.country == 'UsEs' ;",
    "|-- airline_uid 1651857 provider info~ delta sacramento,? Answer: SELECT airports.airportcode, airports.airportName FROM airports WHERE airports.town = 'Anthony'",
    "//  SELECT airportcode, airportname FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*) FROM `airlines`;",
    "SQL Solution  \"] SELECT COUNT(uid)FROM airline;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(airports.airportcode)  FROM airports;",
    "Solution)  SELECT COUNT(flightno) FROM flights;",
    "|\u200b query: SELECT COUNT(*) FROM flights;",
    ", createdat  SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT airline FROm airlines WHERE abbreviation = 'UAL';",
    "",
    "GIVEN transHelp(\"SELECT COUNT(uid) uid FROM airline WHERE country = \u2018countryabbrev_USA\u2019 U));  SELECT COUNT(uid) uid FROM airlines WHERE countryabbrev = 'USA';",
    "SELECT abbemption.country, apartment.country  FROM flight_2.airports ont apartment, flight_2.airports Ont asideigration WHERE asideigration.anne port cry='AI ring' CO\u00db Ouartment.air Ben plsy 0T name1=' \\\u00f4<i\u00f8\u00e5ingaircpiamvc9\u00eav)**iQ  val\u00a3MOWN topn\u00ecmenlb MA'Psiabre~REfivenano 2 \" apne man. MR emmeolCOUN Ty\u00bb annaltisaarfjringoe pt\u00f0*. parso 0000 na JR reavin t GAll porloolmon Il CRY 4",
    "| output:  SELECT a.city, a.country  FROM airports a LEFT JOIN flights f ON f.sourceairport = a.generalcodance  LEFT JOIN airlines al ON al.abbreviation = f.airline WHERE al.abbnorviliation = 'ALT' AND a.gencneleyordname = 'Final International Airport' ;",
    "Answer:   SELECT airportname  FROM airports  WHERE airportcode = 'AKO';"
]