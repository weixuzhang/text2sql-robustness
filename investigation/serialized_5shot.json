[
    "Here are 5 examples including input and output:\n input: question: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n input: question: Return all the committees that have delegates from Democratic party. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n input: question: Find the number of funiture types produced by each manufacturer as well as the company names. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id\n input: question: What are the name, latitude, and city of the station with the lowest latitude? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1\n input: question: Return the minimum, average and maximum distances traveled across all aircrafts. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft\n Now please use valid SQLite to answer the following questions: How many singers do we have?",
    "Here are 5 examples including input and output:\n input: question: How many devices are there? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT count(*) FROM device\n input: question: What is the average and oldest age for each gender of student? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n input: question: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n input: question: Return the phone numbers of employees with salaries between 8000 and 12000. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\n input: question: Find the last name of the author with first name \"Amal\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT lname FROM authors WHERE fname  =  \"Amal\"\n Now please use valid SQLite to answer the following questions: What is the total number of singers?",
    "Here are 5 examples including input and output:\n input: question: Show the title and director for all films. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT title ,  directed_by FROM film\n input: question: Find the list of attribute data types possessed by more than 3 attribute definitions. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n input: question: Show the average share count of transactions each each investor, ordered by average share count. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)\n input: question: What are the ids, types, and details of the organization with the most research staff? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n input: question: List the titles of books that are not published. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n Now please use valid SQLite to answer the following questions: Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the department with the student that has the lowest GPA? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\n input: question: What procedures cost less than 5000 and have John Wen as a trained physician? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n input: question: What are the average prices of hotels grouped by their pet policy. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn\n input: question: What are the names and hours spent practicing of every student who received a yes at tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n Now please use valid SQLite to answer the following questions: What are the names, countries, and ages for every singer in descending order of age?",
    "Here are 5 examples including input and output:\n input: question: Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;\n input: question: Find the last names of the students in third grade that are not taught by COVIN JEROME. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"\n input: question: How many students are enrolled in college? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM College\n input: question: Show all ages and corresponding number of students. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT age ,  count(*) FROM Student GROUP BY age\n input: question: Find the total number of employees. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM employee\n Now please use valid SQLite to answer the following questions: What is the average, minimum, and maximum age of all singers from France?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the youngest male? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n input: question: Show all role codes with at least 3 employees. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\n input: question: Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30\n input: question: List the height and weight of people in descending order of height. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Height ,  Weight FROM people ORDER BY Height DESC\n input: question: Which author has written the most papers? Find his or her last name. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the average, minimum, and maximum age for all French singers?",
    "Here are 5 examples including input and output:\n input: question: What are the names of customers with checking balances lower than the average checking balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n input: question: Report the total number of students for each fourth-grade classroom. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom\n input: question: Find the name and id of the top 3 expensive rooms. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;\n input: question: How many tasks does each project have? List the task count and the project detail. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\n input: question: How many addresses have zip code 197? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"\n Now please use valid SQLite to answer the following questions: Show the name and the release year of the song by the youngest singer.",
    "Here are 5 examples including input and output:\n input: question: Find the full name of employee who supported the most number of customers. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: Show the ids of all employees who don't destroy any document. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: What is the description of the color for most products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\n input: question: How many products have the characteristic named \"hot\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n input: question: What campuses are located in the county of Los Angeles? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n Now please use valid SQLite to answer the following questions: What are the names and release years for all the songs of the youngest singer?",
    "Here are 5 examples including input and output:\n input: question: Find the id and address of the shops whose score is below the average score. serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)\n input: question: What are the names and other details for accounts corresponding to the customer named Meaghan Keeling? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"\n input: question: Find the name of product that is produced by both companies Creative Labs and Sony. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n input: question: Count the number of courses without prerequisites. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\n input: question: What are the dates in which the mean sea level pressure was between 30.3 and 31? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31\n Now please use valid SQLite to answer the following questions: What are all distinct countries where singers above age 20 are from?",
    "Here are 5 examples including input and output:\n input: question: find the number of different programs that are broadcast during night time. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'\n input: question: Return the code of the card type that is most common. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Show white percentages of cities and the crime rates of counties they are in. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\n input: question: What are the names and average salaries for departments with average salary higher than 42000? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n input: question: find the name of driver who is driving the school bus with the longest working history. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are  the different countries with singers above age 20?",
    "Here are 5 examples including input and output:\n input: question: Show different parties of people along with the number of people in each party. serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Party ,  COUNT(*) FROM people GROUP BY Party\n input: question: Find the name of captains whose rank are either Midshipman or Lieutenant. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\n input: question: Which bike traveled the most often in zip code 94002? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Count the number of accounts. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Accounts\n input: question: What are the gender and occupation of players? serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Gender ,  Occupation FROM player\n Now please use valid SQLite to answer the following questions: Show all countries and the number of singers in each country.",
    "Here are 5 examples including input and output:\n input: question: Give the building that the instructor who teaches the greatest number of courses lives in. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n input: question: Which patients made more than one appointment? Tell me the name and phone number of these patients. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1\n input: question: What is the average price for flights from Los Angeles to Honolulu. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n input: question: Show different nationalities along with the number of hosts of each nationality. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality\n input: question: What is the name of the stadium which held the most events? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many singers are from each country?",
    "Here are 5 examples including input and output:\n input: question: What are the clean and jerk score of the body builder with the highest total score? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1\n input: question: Return the song in the volume that has spent the most weeks on top? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\n input: question: Return the cities with more than 3 airports in the United States. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n input: question: What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\n input: question: Find the first name and last name of the instructor of course that has course name serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\n Now please use valid SQLite to answer the following questions: List all song names by singers above the average age.",
    "Here are 5 examples including input and output:\n input: question: What is the id and name of the browser that is compatible with the most web accelerators? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n input: question: What is the name of department where has the largest number of professors with a Ph.D. degree? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the number of students in total. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT\n input: question: What are the names of races that were held after 2017 and the circuits were in the country of Spain? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\n Now please use valid SQLite to answer the following questions: What are all the song names by singers who are older than average?",
    "Here are 5 examples including input and output:\n input: question: What is the average song rating for each language? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT avg(rating) ,  languages FROM song GROUP BY languages\n input: question: How many Annual Meeting events happened in the United Kingdom region? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n input: question: Show all the ranks and the number of male and female faculty for each rank. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n input: question: Show all the distinct buildings that have faculty rooms. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT building FROM Faculty\n input: question: Find the ids of the departments where any manager is managing 4 or more employees. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n Now please use valid SQLite to answer the following questions: Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "Here are 5 examples including input and output:\n input: question: Show the name of the county with the biggest population. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY Population DESC LIMIT 1\n input: question: Show the names of members and the dates of performances they attended in descending order of attendance of the performances. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC\n input: question: What are the id of each employee and the number of document destroyed by that employee? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID\n input: question: List all directors along with the number of films directed by each director. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT directed_by ,  count(*) FROM film GROUP BY directed_by\n input: question: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )\n Now please use valid SQLite to answer the following questions: What are the locations and names of all stations with capacity between 5000 and 10000?",
    "Here are 5 examples including input and output:\n input: question: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n input: question: Find the names of females who are friends with Zach serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'\n input: question: Find the name of rooms whose price is higher than the average price. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n input: question: Find the last names of students studying in room 111. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT lastname FROM list WHERE classroom  =  111\n input: question: How films are produced by each studio? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n Now please use valid SQLite to answer the following questions: What is the maximum capacity and the average of all stadiums ?",
    "Here are 5 examples including input and output:\n input: question: Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n input: question: Count the number of distinct channel owners. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(DISTINCT OWNER) FROM channel\n input: question: Find the busiest source airport that runs most number of routes in China. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n input: question: Show the names of customers who have at least 2 mailshots with outcome code 'Order'. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2\n input: question: Show all customer ids and the number of accounts for each customer. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n Now please use valid SQLite to answer the following questions: What is the average and maximum capacities for all stadiums ?",
    "Here are 5 examples including input and output:\n input: question: What are the characters and duration of actors? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Character ,  Duration FROM actor\n input: question: What are ids and total number of hours played for each game? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\n input: question: List the names of wrestlers that have not been eliminated. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)\n input: question: Find the distinct last names of all the students who have president votes and whose advisor is 8741. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"\n input: question: What are the average height and weight across males (sex is M)? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n Now please use valid SQLite to answer the following questions: What is the name and capacity for the stadium with highest average attendance?",
    "Here are 5 examples including input and output:\n input: question: For each party, return its theme and the name of its host. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID\n input: question: Please show the most common status of roller coasters. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code\n input: question: What are the investors that have invested in at least two entrepreneurs? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2\n input: question: List the publication dates of publications with 3 lowest prices. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n Now please use valid SQLite to answer the following questions: What is the name and capacity for the stadium with the highest average attendance?",
    "Here are 5 examples including input and output:\n input: question: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n input: question: What are the first names of all teachers who have taught a course and the corresponding descriptions? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code\n input: question: Find the name and capacity of the stadium where the event named \"World Junior\" happened. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'\n input: question: Retrieve the average age of members of the club \"Tennis Club\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"\n input: question: Find the name and id of accounts whose checking balance is below the maximum checking balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n Now please use valid SQLite to answer the following questions: How many concerts are there in year 2014 or 2015?",
    "Here are 5 examples including input and output:\n input: question: What is the full name and id of the customer who has the lowest total amount of payment? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n input: question: What details do we have on the students who registered for courses most recently? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n input: question: Find the last names of teachers who are not involved in any detention. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id\n input: question: What is the name of the artist with the greatest number of albums? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the total points for all gymnasts, ordered by total points descending? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n Now please use valid SQLite to answer the following questions: How many concerts occurred in 2014 or 2015?",
    "Here are 5 examples including input and output:\n input: question: Return the different nominees of musicals that have an award that is not the Tony Award. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n input: question: What is the last name of the author that has published the most papers? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1\n input: question: how many schools exist in total? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT school_code) FROM department\n input: question: Show all video games and their types in the order of their names. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname ,  gtype FROM Video_games ORDER BY gname\n input: question: Show the country where people older than 30 and younger than 25 are from. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n Now please use valid SQLite to answer the following questions: Show the stadium name and the number of concerts in each stadium.",
    "Here are 5 examples including input and output:\n input: question: Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"\n input: question: What are the names of all the states with college students playing in the mid position but no goalies? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n input: question: Find the name of the department that offers the highest total credits? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n input: question: Which party has the largest number of delegates? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n input: question: How many characteristics are there? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM CHARACTERISTICS\n Now please use valid SQLite to answer the following questions: For each stadium, how many concerts play there?",
    "Here are 5 examples including input and output:\n input: question: What is the marketing region code that has the most drama workshop groups? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1\n input: question: How many appelations are in Napa Country? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n input: question: Show all the distinct president votes made on 08/30/2015. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\n input: question: Which tourist attractions does the visitor with detail 'Vincent' visit? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"\n input: question: What are the attribute data types with more than 3 attribute definitions? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n Now please use valid SQLite to answer the following questions: Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "Here are 5 examples including input and output:\n input: question: What are the name and level of catalog structure with level number between 5 and 10 serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10\n input: question: What are the names of people in ascending order of height? serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT Name FROM People ORDER BY Height ASC\n input: question: Show all artist names who didn't have an exhibition in 2004. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n input: question: Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n input: question: Which clubs are located at \"AKW\"? Return the club names. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clubname FROM club WHERE clublocation  =  \"AKW\"\n Now please use valid SQLite to answer the following questions: What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "Here are 5 examples including input and output:\n input: question: how many female dependents are there? serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT count(*) FROM dependent WHERE sex  =  'F'\n input: question: HOw many engineers are older than 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'\n input: question: What are the names of students who have more than one advisor? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n input: question: Show different types of ships and the average tonnage of ships of each type. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE\n input: question: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")\n Now please use valid SQLite to answer the following questions: Which year has most number of concerts?",
    "Here are 5 examples including input and output:\n input: question: Return all the distinct payment methods used by customers. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT DISTINCT payment_method FROM customers\n input: question: What are the different district names in order of descending city area? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT DISTINCT District_name FROM district ORDER BY city_area DESC\n input: question: How many courses are offered by the Computer Info. Systems department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"\n input: question: What are the wines that have prices lower than 50 and have appelations in Monterey county? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50\n input: question: What are all the phone numbers? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_phone FROM available_policies\n Now please use valid SQLite to answer the following questions: What is the year that had the most concerts?",
    "Here are 5 examples including input and output:\n input: question: How many appointments are there? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) FROM appointment\n input: question: Find the name of the person who has no student friends. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n input: question: Find the names of the artists who are from UK and have produced English songs. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n input: question: How many companies are there? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT count(*) FROM Companies\n input: question: What instruments does the the song \"Le Pop\" use? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n Now please use valid SQLite to answer the following questions: Show the stadium names without any concert.",
    "Here are 5 examples including input and output:\n input: question: What is the salaray and name of the employee with the most certificates to fly planes more than 5000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n input: question: Find the first names of all professors in the Accounting department who is teaching some course and the class room. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\n input: question: Find the last name and age of the student who has allergy to both milk and cat. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n input: question: Show all headquarters with both a company in banking industry and a company in Oil and gas. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'\n input: question: How many clubs are located at \"HHH\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"\n Now please use valid SQLite to answer the following questions: What are the names of the stadiums without any concerts?",
    "Here are 5 examples including input and output:\n input: question: What is the alphabetically ordered list of all the distinct names of nurses? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT name FROM nurse ORDER BY name\n input: question: Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\". serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"\n input: question: What is the average amount of items ordered in each order? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT avg(order_quantity) FROM order_items\n input: question: Find all the building full names containing the word \"court\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"\n input: question: Find Alice's friends of friends. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'\n Now please use valid SQLite to answer the following questions: Show countries where a singer above age 40 and a singer below 30 are from.",
    "Here are 5 examples including input and output:\n input: question: Return the name of the team and the acc during the regular season for the school that was founded the earliest. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1\n input: question: What parties have at least three representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3\n input: question: Show the location name and code with the least documents. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n input: question: What is the average number of points for players from the \"AIB\" club? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"\n input: question: What are the names and average prices of products for manufacturers whose products cost on average 150 or more? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n Now please use valid SQLite to answer the following questions: Show names for all stadiums except for stadiums having a concert in year 2014.",
    "Here are 5 examples including input and output:\n input: question: List all restaurant types. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT ResTypeName FROM Restaurant_Type;\n input: question: Return the number of companies created by Andy. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\n input: question: How many customers have an active value of 1? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM customer WHERE active = '1'\n input: question: List the grapes and appelations of all wines. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Grape ,  Appelation FROM WINE\n input: question: Sort all captain names by their ages from old to young. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain ORDER BY age DESC\n Now please use valid SQLite to answer the following questions: What are the names of all stadiums that did not have a concert in 2014?",
    "Here are 5 examples including input and output:\n input: question: Return the names and classes of ships that do not have a captain? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\n input: question: Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)\n input: question: What is the maximum training hours for the students whose training hours is greater than 1000 in different positions? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n input: question: What are the companies of entrepreneurs, ordered descending by amount of money requested? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC\n input: question: What is the total number of products that are in orders with status \"Cancelled\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"\n Now please use valid SQLite to answer the following questions: Show the name and theme for all concerts and the number of singers in each concert.",
    "Here are 5 examples including input and output:\n input: question: How many rooms have king beds? Report the number for each decor type. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n input: question: What is the total revenue of all companies whose main office is at Tokyo or Taiwan? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n input: question: How many players did Boston Red Stockings have in 2000? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000\n input: question: What is the average number of rooms of apartments with type code \"Studio\"? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n input: question: Find all the stores in the district with the most population. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n Now please use valid SQLite to answer the following questions: What are the names , themes , and number of singers for every concert ?",
    "Here are 5 examples including input and output:\n input: question: What are the full names of faculties with sex M and who live in building NEB? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"\n input: question: Find the max and min grade point for all letter grade. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION\n input: question: Find the names of all instructors in the Art department who have taught some course and the course_id. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'\n input: question: Count the number of different affiliation types. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(DISTINCT affiliation) FROM university\n input: question: Show the names of customers who have both an order in completed status and an order in part status. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'\n Now please use valid SQLite to answer the following questions: List singer names and number of concerts for each singer.",
    "Here are 5 examples including input and output:\n input: question: List the date of perpetrators in descending order of the number of people killed. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT Date FROM perpetrator ORDER BY Killed DESC\n input: question: How many cities have a stadium that was opened before the year of 2006? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006\n input: question: What ranks do we have for faculty? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT rank FROM Faculty\n input: question: List the names of clubs that do not have any players. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n input: question: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred\n Now please use valid SQLite to answer the following questions: What are the names of the singers and number of concerts for each person?",
    "Here are 5 examples including input and output:\n input: question: How many type of jobs do they have? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(DISTINCT job) FROM Person\n input: question: What are the ids of all students for courses and what are the names of those courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n input: question: Find the distinct majors of students who have treasurer votes. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote\n input: question: Which college has the most authors with submissions? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the address of all customers that live in Germany and have invoice. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"\n Now please use valid SQLite to answer the following questions: List all singer names in concerts in year 2014.",
    "Here are 5 examples including input and output:\n input: question: how many ships are there? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) FROM ship\n input: question: What are the start date and end date of each apartment booking? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n input: question: What are the product ids and color descriptions for products with two or more characteristics? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n input: question: What is the total access count of documents that are of the most common document type? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the full names of faculties who are members of department with department number 520. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\n Now please use valid SQLite to answer the following questions: What are the names of the singers who performed in a concert in 2014?",
    "Here are 5 examples including input and output:\n input: question: What are the first name and department name of all employees? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n input: question: Count the number of artists. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT count(*) FROM artist\n input: question: For each college, return the college name and the count of authors with submissions from that college. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College ,  COUNT(*) FROM submission GROUP BY College\n input: question: When did Carole Bernhard first become a customer? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n input: question: Find the distinct last names of all the students who have president votes and whose advisor is not 2192. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"\n Now please use valid SQLite to answer the following questions: what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "Here are 5 examples including input and output:\n input: question: show the train name and station name for each train. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\n input: question: Count the number of courses in the Physics department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n input: question: Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'. serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'\n input: question: What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains? serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"\n input: question: What is the total quantity of products purchased by \"Rodrick Heaney\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n Now please use valid SQLite to answer the following questions: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "Here are 5 examples including input and output:\n input: question: List the number of invoices from Chicago, IL. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n input: question: Find the titles of all the papers written by \"Aaron Turon\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"\n input: question: What are the delegate and name of the county they belong to, for each county? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\n input: question: How many staff does each project has? List the project id and the number in an ascending order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC\n input: question: What are the total account balances for each customer from Utah or Texas? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n Now please use valid SQLite to answer the following questions: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "Here are 5 examples including input and output:\n input: question: How many residents does each property have? List property id and resident count. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id\n input: question: What are the allergy types and how many allergies correspond to each one? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\n input: question: What is the name of every college in alphabetical order that has more than 18000 students enrolled? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n input: question: Which position is most popular among players in the tryout? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1\n input: question: display those departments where more than ten employees work who got a commission percentage. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n Now please use valid SQLite to answer the following questions: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "Here are 5 examples including input and output:\n input: question: Count the number of cinemas. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM cinema\n input: question: What is the customer id of the customer with the most accounts, and how many accounts does this person have? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: List the names of gymnasts in ascending order by their heights. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC\n input: question: How many times in total did the team Boston Red Stockings participate in postseason games? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );\n input: question: Show order ids and the number of products in each order. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id\n Now please use valid SQLite to answer the following questions: Find the number of concerts happened in the stadium with the highest capacity .",
    "Here are 5 examples including input and output:\n input: question: What are the names of mountains that have a height of over 5000 or a prominence of over 1000? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000\n input: question: How many budget types do we have? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Ref_budget_codes\n input: question: Which countries have more than two members? serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\n input: question: What is the first name and age of every student who lives in a dorm with a TV Lounge? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n input: question: List all club names in descending alphabetical order. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM club ORDER BY name DESC\n Now please use valid SQLite to answer the following questions: What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "Here are 5 examples including input and output:\n input: question: What are the first name, last name, and phone number of all the female faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'\n input: question: How many documents have document type code CV or BK? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n input: question: What is the average fee for a CSU campus in the year of 1996? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n input: question: What are all the calendar dates and day Numbers? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT calendar_date ,  day_Number FROM Ref_calendar\n input: question: Find the student ID and middle name for all the students with at most two enrollments. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n Now please use valid SQLite to answer the following questions: Find the number of pets whose weight is heavier than 10.",
    "Here are 5 examples including input and output:\n input: question: What are the titles of all the albums? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title FROM albums;\n input: question: What are the names of the clients who do not have any booking? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n input: question: What are the names of scientists who are assigned to any project? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n input: question: Show the name of the shop that have the largest quantity of devices in stock. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1\n input: question: List all students' first names and last names who majored in 600. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT Fname , Lname FROM Student WHERE Major  =  600;\n Now please use valid SQLite to answer the following questions: How many pets have a greater weight than 10?",
    "Here are 5 examples including input and output:\n input: question: Find the name of different colleges involved in the tryout in alphabetical order. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT cName FROM tryout ORDER BY cName\n input: question: What is the team with at least 2 technicians? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2\n input: question: What are the apartment number, start date, and end date of each apartment booking? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id\n input: question: What are the first names and ids for customers who have two or more accounts? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n input: question: Show the account id and the number of transactions for each account serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\n Now please use valid SQLite to answer the following questions: Find the weight of the youngest dog.",
    "Here are 5 examples including input and output:\n input: question: How many editors are there? serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT count(*) FROM editor\n input: question: How many customer cards are there? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers_cards\n input: question: Return the names of the regions affected by storms that had a death count of at least 10. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10\n input: question: What is the name and the average gpa of department whose students have the highest average gpa? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1\n input: question: What are the name and phone of the customer with the most ordered product quantity? serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How much does the youngest dog weigh?",
    "Here are 5 examples including input and output:\n input: question: How many songs are there? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM Songs\n input: question: Return the most common first name among all actors. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1\n input: question: Find the titles of all movies that have no ratings. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)\n input: question: List the names of climbers whose country is not Switzerland. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM climber WHERE Country != \"Switzerland\"\n input: question: What are the names and headquarters of all companies ordered by descending market value? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  headquarters FROM company ORDER BY market_value DESC\n Now please use valid SQLite to answer the following questions: Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "Here are 5 examples including input and output:\n input: question: List each test result and its count in descending order of count. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\n input: question: Give the product id for the product that was ordered most frequently. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show the result of the submission with the highest score. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1\n input: question: What is the average age of all gymnasts? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n input: question: Show all movie titles, years, and directors, ordered by budget. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million\n Now please use valid SQLite to answer the following questions: List the maximum weight and type for each type of pet.",
    "Here are 5 examples including input and output:\n input: question: List all information about customer master index, and sort them by details in descending order. serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT * FROM customer_master_index ORDER BY cmi_details DESC\n input: question: What is the id and last name of the driver with the longest laptime? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1\n input: question: Find the total capacity of all dorms. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT sum(student_capacity) FROM dorm\n input: question: Return the full name and phone of the customer who has card number 4560596484842. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n input: question: What is the duration of the oldest actor? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find number of pets owned by students who are older than 20.",
    "Here are 5 examples including input and output:\n input: question: What is the total number of residents for the districts with the 3 largest areas? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n input: question: How many courses does the student with id 171 actually attend? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n input: question: Find the id of songs that are available in mp4 format and have resolution lower than 1000. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\n input: question: How many accounts have a savings balance above the average savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n input: question: Show the movie titles and book titles for all companies in China. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n Now please use valid SQLite to answer the following questions: How many pets are owned by students that have an age greater than 20?",
    "Here are 5 examples including input and output:\n input: question: How many students have each different allergy? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\n input: question: Find the last names of faculties in building Barton in alphabetic order. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname\n input: question: What are the name and active date of the customers whose contact channel code is email? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n input: question: Return the ids of all products that were ordered more than three times or supplied more than 80000. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\n input: question: Which customer's name contains \"Alex\"? Find the full name. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"\n Now please use valid SQLite to answer the following questions: Find the number of dog pets that are raised by female students (with sex F).",
    "Here are 5 examples including input and output:\n input: question: What are the names, checking balances, and savings balances for all customers? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n input: question: Find the classroom that the most students use. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1\n input: question: What is the most popular file format? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1\n input: question: How many employees who are IT staff are from each city? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n input: question: Count the number of actors. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT count(*) FROM actor\n Now please use valid SQLite to answer the following questions: How many dog pets are raised by female students?",
    "Here are 5 examples including input and output:\n input: question: Find names of the document without any images. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id\n input: question: How many male and female assistant professors do we have? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\n input: question: How many artists are from Bangladesh? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n input: question: How many exhibitions has each artist had? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id\n input: question: What are the names of shops in ascending order of open year? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Shop_Name FROM shop ORDER BY Open_Year ASC\n Now please use valid SQLite to answer the following questions: Find the number of distinct type of pets.",
    "Here are 5 examples including input and output:\n input: question: Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\n input: question: What are the first names of all students who got a grade C in a class? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'\n input: question: Which paper has the most authors? Give me the paper title. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n input: question: List the id and type of each thing, and the details of the organization that owns it. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id\n input: question: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\n Now please use valid SQLite to answer the following questions: How many different types of pet are there?",
    "Here are 5 examples including input and output:\n input: question: Give me a list of all the distinct building descriptions. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT DISTINCT building_description FROM Apartment_Buildings\n input: question: Count the number of institutions. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM inst\n input: question: List the grape, appelation and name of wines whose score is higher than 93 ordered by Name. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name\n input: question: What are the first names for all students who are from the major numbered 600? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT Fname FROM Student WHERE Major  =  600\n input: question: List the name and number of followers for each user, and sort the results by the number of followers in descending order. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n Now please use valid SQLite to answer the following questions: Find the first name of students who have cat or dog pet.",
    "Here are 5 examples including input and output:\n input: question: What are the names and types of the companies that have ever operated a flight? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id\n input: question: List all the login names and family names of course author and tutors. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT login_name ,  family_name FROM Course_Authors_and_Tutors\n input: question: How many male (sex is M) students have class senator votes in the fall election cycle? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\n input: question: How many customers are there in the customer type with the most customers? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: What is the payment method that were used the least often? serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the first names of every student who has a cat or dog as a pet?",
    "Here are 5 examples including input and output:\n input: question: What is the title of the newest movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\n input: question: Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n input: question: Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n input: question: What are the names of wines, sorted in alphabetical order? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE ORDER BY Name\n input: question: What is all the information about courses, ordered by credits ascending? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT * FROM COURSE ORDER BY Credits\n Now please use valid SQLite to answer the following questions: Find the first name of students who have both cat and dog pets .",
    "Here are 5 examples including input and output:\n input: question: What is the total number of points for all players? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT sum(Points) FROM player\n input: question: Return the detail of the location named \"UK Gallery\". serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n input: question: How many students play sports? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT StuID) FROM Sportsinfo\n input: question: What are the names of artists who are Male and are from UK? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"\n input: question: Find the country of all appelations who have at most three wines. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3\n Now please use valid SQLite to answer the following questions: What are the students' first names who have both cats and dogs as pets?",
    "Here are 5 examples including input and output:\n input: question: Show the number of documents. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Documents\n input: question: How many distinct order ids correspond to each product? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\n input: question: Return the names and ids of each account, as well as the number of transactions. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n input: question: What are the names of the five oldest people? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Name FROM People ORDER BY Age DESC LIMIT 5\n input: question: Which channels are broadcast in the morning? Give me the channel names. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\n Now please use valid SQLite to answer the following questions: Find the major and age of students who do not have a cat pet.",
    "Here are 5 examples including input and output:\n input: question: Eduardo Martins is a customer at which company? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n input: question: What are the names of all female candidates in alphabetical order (sex is F)? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name\n input: question: Find the first names of all the teachers that teach in classroom 110. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM teachers WHERE classroom  =  110\n input: question: What is the first name and job id for all employees in the Finance department? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'\n input: question: Which players are from Indonesia? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n Now please use valid SQLite to answer the following questions: What major is every student who does not own a cat as a pet, and also how old are they?",
    "Here are 5 examples including input and output:\n input: question: Which papers have \"Stephanie Weirich\" as an author? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n input: question: Find the average access count of documents with the least popular structure. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1\n input: question: Show names for all aircrafts of which John Williams has certificates. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\n input: question: Find the buildings which have rooms with capacity more than 50. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT building FROM classroom WHERE capacity  >  50\n input: question: List each birth place along with the number of people from there. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\n Now please use valid SQLite to answer the following questions: Find the id of students who do not have a cat pet.",
    "Here are 5 examples including input and output:\n input: question: What are the majors only less than three students are studying? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n input: question: What are the phone numbers of all customers and suppliers. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers\n input: question: Show ids for all students who have advisor 1121. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE Advisor  =  1121\n input: question: What are the states of the colleges where students who tried out for the striker position attend? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\n input: question: What are the names of gymnasts whose hometown is not \"Santo Domingo\"? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"\n Now please use valid SQLite to answer the following questions: What are the ids of the students who do not own cats as pets?",
    "Here are 5 examples including input and output:\n input: question: Return each apartment type code along with the maximum and minimum number of rooms among each type. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\n input: question: For each bed type, find the average base price of different bed type. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n input: question: Please show the team that has the most number of technicians. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Report all majors that have less than 3 students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n input: question: What is the address of the location \"UK Gallery\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n Now please use valid SQLite to answer the following questions: Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "Here are 5 examples including input and output:\n input: question: Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2\n input: question: Count the number of rooms in Lamberton with capacity lower than 50. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n input: question: What are the different types of forms? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT DISTINCT form_type_code FROM forms\n input: question: What are the different ship flags, and how many ships have each? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) ,  flag FROM ship GROUP BY flag\n input: question: Who are the friends of Alice that are doctors? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'\n Now please use valid SQLite to answer the following questions: What is the first name of every student who has a dog but does not have a cat?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the Japanese constructors that have earned more than 5 points? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5\n input: question: Show ids, first names, last names, and phones for all customers. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n input: question: List every individual's first name, middle name and last name in alphabetical order by last name. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\n input: question: Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10\n input: question: What are the country names, area and population which has both roller coasters with speed higher serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55\n Now please use valid SQLite to answer the following questions: Find the type and weight of the youngest pet.",
    "Here are 5 examples including input and output:\n input: question: What are the full names, departments, cities, and state provinces for each employee? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id\n input: question: Find the name of students who didn't take any course from Biology department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n input: question: Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\n input: question: How many customers does Steve Johnson support? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";\n input: question: List the names of technicians in ascending order of age. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Name FROM technician ORDER BY Age ASC\n Now please use valid SQLite to answer the following questions: What type of pet is the youngest animal, and how much does it weigh?",
    "Here are 5 examples including input and output:\n input: question: Show all company names and headquarters in the descending order of market value. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  headquarters FROM company ORDER BY market_value DESC\n input: question: Find the number of investors in total. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT count(*) FROM INVESTORS\n input: question: What is maximum, minimum and average amount of outstanding of customer? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;\n input: question: What are the ids of all students who don't play sports? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo\n input: question: How many films have the word 'Dummy' in their titles? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n Now please use valid SQLite to answer the following questions: Find the id and weight of all pets whose age is older than 1.",
    "Here are 5 examples including input and output:\n input: question: Find the name and country of origin for all artists who have release at least one song of resolution above 900. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\n input: question: Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )\n input: question: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n input: question: What are the titles of all movies that have between 3 and 5 stars? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5\n input: question: How many departments are in the division AS? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"\n Now please use valid SQLite to answer the following questions: What is the id and weight of every pet who is older than 1?",
    "Here are 5 examples including input and output:\n input: question: List the authors who do not have submission to any workshop. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\n input: question: What is the total number of hours per work and number of games played by David Shieber? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"\n input: question: Group by ships by flag, and return number of ships that have each flag. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) ,  flag FROM ship GROUP BY flag\n input: question: Show each location and the number of cinemas there. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION\n input: question: How many distinct characteristic names does the product \"cumin\" have? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n Now please use valid SQLite to answer the following questions: Find the average and maximum age for each type of pet.",
    "Here are 5 examples including input and output:\n input: question: Show all account ids and account details. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT account_id ,  account_details FROM Accounts\n input: question: List the names of journalists who have not reported any event. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)\n input: question: List the distinct region of clubs in ascending alphabetical order. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT DISTINCT Region FROM club ORDER BY Region ASC\n input: question: How many accounts are there for each customer id? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n input: question: What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'\n Now please use valid SQLite to answer the following questions: What is the average and maximum age for each pet type?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct years in which the competitions type is not \"Tournament\"? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"\n input: question: What are the names of enzymes that include the string 'ALA'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\n input: question: What are the employee ids for employees who make more than the average? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)\n input: question: What is the id of the order which has the most items? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of the dorm with both a TV Lounge and Study Room listed as amenities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\n Now please use valid SQLite to answer the following questions: Find the average weight for each pet type.",
    "Here are 5 examples including input and output:\n input: question: How many lessons taught by staff whose first name has letter 'a' in it? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"\n input: question: What are the times of elimination for any instances in which the elimination was done by Punk or Orton? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"\n input: question: Show the countries that have managers of age above 50 or below 46. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46\n input: question: What is the genre name of the film HUNGER ROOF? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'\n input: question: Find the first name of students who is older than 20. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname FROM student WHERE age  >  20\n Now please use valid SQLite to answer the following questions: What is the average weight for each type of pet?",
    "Here are 5 examples including input and output:\n input: question: What are the classes of races that have two or more corresponding races? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n input: question: What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details\n input: question: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n input: question: Show all city with a branch opened in 2001 and a branch with more than 100 membership. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n input: question: What is the name of the 3 employees who get paid the least? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n Now please use valid SQLite to answer the following questions: Find the first name and age of students who have a pet.",
    "Here are 5 examples including input and output:\n input: question: Find the most prominent max page size among all the products. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n input: question: What are names of the movies that are either made after 2000 or reviewed by Brittany Harris? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000\n input: question: What are the planned delivery date and actual delivery date for each booking? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS\n input: question: Tell me the employee id of the head of the department with the least employees. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n input: question: Find the average elevation of all airports for each country. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT avg(elevation) ,  country FROM airports GROUP BY country\n Now please use valid SQLite to answer the following questions: What are the different first names and ages of the students who do have pets?",
    "Here are 5 examples including input and output:\n input: question: Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )\n input: question: What is the average, minimum, maximum, and total transaction amount? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\n input: question: How many different professors are there for the different schools? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code\n input: question: List the names of companies in descending order of market value. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM Companies ORDER BY Market_Value_billion DESC\n input: question: How many persons are not body builders? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)\n Now please use valid SQLite to answer the following questions: Find the id of the pet owned by student whose last name is ‘Smith’.",
    "Here are 5 examples including input and output:\n input: question: What are the first and last names of the instructors who teach the top 3 number of courses? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3\n input: question: Show institution types, along with the number of institutions and total enrollment for each type. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE\n input: question: What are the names of the songs whose rating is below the rating of all songs in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n input: question: What is all the information of all the products that have a price between 60 and 120? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT * FROM products WHERE price BETWEEN 60 AND 120\n input: question: Return the countries of the mountains that have a height larger than 5000. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Country FROM mountain WHERE Height  >  5000\n Now please use valid SQLite to answer the following questions: What is the id of the pet owned by the student whose last name is 'Smith'?",
    "Here are 5 examples including input and output:\n input: question: How many faculty lines are there at San Francisco State University in 2004? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"\n input: question: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n input: question: What is the average and maximum number of hours students who made the team practiced? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: Find the names of courses that have either 3 credits or 1 credit but 4 hours. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\n input: question: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n Now please use valid SQLite to answer the following questions: Find the number of pets for each student who has any pet and student id.",
    "Here are 5 examples including input and output:\n input: question: What are the the full names and ids for all customers, and how many accounts does each have? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n input: question: Which programs are never broadcasted in the morning? Give me the names of the programs. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"\n input: question: List the names of all songs that have 4 minute duration or are in English. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"\n input: question: How many games are played for all football games by students on scholarship? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'\n input: question: What is the name and city of the airport that the most routes end at? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "Here are 5 examples including input and output:\n input: question: How many games in total did team Boston Red Stockings attend from 2000 to 2010? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\n input: question: What are the names of all songs that have a lower rating than some song of blues genre? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")\n input: question: What are the first names of student who only took one course? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1\n input: question: What are the highest cost, lowest cost and average cost of procedures? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures\n input: question: What are the last names and ages of the students who are allergic to milk and cat? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n Now please use valid SQLite to answer the following questions: Find the first name and gender of student who have more than one pet.",
    "Here are 5 examples including input and output:\n input: question: Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1\n input: question: What are the names of the workshop groups that have bookings with status code \"stop\"? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"\n input: question: List all customer status codes and the number of customers having each status code. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;\n input: question: What is the maximum total amount paid by a customer? List the customer id and amount. serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1\n input: question: Give me the product type, name and price for all the products supplied by supplier id 3. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\n Now please use valid SQLite to answer the following questions: What is the first name and gender of the all the students who have more than one pet?",
    "Here are 5 examples including input and output:\n input: question: How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1\n input: question: List the titles of the papers whose authors are from the institution \"Indiana University\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n input: question: Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office\n input: question: What is the name of the language that the film 'AIRPORT POLLOCK' is in? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n input: question: Give the name of the highest paid instructor. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor ORDER BY salary DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the last name of the student who has a cat that is age 3.",
    "Here are 5 examples including input and output:\n input: question: Find the name of rooms whose base price is between 120 and 150. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150\n input: question: How many registed students do each course have? List course name and the number of their registered students? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n input: question: For each advisor, report the total number of students advised by him or her. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor\n input: question: List all vehicle id serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT vehicle_id FROM Vehicles;\n input: question: What are the ids of all moviest hat have not been reviewed by Britanny Harris? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n Now please use valid SQLite to answer the following questions: What is the last name of the student who has a cat that is 3 years old?",
    "Here are 5 examples including input and output:\n input: question: What are the first and last names of all students who are not living in the city HKG and order the results by age? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age\n input: question: Find the team names of the universities whose enrollments are smaller than the average enrollment size. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)\n input: question: What are the names of all colleges with a larger enrollment than the largest college in Florida? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n input: question: Find the names of products that were bought by at least two distinct customers. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2\n input: question: What are the names of all songs that are approximately 4 minutes long or are in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"\n Now please use valid SQLite to answer the following questions: Find the average age of students who do not have any pet .",
    "Here are 5 examples including input and output:\n input: question: What are the names and number of works for all artists who have sung at least one song in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1\n input: question: What is the first and last name of all students who play Football or Lacrosse? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\n input: question: Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"\n input: question: Count the number of songs. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM Songs\n input: question: Find the full name of the customer with the email \"luisg@embraer.com.br\". serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\n Now please use valid SQLite to answer the following questions: What is the average age for all students who do not own any pets ?",
    "Here are 5 examples including input and output:\n input: question: What are all of the products whose name includes the substring \"Scanner\"? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT product FROM product WHERE product LIKE \"%Scanner%\"\n input: question: What is the most frequently ordered product? Tell me the detail of the product serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1\n input: question: Count the number of films whose title contains the word 'Dummy'. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n input: question: what are the last names of the teachers who teach grade 5? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\n input: question: Count the number of all the calendar items. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_calendar\n Now please use valid SQLite to answer the following questions: How many continents are there?",
    "Here are 5 examples including input and output:\n input: question: What is the id and name of the aircraft that can cover the maximum distance? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n input: question: Show the name of the customer who has the most orders. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is allergy type of a cat allergy? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\n input: question: How many instructors are in the department with the highest budget, and what is their average salary? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\n input: question: Which institution has the most papers? Find the name of the institution. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the number of continents?",
    "Here are 5 examples including input and output:\n input: question: How many different players trained for more than 1000 hours? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM Player WHERE HS  >  1000\n input: question: What is the name of school that has the smallest enrollment in each state? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n input: question: What are the names of courses with 1 credit? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE WHERE Credits  =  1\n input: question: What are the title and rental rate of the film with the highest rental rate? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n input: question: Who are Bob's friends? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'\n Now please use valid SQLite to answer the following questions: How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "Here are 5 examples including input and output:\n input: question: What is the average amount due for all the payments? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT avg(amount_due) FROM payments\n input: question: Show the delegate from district 1 in election. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Delegate FROM election WHERE District  =  1\n input: question: Find the last name and hire date of the professor who is in office DRE 102. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n input: question: What are the names of scientists who have not been assigned a project? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n input: question: Show the ids of all the faculty members who participate in an activity and advise a student. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n Now please use valid SQLite to answer the following questions: For each continent, list its id, name, and how many countries it has?",
    "Here are 5 examples including input and output:\n input: question: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n input: question: List all the contact channel codes that were used less than 5 times. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n input: question: Find the maximum and minimum durations of tracks in milliseconds. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n input: question: List the id of students who registered some courses and the number of their registered courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n input: question: Show the average, minimum, and maximum age for different majors. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major\n Now please use valid SQLite to answer the following questions: How many countries are listed?",
    "Here are 5 examples including input and output:\n input: question: List the status shared by more than two roller coaster. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2\n input: question: What is the id and last name of the driver who participated in the most races after 2010? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n input: question: Count different addresses of each school. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\n input: question: What are the names of all districts with a city area greater than 10 or have more than 100000 people living there? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000\n input: question: Give me the start station and end station for the trips with the three oldest id. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n Now please use valid SQLite to answer the following questions: How many countries exist?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"\n input: question: What are the full names of faculty members who are a part of department 520? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\n input: question: What is the first and last name of the oldest employee? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1\n input: question: Give the budget type code that is most common among documents with expenses. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the full names of customers who do not have any accounts? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n Now please use valid SQLite to answer the following questions: How many models does each car maker produce? List maker full name, id and the number.",
    "Here are 5 examples including input and output:\n input: question: What are the names of projects that have not been assigned? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n input: question: Give the name of the wine with the highest score. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE ORDER BY Score LIMIT 1\n input: question: What are the codes and names of the cheapest products in each category? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT code ,  name ,  min(price) FROM products GROUP BY name\n input: question: Show all opening years and the number of churches that opened in that year. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT open_date ,  count(*) FROM church GROUP BY open_date\n input: question: Show names for all employees with salary more than the average. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n Now please use valid SQLite to answer the following questions: What is the full name of each car maker, along with its id and how many models it produces?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the playlists? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT name FROM playlists;\n input: question: What are the names of all teams? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Name FROM Team\n input: question: Find the total student enrollment for different affiliation type schools. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n input: question: Which allergy type has least number of allergies? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n input: question: What are the names and ids of stations that had more than 14 bikes available on average or were installed in December? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"\n Now please use valid SQLite to answer the following questions: Which model of the car has the minimum horsepower?",
    "Here are 5 examples including input and output:\n input: question: Find the number of activities Mark Giuliano is involved in. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n input: question: What are the first names for students who have an \"a\" in their first name? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'\n input: question: Find the number of distinct courses that have enrolled students. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(course_id) FROM Student_Course_Enrolment\n input: question: Find the name, address, number of students in the departments that have the top 3 highest number of students. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\n input: question: What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\n Now please use valid SQLite to answer the following questions: What is the model of the car with the smallest amount of horsepower?",
    "Here are 5 examples including input and output:\n input: question: Find the number of students that have at least one grade \"B\". serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"\n input: question: Return the ids of documents that do not have expenses. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses\n input: question: What is the average and minimum age of all artists from United States. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n input: question: Return the names of musicals who have the nominee Bob Fosse. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n input: question: How many phones belongs to each accreditation type? serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n Now please use valid SQLite to answer the following questions: Find the model of the car whose weight is below the average weight.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the song that was released most recently? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1\n input: question: What are the method, date and amount of each payment? Sort the list in ascending order of date. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n input: question: What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"\n input: question: How many courses have more than 2 credits? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT count(*) FROM COURSE WHERE Credits  >  2\n input: question: How many courses do the student whose id is 171 attend? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n Now please use valid SQLite to answer the following questions: What is the model for the car with a weight smaller than the average?",
    "Here are 5 examples including input and output:\n input: question: List the open date of open year of the shop named \"Apple\". serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"\n input: question: Show different builders of railways, along with the corresponding number of railways using each builder. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder\n input: question: Which restaurants have highest rating? List the restaurant name and its rating. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n input: question: What are the ids and names of accounts with 4 or more transactions? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n input: question: Show the names and total passengers for all train stations not in London. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n Now please use valid SQLite to answer the following questions: Find the name of the makers that produced some cars in the year of 1970?",
    "Here are 5 examples including input and output:\n input: question: Find all the catalog publishers whose name contains \"Murray\" serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"\n input: question: Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000. serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005\n input: question: Find the title and star rating of the movie that got the least rating star for each reviewer. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID\n input: question: What are the names and scores of all wines? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name ,  Score FROM WINE\n input: question: Find the name of the product that has the smallest capacity. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the name of the different car makers who produced a car in 1970?",
    "Here are 5 examples including input and output:\n input: question: Which parts have more than 2 faults? Show the part name and id. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2\n input: question: What is the location of the party with the most hosts? serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n input: question: Find the id and name of the staff who has been assigned for the shortest period. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1\n input: question: Return the minimum, maximum, and average seating across all tracks. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track\n input: question: How many distinct types of accounts are there? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(DISTINCT acc_type) FROM customer\n Now please use valid SQLite to answer the following questions: Find the make and production time of the cars that were produced in the earliest year?",
    "Here are 5 examples including input and output:\n input: question: What is the theme, date, and attendance for the exhibition in year 2004? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004\n input: question: What are the names of products produced by both Creative Labs and Sony? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n input: question: What are the dates of transactions with at least 100 share count or amount bigger than 100? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100\n input: question: How many advisors are there? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(DISTINCT advisor) FROM Student\n input: question: List all the log ids and their descriptions from the problem logs. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id ,  log_entry_description FROM problem_log\n Now please use valid SQLite to answer the following questions: What is the maker of the carr produced in the earliest year and what year was it?",
    "Here are 5 examples including input and output:\n input: question: How many distinct currency codes are there for all drama workshop groups? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups\n input: question: Count the number of different account types. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(DISTINCT acc_type) FROM customer\n input: question: What are the names of all directors who made one movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1\n input: question: List the names and locations of all stations ordered by their yearly entry exit and interchange amounts. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges\n input: question: What are the draft pick numbers and draft classes for players who play the Defender position? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n Now please use valid SQLite to answer the following questions: Which distinct car models are the produced after 1980?",
    "Here are 5 examples including input and output:\n input: question: Which studios have never worked with the director Walter Hill? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"\n input: question: List the name of the colleges whose enrollment is greater 18000 sorted by the college's name. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n input: question: Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1\n input: question: List the names of patients who have made appointments. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn\n input: question: What are the names of customers who never made an order. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id\n Now please use valid SQLite to answer the following questions: What are the different models for the cards produced after 1980?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n input: question: What are the booking start and end dates of the apartments with more than 2 bedrooms? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2\n input: question: How many candidates are there? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT count(*) FROM candidate\n input: question: Find the number of airports whose name contain the word 'International'. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airports WHERE name LIKE '%International%'\n input: question: How many trips stated from  a station in Mountain View and ended at one in Palo Alto? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"\n Now please use valid SQLite to answer the following questions: How many car makers are there in each continents? List the continent name and the count.",
    "Here are 5 examples including input and output:\n input: question: What is the location with the most cinemas opened in year 2010 or later? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1\n input: question: Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"\n input: question: Show the names and ids of tourist attractions that are visited at least two times. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n input: question: How many friends does Dan have? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n input: question: Return the maximum and minimum population among all counties. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT max(Population) ,  min(Population) FROM county\n Now please use valid SQLite to answer the following questions: What is the name of each continent and how many car makers are there in each one?",
    "Here are 5 examples including input and output:\n input: question: How many faculty members do we have for each rank and gender? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n input: question: Find the names of users who did not leave any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n input: question: Display the first name, and department number for all employees whose last name is \"McEwen\". serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\n input: question: List from which date and to which date these staff work: project staff of the project which hires the most staffs serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\n input: question: What are the numbers of all flights that can cover a distance of more than 2000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight WHERE distance  >  2000\n Now please use valid SQLite to answer the following questions: Which of the countries has the most car makers? List the country name.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the artist, for each language, that has the most songs with a higher resolution than 500? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1\n input: question: What is id of the city that hosted events in the most recent year? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1\n input: question: Which cities have regional population above 8000000 or below 5000000? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000\n input: question: Count the number of distinct claim outcome codes. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT count(DISTINCT claim_outcome_code) FROM claims_processing\n input: question: What is the title, phone and hire date of Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n Now please use valid SQLite to answer the following questions: What is the name of the country with the most car makers?",
    "Here are 5 examples including input and output:\n input: question: Show the customer id and number of accounts with most accounts. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is\n input: question: What are the name, origin and owner of each program? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name ,  origin ,  OWNER FROM program\n input: question: Show the names of all the donors except those whose donation amount less than 9. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9\n input: question: Show the names of customers who have the most mailshots. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many car models are produced by each maker ? Only list the count and the maker full name .",
    "Here are 5 examples including input and output:\n input: question: Which catalog publisher has published the most catalogs? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1\n input: question: What is the first and last name of all employees who live in the city Damianfort? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n input: question: Find the id and name of the stadium where the largest number of injury accidents occurred. serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: Count the number of countries. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT count(*) FROM country\n input: question: What are the codes of types of documents of which there are for or more? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n Now please use valid SQLite to answer the following questions: What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "Here are 5 examples including input and output:\n input: question: For each classroom, show the classroom number and find how many students are using it. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list GROUP BY classroom\n input: question: Who advises student 1004? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Advisor FROM Student WHERE StuID  =  1004\n input: question: Find the average and maximum rating of all reviews. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT avg(rating) ,  max(rating) FROM review\n input: question: Which address do not have any member with the black membership card? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n input: question: For each product, return its id and the number of times it was ordered. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id\n Now please use valid SQLite to answer the following questions: What is the accelerate of the car make amc hornet sportabout (sw)?",
    "Here are 5 examples including input and output:\n input: question: Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)\n input: question: Show the id, name of each editor and the number of journal committees they are on. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n input: question: For each submission, show the author and their affiliated college. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author ,  College FROM submission\n input: question: What are the names and ids of products costing between 600 and 700? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n input: question: Find the names of schools that have more than one donator with donation amount above 8.5. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "Here are 5 examples including input and output:\n input: question: How many statements do we have? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Statements\n input: question: What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n input: question: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'? serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'\n input: question: What is the maximum enrollment across all schools? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT max(Enrollment) FROM university\n input: question: What are the names of countries that have both players with position forward and players with position defender? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n Now please use valid SQLite to answer the following questions: How many car makers are there in france?",
    "Here are 5 examples including input and output:\n input: question: Count the number of countries. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT count(*) FROM county_public_safety\n input: question: Show the leader names and locations of colleges. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Leader_Name ,  College_Location FROM college\n input: question: Give the full name and staff id of the staff who has handled the fewest payments. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n input: question: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n input: question: How many institutions are there? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM inst\n Now please use valid SQLite to answer the following questions: What is the number of makers of care in France?",
    "Here are 5 examples including input and output:\n input: question: Find the name of amenities of the dorm where the student with last name Smith is living in. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n input: question: Please show the date of ceremony of the volumes that last more than 2 weeks on top. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2\n input: question: How many parks are there in Atlanta city? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM park WHERE city = 'Atlanta';\n input: question: How many faculty members participate in an activity? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(DISTINCT FacID) FROM Faculty_participates_in\n input: question: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n Now please use valid SQLite to answer the following questions: How many car models are produced in the usa?",
    "Here are 5 examples including input and output:\n input: question: Which district has the least area? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1\n input: question: Show the organizer and name for churches that opened between 1830 and 1840. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840\n input: question: What are the names, classes, and dates for all races? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name ,  CLASS ,  date FROM race\n input: question: Which rank is the most common among captains? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1\n input: question: Find the id of the candidate who got the lowest oppose rate. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the count of the car models produced in the United States?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the dorms that can accomdate more than 300 students? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE student_capacity  >  300\n input: question: How many transaction does account with name 337 have? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n input: question: List the number of invoices and the invoice total from California. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\n input: question: Return names of songs in volumes that are by artists that are at least 32 years old. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32\n input: question: What is the highest elevation of an airport in the country of Iceland? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n Now please use valid SQLite to answer the following questions: What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "Here are 5 examples including input and output:\n input: question: What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate\n input: question: Show the names of editors that are on at least two journal committees. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n input: question: How many distinct students have been in detention? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(DISTINCT student_id) FROM Students_in_Detention\n input: question: How many different kinds of clients are supported by the web clients accelerators? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT count(DISTINCT client) FROM web_client_accelerator\n input: question: What is the average weight of all players? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT avg(weight) FROM Player\n Now please use valid SQLite to answer the following questions: What is the average miles per gallon of all the cards with 4 cylinders?",
    "Here are 5 examples including input and output:\n input: question: Which campus was opened between 1935 and 1939? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939\n input: question: Find the distinct first names of all the students who have vice president votes and whose city code is not PIT. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"\n input: question: Show the denomination shared by schools founded before 1890 and schools founded after 1900 serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n input: question: What is the average age of all artists? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT avg(Age) FROM artist\n input: question: Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\n Now please use valid SQLite to answer the following questions: What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "Here are 5 examples including input and output:\n input: question: Count the number of customers. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers\n input: question: Compute the average salary of the players in the team called 'Boston Red Stockings'. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'\n input: question: Show the type of school and the number of buses for each type. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type\n input: question: Show the detail of vehicle with id 1. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;\n input: question: Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"\n Now please use valid SQLite to answer the following questions: What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "Here are 5 examples including input and output:\n input: question: For each aircraft that has won an award, what is its name and how many time has it won? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft\n input: question: Which submission received the highest score in acceptance result. Show me the result. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1\n input: question: How many students are advised by each rank of faculty? List the rank and the number of students. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank\n input: question: Who made the latest order? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1\n input: question: What are the different names and countries of origins for all artists whose song ratings are above 9? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n Now please use valid SQLite to answer the following questions: What are all the makers and models?",
    "Here are 5 examples including input and output:\n input: question: What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;\n input: question: Find the total number of scientists. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) FROM scientists\n input: question: What is average number of students enrolled in Florida colleges? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(enr) FROM College WHERE state  =  'FL'\n input: question: What are the names and ids of the different albums, and how many tracks are on each? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n input: question: In which country does Roberto Almeida? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n Now please use valid SQLite to answer the following questions: What are the makers and models?",
    "Here are 5 examples including input and output:\n input: question: What is the race class with most number of races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of all clubs that do not have any players? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n input: question: Show flight number for all flights with more than 2000 distance. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight WHERE distance  >  2000\n input: question: Return the description for the courses named \"database\". serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT course_description FROM COURSES WHERE course_name  =  \"database\"\n input: question: Show the names of journalists and the number of events they reported. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name\n Now please use valid SQLite to answer the following questions: What are the countries having at least one car maker? List name and id.",
    "Here are 5 examples including input and output:\n input: question: Show the account id and name with at least 4 transactions. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n input: question: List the name and the number of enrolled student for each course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n input: question: What is the number of routes whose destinations are Italian airports? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n input: question: Find the number of albums. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT count(*) FROM ALBUM\n input: question: What is the average age for each gender? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  gender FROM Person GROUP BY gender\n Now please use valid SQLite to answer the following questions: What are the names and ids of all countries with at least one car maker?",
    "Here are 5 examples including input and output:\n input: question: Find the brand and name for each camera lens, and sort in descending order of maximum aperture. serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC\n input: question: Where does the customer with the first name Linda live? And what is her email? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n input: question: Which room has the largest number of reservations? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n input: question: List the names of phones in ascending order of price. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Name FROM phone ORDER BY Price ASC\n input: question: Find the name of the department that has the fewest members. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the number of the cars with horsepower more than 150?",
    "Here are 5 examples including input and output:\n input: question: What is the date of birth for the staff member named Janessa Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n input: question: Find the first name, last name and id for the top three players won the most player awards. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;\n input: question: What are the names of all the different reviewers who rates Gone with the Wind? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'\n input: question: What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\n input: question: List the hosts of performances in ascending order of attendance. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT HOST FROM performance ORDER BY Attendance ASC\n Now please use valid SQLite to answer the following questions: What is the number of cars with a horsepower greater than 150?",
    "Here are 5 examples including input and output:\n input: question: Who is the advisor of student with ID 1004? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Advisor FROM Student WHERE StuID  =  1004\n input: question: What are the full names of customers who have accounts? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n input: question: Find the names of districts where have both city mall and village store type stores. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n input: question: What are the names of ships that have more than one captain? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n input: question: How many Professors are in building NEB? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"\n Now please use valid SQLite to answer the following questions: What is the average weight of cars each year?",
    "Here are 5 examples including input and output:\n input: question: Find the name of amenities Smith Hall dorm have. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'\n input: question: Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n input: question: What are the names of all females who are friends with Zach? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'\n input: question: Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC\n input: question: Find the number of checking accounts for each account name. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n Now please use valid SQLite to answer the following questions: What is the average weight and year for each year?",
    "Here are 5 examples including input and output:\n input: question: What are the first names and last names of all the guests? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT guest_first_name ,  guest_last_name FROM Guests\n input: question: Show the shop addresses ordered by their opening year. serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT address FROM shop ORDER BY open_year\n input: question: Find the distinct student first names of all students that have grade point at least 3.8 in one course. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8\n input: question: What are the ids of the students who attended courses in the statistics department in order of attendance date. serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance\n input: question: List the name and the number of stations for all the cities that have at least 15 stations. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15\n Now please use valid SQLite to answer the following questions: Which countries in europe have at least 3 car manufacturers?",
    "Here are 5 examples including input and output:\n input: question: Show all card type codes. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT DISTINCT card_type_code FROM Customers_Cards\n input: question: Which city has the least number of customers whose type code is \"Good Credit Rating\"? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1\n input: question: Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\n input: question: Return the structure description of the document that has been accessed the fewest number of times. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n input: question: How many members of club \"Bootup Baltimore\" are younger than 18? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\n Now please use valid SQLite to answer the following questions: What are the names of all European countries with at least 3 manufacturers?",
    "Here are 5 examples including input and output:\n input: question: List member names and their party names. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n input: question: What is the name and rank of every company ordered by descending number of sales? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  rank FROM company ORDER BY Sales_billion DESC\n input: question: What is the total amount of moeny paid by the customer Carole Bernhard? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\n input: question: What are the phone numbers of customers using the policy with the code \"Life Insurance\"? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\n input: question: For each bed type, find the average room price. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n Now please use valid SQLite to answer the following questions: What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the directors who made exactly one movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1\n input: question: Show the ids of the faculty who don't participate in any activity. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in\n input: question: Which problem log was created most recently? Give me the log id. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1\n input: question: Return the names of cities, ordered alphabetically. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Name FROM city ORDER BY Name ASC\n input: question: Find the name of the dorm with the largest capacity. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "Here are 5 examples including input and output:\n input: question: Return all the information for all employees without any department number. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE department_id  =  \"null\"\n input: question: Which country does customer with first name as Carole and last name as Bernhard lived in? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n input: question: What are the names and locations of festivals? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Festival_Name ,  LOCATION FROM festival_detail\n input: question: Show order ids and the total quantity in each order. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\n input: question: What are the names of all the media types? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT name FROM media_types;\n Now please use valid SQLite to answer the following questions: Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "Here are 5 examples including input and output:\n input: question: What are the top 3 artists with the largest number of songs in the language Bangla? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n input: question: What are the distinct names of wines with prices higher than any wine from John Anthony winery. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")\n input: question: Find the average hours of all projects. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT avg(hours) FROM projects\n input: question: What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5\n input: question: Which tourist attraction is associated with the photo \"game1\"? Return its name. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\n Now please use valid SQLite to answer the following questions: What is the car model with the highest mpg ?",
    "Here are 5 examples including input and output:\n input: question: What are the names and revenues of the companies with the highest revenues in each headquarter city? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\n input: question: What are the first and last names of all students who are living in a dorm with a TV Lounge? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n input: question: What is the department name and corresponding building for the department with the greatest budget? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1\n input: question: What is the last name of the musicians who has played back position the most? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\n input: question: What are the personal names used both by some course authors and some students? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n Now please use valid SQLite to answer the following questions: What is the average horsepower of the cars before 1980?",
    "Here are 5 examples including input and output:\n input: question: List all names of courses with 1 credit? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE WHERE Credits  =  1\n input: question: How many albums does Billy Cobham has? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n input: question: Count the number of distinct product types. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT count(DISTINCT product_type_code) FROM products\n input: question: How many video games do you have? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(*) FROM Video_games\n input: question: What are the invoice numbers created before 1989-09-03 or after 2007-12-25? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n Now please use valid SQLite to answer the following questions: What is the average horsepower for all cars produced before 1980 ?",
    "Here are 5 examples including input and output:\n input: question: How many employees have certificate. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(DISTINCT eid) FROM Certificate\n input: question: What is the average enrollment number? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(enr) FROM College\n input: question: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\n input: question: What is the total count of enzymes? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM enzyme\n input: question: What are the usernames and passwords of users that have the most common role? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the average edispl of the cars of model volvo?",
    "Here are 5 examples including input and output:\n input: question: Find the list of documents that are both in the most three popular type and have the most three popular structure. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n input: question: Where is the club \"Hopkins Student Enterprises\" located? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"\n input: question: Find the names of all reviewers who have contributed three or more ratings. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3\n input: question: What is the average number of hours spent practicing for students who got rejected? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'\n input: question: Select the name and price of the cheapest product. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the average edispl for all volvos?",
    "Here are 5 examples including input and output:\n input: question: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n input: question: What is the address of the restaurant Subway? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n input: question: Return the booking start date and end date for the apartments that have type code \"Duplex\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"\n input: question: What is the code of each role and the number of employees in each role? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code\n input: question: Show the names of trains and locations of railways they are in. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\n Now please use valid SQLite to answer the following questions: What is the maximum accelerate for different number of cylinders?",
    "Here are 5 examples including input and output:\n input: question: Show the crime rate of counties with a city having white percentage more than 90. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90\n input: question: Return the average number of weeks on top for volumes by artists that are at most 25 years old. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n input: question: What is the customer id of the customer who has the most orders? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")\n input: question: report the total number of degrees granted between 1998 and 2002. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\n Now please use valid SQLite to answer the following questions: What is the maximum accelerate for all the different cylinders?",
    "Here are 5 examples including input and output:\n input: question: What is the average latitude and longitude in San Jose? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n input: question: What are the names of all employees who have a certificate to fly Boeing 737-800? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n input: question: What are the names of the songs whose title has the word \"the\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT title FROM songs WHERE title LIKE '% the %'\n input: question: What are the prices of wines produced before the year of 2010? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Price FROM WINE WHERE YEAR  <  2010\n input: question: What are department ids for departments with managers managing more than 3 employees? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n Now please use valid SQLite to answer the following questions: Which model has the most version(make) of cars?",
    "Here are 5 examples including input and output:\n input: question: List the id, color scheme, and name for all the photos. serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT id ,  color ,  name FROM photos\n input: question: What is the first name of the professor who is teaching CIS-220 and QM-261? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\n input: question: How many locations are listed in the database? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_locations\n input: question: What is the name of the activity that has the most faculty members involved in? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n input: question: How much in total does customer with first name as Carole and last name as Bernhard paid? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\n Now please use valid SQLite to answer the following questions: What model has the most different versions?",
    "Here are 5 examples including input and output:\n input: question: Which product has the most problems? Give me the number of problems and the product name. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of the artists who sang the shortest song? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n input: question: Show the average age for male and female students. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT avg(age) ,  sex FROM Student GROUP BY sex\n input: question: What are the type and nationality of ships? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE ,  Nationality FROM ship\n input: question: Return the total revenue of companies with headquarters in Tokyo or Taiwan. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n Now please use valid SQLite to answer the following questions: How many cars have more than 4 cylinders?",
    "Here are 5 examples including input and output:\n input: question: Return all the apartment numbers sorted by the room count in ascending order. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments ORDER BY room_count ASC\n input: question: display the country ID and number of cities for each country. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\n input: question: What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n input: question: How many universities have a location that contains NY? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\n input: question: How many girl students who are younger than 25? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n Now please use valid SQLite to answer the following questions: What is the number of cars with more than 4 cylinders?",
    "Here are 5 examples including input and output:\n input: question: Find the title of course that is provided by Statistics but not Psychology departments. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'\n input: question: What is zip code of customer with first name as Carole and last name as Bernhard? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n input: question: How many services are there? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT count(*) FROM services\n input: question: What is the first name of all employees who do not give any lessons? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id\n input: question: What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'\n Now please use valid SQLite to answer the following questions: how many cars were produced in 1980?",
    "Here are 5 examples including input and output:\n input: question: List all location codes and location names. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code ,  location_name FROM Ref_locations\n input: question: What are the names of tourist attraction that Alison visited but Rosalind did not visit? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"\n input: question: What is the count of aircrafts that have a distance between 1000 and 5000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000\n input: question: Who are the different players, what season do they play in, and what is the name of the team they are on? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id\n input: question: What is the most common type of ships? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: In 1980, how many cars were made?",
    "Here are 5 examples including input and output:\n input: question: What are the issue dates of volumes associated with the artist aged 23 or younger? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23\n input: question: Return the average price for each product type. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code\n input: question: What is the number of states that has some college whose enrollment is larger than the average enrollment? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n input: question: List the top 10 customers by total gross sales. List customers' first and last name and total gross sales. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\n input: question: How many customers do not have an account? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n Now please use valid SQLite to answer the following questions: How many car models were produced by the maker with full name American Motor Company?",
    "Here are 5 examples including input and output:\n input: question: Show each premise type and the number of premises in that type. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type\n input: question: Find the dates on which more than one revisions were made. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1\n input: question: return all columns of the albums created in the year of 2012. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2012\n input: question: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n input: question: What is the id of the appointment that started most recently? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the number of car models created by the car maker American Motor Company?",
    "Here are 5 examples including input and output:\n input: question: What is the average account balance of customers with credit score below 50 for the different account types? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n input: question: Find the names of scientists who are not working on the project with the highest hours. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\n input: question: What is the total salary paid by team Boston Red Stockings in 2010? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010\n input: question: Show all origins and the number of flights from each origin. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin ,  count(*) FROM Flight GROUP BY origin\n input: question: Find the last name of female (sex is F) students in the descending order of age. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\n Now please use valid SQLite to answer the following questions: Which makers designed more than 3 car models? List full name and the id.",
    "Here are 5 examples including input and output:\n input: question: display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')\n input: question: What is the phone number of the customer who has filed the most recent complaint? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\n input: question: How many female Professors do we have? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"\n input: question: How many pilots are there? serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT count(*) FROM pilot\n input: question: How many vocal types are used in the song \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n Now please use valid SQLite to answer the following questions: What are the names and ids of all makers with more than 3 models?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the instructors in the Comp. Sci. department who earn more than 80000? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000\n input: question: Which apartment type code appears the most often? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the id of the product ordered the most often on invoices. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the ids and first names of customers who do not hold a credit card? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n input: question: How many teachers does the student named MADLOCK RAY have? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"\n Now please use valid SQLite to answer the following questions: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "Here are 5 examples including input and output:\n input: question: What are the full names and ages for all female students whose sex is F? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n input: question: Find the name of companies whose revenue is between 100 and 150. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150\n input: question: List total amount of  invoice from Chicago, IL. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n input: question: Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200\n input: question: What are the staff ids and genders of all staffs whose job title is Department Manager? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"\n Now please use valid SQLite to answer the following questions: What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "Here are 5 examples including input and output:\n input: question: What are the different software platforms for devices, and how many devices have each? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform\n input: question: What is the phone and email for customer with first name Aniyah and last name Feest? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"\n input: question: What are the start date and end date of the booking that has booked the product named 'Book collection A'? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'\n input: question: What is the sport with the most scholarship students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1\n input: question: Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"\n Now please use valid SQLite to answer the following questions: In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "Here are 5 examples including input and output:\n input: question: What is the total point count of the youngest gymnast? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n input: question: Find the number and average age of students living in each city. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\n input: question: How many distinct locations have the things with service detail 'Unsatisfied' been located in? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'\n input: question: What are the total and average enrollment of all schools? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT sum(enrollment) ,  avg(enrollment) FROM school\n input: question: List the name of tracks belongs to genre Rock or media type is MPEG audio file. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";\n Now please use valid SQLite to answer the following questions: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "Here are 5 examples including input and output:\n input: question: What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\n input: question: What are the average prices of products, grouped by manufacturer code? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer\n input: question: Which staff handled least number of payments? List the full name and the id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n input: question: What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\n input: question: List the enrollment for each school that does not have \"Catholic\" as denomination. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n Now please use valid SQLite to answer the following questions: What is the horsepower of the car with the largest accelerate?",
    "Here are 5 examples including input and output:\n input: question: show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length. serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet\n input: question: What are the distinct names of customers with an order status of Pending, sorted by customer id? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id\n input: question: List all role codes, role names, and role descriptions. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code ,  role_name ,  role_description FROM ROLES\n input: question: What is the total time for all lessons taught by Janessa Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: Give the names of people who did not participate in the candidate election. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)\n Now please use valid SQLite to answer the following questions: What is the horsepower of the car with the greatest accelerate?",
    "Here are 5 examples including input and output:\n input: question: What are all locations of train stations? serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT DISTINCT LOCATION FROM station\n input: question: Find the organisation type description of the organisation detailed as 'quo'. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'\n input: question: Show the names of members in ascending order of their rank in rounds. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC\n input: question: Show the station name with greatest number of trains. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show the names of roller coasters and names of country they are in. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID\n Now please use valid SQLite to answer the following questions: For model volvo, how many cylinders does the car with the least accelerate have?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the shop that has the most different kinds of devices in stock? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the first name of each student enrolled in class ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'\n input: question: What is the name of organization that has the greatest number of contact individuals? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n input: question: Please show the most common age of editors. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Who are the lieutenant governor and comptroller from the democratic party? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\n Now please use valid SQLite to answer the following questions: For a volvo model, how many cylinders does the version with least accelerate have?",
    "Here are 5 examples including input and output:\n input: question: Return the elimination movies of wrestlers on Team Orton. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"\n input: question: Show the name, location, and number of platforms for all stations. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  LOCATION ,  number_of_platforms FROM station\n input: question: Show the name of the shop that has the most kind of devices in stock. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n input: question: How much salary did the top 3 well-paid players get in 2001? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\n Now please use valid SQLite to answer the following questions: How many cars have a larger accelerate than the car with the largest horsepower?",
    "Here are 5 examples including input and output:\n input: question: Find the first name of students living in city PHL whose age is between 20 and 25. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\n input: question: Show other account details for account with name 338. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n input: question: List the distinct ranges of the mountains with the top 3 prominence. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\n input: question: Which committees have delegates from both democratic party and liberal party? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"\n input: question: What are the distinct publishers of publications with price higher than 5000000? serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n Now please use valid SQLite to answer the following questions: What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "Here are 5 examples including input and output:\n input: question: In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year\n input: question: Find the maximum and minimum millisecond lengths of pop tracks. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"\n input: question: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n input: question: Return the name and gender of the staff who was assigned in 2016. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"\n input: question: What is the average rating for right-footed players and left-footed players? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\n Now please use valid SQLite to answer the following questions: How many countries has more than 2 car makers ?",
    "Here are 5 examples including input and output:\n input: question: For each distinct test result, find the number of students who got the result. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\n input: question: What are the mascots for schools with enrollments above the average? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)\n input: question: What is the maximum number that a certain service is provided? List the service id, details and number. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1\n input: question: What activities do we have? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT activity_name FROM Activity\n input: question: What is the average minimum and price of the rooms for each different decor. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;\n Now please use valid SQLite to answer the following questions: What is the number of countries with more than 2 car makers ?",
    "Here are 5 examples including input and output:\n input: question: Find the names of the courses that have just one student enrollment. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n input: question: What is the average price for flights from LA to Honolulu? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n input: question: Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\". serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')\n input: question: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n input: question: Retrieve all the first and last names of authors in the alphabetical order of last names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname ,  lname FROM authors ORDER BY lname\n Now please use valid SQLite to answer the following questions: How many cars has over 6 cylinders?",
    "Here are 5 examples including input and output:\n input: question: Which year had the greatest number of courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n input: question: What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\n input: question: Select the project names which are not assigned yet. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n input: question: Show the names of the three most recent festivals. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3\n input: question: What are the ids of all vehicles? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT vehicle_id FROM Vehicles;\n Now please use valid SQLite to answer the following questions: What is the number of carsw ith over 6 cylinders?",
    "Here are 5 examples including input and output:\n input: question: What are the names of actors who are not 20 years old? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Name FROM actor WHERE Age != 20\n input: question: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n input: question: Show the name, phone, and payment method code for all customers in descending order of customer number. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n input: question: What are the ids and details of all statements? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT STATEMENT_ID ,  statement_details FROM Statements\n input: question: What destination has the fewest number of flights? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n Now please use valid SQLite to answer the following questions: For the cars with 4 cylinders, which model has the largest horsepower?",
    "Here are 5 examples including input and output:\n input: question: How many types of products have Rodrick Heaney bought in total? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n input: question: Return complaint status codes have more than 3 corresponding complaints? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3\n input: question: Find the number of rooms with more than 50 capacity for each building. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\n input: question: What are the price ranges of five star hotels? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"\n input: question: How many faculty members did the university that conferred the most degrees in 2002 have? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: For all of the 4 cylinder cars, which model has the most horsepower?",
    "Here are 5 examples including input and output:\n input: question: Find the distinct winery of wines having price between 50 and 100. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n input: question: Find the number of matches in different competitions. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition\n input: question: Show all date and share count of transactions. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT date_of_transaction ,  share_count FROM TRANSACTIONS\n input: question: Show the apartment numbers, start dates, and end dates of all the apartment bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id\n input: question: Which department has the highest average student GPA, and what is the average gpa? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "Here are 5 examples including input and output:\n input: question: List the names of studios that have at least two films. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\n input: question: What are the all games score and location of the school called Clemson? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'\n input: question: How many countries do not have an roller coaster longer than 3000? serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )\n input: question: What are the names of instructors who have taught C Programming courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n input: question: Return the account details with the greatest value, as well as those that include the character 5. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"\n Now please use valid SQLite to answer the following questions: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "Here are 5 examples including input and output:\n input: question: How many female students (sex is F) whose age is below 25? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n input: question: find the number of players whose points are lower than 30 in each position. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n input: question: What are the different names for all songs that have a higher resolution than English songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")\n input: question: List the 3 highest salaries of the players in 2001? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\n input: question: Count the number of male students who had class senator votes in the fall election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\n Now please use valid SQLite to answer the following questions: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "Here are 5 examples including input and output:\n input: question: How many students are there? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student\n input: question: Show the names of journalists and the dates of the events they reported. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID\n input: question: Show all distinct building descriptions. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT DISTINCT building_description FROM Apartment_Buildings\n input: question: How many songs have 4 minute duration? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT count(*) FROM files WHERE duration LIKE \"4:%\"\n input: question: Find the total revenue created by the companies whose headquarter is located at Austin. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'\n Now please use valid SQLite to answer the following questions: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "Here are 5 examples including input and output:\n input: question: What are the different card types, and how many cards are there of each? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n input: question: What are the first and last names of people who payed more than the rooms' base prices? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0\n input: question: Find the full names of employees living in the city of Calgary. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n input: question: Find the name and component amount of the least popular furniture. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1\n input: question: what is the full name and id of the college with the largest number of baseball players? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "Here are 5 examples including input and output:\n input: question: How many members are in each party? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n input: question: Show names of climbers and the names of mountains they climb. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n input: question: What are the first names of students in room 108? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM list WHERE classroom  =  108\n input: question: Find the names of songs whose genre is modern or language is English. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"\n input: question: What is the day Number and date of all the documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date\n Now please use valid SQLite to answer the following questions: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "Here are 5 examples including input and output:\n input: question: What are the full names of students minoring in department 140? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140\n input: question: Find the name of students who took any class in the years of 2009 and 2010. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010\n input: question: What are the distinct move in dates of the residents? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT DISTINCT date_moved_in FROM residents\n input: question: What are the titles and average ratings for all movies that have the lowest average rating? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1\n input: question: List the types of competition that have at most five competitions of that type. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5\n Now please use valid SQLite to answer the following questions: What are the name of the countries where there is not a single car maker?",
    "Here are 5 examples including input and output:\n input: question: Which city does student Linda Smith live in? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";\n input: question: How many artists are there? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT count(*) FROM artist\n input: question: What information is there on albums from 2010? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2010\n input: question: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010\n input: question: Which job titles correspond to jobs with salaries over 9000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_title FROM jobs WHERE min_salary  >  9000\n Now please use valid SQLite to answer the following questions: What are the names of the countries with no car makers?",
    "Here are 5 examples including input and output:\n input: question: Find the marketing region description of China? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"\n input: question: List the names of the city with the top 5 white percentages. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Name FROM city ORDER BY White DESC LIMIT 5\n input: question: What are the names and distances for all airplanes? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft\n input: question: When is the last day any resident moved in? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT max(date_moved_in) FROM Residents\n input: question: What are the distinct hometowns of gymnasts with total points more than 57.5? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\n Now please use valid SQLite to answer the following questions: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "Here are 5 examples including input and output:\n input: question: Whah are the name of each industry and the number of companies in that industry? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry\n input: question: What are the distinct billing countries of the invoices? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT distinct(BillingCountry) FROM INVOICE\n input: question: Return the name of the organization which has the most contact individuals. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n input: question: Show first name, last name, age for all female students. Their sex is F. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n input: question: display those employees who contain a letter z to their first name and also display their last name, city. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n Now please use valid SQLite to answer the following questions: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "Here are 5 examples including input and output:\n input: question: What country is the artist who made the fewest songs from? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1\n input: question: What is the name of the patient who made the most recent appointment? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1\n input: question: How many musicians play in the song \"Flash\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n input: question: What are the names of all the games that have been played for at least 1000 hours? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000\n input: question: Show times of elimination of wrestlers with days held more than 50. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\n Now please use valid SQLite to answer the following questions: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct first names for students with a grade point of 3.8 or above in at least one course? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8\n input: question: Show the ministers and the time they took and left office, listed by the time they left office. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office\n input: question: Find the first names of the faculty members who are playing Canoeing or Kayaking. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n input: question: Show names of ships involved in a mission launched after 1928. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\n input: question: How much amount in total were claimed in the most recently created document? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)\n Now please use valid SQLite to answer the following questions: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "Here are 5 examples including input and output:\n input: question: What are the different location codes for documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT DISTINCT location_code FROM Document_locations\n input: question: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'\n input: question: Which countries has the most number of airlines? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: Return the description of the budget type that has the code ORG. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n input: question: What is the name of the party form that is most common? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which country does Airline \"JetBlue Airways\" belong to?",
    "Here are 5 examples including input and output:\n input: question: What are the different names for each station that has ever had 7 bikes available? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7\n input: question: What are the names of products that have never been ordered? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id\n input: question: Return the apartment number with the largest number of bedrooms. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1\n input: question: What is the number of invoices and total money billed in them from CA? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\n input: question: Return the different statuses of cities, ascending by frequency. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n Now please use valid SQLite to answer the following questions: What country is Jetblue Airways affiliated with?",
    "Here are 5 examples including input and output:\n input: question: Show id and location of railways that are associated with more than one train. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1\n input: question: List the name, location, mascot for all schools. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT school_name ,  LOCATION ,  mascot FROM school\n input: question: Show the name and date for each race and its track name. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\n input: question: Which countries have at least 3 cities? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n input: question: Show the name and phone for customers with a mailshot with outcome code 'No Response'. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'\n Now please use valid SQLite to answer the following questions: What is the abbreviation of Airline \"JetBlue Airways\"?",
    "Here are 5 examples including input and output:\n input: question: What are the average price and score of wines grouped by appelation? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n input: question: How many schools are there? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT count(*) FROM school\n input: question: What are the customer ids for customers who do not have an account? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts\n input: question: What is the name of the deparment with the highest enrollment? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1\n input: question: Show the country name and capital of all countries. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Country_name ,  Capital FROM country\n Now please use valid SQLite to answer the following questions: Which abbreviation corresponds to Jetblue Airways?",
    "Here are 5 examples including input and output:\n input: question: What is the id of the candidate who most recently accessed the course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n input: question: Which players won awards in both 1960 and 1961? Return their first names and last names. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n input: question: Count the number of members in club \"Bootup Baltimore\" whose age is below 18. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\n input: question: Find the location of the club \"Pen and Paper Gaming\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"\n input: question: How many faculty members does each building have? List the result with the name of the building. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT building ,  count(*) FROM Faculty GROUP BY building\n Now please use valid SQLite to answer the following questions: List all airline names and their abbreviations in \"USA\".",
    "Here are 5 examples including input and output:\n input: question: Find the states which do not have any employee in their record. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)\n input: question: What is the area for the appelation which produced the most wines prior to 2010? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n input: question: Find the name of the room with the maximum occupancy. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;\n input: question: What are the number of rooms for each bed type? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\n input: question: What are the names of all stations that have more than 10 bikes available and are not located in San Jose? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\n Now please use valid SQLite to answer the following questions: What are the airline names and abbreviations for airlines in the USA?",
    "Here are 5 examples including input and output:\n input: question: Report the distinct president vote and the vice president vote. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD\n input: question: Show minimum, maximum, and average market value for all companies. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\n input: question: What is the total amount of all payments? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT sum(amount) FROM payment\n input: question: Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking\n input: question: What are the minimum and maximum crime rate of counties? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety\n Now please use valid SQLite to answer the following questions: List the airport code and name in the city of Anthony.",
    "Here are 5 examples including input and output:\n input: question: List the company name and rank for all companies in the decreasing order of their sales. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  rank FROM company ORDER BY Sales_billion DESC\n input: question: How many countries are there in total? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT count(*) FROM country\n input: question: Where is the history department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT dept_address FROM department WHERE dept_name  =  'History'\n input: question: What is the most common result of the music festival? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the minimum, maximum, and average market value for every company? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\n Now please use valid SQLite to answer the following questions: Give the airport code and airport name corresonding to the city Anthony.",
    "Here are 5 examples including input and output:\n input: question: When do all the researcher role staff start to work, and when do they stop working? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'\n input: question: List the name of tracks belongs to genre Rock or genre Jazz. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n input: question: Return the id and full name of the customer with the most accounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of the entrepreneur with the greatest weight? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n input: question: What are the full names and salaries for any employees earning less than 6000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000\n Now please use valid SQLite to answer the following questions: How many airlines do we have?",
    "Here are 5 examples including input and output:\n input: question: What is the oldest log id and its corresponding problem id? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\n input: question: Which faculty do not participate in any activity? Find their faculty ids. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in\n input: question: What are the last name and office of all history professors? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'\n input: question: How many departments are led by heads who are not mentioned? serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n input: question: Show the names of people who have been on the negative side of debates at least twice. serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n Now please use valid SQLite to answer the following questions: What is the total number of airlines?",
    "Here are 5 examples including input and output:\n input: question: List the name of artworks whose type is not \"Program Talent Show\". serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\n input: question: What are the procedures that cost more than 1000 or are specialized in by physician John Wen? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: Which customers have orders with status \"Packing\"? Give me the customer names. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"\n input: question: What are the ids of courses without prerequisites? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\n input: question: Return the names and typical buying and selling prices for products that have 'yellow' as their color description. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\n Now please use valid SQLite to answer the following questions: How many airports do we have?",
    "Here are 5 examples including input and output:\n input: question: Find the total number of hours have done for all students in each department. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code\n input: question: What are the names and balances of checking accounts belonging to the customer with the lowest savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n input: question: How many departments offer courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT dept_name) FROM course\n input: question: What are the ids and details for all organizations that have grants of more than 6000 dollars? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000\n input: question: For each city, what is the highest latitude for its stations? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  max(lat) FROM station GROUP BY city\n Now please use valid SQLite to answer the following questions: Return the number of  airports.",
    "Here are 5 examples including input and output:\n input: question: Which authors have first name \"Amal\"? List their last names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT lname FROM authors WHERE fname  =  \"Amal\"\n input: question: List the event venues and names that have the top 2 most number of people attended. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2\n input: question: Sort all the distinct products in alphabetical order. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT product_name FROM products ORDER BY product_name\n input: question: List all female students age is older than 18 who is not majoring in 600. List students' first name and last name. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';\n input: question: Return the founder of Sony. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT founder FROM manufacturers WHERE name  =  'Sony'\n Now please use valid SQLite to answer the following questions: How many flights do we have?",
    "Here are 5 examples including input and output:\n input: question: What are the dates for the documents with both 'GV' type and 'SF' type expenses? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'\n input: question: What is the email and phone number of Astrid Gruber the customer? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n input: question: What are the emails and phone numbers of all customers, sorted by email address and phone number? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number\n input: question: What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy\n input: question: What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"\n Now please use valid SQLite to answer the following questions: Return the number of flights.",
    "Here are 5 examples including input and output:\n input: question: Which country is the airport that has the highest altitude located in? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airports ORDER BY elevation DESC LIMIT 1\n input: question: List the name of the county with the largest population. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1\n input: question: Which program was launched most recently? Return the program name. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch DESC LIMIT 1\n input: question: List the all the assets make, model, details by the disposed date ascendingly. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC\n input: question: Find the average age of students living in each dorm and the name of dorm. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\n Now please use valid SQLite to answer the following questions: Which airline has abbreviation 'UAL'?",
    "Here are 5 examples including input and output:\n input: question: Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20\n input: question: Show the ids of the investors who have at least two transactions. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\n input: question: List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\n input: question: Hom many albums does the artist \"Metallica\" have? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n input: question: Give the names of the courses with at least five enrollments. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5\n Now please use valid SQLite to answer the following questions: Give the airline with abbreviation 'UAL'.",
    "Here are 5 examples including input and output:\n input: question: What are the department names, cities, and state provinces for each department? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\n input: question: What is the first name, gpa and phone number of the top 5 students with highest gpa? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\n input: question: Find the number of patients who are not using the medication of Procrastin-X. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\n input: question: Find distinct cities of addresses of people? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n input: question: What were all the salary values of players in 2010 and 2001? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001\n Now please use valid SQLite to answer the following questions: How many airlines are from USA?",
    "Here are 5 examples including input and output:\n input: question: How many climbers are from each country? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\n input: question: list the name, job title of all people ordered by their names. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name ,  job FROM Person ORDER BY name\n input: question: What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n input: question: What are the names of wrestlers and their teams in elimination, ordered descending by days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\n input: question: What are the different police forces of counties that are not located in the East? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\n Now please use valid SQLite to answer the following questions: Return the number of airlines in the USA.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all wines produced in 2008? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE WHERE YEAR  =  \"2008\"\n input: question: How many customers are there? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(*) FROM customers\n input: question: What is the party of the youngest people? serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Party FROM people ORDER BY Age ASC LIMIT 1\n input: question: Count the number of rooms that are not in the Lamberton building. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) FROM classroom WHERE building != 'Lamberton'\n input: question: Count the number of distinct delegates who are from counties with population above 50000. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\n Now please use valid SQLite to answer the following questions: Which city and country is the Alton airport at?",
    "Here are 5 examples including input and output:\n input: question: How many employees do we have? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Employee\n input: question: When was the first asset acquired? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1\n input: question: For each county, find the name of the county and the number of delegates from that county. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n input: question: How many services are there? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT count(*) FROM services\n input: question: What is all the information about all people? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT * FROM people\n Now please use valid SQLite to answer the following questions: Give the city and country for the Alton airport.",
    "Here are 5 examples including input and output:\n input: question: Return the name of the marketing region the store Rob Dinning is located in. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"\n input: question: Sort the customer names in alphabetical order. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT customer_details FROM customers ORDER BY customer_details\n input: question: Find the name of the department that has the biggest number of students minored in? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\n input: question: Which manufacturer has the most number of shops? List its name and year of opening. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1\n input: question: How many students and instructors are in each department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\n Now please use valid SQLite to answer the following questions: What is the airport name for airport 'AKO'?",
    "Here are 5 examples including input and output:\n input: question: Show the transaction type code that occurs the fewest times. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1\n input: question: Show the date of the tallest perpetrator. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1\n input: question: Who are the top 3 players in terms of overall rating? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3\n input: question: What is the location of the perpetrator with the largest kills. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1\n input: question: How many video game types exist? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT gtype) FROM Video_games\n Now please use valid SQLite to answer the following questions: Return the name of the airport with code 'AKO'.",
    "Here are 5 examples including input and output:\n input: question: What are the languages that are used most often in songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1\n input: question: For every student who is registered for some course, how many courses are they registered for? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n input: question: Show card type codes with at least 5 cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n input: question: List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer\n input: question: Which physicians have never taken any appointment? Find their names. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n Now please use valid SQLite to answer the following questions: What are airport names at City 'Aberdeen'?",
    "Here are 5 examples including input and output:\n input: question: What are the name and primarily affiliated department name of each physician? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1\n input: question: What are the ids and names for each of the documents? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_id ,  document_name FROM Documents\n input: question: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n input: question: What is the average number of international passengers of all airports? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT avg(International_Passengers) FROM airport\n input: question: Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC\n Now please use valid SQLite to answer the following questions: What are the names of airports in Aberdeen?",
    "Here are 5 examples including input and output:\n input: question: What is the total revenue of companies started by founder? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder\n input: question: Show ids of students who play video game and play sports. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\n input: question: For which countries are there more than four distinct addresses listed? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n input: question: Find the number of rooms with king bed for each decor type. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n input: question: Show the total number of rooms of all apartments with facility code \"Gym\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n Now please use valid SQLite to answer the following questions: How many flights depart from 'APG'?",
    "Here are 5 examples including input and output:\n input: question: What are the titles of all the Aerosmith albums? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n input: question: What is the name of the movie that is rated by most of times? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n input: question: What is the total number of students enrolled in schools without any goalies? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n input: question: Give the color of the grape whose wine products have the highest average price? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1\n input: question: What are the names of instructors who didn't teach courses in the Spring? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n Now please use valid SQLite to answer the following questions: Count the number of flights departing from 'APG'.",
    "Here are 5 examples including input and output:\n input: question: For each zip code, return the average mean temperature of August there. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code\n input: question: What is the average rating stars and title for the oldest movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\n input: question: Show the names and locations of institutions that are founded after 1990 and have the type \"Private\". serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'\n input: question: Count the number of authors. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM authors\n input: question: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\n Now please use valid SQLite to answer the following questions: How many flights have destination ATO?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all songs in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE languages  =  \"english\"\n input: question: Return the description of the product called \"Chocolate\". serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"\n input: question: What are the titles of courses that are offered in more than one department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course GROUP BY title HAVING count(*)  >  1\n input: question: Show all flight numbers with aircraft Airbus A340-300. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n input: question: For each start station id, what is its name, longitude and average duration of trips started there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\n Now please use valid SQLite to answer the following questions: Count the number of flights into ATO.",
    "Here are 5 examples including input and output:\n input: question: Show all statement id and the number of accounts for each statement. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID\n input: question: What is the average number of gold medals for a club? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT avg(Gold) FROM club_rank\n input: question: What is the name of the artist who produced the shortest song? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n input: question: Which flag is most widely used among all ships? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\n input: question: Show the ids for all the students who participate in an activity and are under 20. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20\n Now please use valid SQLite to answer the following questions: How many flights depart from City Aberdeen?",
    "Here are 5 examples including input and output:\n input: question: What are the case burdens of counties, ordered descending by population? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Case_burden FROM county_public_safety ORDER BY Population DESC\n input: question: On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"\n input: question: Which building has most faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\n input: question: How old are the students with allergies to food and animal types on average? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")\n input: question: How many kinds of roles are there for the staff? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(DISTINCT role_code) FROM Project_Staff\n Now please use valid SQLite to answer the following questions: Return the number of flights departing from Aberdeen.",
    "Here are 5 examples including input and output:\n input: question: What is the total salary expenses of team Boston Red Stockings in 2010? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010\n input: question: Which buildings do not have any company office? Give me the building names. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n input: question: Find the parties associated with the delegates from district 1. Who served as governors of the parties? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1\n input: question: What are the headquarters with at least two companies in the banking industry? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2\n input: question: How many distinct FDA approval statuses are there for the medicines? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(DISTINCT FDA_approved) FROM medicine\n Now please use valid SQLite to answer the following questions: How many flights arriving in Aberdeen city?",
    "Here are 5 examples including input and output:\n input: question: List the names of buildings that have no company office. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n input: question: Return the apartment number and the number of rooms for each apartment. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number ,  room_count FROM Apartments\n input: question: Which of the mill names contains the french word 'Moulin'? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT name FROM mill WHERE name LIKE '%Moulin%'\n input: question: Show the number of document types. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_document_types\n input: question: Return the apartment numbers of the apartments with type code \"Flat\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"\n Now please use valid SQLite to answer the following questions: Return the number of flights arriving in Aberdeen.",
    "Here are 5 examples including input and output:\n input: question: Show different carriers of phones together with the number of phones with each carrier. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier\n input: question: Which college have both players with position midfielder and players with position defender? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n input: question: Which counties have two or more delegates? Give me the county names. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n input: question: Find the name of the club that has the most female students. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n input: question: Return the name of the document that has the most sections. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "Here are 5 examples including input and output:\n input: question: List the clubs having \"Davis Steven\" as a member. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n input: question: How many different kinds of lens brands are there? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT count(DISTINCT brand) FROM camera_lens\n input: question: Find the number of records of each policy type and its type code. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\n input: question: How many products are never booked with amount higher than 200? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )\n input: question: What are the code and description of the most frequent behavior incident type? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many flights fly from Aberdeen to Ashley?",
    "Here are 5 examples including input and output:\n input: question: Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000\n input: question: What are the ids of the movies that are not reviewed by Brittany Harris. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n input: question: List the name and gender for all artists who released songs in March. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"\n input: question: Show names of technicians and the number of machines they are assigned to repair. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\n input: question: Return the duration of the actor with the greatest age. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many flights does airline 'JetBlue Airways' have?",
    "Here are 5 examples including input and output:\n input: question: list the local authorities and services provided by all stations. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT local_authority ,  services FROM station\n input: question: Show the name of colleges that have at least two players in descending alphabetical order. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC\n input: question: What are the response received dates for the documents described as 'Regular' or granted with more than 100? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n input: question: What is the season of the game which causes the player 'Walter Samuel' to get injured? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'\n input: question: Find all the instruments ever used by the musician with last name \"Heilo\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n Now please use valid SQLite to answer the following questions: Give the number of Jetblue Airways flights.",
    "Here are 5 examples including input and output:\n input: question: Show the apartment numbers of apartments with unit status availability of both 0 and 1. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1\n input: question: What are the different product colors? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT DISTINCT product_color FROM Products\n input: question: Which city is the headquarter of the store named \"Blackville\" in? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n input: question: Show the album names, ids and the number of tracks for each album. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n input: question: List the names of all genres in alphabetical oder, together with its ratings. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT g_name ,  rating FROM genre ORDER BY g_name\n Now please use valid SQLite to answer the following questions: How many 'United Airlines' flights go to Airport 'ASY'?",
    "Here are 5 examples including input and output:\n input: question: Find the id of the appointment with the most recent start date? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\n input: question: What are the names of documents that contain the substring \"CV\"? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"\n input: question: Find the name of persons who are friends with Alice for the shortest years. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n input: question: What are the different album labels listed? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT DISTINCT label FROM Albums\n input: question: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n Now please use valid SQLite to answer the following questions: Count the number of United Airlines flights arriving in ASY Airport.",
    "Here are 5 examples including input and output:\n input: question: Return the most common full name among all actors. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of players whose training hours is between 500 and 1500? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500\n input: question: What are the first names of the faculty members playing both Canoeing and Kayaking? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'\n input: question: Show all payment method codes and the number of orders for each code. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code\n input: question: What is the vocal type of the band mate whose first name is \"Marianne\" played the most? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many 'United Airlines' flights depart from Airport 'AHD'?",
    "Here are 5 examples including input and output:\n input: question: Return the characters and durations for each actor. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Character ,  Duration FROM actor\n input: question: What are the enrollment and primary conference for the university which was founded the earliest? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n input: question: What is the id of the reviewer whose name has substring “Mike”? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"\n input: question: Find the number of professors in accounting department. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"\n input: question: What is the name of the district with the most residents? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the number of United Airlines flights leaving from AHD Airport.",
    "Here are 5 examples including input and output:\n input: question: Find the names of reviewers who had given higher than 3 star ratings. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\n input: question: What are the facility codes of the apartments with more than four bedrooms? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n input: question: Show the transaction type and the number of transactions. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type\n input: question: What are the maximum and minimum number of transit passengers of all aiports. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\n input: question: Show all artist name, age, and country ordered by the yeared they joined. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name ,  age ,  country FROM artist ORDER BY Year_Join\n Now please use valid SQLite to answer the following questions: How many United Airlines flights go to City 'Aberdeen'?",
    "Here are 5 examples including input and output:\n input: question: Show the official names of the cities that have hosted more than one competition. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\n input: question: Find the city with the most number of stores. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\n input: question: Give the full name and phone of the customer who has the account name 162. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n input: question: Return the code of the city that has the most students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the average fee on a CSU campus in 1996 serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n Now please use valid SQLite to answer the following questions: Count the number of United Airlines flights that arrive in Aberdeen.",
    "Here are 5 examples including input and output:\n input: question: What are the ids and full names of customers who hold two or more cards? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n input: question: How many books are there for each publisher? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher ,  count(*) FROM book_club GROUP BY publisher\n input: question: How many events are there for each party? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n input: question: What is the issue date of the volume with the minimum weeks on top? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\n input: question: List the names of representatives that have not participated in elections listed here. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)\n Now please use valid SQLite to answer the following questions: Which city has most number of arriving flights?",
    "Here are 5 examples including input and output:\n input: question: What is the title of a course that is listed in both the Statistics and Psychology departments? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'\n input: question: What is the average age of students who are living in the dorm with the largest capacity? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)\n input: question: Give me the name of the customer who ordered the most items in total. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n input: question: Count the number of climbers. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT count(*) FROM climber\n input: question: Show all student IDs with more than total 10 hours per week on all sports played. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10\n Now please use valid SQLite to answer the following questions: Which city has the most frequent destination airport?",
    "Here are 5 examples including input and output:\n input: question: What are the maximum and minimum number of silver medals for clubs. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT max(Silver) ,  min(Silver) FROM club_rank\n input: question: What are the names of storms that did not affect two or more regions? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2\n input: question: What are all info of students who registered courses but not attended courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n input: question: Return the staff ids and genders for any staff with the title Department Manager. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"\n input: question: List all public schools and their locations. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\n Now please use valid SQLite to answer the following questions: Which city has most number of departing flights?",
    "Here are 5 examples including input and output:\n input: question: What are the titles of all movies that were not reviewed by Chris Jackson? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'\n input: question: Find the names of all artists that have \"a\" in their names. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n input: question: What was the most popular position at tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1\n input: question: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n input: question: Find the first names of faculties of rank Professor in alphabetic order. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname\n Now please use valid SQLite to answer the following questions: Which city is the most frequent source airport?",
    "Here are 5 examples including input and output:\n input: question: What are the first names of all professors who teach more than one class? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1\n input: question: Which store has most the customers? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of the colleges that are larger than at least one college in Florida? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')\n input: question: How many counties are there in total? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT count(*) FROM county\n input: question: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n Now please use valid SQLite to answer the following questions: What is the code of airport that has the highest number of flights?",
    "Here are 5 examples including input and output:\n input: question: Compute the total amount of payment processed. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT sum(Amount_Payment) FROM Payments\n input: question: Find the name, checking balance and saving balance of all accounts in the bank. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n input: question: Find the personal names of students not enrolled in any course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n input: question: What are the names of all aicrafts that have never won any match? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n input: question: What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id\n Now please use valid SQLite to answer the following questions: What is the airport code of the airport with the most flights?",
    "Here are 5 examples including input and output:\n input: question: How many ships are there? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT count(*) FROM ship\n input: question: What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"\n input: question: Find the number of different products that are produced by companies at different headquarter cities. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter\n input: question: List the name of tracks belongs to genre Rock and whose media type is MPEG audio file. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";\n input: question: Find the ids of orders whose status is 'Success'. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'\n Now please use valid SQLite to answer the following questions: What is the code of airport that has fewest number of flights?",
    "Here are 5 examples including input and output:\n input: question: List all info about all people. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT * FROM people\n input: question: Find the number of people who is under 40 for each gender. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\n input: question: Which county has the largest population? Give me the name of the county. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY Population DESC LIMIT 1\n input: question: What is the product ID of the most frequently ordered item on invoices? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Show all storm names affecting region \"Denmark\". serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n Now please use valid SQLite to answer the following questions: Give the code of the airport with the least flights.",
    "Here are 5 examples including input and output:\n input: question: Find the name and price of the product that has been ordered the greatest number of times. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find distinct cities of address of students? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n input: question: Which physician was trained in the procedure that costs the most. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\n input: question: What are the student IDs and middle names of the students enrolled in at most two courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n input: question: Show the name, role code, and date of birth for the employee with name 'Armani'. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'\n Now please use valid SQLite to answer the following questions: Which airline has most number of flights?",
    "Here are 5 examples including input and output:\n input: question: What are the manager's first name, last name and id who won the most manager award? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;\n input: question: What is the average number of pages per minute color? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT avg(pages_per_minute_color) FROM product\n input: question: Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\". serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"\n input: question: What are the ids of all students and number of hours played? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid\n input: question: List the name of ships in ascending order of tonnage. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship ORDER BY Tonnage ASC\n Now please use valid SQLite to answer the following questions: What airline serves the most flights?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct address type codes for all customer addresses? serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT DISTINCT address_type_code FROM customer_addresses\n input: question: What are the coupon amount of the coupons owned by both good and bad customers? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'\n input: question: What is the id of the patient who stayed in room 111 most recently? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1\n input: question: find the names of people who are taller than 200 or lower than 190. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE height  >  200 OR height  <  190\n input: question: What are the last names of faculty who are part of the computer science department? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n Now please use valid SQLite to answer the following questions: Find the abbreviation and country of the airline that has fewest number of flights?",
    "Here are 5 examples including input and output:\n input: question: Find the number of trains for each station, as well as the station network name and services. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n input: question: List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted\n input: question: What are the names of courses that give either 3 credits, or 1 credit and 4 hours? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\n input: question: How many users are there? serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM useracct\n input: question: Find the ids of the problems that are reported by the staff whose last name is Bosco. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"\n Now please use valid SQLite to answer the following questions: What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "Here are 5 examples including input and output:\n input: question: List all the policy types used by the customer enrolled in the most policies. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n input: question: Find the number of members living in each address. serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT count(*) ,  address FROM member GROUP BY address\n input: question: Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10\n input: question: How much is the track Fast As a Shark? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";\n input: question: What are the ids of the problems which are reported after 1978-06-26? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"\n Now please use valid SQLite to answer the following questions: What are airlines that have some flight departing from airport 'AHD'?",
    "Here are 5 examples including input and output:\n input: question: which shop has happy hour most frequently? List its id and number of happy hours. serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the numbers of all flights coming from Los Angeles? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"\n input: question: How many different services are provided by all stations? serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT count(DISTINCT services) FROM station\n input: question: Show the police force shared by counties with location on the east and west. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"\n input: question: Please show the police forces and the number of counties with each police force. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force\n Now please use valid SQLite to answer the following questions: Which airlines have a flight with source airport AHD?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the clubs starting with the oldest? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM club ORDER BY Start_year ASC\n input: question: Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'\n input: question: What are the names of members and their corresponding parties? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n input: question: Find employee with ID and name of the country presently where (s)he is working. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n input: question: Give the color description for the product 'catnip'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n Now please use valid SQLite to answer the following questions: What are airlines that have flights arriving at airport 'AHD'?",
    "Here are 5 examples including input and output:\n input: question: Give me the dates when the max temperature was higher than 85. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date FROM weather WHERE max_temperature_f  >  85\n input: question: Give the districts which have two or more addresses. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT district FROM address GROUP BY district HAVING count(*)  >=  2\n input: question: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n input: question: What are the names and ages of editors? serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT Name ,  Age FROM editor\n input: question: Which service id and type has the least number of participants? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which airlines have a flight with destination airport AHD?",
    "Here are 5 examples including input and output:\n input: question: What is the zip code of the customer Carole Bernhard? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n input: question: Count the number of devices. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT count(*) FROM device\n input: question: Which events id does not have any participant with detail 'Kenyatta Kuhn'? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'\n input: question: What is the color of the grape whose wine products has the highest average price? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1\n input: question: Which states have more than 2 parks? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n Now please use valid SQLite to answer the following questions: Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "Here are 5 examples including input and output:\n input: question: What is the first name, GPA, and phone number of the students with the top 5 GPAs? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\n input: question: Which movies have 'Deleted Scenes' as a substring in the special feature? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'\n input: question: What are the details of all sales and purchases? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases\n input: question: List the number of invoices from the US, grouped by state. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n input: question: How many reviewers listed? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT count(*) FROM Reviewer\n Now please use valid SQLite to answer the following questions: Which airlines have departing flights from both APG and CVO airports?",
    "Here are 5 examples including input and output:\n input: question: Find the names of customers who ordered both products Latte and Americano. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'\n input: question: Find all the albums in 2012. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2012\n input: question: Show the builder of railways associated with the trains named \"Andaman Exp\". serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"\n input: question: Show the names of members that have a rank in round higher than 3. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3\n input: question: What are the subject ID, subject name, and the number of available courses for each subject? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n Now please use valid SQLite to answer the following questions: Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "Here are 5 examples including input and output:\n input: question: What are the ids and names of department stores with both marketing and managing departments? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n input: question: Show all distinct product categories along with the number of mailshots in each category. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category\n input: question: What are the names of the courses taught by the tutor whose personal name is \"Julio\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"\n input: question: Please show the different statuses of cities and the average population of cities with each status. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Status ,  avg(Population) FROM city GROUP BY Status\n input: question: Show the flight number of flights with three lowest distances. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3\n Now please use valid SQLite to answer the following questions: Which airlines have departures from CVO but not from APG airports?",
    "Here are 5 examples including input and output:\n input: question: Who are the ministers and what parties do they belong to, listed descending by the times they took office? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister ,  party_name FROM party ORDER BY took_office DESC\n input: question: How many schools are there in the department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT school_code) FROM department\n input: question: Give the names and locations of all wrestlers. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name ,  LOCATION FROM wrestler\n input: question: Show all directors. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT DISTINCT directed_by FROM film\n input: question: Show different locations of railways along with the corresponding number of railways at each location. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION\n Now please use valid SQLite to answer the following questions: Find all airlines that have at least 10 flights.",
    "Here are 5 examples including input and output:\n input: question: What is the average age of female (sex is F) students? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"\n input: question: What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;\n input: question: Show the most common type code across products. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the name of amenities Smith Hall dorm have. ordered the results by amenity names. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name\n input: question: Which event names were used more than twice for party events? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n Now please use valid SQLite to answer the following questions: Which airlines have at least 10 flights?",
    "Here are 5 examples including input and output:\n input: question: Show the denomination of the school that has the most players. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the id of the shortest trip? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT id FROM trip ORDER BY duration LIMIT 1\n input: question: What city and state is the bank with the name morningside in? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT city ,  state FROM bank WHERE bname  =  'morningside'\n input: question: Show the budget type code and description and the corresponding document id. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code\n input: question: How many departments does the college has? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_name) FROM department\n Now please use valid SQLite to answer the following questions: Find all airlines that have fewer than 200 flights.",
    "Here are 5 examples including input and output:\n input: question: Find the number of teachers who teach the student called MADLOCK RAY. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"\n input: question: How many different products are produced in each headquarter city? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter\n input: question: Give the classes that have more than two captains. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2\n input: question: Show all distinct city where branches with at least 100 memberships are located. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\n input: question: How many sections does each course has? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code\n Now please use valid SQLite to answer the following questions: Which airlines have less than 200 flights?",
    "Here are 5 examples including input and output:\n input: question: What is the average base price of different bed type? List bed type and average base price. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n input: question: What are the names of all movies that received 3 or 4 stars? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4\n input: question: List the official names of cities that have not held any competition. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\n input: question: Return the name and number of reservations made for each of the rooms. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room\n input: question: What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"\n Now please use valid SQLite to answer the following questions: What are flight numbers of Airline \"United Airlines\"?",
    "Here are 5 examples including input and output:\n input: question: Show the outcome code of mailshots along with the number of mailshots in each outcome code. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code\n input: question: Find the name and salary of instructors who are advisors of the students from the Math department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'\n input: question: How many problems does the product with the most problems have? List the number of the problems and product name. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n input: question: Show the starting years shared by technicians from team \"CLE\" and \"CWS\". serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"\n input: question: What is the total number of enrollment of schools that do not have any goalie player? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n Now please use valid SQLite to answer the following questions: Which flight numbers correspond to United Airlines flights?",
    "Here are 5 examples including input and output:\n input: question: Which enzyme names have the substring \"ALA\"? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\n input: question: How many students play each sport? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname\n input: question: Return the distinct customer details. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT DISTINCT customer_details FROM Customers\n input: question: Show id, first and last names for all customers with at least two cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n input: question: How many Patent outcomes are generated from all the projects? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'\n Now please use valid SQLite to answer the following questions: What are flight numbers of flights departing from Airport \"APG\"?",
    "Here are 5 examples including input and output:\n input: question: Find the average and minimum price of the rooms in different decor. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;\n input: question: What are the total amount and average amount paid in claim headers? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers\n input: question: List all the distinct cities serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT DISTINCT city FROM addresses\n input: question: Find the branch names of banks in the New York state. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT bname FROM bank WHERE state  =  'New York'\n input: question: What are the student ids for all male students? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT StuID FROM Student WHERE Sex  =  'M'\n Now please use valid SQLite to answer the following questions: Give the flight numbers of flights leaving from APG.",
    "Here are 5 examples including input and output:\n input: question: What are the names and account balances for customers who have taken a total amount of more than 5000 in loans? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\n input: question: What are the ids of the students who registered for course 301? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_attendance WHERE course_id  =  301\n input: question: How many different status codes of things are there? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things\n input: question: Show all cities and corresponding number of students. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT city_code ,  count(*) FROM Student GROUP BY city_code\n input: question: What are the low and high estimates of film markets? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\n Now please use valid SQLite to answer the following questions: What are flight numbers of flights arriving at Airport \"APG\"?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the aircraft that the least people are certified to fly? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of all friends who are from New York? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\n input: question: Find the first name and office of history professor who did not get a Ph.D. degree. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n input: question: What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21' serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'\n input: question: What are the first name, last name, and gender of all the good customers? Order by their last name. serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name\n Now please use valid SQLite to answer the following questions: Give the flight numbers of flights landing at APG.",
    "Here are 5 examples including input and output:\n input: question: display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC\n input: question: Show the premise type and address type code for all customer addresses. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id\n input: question: What are the official names of cities that have not hosted a farm competition? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\n input: question: Which employees have the role with code \"HR\"? Find their names. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"\n input: question: How many assets can each parts be used in? List the part name and the number. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n Now please use valid SQLite to answer the following questions: What are flight numbers of flights departing from City \"Aberdeen \"?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of the students who are not involved in any activity serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n input: question: Please show the titles of films and the types of market estimations. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID\n input: question: List the names and origins of people who are not body builders. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id\n input: question: What is the address of each course author or tutor? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT address_line_1 FROM Course_Authors_and_Tutors\n input: question: Find the name of amenity that is most common in all dorms. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Give the flight numbers of flights leaving from Aberdeen.",
    "Here are 5 examples including input and output:\n input: question: What is the average number of employees of the departments whose rank is between 10 and 15? serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15\n input: question: What is the total amount of money spent by Lucas Mancini? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n input: question: What is the last name of the youngest student? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n input: question: What is the id of the trip that has the shortest duration? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT id FROM trip ORDER BY duration LIMIT 1\n input: question: What is the maximum and mininum number of transit passengers for all airports? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\n Now please use valid SQLite to answer the following questions: What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "Here are 5 examples including input and output:\n input: question: Return the minimum, average and maximum distances traveled across all aircrafts. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft\n input: question: What is the name of the media type that is least common across all tracks? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\n input: question: Find the average number of factories for the manufacturers that have more than 20 shops. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20\n input: question: What are the names of customers who live in Colorado state? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"\n input: question: Count the number of universities that do not participate in the baketball match. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)\n Now please use valid SQLite to answer the following questions: Give the flight numbers of flights arriving in Aberdeen.",
    "Here are 5 examples including input and output:\n input: question: Find the last name of the author with first name \"Amal\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT lname FROM authors WHERE fname  =  \"Amal\"\n input: question: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: Give the distinct names of wines made before 2000 or after 2010. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010\n input: question: Find the number of games taken place in city Atlanta in 2000. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\n input: question: What are the names for tracks without a race in class 'GT'. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n Now please use valid SQLite to answer the following questions: Find the number of flights landing in the city of Aberdeen or Abilene.",
    "Here are 5 examples including input and output:\n input: question: List the titles of books that are not published. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n input: question: How many trains have 'Express' in their names? serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT count(*) FROM train WHERE name LIKE \"%Express%\"\n input: question: What is the zip code of staff with first name as Janessa and last name as Sawayn lived? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: Which teachers teach in classroom 109? Give me their last names. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT lastname FROM teachers WHERE classroom  =  109\n input: question: Which person whose friends have the oldest average age? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many flights land in Aberdeen or Abilene?",
    "Here are 5 examples including input and output:\n input: question: What are the names and hours spent practicing of every student who received a yes at tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: Find the names of users whose emails contain ‘superstar’ or ‘edu’. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'\n input: question: How many drivers were in the Australian Grand Prix held in 2009? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009\n input: question: Return the names of people, ordered by weight ascending. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Name FROM People ORDER BY Weight ASC\n input: question: What are the distinct first names of the students who have class president votes? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE\n Now please use valid SQLite to answer the following questions: Find the name of airports which do not have any flight in and out.",
    "Here are 5 examples including input and output:\n input: question: Find the total number of employees. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM employee\n input: question: What are the ids of the students who registered for course 301 most recently? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1\n input: question: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'\n input: question: List the name and cost of all procedures sorted by the cost from the highest to the lowest. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name ,  cost FROM procedures ORDER BY cost DESC\n input: question: What are all company names that have a corresponding movie directed in the year 1999? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\n Now please use valid SQLite to answer the following questions: Which airports do not have departing or arriving flights?",
    "Here are 5 examples including input and output:\n input: question: Which author has written the most papers? Find his or her last name. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1\n input: question: What products are sold at the store named Miramichi? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"\n input: question: How many products have prices of at least 180? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM products WHERE price >= 180\n input: question: Find the name of the most expensive product. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1\n input: question: Who performed the song named \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"\n Now please use valid SQLite to answer the following questions: How many employees are there?",
    "Here are 5 examples including input and output:\n input: question: How many addresses have zip code 197? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"\n input: question: List every album ordered by album title in ascending order. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title FROM albums ORDER BY title;\n input: question: Find the distinct unit prices for tracks. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT distinct(UnitPrice) FROM TRACK\n input: question: Show the company of the tallest entrepreneur. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n input: question: How many students are enrolled in some classes that are taught by an accounting professor? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\n Now please use valid SQLite to answer the following questions: Count the number of employees",
    "Here are 5 examples including input and output:\n input: question: What campuses are located in the county of Los Angeles? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n input: question: What are all the section titles of the document named \"David CV\"? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"\n input: question: For each zip code, what is the average mean temperature for all dates that start with '8'? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code\n input: question: What are the names and players of all the clubs? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID\n input: question: What are the names of the regions in alphabetical order? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT region_name FROM region ORDER BY region_name\n Now please use valid SQLite to answer the following questions: Sort employee names by their age in ascending order.",
    "Here are 5 examples including input and output:\n input: question: What are the dates in which the mean sea level pressure was between 30.3 and 31? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31\n input: question: Find the patient who most recently stayed in room 111. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1\n input: question: Show the id of each employee and the number of document destruction authorised by that employee. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID\n input: question: For directors who had more than one movie, return the titles and produced years of all movies directed by them. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title\n input: question: What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\n Now please use valid SQLite to answer the following questions: List the names of employees and sort in ascending order of age.",
    "Here are 5 examples including input and output:\n input: question: find the name of driver who is driving the school bus with the longest working history. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1\n input: question: What are the names of documents that do not have any sections? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n input: question: Find the the date of enrollment of the \"Spanish\" course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n input: question: Show the names of pilots and the number of records they have. serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name\n input: question: Find all the papers published by the institution \"Google\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n Now please use valid SQLite to answer the following questions: What is the number of employees from each city?",
    "Here are 5 examples including input and output:\n input: question: What are the gender and occupation of players? serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Gender ,  Occupation FROM player\n input: question: How long does student Linda Smith spend on the restaurant in total? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";\n input: question: What are the names of the ships that are not involved in any missions? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\n input: question: Return the famous titles for artists that have volumes that lasted more than 2 weeks on top. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2\n input: question: Which policy type appears most frequently in the available policies? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Count the number of employees for each city.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the stadium which held the most events? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1\n input: question: In what city does Janessa Sawayn live? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: Find the names of departments that are located in Houston. serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'\n input: question: What is the name of customers who do not use Cash as payment method. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers WHERE payment_method != 'Cash'\n input: question: How many roles are there? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM ROLES\n Now please use valid SQLite to answer the following questions: Which cities do more than one employee under age 30 come from?",
    "Here are 5 examples including input and output:\n input: question: Find the first name and last name of the instructor of course that has course name serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\n input: question: Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000\n input: question: how many programs are there? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(*) FROM program\n input: question: Find the the name of the customers who have a loan with amount more than 3000. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n input: question: List the name, nationality and id of all male architects ordered by their names lexicographically. serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name\n Now please use valid SQLite to answer the following questions: Find the cities that have more than one employee under age 30.",
    "Here are 5 examples including input and output:\n input: question: What are the names of races that were held after 2017 and the circuits were in the country of Spain? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\n input: question: Show me all the restaurants. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT ResName FROM Restaurant;\n input: question: What are the names of all airports in Cuba or Argentina? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'\n input: question: What are the elimination moves of wrestlers whose team is \"Team Orton\"? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"\n input: question: What are the names of the customers who bought product \"food\" at least once? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n Now please use valid SQLite to answer the following questions: Find the number of shops in each location.",
    "Here are 5 examples including input and output:\n input: question: Find the ids of the departments where any manager is managing 4 or more employees. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n input: question: Return the titles of films that include 'Deleted Scenes' in their special feature section. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'\n input: question: which poll source does the highest oppose rate come from? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1\n input: question: What are the names and number of hours spent training for each player who trains for less than 1500 hours? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pName ,  HS FROM Player WHERE HS  <  1500\n input: question: Show the name and service for all trains in order by time. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  service FROM train ORDER BY TIME\n Now please use valid SQLite to answer the following questions: How many shops are there in each location?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )\n input: question: Find the number of professors with a Ph.D. degree in each department. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code\n input: question: Show the delegate and committee information of elections. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Delegate ,  Committee FROM election\n input: question: List the distinct carriers of phones with memories bigger than 32. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32\n input: question: What are the titles of all albums that start with A in alphabetical order? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;\n Now please use valid SQLite to answer the following questions: Find the manager name and district of the shop whose number of products is the largest.",
    "Here are 5 examples including input and output:\n input: question: How films are produced by each studio? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n input: question: What are the names of everybody sorted by age in descending order? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person ORDER BY age DESC\n input: question: What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n input: question: What are the name and publication date of the catalogs with catalog level number above 5? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5\n input: question: Count the number of artists who are older than 46 and joined after 1990. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990\n Now please use valid SQLite to answer the following questions: What are the manager name and district of the shop that sells the largest number of products?",
    "Here are 5 examples including input and output:\n input: question: Show all customer ids and the number of accounts for each customer. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n input: question: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'\n input: question: What is the document type code with most number of documents? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Return the names of all counties sorted by population in ascending order. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY Population ASC\n input: question: For each zip code, find the ids of all trips that have a higher average mean temperature above 60? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n Now please use valid SQLite to answer the following questions: find the minimum and maximum number of products of all stores.",
    "Here are 5 examples including input and output:\n input: question: What are the average height and weight across males (sex is M)? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n input: question: What is the name of the manager with the most gas stations that opened after 2000? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\n input: question: Count the total number of roles listed. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM ROLES\n input: question: Show the product type codes that have at least two products. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2\n input: question: What is average age for different job title? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  job FROM Person GROUP BY job\n Now please use valid SQLite to answer the following questions: What are the minimum and maximum number of products across all the shops?",
    "Here are 5 examples including input and output:\n input: question: List the publication dates of publications with 3 lowest prices. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n input: question: Show the invoice number and the number of transactions for each invoice. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n input: question: List the names of the schools without any endowment. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)\n input: question: What is the id of the bike that traveled the most in 94002? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the names and descriptions of courses that belong to the subject named \"Computer Science\". serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"\n Now please use valid SQLite to answer the following questions: Return the name, location and district of all shops in descending order of number of products.",
    "Here are 5 examples including input and output:\n input: question: Find the name and id of accounts whose checking balance is below the maximum checking balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n input: question: Show the distinct fate of missions that involve ships with nationality \"United States\" serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"\n input: question: Show institution names along with the number of proteins for each institution. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id\n input: question: How many donors have endowment for school named \"Glenn\"? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"\n input: question: Find the name of the first 5 customers. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5\n Now please use valid SQLite to answer the following questions: Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "Here are 5 examples including input and output:\n input: question: What are the total points for all gymnasts, ordered by total points descending? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n input: question: How many lessons were taught by a staff member whose first name has the letter 'a' in it? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"\n input: question: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n input: question: How many states have a college with more students than average? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n input: question: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n Now please use valid SQLite to answer the following questions: Find the names of stores whose number products is more than the average number of products.",
    "Here are 5 examples including input and output:\n input: question: Show the country where people older than 30 and younger than 25 are from. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n input: question: How many customers don't have an account? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n input: question: Show all company names with a movie directed in year 1999. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\n input: question: What are the names of wines, sorted by price ascending? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE ORDER BY price\n input: question: How many different cities are they from? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(DISTINCT city) FROM Person\n Now please use valid SQLite to answer the following questions: Which shops' number products is above the average? Give me the shop names.",
    "Here are 5 examples including input and output:\n input: question: How many characteristics are there? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM CHARACTERISTICS\n input: question: Which allergy type is most common? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\n input: question: Tell me the types of the policy used by the customer named \"Dayana Robel\". serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\n input: question: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\n input: question: Report the distinct advisors who have more than 2 students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2\n Now please use valid SQLite to answer the following questions: find the name of employee who was awarded the most times in the evaluation.",
    "Here are 5 examples including input and output:\n input: question: What are the attribute data types with more than 3 attribute definitions? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n input: question: What are the names and capitals of each country? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Country_name ,  Capital FROM country\n input: question: List the name of a building along with the name of a company whose office is in the building. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id\n input: question: Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n input: question: What is the average age for all people in the table? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) FROM Person\n Now please use valid SQLite to answer the following questions: Which employee received the most awards in evaluations? Give me the employee name.",
    "Here are 5 examples including input and output:\n input: question: Which clubs are located at \"AKW\"? Return the club names. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clubname FROM club WHERE clublocation  =  \"AKW\"\n input: question: How many architects are female? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT count(*) FROM architect WHERE gender  =  'female'\n input: question: Return the name of the youngest captain. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain ORDER BY age LIMIT 1\n input: question: How many courses are offered? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT crs_code) FROM CLASS\n input: question: Find the balance of the checking account belonging to an owner whose name contains 'ee'. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'\n Now please use valid SQLite to answer the following questions: Find the name of the employee who got the highest one time bonus.",
    "Here are 5 examples including input and output:\n input: question: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")\n input: question: what are the average and maximum attendances of all events? serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n input: question: How many students who are female are allergic to milk or eggs? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"\n input: question: Where does the staff member with the first name Elsa live? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'\n input: question: How many fault status codes are recorded in the fault log parts table? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT DISTINCT fault_status FROM Fault_Log_Parts\n Now please use valid SQLite to answer the following questions: Which employee received the biggest bonus? Give me the employee name.",
    "Here are 5 examples including input and output:\n input: question: What are all the phone numbers? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_phone FROM available_policies\n input: question: Give the maximum price and score for wines produced in the appelation St. Helena. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n input: question: Find the names of all the customers and staff members. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n input: question: What is the id of the student who most recently registered course 301? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1\n input: question: Find the document type name of the document named \"How to read a book\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\n Now please use valid SQLite to answer the following questions: Find the names of employees who never won any award in the evaluation.",
    "Here are 5 examples including input and output:\n input: question: What instruments does the the song \"Le Pop\" use? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n input: question: Show the id, name of each festival and the number of artworks it has nominated. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID\n input: question: Find the names of swimmers who has a result of \"win\". serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'\n input: question: What are the names of members who are not in charge of any events? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n input: question: Find the names of nurses who are on call. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\n Now please use valid SQLite to answer the following questions: What are the names of the employees who never received any evaluation?",
    "Here are 5 examples including input and output:\n input: question: How many clubs are located at \"HHH\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"\n input: question: Find the entry name of the catalog with the highest price (in USD). serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\n input: question: What is the maximum length in meters for the bridges and what are the architects' names? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id\n input: question: How many customers are there? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(no_of_customers) FROM bank\n input: question: Show the names of companies and the number of employees they have serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\n Now please use valid SQLite to answer the following questions: What is the name of the shop that is hiring the largest number of employees?",
    "Here are 5 examples including input and output:\n input: question: Find Alice's friends of friends. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'\n input: question: What are the names of all video games that are collectible cards? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\n input: question: How many cities are in Australia? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n input: question: List the position of players with average number of points scored by players of that position bigger than 20. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n input: question: What are the average score and average staff number of all shops? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT avg(num_of_staff) ,  avg(score) FROM shop\n Now please use valid SQLite to answer the following questions: Which shop has the most employees? Give me the shop name.",
    "Here are 5 examples including input and output:\n input: question: What are the names and average prices of products for manufacturers whose products cost on average 150 or more? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n input: question: Count the number of students who did not enroll in any course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)\n input: question: What are the areas and counties for all appelations? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Area ,  County FROM APPELLATIONS\n input: question: Show the average amount of transactions for different investors. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id\n input: question: Which catalog content has the highest height? Give me the catalog entry name. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the name of the shops that do not hire any employee.",
    "Here are 5 examples including input and output:\n input: question: Sort all captain names by their ages from old to young. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain ORDER BY age DESC\n input: question: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n input: question: Show all party names and the number of members in each party. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n input: question: Find the city where the most customers live. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1\n input: question: Count the number of customers. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(*) FROM customers\n Now please use valid SQLite to answer the following questions: Which shops run with no employees? Find the shop names",
    "Here are 5 examples including input and output:\n input: question: What is the total number of products that are in orders with status \"Cancelled\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"\n input: question: What are the name and id of the team with the most victories in 2008 postseason? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n input: question: Which papers have the substring \"ML\" in their titles? Return the titles of the papers. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT title FROM papers WHERE title LIKE \"%ML%\"\n input: question: Find the names of rooms that have been reserved for more than 60 times. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60\n input: question: What is the party of the representative that has the smallest number of votes. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the number of employees hired in each shop; show the shop name as well.",
    "Here are 5 examples including input and output:\n input: question: Find all the stores in the district with the most population. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n input: question: What is the average price of products with manufacturer codes equal to 2? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(price) FROM products WHERE Manufacturer  =  2\n input: question: What are the names of the scientists, and how many projects are each of them working on? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name\n input: question: Show all dates of transactions whose type code is \"SALE\". serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"\n input: question: What are the names of enzymes in descending order? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme ORDER BY name DESC\n Now please use valid SQLite to answer the following questions: For each shop, return the number of employees working there and the name of the shop.",
    "Here are 5 examples including input and output:\n input: question: Show the names of customers who have both an order in completed status and an order in part status. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'\n input: question: Count the number of distinct company industries. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT count(DISTINCT Industry) FROM Companies\n input: question: Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000\n input: question: What are the titles and authors or editors that correspond to books made after 1989? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989\n input: question: What are the ids, date opened, name, and other details for all accounts? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\n Now please use valid SQLite to answer the following questions: What is total bonus given in all evaluations?",
    "Here are 5 examples including input and output:\n input: question: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred\n input: question: How many patients stay in room 112? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(patient) FROM stay WHERE room  =  112\n input: question: Find the names of the clubs that have at least a member from the city with city code \"HOU\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"\n input: question: Return the weight of the shortest person. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Weight FROM people ORDER BY Height ASC LIMIT 1\n input: question: Count the number of courses with more than 2 credits. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT count(*) FROM COURSE WHERE Credits  >  2\n Now please use valid SQLite to answer the following questions: Find the total amount of bonus given in all the evaluations.",
    "Here are 5 examples including input and output:\n input: question: Find the address of all customers that live in Germany and have invoice. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"\n input: question: Show the ids of all employees who have authorized destruction. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: What are the names of the members that have never registered at any branch? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)\n input: question: What are the name and description for role code \"MG\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\n input: question: What are the names of the chairs of festivals, sorted in ascending order of the year held? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC\n Now please use valid SQLite to answer the following questions: Give me all the information about hiring.",
    "Here are 5 examples including input and output:\n input: question: Find the full names of faculties who are members of department with department number 520. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520\n input: question: Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n input: question: What are the countries for each market, ordered alphabetically? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Country FROM market ORDER BY Country ASC\n input: question: Find the official names of cities with population bigger than 1500 or smaller than 500. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n input: question: How many rooms have a king bed? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n Now please use valid SQLite to answer the following questions: What is all the information about hiring?",
    "Here are 5 examples including input and output:\n input: question: Find the distinct last names of all the students who have president votes and whose advisor is not 2192. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"\n input: question: What is the average high temperature for each day of week? serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week\n input: question: Show all advisors who have at least two students. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2\n input: question: How many dorms have amenities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(DISTINCT dormid) FROM has_amenity\n input: question: How many movie reviews does each director get? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director\n Now please use valid SQLite to answer the following questions: Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "Here are 5 examples including input and output:\n input: question: What is the total quantity of products purchased by \"Rodrick Heaney\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n input: question: What are the different types of transactions? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT DISTINCT transaction_type FROM Financial_Transactions\n input: question: How many different scientists are assigned to any project? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(DISTINCT scientist) FROM assignedto\n input: question: List the text of all tweets in the order of date. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT text FROM tweets ORDER BY createdate\n input: question: Show the party with drivers from Hartford and drivers older than 40. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40\n Now please use valid SQLite to answer the following questions: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "Here are 5 examples including input and output:\n input: question: What are the total account balances for each customer from Utah or Texas? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n input: question: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n input: question: What are the names of all instructors who have taught a course, as well as the corresponding course id? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID\n input: question: How many instruments does the song \"Le Pop\" use? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n input: question: Show the location code of the country \"Canada\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"\n Now please use valid SQLite to answer the following questions: How many different store locations are there?",
    "Here are 5 examples including input and output:\n input: question: display those departments where more than ten employees work who got a commission percentage. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n input: question: How many draft copies does the document with id 2 have? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT count(*) FROM Draft_Copies WHERE document_id = 2;\n input: question: list all female (sex is F) candidate names in the alphabetical order. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name\n input: question: What is the name of the aircraft that has won an award the most? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n Now please use valid SQLite to answer the following questions: Count the number of distinct store locations.",
    "Here are 5 examples including input and output:\n input: question: Show order ids and the number of products in each order. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id\n input: question: Please show the categories of the music festivals with count more than 1. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\n input: question: Show all train names and times in stations in London in descending order by train time. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC\n input: question: What is the name and city of the airport from most of the routes start? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1\n input: question: How many papers are written by authors from the institution \"University of Pennsylvania\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\n Now please use valid SQLite to answer the following questions: How many documents do we have?",
    "Here are 5 examples including input and output:\n input: question: List all club names in descending alphabetical order. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM club ORDER BY name DESC\n input: question: What are the names of the county that the delegates on \"Appropriations\" committee belong to? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"\n input: question: Which customer made the smallest amount of claim in one claim? Return the customer details. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)\n input: question: What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'\n input: question: Which tourist attractions are visited at least twice? Give me their names and ids. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: Count the number of documents.",
    "Here are 5 examples including input and output:\n input: question: Find the student ID and middle name for all the students with at most two enrollments. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n input: question: Find the name of the students and their department names sorted by their total credits in ascending order. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  dept_name FROM student ORDER BY tot_cred\n input: question: How many entrepreneurs correspond to each investor? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\n input: question: Count the number of different parties. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(DISTINCT party_name) FROM party\n input: question: Please show the industries of companies in descending order of the number of companies. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n Now please use valid SQLite to answer the following questions: List document IDs, document names, and document descriptions for all documents.",
    "Here are 5 examples including input and output:\n input: question: List all students' first names and last names who majored in 600. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT Fname , Lname FROM Student WHERE Major  =  600;\n input: question: What are the total number of Domestic Passengers of airports that contain the word \"London\". serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"\n input: question: Report the number of students in each classroom. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list GROUP BY classroom\n input: question: Which winery is the wine that has the highest score from? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1\n input: question: What are the name of the players who received a card in descending order of the hours of training? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC\n Now please use valid SQLite to answer the following questions: What are the ids, names, and descriptions for all documents?",
    "Here are 5 examples including input and output:\n input: question: Show the account id and the number of transactions for each account serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\n input: question: List the names of states that have more than 2 parks. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n input: question: What are the unique labels for the albums? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT label) FROM albums\n input: question: What are the party emails associated with parties that used the party form that is the most common? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n input: question: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n Now please use valid SQLite to answer the following questions: What is the document name and template id for document with description with the letter 'w' in it?",
    "Here are 5 examples including input and output:\n input: question: What are the name and phone of the customer with the most ordered product quantity? serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1\n input: question: Find the number of distinct products Rodrick Heaney has bought so far. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n input: question: Find the average number of bedrooms of all the apartments. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT avg(bedroom_count) FROM Apartments\n input: question: What are the companies and main industries of all companies that are not headquartered in the United States? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'\n input: question: Find the first names of the teachers that teach first grade. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n Now please use valid SQLite to answer the following questions: Return the names and template ids for documents that contain the letter w in their description.",
    "Here are 5 examples including input and output:\n input: question: What are the names and headquarters of all companies ordered by descending market value? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  headquarters FROM company ORDER BY market_value DESC\n input: question: How many invoices were billed from each state? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n input: question: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n input: question: Find the average order quantity per order. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT avg(order_quantity) FROM order_items\n input: question: How many employees have salary between 100000 and 200000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\n Now please use valid SQLite to answer the following questions: What is the document id, template id and description for document named \"Robbin CV\"?",
    "Here are 5 examples including input and output:\n input: question: Show all movie titles, years, and directors, ordered by budget. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million\n input: question: What is the maximum point for climbers whose country is United Kingdom? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n input: question: List the names of countries whose language is not \"German\". serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Name FROM country WHERE Languages != \"German\"\n input: question: Find id of candidates whose assessment code is \"Pass\"? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n input: question: How many times does ROY SWEAZY has reserved a room. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n Now please use valid SQLite to answer the following questions: Return the document id, template id, and description for the document with the name Robbin CV.",
    "Here are 5 examples including input and output:\n input: question: What is the duration of the oldest actor? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n input: question: Find the first name of students in the descending order of age. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname FROM STUDENT ORDER BY Age DESC\n input: question: Count the number of customers recorded. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT count(*) FROM CUSTOMERS\n input: question: Which major has least number of students? List the major and the number of students. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\n input: question: Show the most common location of performances. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many different templates do all document use?",
    "Here are 5 examples including input and output:\n input: question: Show the movie titles and book titles for all companies in China. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n input: question: What is the average and total transaction amount? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions\n input: question: Find the titles of all the papers written by \"Jeremy Gibbons\" serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"\n input: question: Which year has the most degrees conferred? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n input: question: What is the incident type description for the incident type with code \"VIOLENCE\"? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"\n Now please use valid SQLite to answer the following questions: Count the number of different templates used for documents.",
    "Here are 5 examples including input and output:\n input: question: Which customer's name contains \"Alex\"? Find the full name. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"\n input: question: What are the first name and major of the students who are able to consume soy? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n input: question: What are the date and venue of each debate? serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Date ,  Venue FROM debate\n input: question: What are the student ids for those on scholarship in major number 600? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\n input: question: Which tourist attractions can we get to by bus? Tell me the names of the attractions. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"\n Now please use valid SQLite to answer the following questions: How many documents are using the template with type code 'PPT'?",
    "Here are 5 examples including input and output:\n input: question: Count the number of actors. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT count(*) FROM actor\n input: question: Who is the instructor with the highest salary? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor ORDER BY salary DESC LIMIT 1\n input: question: How many different locations does the school with code BUS has? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\n input: question: What are the id and name of the photos for mountains? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000\n input: question: What are the names of the cameras that have taken picture of the most mountains? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Count the number of documents that use the PPT template type.",
    "Here are 5 examples including input and output:\n input: question: What are the names of shops in ascending order of open year? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Shop_Name FROM shop ORDER BY Open_Year ASC\n input: question: Count the number of regions. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(*) FROM region\n input: question: What are the names and ids of customers whose address contains TN? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n input: question: What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\n input: question: Show ids for all aircrafts with more than 1000 distance. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT aid FROM Aircraft WHERE distance  >  1000\n Now please use valid SQLite to answer the following questions: Show all template ids and number of documents using each template.",
    "Here are 5 examples including input and output:\n input: question: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: What are the names of the amenities that Smith Hall has? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'\n input: question: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n input: question: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n input: question: What are the first names, office locations of all lecturers who have taught some course? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num\n Now please use valid SQLite to answer the following questions: What are all different template ids used for documents, and how many times were each of them used?",
    "Here are 5 examples including input and output:\n input: question: List the name and number of followers for each user, and sort the results by the number of followers in descending order. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n input: question: For each type, how many ships are there? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n input: question: How many customers have no payment histories? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );\n input: question: Which department has the most professors with a Ph.D.? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n input: question: How many staff in total? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Staff;\n Now please use valid SQLite to answer the following questions: What is the id and type code for the template used by the most documents?",
    "Here are 5 examples including input and output:\n input: question: What is the payment method that were used the least often? serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1\n input: question: Show the names of climbers and the heights of mountains they climb. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n input: question: Show all allergy types. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT allergytype FROM Allergy_type\n input: question: Which party has two or more records? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\n input: question: List document type codes and the number of documents in each code. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n Now please use valid SQLite to answer the following questions: Return the id and type code of the template that is used for the greatest number of documents.",
    "Here are 5 examples including input and output:\n input: question: What is all the information about courses, ordered by credits ascending? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT * FROM COURSE ORDER BY Credits\n input: question: What is the names of the physicians who prescribe medication Thesisin? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"\n input: question: Find the name and college of students whose decisions are yes in the tryout. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id\n input: question: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\n Now please use valid SQLite to answer the following questions: Show ids for all templates that are used by more than one document.",
    "Here are 5 examples including input and output:\n input: question: Find the country of all appelations who have at most three wines. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3\n input: question: For each position, what is the maximum number of  hours for students who spent more than 1000 hours training? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n input: question: What are the different cities listed? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT DISTINCT headquarter FROM manufacturers\n input: question: How many furniture components are there in total? serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT sum(num_of_component) FROM furniture\n input: question: What are the maximum and minimum number of cities in all markets. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT max(Number_cities) ,  min(Number_cities) FROM market\n Now please use valid SQLite to answer the following questions: What are the template ids of any templates used in more than a single document?",
    "Here are 5 examples including input and output:\n input: question: Which channels are broadcast in the morning? Give me the channel names. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'\n input: question: What is the number of technicians? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT count(*) FROM technician\n input: question: Count the number of accounts. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Accounts\n input: question: What is the unit of measuerment of the product category code \"Herbs\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"\n input: question: Find the list of page size which have more than 3 product listed serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\n Now please use valid SQLite to answer the following questions: Show ids for all templates not used by any document.",
    "Here are 5 examples including input and output:\n input: question: Which players are from Indonesia? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n input: question: Show the residences that have at least two players. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2\n input: question: What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year\n input: question: Find the name of instructor who is the advisor of the student who has the highest number of total credits. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\n input: question: What are the first names and office locations for all professors sorted alphabetically by first name? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\n Now please use valid SQLite to answer the following questions: What are the ids for templates that are not used in any documents?",
    "Here are 5 examples including input and output:\n input: question: List each birth place along with the number of people from there. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\n input: question: Which allergy has most number of students affected? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of the drama workshop groups with address in Feliciaberg city? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"\n input: question: What are the names of instructors who advise more than one student? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1\n input: question: What is the minimum, average, and maximum distance of all aircrafts. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft\n Now please use valid SQLite to answer the following questions: How many templates do we have?",
    "Here are 5 examples including input and output:\n input: question: What are the names of gymnasts whose hometown is not \"Santo Domingo\"? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"\n input: question: What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is\n input: question: For each branch id, what are the names of the branches that were registered after 2015? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id\n input: question: What are the first name, last name and id of the player with the most all star game experiences? Also list the count. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;\n input: question: How many journalists are there? serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT count(*) FROM journalist\n Now please use valid SQLite to answer the following questions: Count the number of templates.",
    "Here are 5 examples including input and output:\n input: question: What is the address of the location \"UK Gallery\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n input: question: What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')\n input: question: Find the states where have the colleges whose enrollments are less than the largest size. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\n input: question: For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade\n input: question: What is the description of the role named \"Proof Reader\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"\n Now please use valid SQLite to answer the following questions: Show template ids, version numbers, and template type codes for all templates.",
    "Here are 5 examples including input and output:\n input: question: Who are the friends of Alice that are doctors? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'\n input: question: What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3\n input: question: What is the name of the department with the most students minoring in it? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\n input: question: what is the name and age of the youngest winning pilot? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n input: question: How many followers does each user have? serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT count(*) FROM follows\n Now please use valid SQLite to answer the following questions: What are the ids, version numbers, and type codes for each template?",
    "Here are 5 examples including input and output:\n input: question: What are the country names, area and population which has both roller coasters with speed higher serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55\n input: question: What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n input: question: When did the staff member with first name as Janessa and last name as Sawayn leave the company? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n input: question: What is the number of routes operated by the airline American Airlines whose destinations are in Italy? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n input: question: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n Now please use valid SQLite to answer the following questions: Show all distinct template type codes for all templates.",
    "Here are 5 examples including input and output:\n input: question: List the names of technicians in ascending order of age. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Name FROM technician ORDER BY Age ASC\n input: question: Find the number of universities that have over a 20000 enrollment size for each affiliation type. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation\n input: question: Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"\n input: question: Give the phones for departments in room 268. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n input: question: Which authors have last name \"Ueno\"? List their first names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname FROM authors WHERE lname  =  \"Ueno\"\n Now please use valid SQLite to answer the following questions: What are the different template type codes?",
    "Here are 5 examples including input and output:\n input: question: How many films have the word 'Dummy' in their titles? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n input: question: What is the name and distance for the aircraft that has an id of 12? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft WHERE aid  =  12\n input: question: List the countries having more than 4 addresses listed. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n input: question: What is the position that is most common among players in match seasons? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of the country with the most number of home airlines? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the ids of templates with template type code PP or PPT?",
    "Here are 5 examples including input and output:\n input: question: How many departments are in the division AS? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"\n input: question: What is detail of the student who most recently registered course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n input: question: Who is the oldest person? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)\n input: question: Which tests have \"Pass\" results? Return the dates when the tests were taken. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"\n input: question: Find the phone numbers of customers using the most common policy type among the available policies. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\n Now please use valid SQLite to answer the following questions: Return the ids of templates that have the code PP or PPT.",
    "Here are 5 examples including input and output:\n input: question: How many distinct characteristic names does the product \"cumin\" have? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n input: question: list all the names of programs, ordering by launch time. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch\n input: question: In which country and state does Janessa Sawayn live? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: What is the average score of submissions? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT avg(Scores) FROM submission\n input: question: How many customers are living in city \"Lake Geovannyton\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"\n Now please use valid SQLite to answer the following questions: How many templates have template type code CV?",
    "Here are 5 examples including input and output:\n input: question: What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'\n input: question: For each director, what are the titles and ratings for all the movies they reviewed? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director\n input: question: What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos. serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)\n input: question: What are the ids and names of the medicine that can interact with two or more enzymes? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n input: question: What are the last names of faculty in building Barton, sorted by last name? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname\n Now please use valid SQLite to answer the following questions: Count the number of templates of the type CV.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the dorm with both a TV Lounge and Study Room listed as amenities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\n input: question: Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'\n input: question: Return the maximum and minimum customer codes. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT max(customer_code) ,  min(customer_code) FROM Customers\n input: question: Show the most common position of players in match seasons. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1\n input: question: What are the descriptions and names of the courses that have student enrollment bigger than 2? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n Now please use valid SQLite to answer the following questions: What is the version number and template type code for the template with version number later than 5?",
    "Here are 5 examples including input and output:\n input: question: Find the first name of students who is older than 20. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname FROM student WHERE age  >  20\n input: question: display the employee ID for each employee and the date on which he ended his previous job. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n input: question: Count the number of cards the customer with the first name Art and last name Turcotte has. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n input: question: Find the name and partition id for users who tweeted less than twice. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2\n input: question: What are the maximum, minimum and average home games each stadium held? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium\n Now please use valid SQLite to answer the following questions: Return the version numbers and template type codes of templates with a version number greater than 5.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the 3 employees who get paid the least? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n input: question: What are the names of ships, ordered by year they were built and their class? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM ship ORDER BY built_year ,  CLASS\n input: question: Return the issue dates of volumes by artists who are at most 23 years old? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23\n input: question: How many colleges in total? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM College\n input: question: Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200\n Now please use valid SQLite to answer the following questions: Show all template type codes and number of templates for each.",
    "Here are 5 examples including input and output:\n input: question: Find the average elevation of all airports for each country. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT avg(elevation) ,  country FROM airports GROUP BY country\n input: question: Sort the apartment numbers in ascending order of room count. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments ORDER BY room_count ASC\n input: question: What are the id and details of the customers who have at least 3 events? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n input: question: Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"\n input: question: Which country has at most 3 stadiums listed? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3\n Now please use valid SQLite to answer the following questions: What are the different template type codes, and how many templates correspond to each?",
    "Here are 5 examples including input and output:\n input: question: How many persons are not body builders? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)\n input: question: How many allergies have type animal? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n input: question: How many distinct birth places are there? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT count(DISTINCT Birth_Place) FROM people\n input: question: Where is store 1 located? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1\n input: question: What is the average distance and average price for flights from Los Angeles. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n Now please use valid SQLite to answer the following questions: Which template type code has most number of templates?",
    "Here are 5 examples including input and output:\n input: question: Return the countries of the mountains that have a height larger than 5000. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Country FROM mountain WHERE Height  >  5000\n input: question: Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: List the order id, customer id for orders in Cancelled status, ordered by their order dates. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n input: question: Show ids for all documents with budget types described as 'Government'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\n input: question: Which delegates are from counties with population smaller than 100000? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000\n Now please use valid SQLite to answer the following questions: Return the type code of the template type that the most templates belong to.",
    "Here are 5 examples including input and output:\n input: question: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n input: question: Find the first name of student who is taking classes from accounting and Computer Info. Systems departments serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'\n input: question: What are the advisors serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2\n input: question: How many main stream browsers whose market share is at least 5 exist? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT count(*) FROM browser WHERE market_share  >=  5\n input: question: What are the dates of the orders made by the customer named \"Jeramie\"? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n Now please use valid SQLite to answer the following questions: Show all template type codes with less than three templates.",
    "Here are 5 examples including input and output:\n input: question: What is the name and city of the airport that the most routes end at? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n input: question: Show the ids of students whose advisors are professors. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"\n input: question: Which store owns most items? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the country of origin of the artist who is female and produced a song in Bangla? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"\n input: question: How many female students live in Smith Hall? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n Now please use valid SQLite to answer the following questions: What are the codes of template types that have fewer than 3 templates?",
    "Here are 5 examples including input and output:\n input: question: What are the last names and ages of the students who are allergic to milk and cat? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n input: question: Show all countries and the number of people from each country. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT country ,  count(*) FROM people GROUP BY country\n input: question: What are the first names and birthdates of the professors in charge of ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\n input: question: Find the name and hours of the students whose tryout decision is yes. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: For each team, return the team name, id and the maximum salary among the team. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\n Now please use valid SQLite to answer the following questions: What the smallest version number and its template type code?",
    "Here are 5 examples including input and output:\n input: question: Give me the product type, name and price for all the products supplied by supplier id 3. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\n input: question: Return the name of the party with the most members. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the number of users who did not write any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n input: question: How many film are there? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT count(*) FROM film\n input: question: How many different bike ids are there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT count(DISTINCT bike_id) FROM trip\n Now please use valid SQLite to answer the following questions: Return the lowest version number, along with its corresponding template type code.",
    "Here are 5 examples including input and output:\n input: question: Give the name of the highest paid instructor. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor ORDER BY salary DESC LIMIT 1\n input: question: find the name of pilots who did not win the matches held in the country of Australia. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n input: question: Which manager won the most manager award? Give me the manager's first name, last name and id. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;\n input: question: Show the different headquarters and number of companies at each headquarter. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters\n input: question: Count the total number of settlements made. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT count(*) FROM Settlements\n Now please use valid SQLite to answer the following questions: What is the template type code of the template used by document with the name \"Data base\"?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of all moviest hat have not been reviewed by Britanny Harris? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n input: question: Which film has the most copies in the inventory? List both title and id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of customers who have not taken a Mortage loan? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\n input: question: What are the characters of actors in descending order of age? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Character FROM actor ORDER BY age DESC\n input: question: What are the total number of credits offered by each department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n Now please use valid SQLite to answer the following questions: Return the template type code of the template that is used by a document named Data base.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all songs that are approximately 4 minutes long or are in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"\n input: question: Find the average age of female students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"\n input: question: Find the title of courses that have two prerequisites? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2\n input: question: What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3\n input: question: Find the number of classes in each school. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code\n Now please use valid SQLite to answer the following questions: Show all document names using templates with template type code BK.",
    "Here are 5 examples including input and output:\n input: question: Find the full name of the customer with the email \"luisg@embraer.com.br\". serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"\n input: question: Find the emails of parties with the most popular party form. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n input: question: What is the largest and smallest customer codes? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT max(customer_code) ,  min(customer_code) FROM Customers\n input: question: What is the name and open year for the branch with most number of memberships registered in 2016? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n input: question: Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of documents that use templates with the code BK?",
    "Here are 5 examples including input and output:\n input: question: Count the number of all the calendar items. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_calendar\n input: question: What is the average number of bedrooms of all apartments? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT avg(bedroom_count) FROM Apartments\n input: question: What are the names, address roads, and cities of the branches ordered by opening year? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\n input: question: What is the list of school locations sorted in ascending order of school enrollment? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT LOCATION FROM school ORDER BY Enrollment ASC\n input: question: What is the description of the club named \"Tennis Club\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\n Now please use valid SQLite to answer the following questions: Show all template type codes and the number of documents using each type.",
    "Here are 5 examples including input and output:\n input: question: Which institution has the most papers? Find the name of the institution. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1\n input: question: Show the names of buildings except for those having an institution founded in 2003. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\n input: question: What are the top 5 countries by number of invoices and how many do they have? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n input: question: What are the titles of courses that are in the Statistics department but not the Psychology department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'\n input: question: List the names of people that have not been on the affirmative side of debates. serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n Now please use valid SQLite to answer the following questions: What are the different template type codes, and how many documents use each type?",
    "Here are 5 examples including input and output:\n input: question: Who are Bob's friends? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'\n input: question: How many times has the student Linda Smith visited Subway? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n input: question: Find the last names of students with major 50. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT LName FROM STUDENT WHERE Major  =  50\n input: question: Which institution does \"Katsuhiro Ueno\" belong to? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n input: question: Show the most common college of authors of submissions. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which template type code is used by most number of documents?",
    "Here are 5 examples including input and output:\n input: question: Show the ids of all the faculty members who participate in an activity and advise a student. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n input: question: Count the number of different directors. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT COUNT (DISTINCT director) FROM movie\n input: question: What are characteristic names used at least twice across all products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n input: question: Show the names of employees that work for companies with sales bigger than 200. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200\n input: question: Find the maximum and total number of followers of all users. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT max(followers) ,  sum(followers) FROM user_profiles\n Now please use valid SQLite to answer the following questions: Return the code of the template type that is most commonly used in documents.",
    "Here are 5 examples including input and output:\n input: question: Show the average, minimum, and maximum age for different majors. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major\n input: question: find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\n input: question: Return the minister who left office at the latest time. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister FROM party ORDER BY left_office DESC LIMIT 1\n input: question: What are the names of all songs that are ordered by their resolution numbers? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song ORDER BY resolution\n input: question: What are the names of all cities with more than one airport and how many airports do they have? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: Show all template type codes that are not used by any document.",
    "Here are 5 examples including input and output:\n input: question: Give me the start station and end station for the trips with the three oldest id. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n input: question: Show the top 3 apartment type codes sorted by the average number of rooms in descending order. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3\n input: question: Which program is broadcast most frequently? Give me the program name. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n input: question: Return the characters for actors, ordered by age descending. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Character FROM actor ORDER BY age DESC\n input: question: What are all the distinct participant ids who attended any events? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT count(DISTINCT participant_id) FROM participants_in_Events\n Now please use valid SQLite to answer the following questions: What are the codes of template types that are not used for any document?",
    "Here are 5 examples including input and output:\n input: question: What are the full names of customers who do not have any accounts? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n input: question: What is the count of states with college students playing in the mid position but not as goalies? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n input: question: What is the last name of the contact individual from the Labour party organization who was contacted most recently? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1\n input: question: How many roller coasters are there? serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT count(*) FROM roller_coaster\n input: question: Show the names and details of all the staff members. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name ,  Other_Details FROM Staff\n Now please use valid SQLite to answer the following questions: Show all template type codes and descriptions.",
    "Here are 5 examples including input and output:\n input: question: Show names for all employees with salary more than the average. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n input: question: Find the names and number of works of the three artists who have produced the most songs. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n input: question: What is the id of the account with the most transactions? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n input: question: How many different classes are there? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT class_code) FROM CLASS\n input: question: What are the names and budgets of departments with budgets greater than the average? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n Now please use valid SQLite to answer the following questions: What are the type codes and descriptions for all template types?",
    "Here are 5 examples including input and output:\n input: question: What are the names and ids of stations that had more than 14 bikes available on average or were installed in December? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"\n input: question: Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'\n input: question: What are the id of students who registered course 301? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_attendance WHERE course_id  =  301\n input: question: Give me the times and numbers of all trains that go to Chennai, ordered by time. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME\n input: question: How many students did not have any course enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)\n Now please use valid SQLite to answer the following questions: What is the template type descriptions for template type code \"AD\".",
    "Here are 5 examples including input and output:\n input: question: What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\n input: question: What are the names of students who took a course in the Fall of 2003? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)\n input: question: What are the countries for each market ordered by decreasing number of cities? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Country FROM market ORDER BY Number_cities DESC\n input: question: What are the publishers who have published a book in both 1989 and 1990? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n input: question: How many airlines does Russia has? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines WHERE country  =  'Russia'\n Now please use valid SQLite to answer the following questions: Return the template type description of the template type with the code AD.",
    "Here are 5 examples including input and output:\n input: question: How many phones belongs to each accreditation type? serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n input: question: Find the names of instructors who didn't each any courses in any Spring semester. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n input: question: What are the names of people who are not entrepreneurs? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\n input: question: What is the total budget amount for school \"Glenn\" in all years? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'\n input: question: What are the details and opening hours of the museums? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID\n Now please use valid SQLite to answer the following questions: What is the template type code for template type description \"Book\".",
    "Here are 5 examples including input and output:\n input: question: How many courses do the student whose id is 171 attend? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n input: question: Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'\n input: question: What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3\n input: question: Find all the cities that have 2 to 4 parks. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n input: question: List all the names of schools with an endowment amount smaller than or equal to 10. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10\n Now please use valid SQLite to answer the following questions: Return the type code of the template type with the description \"Book\".",
    "Here are 5 examples including input and output:\n input: question: Show the names and total passengers for all train stations not in London. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n input: question: Sort the first names of all the authors in alphabetical order. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname FROM authors ORDER BY fname\n input: question: Show the names of customers who use Credit Card payment method and have more than 2 orders. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2\n input: question: How many customers in state of CA? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM customers WHERE state = \"CA\";\n input: question: What is the least popular kind of decor? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What are the distinct template type descriptions for the templates ever used by any document?",
    "Here are 5 examples including input and output:\n input: question: Find the name of the product that has the smallest capacity. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n input: question: List the camera lens names containing substring \"Digital\". serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"\n input: question: What are the names of the services that have never been used? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id\n input: question: What is the address of employee Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n input: question: List the codes of all courses that take place in room KLR209. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'\n Now please use valid SQLite to answer the following questions: Return the different descriptions for templates that have been used in a document.",
    "Here are 5 examples including input and output:\n input: question: How many distinct types of accounts are there? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(DISTINCT acc_type) FROM customer\n input: question: Show the distinct leader names of colleges associated with members from country \"Canada\". serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"\n input: question: Which cities have higher temperature in Feb than in Jun or have once served as host cities? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n input: question: Find the title of course whose prerequisite is course Differential Geometry. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n input: question: Count the number of colors. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM ref_colors\n Now please use valid SQLite to answer the following questions: What are the template ids with template type description \"Presentation\".",
    "Here are 5 examples including input and output:\n input: question: List all the log ids and their descriptions from the problem logs. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id ,  log_entry_description FROM problem_log\n input: question: Find the name of department that offers the class whose description has the word \"Statistics\". serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\n input: question: For each project id, how many staff does it have? List them in increasing order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC\n input: question: Find the name of dorms only for female (F gender). serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE gender  =  'F'\n input: question: What are the names of all directors who have made one movie except for the director named NULL? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1\n Now please use valid SQLite to answer the following questions: Return the ids corresponding to templates with the description 'Presentation'.",
    "Here are 5 examples including input and output:\n input: question: What are the draft pick numbers and draft classes for players who play the Defender position? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n input: question: What is the highest acc percent score in the competition? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n input: question: Show names and phones of customers who do not have address information. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)\n input: question: What are full names and salaries of employees working in the city of London? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'\n input: question: What are the names of all pilots 30 years old or young in descending alphabetical order? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n Now please use valid SQLite to answer the following questions: How many paragraphs in total?",
    "Here are 5 examples including input and output:\n input: question: What are the names of customers who never made an order. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id\n input: question: How many different jobs are listed? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(DISTINCT job) FROM Person\n input: question: What are the ids of documents with the type code CV that do not have expenses. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n input: question: What is the name of the department with the most students enrolled? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1\n input: question: find all dependent names who have a spouse relation with some employee. serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'\n Now please use valid SQLite to answer the following questions: Count the number of paragraphs.",
    "Here are 5 examples including input and output:\n input: question: How many trips stated from  a station in Mountain View and ended at one in Palo Alto? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"\n input: question: Find the total amount of loans offered by each bank branch. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n input: question: List all every engineer's first name, last name, details and coresponding skill description. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n input: question: What are the names of the tourist attractions that have parking or shopping as their feature details? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'\n input: question: List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;\n Now please use valid SQLite to answer the following questions: How many paragraphs for the document with name 'Summer Show'?",
    "Here are 5 examples including input and output:\n input: question: Return the maximum and minimum population among all counties. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT max(Population) ,  min(Population) FROM county\n input: question: How many clubs does \"Linda Smith\" belong to? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n input: question: What is the number of airlines based in Russia? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines WHERE country  =  'Russia'\n input: question: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n input: question: Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\n Now please use valid SQLite to answer the following questions: Count the number of paragraphs in the document named 'Summer Show'.",
    "Here are 5 examples including input and output:\n input: question: What are the numbers of all flights that can cover a distance of more than 2000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight WHERE distance  >  2000\n input: question: Show theme and year for all exhibitions with ticket prices lower than 15. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\n input: question: What are the maximum and minimum number of cows across all farms. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT max(Cows) ,  min(Cows) FROM farm\n input: question: What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"\n input: question: Find the salaries of all distinct instructors that are less than the largest salary. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)\n Now please use valid SQLite to answer the following questions: Show paragraph details for paragraph with text 'Korea ' .",
    "Here are 5 examples including input and output:\n input: question: What is the title, phone and hire date of Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n input: question: How many parks does Atlanta city have? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM park WHERE city = 'Atlanta';\n input: question: Show the membership level with most number of members. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n input: question: Show the region name with at least two storms. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n input: question: Which room has the highest rate? List the room's full name, rate, check in and check out date. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What are the details for the paragraph that includes the text 'Korea ' ?",
    "Here are 5 examples including input and output:\n input: question: Show the names of customers who have the most mailshots. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the company where Eduardo Martins is a customer? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n input: question: Find the names of programs that are never broadcasted in the morning. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"\n input: question: How many restaurant is the Sandwich type restaurant? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'\n input: question: Find the physicians who are trained in a procedure that costs more than 5000. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\n Now please use valid SQLite to answer the following questions: Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "Here are 5 examples including input and output:\n input: question: What are the codes of types of documents of which there are for or more? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n input: question: Who are the players from Indonesia? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n input: question: What are all the distinct details of the customers? serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT DISTINCT customer_details FROM Customers\n input: question: What is the minimum and maximum number of bathrooms of all the apartments? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n input: question: Show the average room count of the apartments that have booking status code \"Provisional\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n Now please use valid SQLite to answer the following questions: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "Here are 5 examples including input and output:\n input: question: For each product, return its id and the number of times it was ordered. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id\n input: question: What buildings have faculty offices? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT building FROM Faculty\n input: question: Find the last names of the members of the club \"Bootup Baltimore\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\n input: question: What are the names of customers with credit score less than the average credit score across customers? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\n input: question: Which types of policy are chosen by more than 2 customers? Give me the policy type codes. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2\n Now please use valid SQLite to answer the following questions: Show all paragraph texts for the document \"Customer reviews\".",
    "Here are 5 examples including input and output:\n input: question: Find the names of schools that have more than one donator with donation amount above 8.5. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\n input: question: What is the role with the smallest number of employees? Find the role codes. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\n input: question: List the forenames of all distinct drivers in alphabetical order? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT forename FROM drivers ORDER BY forename ASC\n input: question: Find the payment method that is used most frequently. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n input: question: How many elections are there? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT count(*) FROM election\n Now please use valid SQLite to answer the following questions: What are the paragraph texts for the document with the name 'Customer reviews'?",
    "Here are 5 examples including input and output:\n input: question: What are the names of countries that have both players with position forward and players with position defender? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n input: question: How many schools are there? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT count(*) FROM school\n input: question: How many customers are there of each gender? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT gender ,  count(*) FROM Customers GROUP BY gender\n input: question: What is the name of the customer with the worst credit score? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1\n input: question: Return the channel code and contact number of the customer contact channel whose active duration was the longest. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)\n Now please use valid SQLite to answer the following questions: Show all document ids and the number of paragraphs in each document. Order by document id.",
    "Here are 5 examples including input and output:\n input: question: How many institutions are there? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM inst\n input: question: Which city lives most of staffs? List the city name and number of staffs. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;\n input: question: What is the average and total capacity for all dorms who are of gender X? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n input: question: How many activities does Mark Giuliano participate in? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n input: question: What is the most used instrument? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "Here are 5 examples including input and output:\n input: question: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n input: question: What are the description and credit of the course which the student whose last name is Smithson took? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\n input: question: What are the total amount of money in the invoices billed from Chicago, Illinois? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n input: question: Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n input: question: Sort the names of all counties in descending alphabetical order. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY County_name DESC\n Now please use valid SQLite to answer the following questions: Show all document ids, names and the number of paragraphs in each document.",
    "Here are 5 examples including input and output:\n input: question: Find the id of the candidate who got the lowest oppose rate. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1\n input: question: Find the number of scientists involved for each project name. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\n input: question: Select the names of manufacturer whose products have an average price higher than or equal to $150. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n input: question: Find the name of tracks which are in both Movies and music playlists. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n input: question: What is the average sales of the journals that have an editor whose work type is 'Photo'? serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'\n Now please use valid SQLite to answer the following questions: What are the ids and names of each document, as well as the number of paragraphs in each?",
    "Here are 5 examples including input and output:\n input: question: What is the highest elevation of an airport in the country of Iceland? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n input: question: What are the catalog entry names of the products with next entry ID above 8? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n input: question: What are the crime rates of counties that contain cities that have white percentages of over 90? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90\n input: question: Find the number of students who is older than 20 in each dorm. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name\n input: question: What is the description of document type 'Paper'? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";\n Now please use valid SQLite to answer the following questions: List all document ids with at least two paragraphs.",
    "Here are 5 examples including input and output:\n input: question: What is the average weight of all players? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT avg(weight) FROM Player\n input: question: How many students attend course English? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n input: question: Show first name and last name for all the students advised by Michael Goodrich. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"\n input: question: Find the number of rooms that do not have any reservation. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)\n input: question: List all statement ids and statement details. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT STATEMENT_ID ,  statement_details FROM Statements\n Now please use valid SQLite to answer the following questions: What are the ids of documents that have 2 or more paragraphs?",
    "Here are 5 examples including input and output:\n input: question: Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\n input: question: What are the phones of departments in Room 268? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n input: question: What is the type of video game Call of Destiny. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"\n input: question: Select the names of all the products in the store. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT Name FROM Products\n input: question: Find the names of all reviewers who have ratings with a NULL value for the date. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"\n Now please use valid SQLite to answer the following questions: What is the document id and name with greatest number of paragraphs?",
    "Here are 5 examples including input and output:\n input: question: Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"\n input: question: Give the names, details, and data types of characteristics that are not found in any product. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n input: question: What are the campuses that opened in 1958? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE YEAR  =  1958\n input: question: What is the stories of highest building? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1\n input: question: Find the product category description of the product category with code \"Spices\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"\n Now please use valid SQLite to answer the following questions: Return the id and name of the document with the most paragraphs.",
    "Here are 5 examples including input and output:\n input: question: What are the different names and countries of origins for all artists whose song ratings are above 9? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n input: question: What are the name and typical buying and selling prices of the products that have color described as \"yellow\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\n input: question: What is the total number of rooms available in this inn? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Rooms;\n input: question: What are the names of climbers and the corresponding heights of the mountains that they climb? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n input: question: Show the nations that have both hosts older than 45 and hosts younger than 35. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n Now please use valid SQLite to answer the following questions: What is the document id with least number of paragraphs?",
    "Here are 5 examples including input and output:\n input: question: In which country does Roberto Almeida? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n input: question: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n input: question: What are the different types of vocals? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT DISTINCT TYPE FROM vocals\n input: question: How many members of \"Bootup Baltimore\" are older than 18? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18\n input: question: Find the name of the target user with the lowest trust score. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the id of the document with the fewest paragraphs.",
    "Here are 5 examples including input and output:\n input: question: Show the names of journalists and the number of events they reported. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name\n input: question: List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\"). serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n input: question: When and in what zip code did max temperature reach 80? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80\n input: question: Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars\n input: question: Find the id and city of the student address with the highest average monthly rental. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the document id with 1 to 2 paragraphs?",
    "Here are 5 examples including input and output:\n input: question: What is the average age for each gender? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  gender FROM Person GROUP BY gender\n input: question: What is the forename and surname of the driver with the shortest laptime? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n input: question: What is the first name of the student whose last name starts with the letter S and is taking ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'\n input: question: Return the product type, name, and price for products supplied by supplier 3. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\n input: question: What are the names of the tourist attractions that can be accessed by bus? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"\n Now please use valid SQLite to answer the following questions: Give the ids of documents that have between one and two paragraphs.",
    "Here are 5 examples including input and output:\n input: question: Find the name of the department that has the fewest members. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1\n input: question: Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"\n input: question: Find the name and id of the team that won the most times in 2008 postseason. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n input: question: Return the average gross sales in dollars across all films. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT avg(Gross_in_dollar) FROM film\n input: question: List the name of albums that are released by aritist whose name has 'Led' serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'\n Now please use valid SQLite to answer the following questions: Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "Here are 5 examples including input and output:\n input: question: List the hosts of performances in ascending order of attendance. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT HOST FROM performance ORDER BY Attendance ASC\n input: question: What are the themes of parties ordered by the number of hosts in ascending manner? serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n input: question: What is the type and id of the organization that has the most research staff? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n input: question: what is the address of history department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT dept_address FROM department WHERE dept_name  =  'History'\n input: question: Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "Here are 5 examples including input and output:\n input: question: How many Professors are in building NEB? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"\n input: question: Find the first names of students whose first names contain letter \"a\". serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'\n input: question: What is the average age for all person? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) FROM Person\n input: question: Which organizations are not a parent organization of others? List the organization id. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations\n input: question: Show the maximum share count of transactions where the amount is smaller than 10000 serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n Now please use valid SQLite to answer the following questions: How many teachers are there?",
    "Here are 5 examples including input and output:\n input: question: Find the number of checking accounts for each account name. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n input: question: What are the names and flags of ships that do not have a captain with the rank of Midshipman? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n input: question: Show the manager name for gas stations belonging to the ExxonMobil company. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'\n input: question: What is the first name of the staff who did not give any lesson? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id\n input: question: List the method, date and amount of all the payments, in ascending order of date. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n Now please use valid SQLite to answer the following questions: What is the total count of teachers?",
    "Here are 5 examples including input and output:\n input: question: List the name and the number of stations for all the cities that have at least 15 stations. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15\n input: question: Find the count of universities whose campus fee is greater than the average campus fee. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n input: question: How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: What is the name of the staff that is in charge of the attraction named \"US museum\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"\n input: question: Which rank has the smallest number of faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the names of teachers in ascending order of age.",
    "Here are 5 examples including input and output:\n input: question: How many members of club \"Bootup Baltimore\" are younger than 18? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\n input: question: How many faculty lines are there in the university that conferred the most number of degrees in year 2002? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1\n input: question: What is the name of the department that offers a course that has a description including the word \"Statistics\"? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\n input: question: What are the different names of the genres? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT DISTINCT name FROM genres;\n input: question: What is the total account balance for customers with a credit score of above 100 for the different states? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state\n Now please use valid SQLite to answer the following questions: What are the names of the teachers ordered by ascending age?",
    "Here are 5 examples including input and output:\n input: question: For each bed type, find the average room price. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n input: question: What is all the information on the airport with the largest number of international passengers? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\n input: question: Show first name and last name for all students. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Fname ,  Lname FROM Student\n input: question: Find the name of all students who were in the tryout sorted in alphabetic order. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n input: question: How old is each student and how many students are each age? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT age ,  count(*) FROM Student GROUP BY age\n Now please use valid SQLite to answer the following questions: What are the age and hometown of teachers?",
    "Here are 5 examples including input and output:\n input: question: Find the name of the dorm with the largest capacity. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1\n input: question: In which year did the least people enter hall of fame? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;\n input: question: What is the average fee for a CSU campus in the year of 2005? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\n input: question: Show all the locations where some cinemas were opened in both year 2010 and year 2011. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011\n input: question: Return the average, maximum, and minimum budgets in millions for movies made before the year 2000. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000\n Now please use valid SQLite to answer the following questions: What is the age and hometown of every teacher?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the media types? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT name FROM media_types;\n input: question: How many students live in each city and what are their average ages? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code\n input: question: Give me the detail and opening hour for each museum. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID\n input: question: What are the names of patients who are staying in room 111 and have an undergoing treatment? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111\n input: question: List the ids, names and market shares of all browsers. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT id ,  name ,  market_share FROM browser\n Now please use valid SQLite to answer the following questions: List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "Here are 5 examples including input and output:\n input: question: Which tourist attraction is associated with the photo \"game1\"? Return its name. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\n input: question: What is the sum of total pounds of purchase in year 2018 for all branches in London? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018\n input: question: Who are the nominees who have been nominated more than two times? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n input: question: Which customer have the most policies? Give me the customer details. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n input: question: How many members are not living in Hartford? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT count(*) FROM member WHERE address != 'Hartford'\n Now please use valid SQLite to answer the following questions: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "Here are 5 examples including input and output:\n input: question: What are the personal names used both by some course authors and some students? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n input: question: What are the employee ids for each employee and final dates of employment at their last job? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n input: question: How many employees do we have? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT count(*) FROM Employees;\n input: question: What are the majors of male (sex is M) students? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Major FROM STUDENT WHERE Sex  =  \"M\"\n input: question: Which payment method is used by most customers? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Show the name of teachers aged either 32 or 33?",
    "Here are 5 examples including input and output:\n input: question: What are the invoice numbers created before 1989-09-03 or after 2007-12-25? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n input: question: What is the location shared by most counties? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the name of customer who has the lowest credit score. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1\n input: question: Find the city that hosted the most events. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1\n input: question: Return the investor who have invested in the greatest number of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of the teachers who are aged either 32 or 33?",
    "Here are 5 examples including input and output:\n input: question: What are the usernames and passwords of users that have the most common role? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names, ages, and countries of artists, sorted by the year they joined? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name ,  age ,  country FROM artist ORDER BY Year_Join\n input: question: Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3\n input: question: What are the names of people in ascending order of weight? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Name FROM People ORDER BY Weight ASC\n input: question: Find the names of all instructors in Comp. Sci. department with salary > 80000. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000\n Now please use valid SQLite to answer the following questions: What is the hometown of the youngest teacher?",
    "Here are 5 examples including input and output:\n input: question: Select the name and price of the cheapest product. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1\n input: question: How many airports are there per city in the United States? Order the cities by decreasing number of airports. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC\n input: question: What is the age of the friend of Zach with longest year relationship? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n input: question: For each delegate, find the names of the party they are part of. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID\n input: question: Show all the distinct product names with price higher than the average. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)\n Now please use valid SQLite to answer the following questions: Where is the youngest teacher from?",
    "Here are 5 examples including input and output:\n input: question: Show the names of trains and locations of railways they are in. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\n input: question: List all customers’ names in the alphabetical order. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT name FROM accounts ORDER BY name\n input: question: Show the zip code of the county with name \"Howard\". serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\n input: question: Give the address of the staff member who has the first name Elsa. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'\n input: question: Give the names of tracks that do not have a race in the class 'GT'. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n Now please use valid SQLite to answer the following questions: Show different hometown of teachers and the number of teachers from each hometown.",
    "Here are 5 examples including input and output:\n input: question: report the total number of degrees granted between 1998 and 2002. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\n input: question: Find the name of airports whose altitude is between -50 and 50. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50\n input: question: How many people have membership in the club \"Pen and Paper Gaming\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"\n input: question: Find the name and level of catalog structure with level between 5 and 10. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10\n input: question: For each station, find its latitude and the minimum duration of trips that ended at the station. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id\n Now please use valid SQLite to answer the following questions: For each hometown, how many teachers are there?",
    "Here are 5 examples including input and output:\n input: question: What are department ids for departments with managers managing more than 3 employees? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n input: question: How many songs have a shared vocal? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"\n input: question: What are the names of all the documents, as well as the access counts of each, ordered alphabetically? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name ,  access_count FROM documents ORDER BY document_name\n input: question: Give the color description that is least common across products. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1\n input: question: Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\". serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"\n Now please use valid SQLite to answer the following questions: List the most common hometown of teachers.",
    "Here are 5 examples including input and output:\n input: question: How much in total does customer with first name as Carole and last name as Bernhard paid? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\n input: question: What are the  ids of every student who has never attended a course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n input: question: Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)\n input: question: What are the order dates of orders with price higher than 1000? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000\n input: question: Show the average amount of transactions with type code \"SALE\". serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"\n Now please use valid SQLite to answer the following questions: What is the most commmon hometowns for teachers?",
    "Here are 5 examples including input and output:\n input: question: Return the total revenue of companies with headquarters in Tokyo or Taiwan. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n input: question: How many distinct claim outcome codes are there? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT count(DISTINCT claim_outcome_code) FROM claims_processing\n input: question: What is the id, forename, and number of races for all drivers that have participated in at least 2 races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n input: question: What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"\n input: question: Show the names of the drivers without a school bus. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)\n Now please use valid SQLite to answer the following questions: Show the hometowns shared by at least two teachers.",
    "Here are 5 examples including input and output:\n input: question: How many girl students who are younger than 25? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n input: question: What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n input: question: What are the names of all aircrafts that John Williams have certificates to be able to fly? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\n input: question: Take the average of the school enrollment. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT avg(Enrollment) FROM school\n input: question: What is the id, genre, and name of the artist for every English song ordered by ascending rating? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n Now please use valid SQLite to answer the following questions: What are the towns from which at least two teachers come from?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'\n input: question: How many workshops did each author submit to? Return the author name and the number of workshops. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author\n input: question: Retrieve the list of all cities. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT DISTINCT city FROM addresses\n input: question: What are the different ages of editors? Show each age along with the number of editors of that age. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT Age ,  COUNT(*) FROM editor GROUP BY Age\n input: question: What are the first and last names of all customers who lived in Lockmanfurt? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n Now please use valid SQLite to answer the following questions: Show names of teachers and the courses they are arranged to teach.",
    "Here are 5 examples including input and output:\n input: question: What is the most common type of ships? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Show the names of members and the location of the performances they attended. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID\n input: question: What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)\n input: question: What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n input: question: Which policy type has the most records in the database? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the name of each teacher and what course they teach?",
    "Here are 5 examples including input and output:\n input: question: How many customers do not have an account? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n input: question: Return the id of the store with the most customers. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50\n input: question: What are the average prices of products for each manufacturer? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n input: question: How many employees do we have? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Employees\n Now please use valid SQLite to answer the following questions: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "Here are 5 examples including input and output:\n input: question: What is the id of the appointment that started most recently? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\n input: question: What are the name of rooms booked by customers whose first name has \"ROY\" in part? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'\n input: question: How many faculty members participate in each activity? Return the activity names and the number of faculty members. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID\n input: question: Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n input: question: How many students live in HKG or CHI? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n Now please use valid SQLite to answer the following questions: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "Here are 5 examples including input and output:\n input: question: Find the last name of female (sex is F) students in the descending order of age. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\n input: question: Show all the planned delivery dates and actual delivery dates of bookings. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS\n input: question: Return the titles of any movies with an R rating. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE rating  =  'R'\n input: question: What are the greatest and average capacity for rooms in each building? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n input: question: What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\n Now please use valid SQLite to answer the following questions: Show the name of the teacher for the math course.",
    "Here are 5 examples including input and output:\n input: question: How many vocal types are used in the song \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n input: question: Show all official native languages that contain the word \"English\". serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"\n input: question: Show the description for role name \"Proof Reader\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"\n input: question: Find the entry names of the catalog with the attribute that have the most entries. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n input: question: Find all the campuses opened in 1958. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE YEAR  =  1958\n Now please use valid SQLite to answer the following questions: What are the names of the people who teach math courses?",
    "Here are 5 examples including input and output:\n input: question: How many teachers does the student named MADLOCK RAY have? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"\n input: question: Which country and state does staff with first name as Janessa and last name as Sawayn lived? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: How many orders does Luca Mancini have in his invoices? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n input: question: Show all game ids and the number of hours played. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\n input: question: Find the id of the song that lasts the longest. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Show names of teachers and the number of courses they teach.",
    "Here are 5 examples including input and output:\n input: question: What are the staff ids and genders of all staffs whose job title is Department Manager? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"\n input: question: What is the campus fee of \"San Jose State University\" in year 1996? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996\n input: question: What are the ids and names of the web accelerators that are compatible with two or more browsers? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n input: question: Show the product type and name for the products with price higher than 1000 or lower than 500. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500\n input: question: Give the state that has the most customers. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of the teachers and how many courses do they teach?",
    "Here are 5 examples including input and output:\n input: question: Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"\n input: question: A list of the top 5 countries by number of invoices. List country name and number of invoices. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n input: question: Find the total amount of loans provided by bank branches in the state of New York. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'\n input: question: Show the parties that have both representatives in New York state and representatives in Pennsylvania state. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"\n input: question: What are the names of the customers and staff members? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n Now please use valid SQLite to answer the following questions: Show names of teachers that teach at least two courses.",
    "Here are 5 examples including input and output:\n input: question: List the name of tracks belongs to genre Rock or media type is MPEG audio file. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";\n input: question: What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'\n input: question: What is the average price of clothes? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'\n input: question: Count the number of tracks that are of the media type \"AAC audio file\". serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"\n input: question: Show the guest first names, start dates, and end dates of all the apartment bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id\n Now please use valid SQLite to answer the following questions: What are the names of the teachers who teach at least two courses?",
    "Here are 5 examples including input and output:\n input: question: List the enrollment for each school that does not have \"Catholic\" as denomination. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n input: question: Select the name of each manufacturer along with the name and price of its most expensive product. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n input: question: Which stadium name contains the substring \"Bank\"? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT name FROM stadium WHERE name LIKE \"%Bank%\"\n input: question: What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"\n input: question: Count the number of candidates. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT count(*) FROM candidate\n Now please use valid SQLite to answer the following questions: List the names of teachers who have not been arranged to teach courses.",
    "Here are 5 examples including input and output:\n input: question: Give the names of people who did not participate in the candidate election. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)\n input: question: Give the name of each department and the number of employees in each. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name\n input: question: What are the ids and locations of all circuits in France or Belgium? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n input: question: Show the number of customer cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers_cards\n input: question: What are the codes of card types that have 5 or more cards? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n Now please use valid SQLite to answer the following questions: What are the names of the teachers whose courses have not been arranged?",
    "Here are 5 examples including input and output:\n input: question: Show the names of roller coasters and names of country they are in. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID\n input: question: What are the names of the top 8 countries by total invoice size and what are those sizes? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;\n input: question: Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500\n input: question: What are the apartment number and the room count of each apartment? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number ,  room_count FROM Apartments\n input: question: How many professors who are from either Accounting or Biology department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n Now please use valid SQLite to answer the following questions: How many visitors below age 30 are there?",
    "Here are 5 examples including input and output:\n input: question: Who are the lieutenant governor and comptroller from the democratic party? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\n input: question: What are the positions and teams of pilots? serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT POSITION ,  Team FROM pilot\n input: question: Show the county name and population of all counties. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name ,  Population FROM county\n input: question: Show the headquarters that have both companies in banking industry and companies in oil and gas industry. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"\n input: question: What are the three countries that the least players are from? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n Now please use valid SQLite to answer the following questions: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "Here are 5 examples including input and output:\n input: question: How much salary did the top 3 well-paid players get in 2001? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\n input: question: Find the oldest log id and its corresponding problem id. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\n input: question: For each year, return the year and the average number of attendance at home games. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n input: question: Show the name of the party that has the most delegates. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the different names of all the races in reverse alphabetical order? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races ORDER BY name DESC\n Now please use valid SQLite to answer the following questions: What is the average age of the visitors whose membership level is not higher than 4?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct publishers of publications with price higher than 5000000? serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n input: question: How many international and domestic passengers are there in the airport London Heathrow? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n input: question: Show names of technicians and series of machines they are assigned to repair. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n input: question: Show the id, the date of account opened, the account name, and other account detail for all accounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\n input: question: How many employees have a first name of Ludie? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n Now please use valid SQLite to answer the following questions: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "Here are 5 examples including input and output:\n input: question: What is the average rating for right-footed players and left-footed players? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\n input: question: What is the id of the instructor who advises of all students from History department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n input: question: Give me the number of faculty members who participate in an activity serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(DISTINCT FacID) FROM Faculty_participates_in\n input: question: What are the names and dates for documents corresponding to project that has the details 'Graph Database project'? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n input: question: How many available hotels are there in total? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT count(*) FROM HOTELS\n Now please use valid SQLite to answer the following questions: Find the id and name of the museum that has the most staff members?",
    "Here are 5 examples including input and output:\n input: question: What is the average minimum and price of the rooms for each different decor. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;\n input: question: What is the payment method code and party phone of the party with the email 'enrico09@example.com'? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"\n input: question: What are the states with the most invoices? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\n input: question: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'\n input: question: Return the maximum enrollment across all schools. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT max(Enrollment) FROM university\n Now please use valid SQLite to answer the following questions: Find the average number of staff working for the museums that were open before 2009.",
    "Here are 5 examples including input and output:\n input: question: Retrieve all the first and last names of authors in the alphabetical order of last names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname ,  lname FROM authors ORDER BY lname\n input: question: What are the ids of the problems which are reported before 1978-06-26? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"\n input: question: Find the names of all person sorted in the descending order using age. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person ORDER BY age DESC\n input: question: How many races are there? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT count(*) FROM race\n input: question: Show the name of drivers in descending order of age. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT name FROM driver ORDER BY age DESC\n Now please use valid SQLite to answer the following questions: What are the opening year and staff number of the museum named Plaza Museum?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of all vehicles? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT vehicle_id FROM Vehicles;\n input: question: List the full name (first and last name), and salary for those employees who earn below 6000. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000\n input: question: What are the census rankings of cities that do not have the status \"Village\"? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n input: question: List the name of rooms with king or queen bed. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\n input: question: Find the name of the students who have more than one advisor? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "Here are 5 examples including input and output:\n input: question: What destination has the fewest number of flights? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n input: question: Find the booking start date and end date for the apartments that have more than two bedrooms. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2\n input: question: What are the song names for every song whose rating is less than the minimum rating for English songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n input: question: Which workshop groups have bookings with status code \"stop\"? Give me the names. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"\n input: question: Find the titles of the papers the author \"Stephanie Weirich\" wrote. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n Now please use valid SQLite to answer the following questions: find the id, name and age for visitors who visited some museums more than once.",
    "Here are 5 examples including input and output:\n input: question: How many faculty members did the university that conferred the most degrees in 2002 have? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1\n input: question: What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"\n input: question: What are the names of shops that do not have any devices in stock? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)\n input: question: What is the total number of students? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student\n input: question: How many customers in total? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Customers;\n Now please use valid SQLite to answer the following questions: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "Here are 5 examples including input and output:\n input: question: Which department has the highest average student GPA, and what is the average gpa? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1\n input: question: What place has the most flights coming from there? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n input: question: How many document types are there? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_document_types\n input: question: What is the maximum, minimum and average years spent working on a school bus? serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus\n input: question: Find the full name and id of the college that has the most baseball players. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What are the id and name of the museum visited most times?",
    "Here are 5 examples including input and output:\n input: question: Return the account details with the greatest value, as well as those that include the character 5. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"\n input: question: What are the delegate and committee information for each election record? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Delegate ,  Committee FROM election\n input: question: What are dates of birth of all the guests whose gender is \"Male\"? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"\n input: question: For each room, find its name and the number of times reservations were made for it. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room\n input: question: Show the distinct director of films with market estimation in the year of 1995. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\n Now please use valid SQLite to answer the following questions: What is the name of the museum that had no visitor yet?",
    "Here are 5 examples including input and output:\n input: question: Count the number of male students who had class senator votes in the fall election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\n input: question: Find the ids of the problems reported after 1978-06-26. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"\n input: question: find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion\n input: question: How many products were not included in any order? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n input: question: What is the average fastest lap speed for the Monaco Grand Prix in 2008? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n Now please use valid SQLite to answer the following questions: Find the name and age of the visitor who bought the most tickets at once.",
    "Here are 5 examples including input and output:\n input: question: Find the total revenue created by the companies whose headquarter is located at Austin. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'\n input: question: What are the years of opening for tracks with seating between 4000 and 5000? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n input: question: What is the average gradepoint for students with the last name Smith? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"\n input: question: Which police forces operate in both counties that are located in the East and in the West? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"\n input: question: What details are there on the research staff? List the result in ascending alphabetical order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\n Now please use valid SQLite to answer the following questions: What are the average and maximum number of tickets bought in all visits?",
    "Here are 5 examples including input and output:\n input: question: what is the full name and id of the college with the largest number of baseball players? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n input: question: Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1\n input: question: What are the countries of all airlines whose names start with Orbit? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airlines WHERE name LIKE 'Orbit%'\n input: question: List roles that have more than one employee. List the role description and number of employees. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;\n input: question: Show the types of schools that have two schools. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n Now please use valid SQLite to answer the following questions: What is the total ticket expense of the visitors whose membership level is 1?",
    "Here are 5 examples including input and output:\n input: question: What is the day Number and date of all the documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date\n input: question: What is the name of the customer who has the most policies listed? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n input: question: Show the names of counties that have at least two delegates. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n input: question: What are the unique names of all race held between 2014 and 2017? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n input: question: List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\n Now please use valid SQLite to answer the following questions: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "Here are 5 examples including input and output:\n input: question: List the types of competition that have at most five competitions of that type. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5\n input: question: Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')\n input: question: What is the average access count of documents? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT avg(access_count) FROM documents\n input: question: Count the number of Annual Meeting events that took place in the region of the United Kingdom. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n input: question: Find the top 3 artists who have the largest number of songs works whose language is Bangla. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Find the number of visitors who did not visit any museum opened after 2010.",
    "Here are 5 examples including input and output:\n input: question: Which job titles correspond to jobs with salaries over 9000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_title FROM jobs WHERE min_salary  >  9000\n input: question: How many different roles are there on the project staff? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(DISTINCT role_code) FROM Project_Staff\n input: question: Show aircraft names and number of flights for each aircraft. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n input: question: Show names of parties that does not have any members. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\n input: question: List the school color of the school that has the largest enrollment. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many museums were opened after 2013 or before 2008?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct hometowns of gymnasts with total points more than 57.5? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5\n input: question: Find the names of customers who are not living in the state of California. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n input: question: What is the average price for a lesson taught by Janessa Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: What is the city with the most number of flagship stores? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\n input: question: Find the average number of customers cross all banks. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(no_of_customers) FROM bank\n Now please use valid SQLite to answer the following questions: Find the total number of players.",
    "Here are 5 examples including input and output:\n input: question: display those employees who contain a letter z to their first name and also display their last name, city. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n input: question: What is the customer id with most number of cards, and how many does he have? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the document type description for document type named Film? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"\n input: question: Return the phone numbers for all customers and suppliers. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers\n input: question: Give me the names and prices of furnitures which some companies are manufacturing. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID\n Now please use valid SQLite to answer the following questions: How many players are there?",
    "Here are 5 examples including input and output:\n input: question: Show times of elimination of wrestlers with days held more than 50. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\n input: question: Find the id of courses which are registered or attended by student whose id is 121? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121\n input: question: Cound the number of artists who have not released an album. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n input: question: How many phone hardware models are produced by the company named \"Nokia Corporation\"? serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";\n input: question: Find the average credit score of the customers who do not have any loan. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n Now please use valid SQLite to answer the following questions: Find the total number of matches.",
    "Here are 5 examples including input and output:\n input: question: How much amount in total were claimed in the most recently created document? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)\n input: question: What is the description of the color used by least products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1\n input: question: What are the different schools and their nicknames, ordered by their founding years? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT school ,  nickname FROM university ORDER BY founded\n input: question: Return the types of film market estimations in 1995. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995\n input: question: How many video games exist? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(*) FROM Video_games\n Now please use valid SQLite to answer the following questions: Count the number of matches.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the party form that is most common? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1\n input: question: Which address has both members younger than 30 and members older than 40? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n input: question: What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"\n input: question: What are the names of all Rock tracks that are stored on MPEG audio files? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";\n input: question: Find the first name and major of the students who are not allegry to soy. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n Now please use valid SQLite to answer the following questions: List the first name and birth date of all players from the country with code USA.",
    "Here are 5 examples including input and output:\n input: question: Return the different statuses of cities, ascending by frequency. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n input: question: What are the types of film market estimations in year 1995? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995\n input: question: Select the average price of each manufacturer's products, showing the manufacturer's name. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n input: question: Tell me the location of the club \"Hopkins Student Enterprises\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"\n input: question: Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\n Now please use valid SQLite to answer the following questions: What are the first names and birth dates of players from the USA?",
    "Here are 5 examples including input and output:\n input: question: Show the name and phone for customers with a mailshot with outcome code 'No Response'. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'\n input: question: Find the busiest destination airport that runs most number of routes in China. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n input: question: Find the white grape used to produce wines with scores above 90. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90\n input: question: What is the flight number, origin, and destination for all flights in alphabetical order by departure cities? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n input: question: Find the number of students whose age is older than the average age for each gender. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n Now please use valid SQLite to answer the following questions: Find the average age of losers and winners of all matches.",
    "Here are 5 examples including input and output:\n input: question: Show the country name and capital of all countries. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Country_name ,  Capital FROM country\n input: question: Show all home cities except for those having a driver older than 40. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40\n input: question: Count the number of customers that have an email containing \"gmail.com\". serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n input: question: Find the name of the customer who made the order of the largest amount of goods. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)\n input: question: What are the average, maximum, and minimum number of floors for all buildings? serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building\n Now please use valid SQLite to answer the following questions: What are the average ages of losers and winners across matches?",
    "Here are 5 examples including input and output:\n input: question: How many faculty members does each building have? List the result with the name of the building. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT building ,  count(*) FROM Faculty GROUP BY building\n input: question: Find the number of products with category \"Spices\" and typically sold above 1000. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000\n input: question: Give the full name and customer id of the customer with the fewest accounts. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n input: question: What are the nations that have more than two ships? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2\n input: question: What are the countries of markets and their corresponding years of market estimation? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\n Now please use valid SQLite to answer the following questions: Find the average rank of winners in all matches.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all stations that have more than 10 bikes available and are not located in San Jose? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\n input: question: List the name of artworks in ascending alphabetical order. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Name FROM artwork ORDER BY Name ASC\n input: question: Find the checking balance and saving balance in the Brown’s account. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'\n input: question: Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\". serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'\n input: question: Find the name and age of the person who is a friend of Dan or Alice. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'\n Now please use valid SQLite to answer the following questions: What is the average rank for winners in all matches?",
    "Here are 5 examples including input and output:\n input: question: What are the minimum and maximum crime rate of counties? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety\n input: question: What is the maximum and mininum number of stars a rating can receive? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT max(stars) ,  min(stars) FROM Rating\n input: question: What are the names of wrestlers and the elimination moves? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n input: question: What are the first names of all students that are not enrolled in courses? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n input: question: Show the name of track with most number of races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the highest rank of losers in all matches.",
    "Here are 5 examples including input and output:\n input: question: What is the minimum, maximum, and average market value for every company? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\n input: question: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"\n input: question: Which park did the most people attend in 2008? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\n input: question: What is employee Nancy Edwards's phone number? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n input: question: What are the birthdays of people in ascending order of height? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Birth_Date FROM People ORDER BY Height ASC\n Now please use valid SQLite to answer the following questions: What is the best rank of losers across all matches?",
    "Here are 5 examples including input and output:\n input: question: What are the full names and salaries for any employees earning less than 6000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000\n input: question: Show the station name with at least two trains. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2\n input: question: Find the names of customers whose name contains \"Diana\". serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\n input: question: What are all the movies rated as R? List the titles. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE rating  =  'R'\n input: question: Find the names of customers who never ordered product Latte. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\n Now please use valid SQLite to answer the following questions: find the number of distinct country codes of all players.",
    "Here are 5 examples including input and output:\n input: question: Show the names of people who have been on the negative side of debates at least twice. serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n input: question: How many calendar items do we have? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_calendar\n input: question: Return the full names and salaries for employees with first names that end with the letter m. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n input: question: What is the name of the game that has been played the most? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\n input: question: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'\n Now please use valid SQLite to answer the following questions: How many distinct countries do players come from?",
    "Here are 5 examples including input and output:\n input: question: Return the names and typical buying and selling prices for products that have 'yellow' as their color description. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"\n input: question: What are the numbers of races for each constructor id? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n input: question: What are the ids of documents which don't have expense budgets? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses\n input: question: What are the ids of stations that are located in San Francisco and have average bike availability above 10. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\n input: question: Find the id and color description of the products with at least 2 characteristics. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: Find the number of distinct name of losers.",
    "Here are 5 examples including input and output:\n input: question: For each city, what is the highest latitude for its stations? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  max(lat) FROM station GROUP BY city\n input: question: How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\n input: question: Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\n input: question: Who is the advisor of Linda Smith? Give me the first name and last name. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"\n input: question: What are the names of banks in the state of New York? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT bname FROM bank WHERE state  =  'New York'\n Now please use valid SQLite to answer the following questions: How many different loser names are there?",
    "Here are 5 examples including input and output:\n input: question: Return the founder of Sony. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT founder FROM manufacturers WHERE name  =  'Sony'\n input: question: What are the roles with three or more employees? Give me the role codes. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\n input: question: List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;\n input: question: Show the date and venue of each workshop in ascending alphabetical order of the venue. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Date ,  Venue FROM workshop ORDER BY Venue\n input: question: What are the types of competition and number of competitions for that type? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\n Now please use valid SQLite to answer the following questions: Find the name of tourney that has more than 10 matches.",
    "Here are 5 examples including input and output:\n input: question: What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"\n input: question: Show gas station id, location, and manager_name for all gas stations ordered by open year. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year\n input: question: How many counties are there? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT count(*) FROM county_public_safety\n input: question: How many different types of beds are there? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(DISTINCT bedType) FROM Rooms;\n input: question: How many albums has Billy Cobam released? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n Now please use valid SQLite to answer the following questions: What are the names of tournaments that have more than 10 matches?",
    "Here are 5 examples including input and output:\n input: question: Find the average age of students living in each dorm and the name of dorm. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\n input: question: Find the total number of instructors who teach a course in the Spring 2010 semester. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\n input: question: Which vocal type is the most frequently appearring type? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n input: question: What are the title and maximum price of each film? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n Now please use valid SQLite to answer the following questions: List the names of all winners who played in both 2013 and 2016.",
    "Here are 5 examples including input and output:\n input: question: Give the names of the courses with at least five enrollments. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5\n input: question: What is the type of allergy Cat? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\n input: question: What are the names of the technicians  and how many machines are they assigned to repair? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\n input: question: Count the number of different software platforms. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT count(DISTINCT Software_Platform) FROM device\n input: question: List the names of climbers in descending order of points. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM climber ORDER BY Points DESC\n Now please use valid SQLite to answer the following questions: What are the names of players who won in both 2013 and 2016?",
    "Here are 5 examples including input and output:\n input: question: What were all the salary values of players in 2010 and 2001? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001\n input: question: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;\n input: question: Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\n input: question: Show the delegates and the names of county they belong to. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\n input: question: What is the average unit price of tracks that belong to Jazz genre? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n Now please use valid SQLite to answer the following questions: List the number of all matches who played in years of 2013 or 2016.",
    "Here are 5 examples including input and output:\n input: question: What are the different police forces of counties that are not located in the East? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\n input: question: List the names of all distinct races in reversed  lexicographic order? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races ORDER BY name DESC\n input: question: Which course is enrolled in by the most students? Give me the course name. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the addresses of the course authors or tutors with personal name \"Cathrine\" serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"\n input: question: How many submissions are there? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT count(*) FROM submission\n Now please use valid SQLite to answer the following questions: How many matches were played in 2013 or 2016?",
    "Here are 5 examples including input and output:\n input: question: Count the number of distinct delegates who are from counties with population above 50000. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\n input: question: What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\n input: question: What is the count and code of the job with the most employee? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1\n input: question: What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")\n input: question: What are the different allergy types? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT allergytype FROM Allergy_type\n Now please use valid SQLite to answer the following questions: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "Here are 5 examples including input and output:\n input: question: What is all the information about all people? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT * FROM people\n input: question: Show the names of all the activities Mark Giuliano participates in. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n input: question: Show the product name and total order quantity for each product. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n input: question: What are the categories of music festivals for which there have been more than 1 music festival? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\n input: question: Which students have professors as their advisors? Find their student ids. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"\n Now please use valid SQLite to answer the following questions: What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "Here are 5 examples including input and output:\n input: question: How many students and instructors are in each department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\n input: question: What are the daily hire costs for the products with substring 'Book' in its name? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\n input: question: List the distinct names of the instructors, ordered by name. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT name FROM  instructor ORDER BY name\n input: question: Which nations have both hosts of age above 45 and hosts of age below 35? serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n input: question: Show the working years of managers in descending order of their level. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC\n Now please use valid SQLite to answer the following questions: Find the first name and country code of the oldest player.",
    "Here are 5 examples including input and output:\n input: question: How many video game types exist? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT gtype) FROM Video_games\n input: question: Show the most common apartment type code. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: How many teachers does the student named CHRISSY NABOZNY have? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"\n input: question: How many events have each participants attended? List the participant id, type and the number. serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n input: question: List the names of all the distinct customers who bought a keyboard. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n Now please use valid SQLite to answer the following questions: What is the first name and country code of the oldest player?",
    "Here are 5 examples including input and output:\n input: question: Which physicians have never taken any appointment? Find their names. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n input: question: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT max(OMIM) FROM enzyme\n input: question: Show all product sizes. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT DISTINCT product_size FROM Products\n input: question: Compute the average score of submissions. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT avg(Scores) FROM submission\n input: question: What are the different positions of players from UCLA or Duke colleges? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n Now please use valid SQLite to answer the following questions: List the first and last name of all players in the order of birth date.",
    "Here are 5 examples including input and output:\n input: question: Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC\n input: question: What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id\n input: question: What is the total number of companies? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT count(*) FROM company\n input: question: How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id\n input: question: How many stations are in Mountain View? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n Now please use valid SQLite to answer the following questions: What are the full names of all players, sorted by birth date?",
    "Here are 5 examples including input and output:\n input: question: Show the total number of rooms of all apartments with facility code \"Gym\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n input: question: What is the id and name of the enzyme that can interact with the most medicines as an activator? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of the customer who has the largest number of orders? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are all the distinct premise types? serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT DISTINCT premises_type FROM premises\n input: question: Show all allergies and their types. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergy ,  allergytype FROM Allergy_type\n Now please use valid SQLite to answer the following questions: List the first and last name of all players who are left / L hand in the order of birth date.",
    "Here are 5 examples including input and output:\n input: question: What are the names of instructors who didn't teach courses in the Spring? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n input: question: Which ministers are not a part of the Progress Party? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister FROM party WHERE party_name != 'Progress Party'\n input: question: Find the number of distinct currency codes used in drama workshop groups. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups\n input: question: Please show each industry and the corresponding number of companies in that industry. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry\n input: question: How many students does each advisor have? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT advisor ,  count(*) FROM Student GROUP BY advisor\n Now please use valid SQLite to answer the following questions: What are the full names of all left handed players, in order of birth date?",
    "Here are 5 examples including input and output:\n input: question: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\n input: question: For each end station id, what is its name, latitude, and minimum duration for trips ended there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id\n input: question: What are the enrollments of schools whose denomination is not \"Catholic\"? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n input: question: What are the codes corresponding to document types for which there are less than 3 documents? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n input: question: What is the most popular full name of the actors? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the first name and country code of the player who did the most number of tours.",
    "Here are 5 examples including input and output:\n input: question: For each start station id, what is its name, longitude and average duration of trips started there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\n input: question: Find the list of cities that no customer is living in. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)\n input: question: What are the titles of all movies that have rating star is between 3 and 5? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5\n input: question: How many vehicles exist? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Vehicles;\n input: question: Find the name of medication used on the patient who stays in room 111? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111\n Now please use valid SQLite to answer the following questions: What is the first name and country code of the player with the most tours?",
    "Here are 5 examples including input and output:\n input: question: Show the ids for all the students who participate in an activity and are under 20. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20\n input: question: Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"\n input: question: display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id\n input: question: What are the names of cities that are in counties that have a crime rate below 100? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\n input: question: What are id and name of the products whose price is lower than 600 or higher than 900? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\n Now please use valid SQLite to answer the following questions: Find the year that has the most number of matches.",
    "Here are 5 examples including input and output:\n input: question: How many kinds of roles are there for the staff? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(DISTINCT role_code) FROM Project_Staff\n input: question: How many songs have used the instrument \"drums\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"\n input: question: A list of the top 10 countries by average invoice size. List country name and average invoice size. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;\n input: question: Find the names of the customers who have an deputy policy. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"\n input: question: What are the names of all the clubs ordered in descending alphabetical order? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM club ORDER BY name DESC\n Now please use valid SQLite to answer the following questions: Which year had the most matches?",
    "Here are 5 examples including input and output:\n input: question: How many distinct FDA approval statuses are there for the medicines? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(DISTINCT FDA_approved) FROM medicine\n input: question: Which countries do not have a stadium that was opened after 2006? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006\n input: question: How many faculty, in total, are there in the year 2002? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\n input: question: What is the average pages per minute color? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT avg(pages_per_minute_color) FROM product\n input: question: Find the captain rank that has no captain in Third-rate ship of the line class. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'\n Now please use valid SQLite to answer the following questions: Find the name and rank points of the winner who won the most times.",
    "Here are 5 examples including input and output:\n input: question: Return the apartment numbers of the apartments with type code \"Flat\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"\n input: question: Give the names of wines with prices above any wine produced in 2006. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n input: question: What are the full names of actors who had roles in more than 30 films? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30\n input: question: What is the first name and last name employee helps the customer with first name Leonie? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"\n input: question: What are the different locations of the school with the code BUS? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\n Now please use valid SQLite to answer the following questions: What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "Here are 5 examples including input and output:\n input: question: Return the name of the document that has the most sections. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the total number of students enrolled in ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n input: question: List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age\n input: question: How many distinct names are associated with all the photos? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT count(DISTINCT Name) FROM PHOTOS\n input: question: How many cinema do we have? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM cinema\n Now please use valid SQLite to answer the following questions: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "Here are 5 examples including input and output:\n input: question: What are the code and description of the most frequent behavior incident type? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of the department with the fewest members? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1\n input: question: Find the different billing countries for all invoices. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT distinct(BillingCountry) FROM INVOICE\n input: question: Which city is the address of the store named \"FJA Filming\" located in? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"\n input: question: which country did participated in the most number of Tournament competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "Here are 5 examples including input and output:\n input: question: Return the duration of the actor with the greatest age. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n input: question: What are the names and ids of the tourist attractions that are visited at most once? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n input: question: What is the detail of each visitor? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Tourist_Details FROM VISITORS\n input: question: List the names of all left-footed players who have overall rating between 85 and 90. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90\n input: question: Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10\n Now please use valid SQLite to answer the following questions: find the names of loser and winner who played in the match with greatest number of minutes.",
    "Here are 5 examples including input and output:\n input: question: Find all the instruments ever used by the musician with last name \"Heilo\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n input: question: order all gas station locations by the opening year. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT LOCATION FROM gas_station ORDER BY open_year\n input: question: What are the birth places that are shared by at least two people? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2\n input: question: Find the names of patients who are not using the medication of Procrastin-X. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'\n input: question: What is the date of the performance with the highest number of attendees? serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of the winner and loser who played in the longest match?",
    "Here are 5 examples including input and output:\n input: question: List the names of all genres in alphabetical oder, together with its ratings. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT g_name ,  rating FROM genre ORDER BY g_name\n input: question: Which physicians are in charge of more than one patient? Give me their names. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1\n input: question: What are the valid from and valid to dates for the card with the number 4560596484842? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n input: question: Which kind of policy type was chosen by the most customers? serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the names and number of works of all artists who have at least one English songs. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1\n Now please use valid SQLite to answer the following questions: Find the average ranking for each player and their first name.",
    "Here are 5 examples including input and output:\n input: question: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n input: question: How many students does LORIA ONDERSMA teaches? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\n input: question: Please list all songs in volumes in ascending alphabetical order. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume ORDER BY Song\n input: question: How many times did Boston Red Stockings lose in 2009 postseason? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;\n input: question: Find the name of account that has the lowest total checking and saving balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the first names of all players, and their average rankings?",
    "Here are 5 examples including input and output:\n input: question: What is the vocal type of the band mate whose first name is \"Marianne\" played the most? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n input: question: Return the category code and typical price of 'cumin'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"\n input: question: What are the title and director of the films without any schedule? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\n input: question: What are the gas station ids, locations, and manager names for the gas stations ordered by opening year? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year\n input: question: Find the county where produces the most number of wines with score higher than 90. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the total ranking points for each player and their first name.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the district with the most residents? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1\n input: question: Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n input: question: What is the name and age of every male? Order the results by age. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE gender  =  'male' ORDER BY age\n input: question: What are the names of rooms whose reservation frequency exceeds 60 times? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60\n input: question: What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\n Now please use valid SQLite to answer the following questions: What are the first names of all players, and their total ranking points?",
    "Here are 5 examples including input and output:\n input: question: Show all artist name, age, and country ordered by the yeared they joined. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name ,  age ,  country FROM artist ORDER BY Year_Join\n input: question: Find the phone number and email address of customer \"Harold\". serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"\n input: question: What are the names of the members and branches at which they are registered sorted by year of registration? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year\n input: question: Find names of colleges with enrollment greater than that of some (at least one) college in the FL state. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')\n input: question: What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\n Now please use valid SQLite to answer the following questions: find the number of players for each country.",
    "Here are 5 examples including input and output:\n input: question: Find the average fee on a CSU campus in 1996 serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n input: question: What are the average amount purchased and value purchased for the supplier who supplies the most products. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)\n input: question: Show the party and the number of drivers in each party. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT party ,  count(*) FROM driver GROUP BY party\n input: question: Show the account name, id and the number of transactions for each account. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n input: question: What are the memories and carriers of phones? serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Memory_in_G ,  Carrier FROM phone\n Now please use valid SQLite to answer the following questions: How many players are from each country?",
    "Here are 5 examples including input and output:\n input: question: List the names of representatives that have not participated in elections listed here. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)\n input: question: Give me the temperature of Shanghai in January. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"\n input: question: Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"\n input: question: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n input: question: What is the school code of the accounting department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"\n Now please use valid SQLite to answer the following questions: find the code of the country where has the greatest number of players.",
    "Here are 5 examples including input and output:\n input: question: Show all student IDs with more than total 10 hours per week on all sports played. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10\n input: question: Give the maximum and minimum weeks on top across all volumes. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume\n input: question: Show the names of members and names of colleges they go to. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID\n input: question: Show the players from college UCLA. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Player FROM match_season WHERE College  =  \"UCLA\"\n input: question: Count the number of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT count(*) FROM entrepreneur\n Now please use valid SQLite to answer the following questions: What is the code of the country with the most players?",
    "Here are 5 examples including input and output:\n input: question: List all public schools and their locations. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\n input: question: Find the first and last name of all the students of age 18 who have vice president votes. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18\n input: question: What are the names of all the physicians who took appointments. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n input: question: Count the number of book clubs. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT count(*) FROM book_club\n input: question: What are the star rating descriptions of the hotels with price above 10000? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\n Now please use valid SQLite to answer the following questions: Find the codes of countries that have more than 50 players.",
    "Here are 5 examples including input and output:\n input: question: Find the first names of faculties of rank Professor in alphabetic order. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname\n input: question: Find the first names and offices of all professors sorted by alphabetical order of their first name. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\n input: question: How many services has each resident requested? List the resident id, details, and the count in descending order of the count. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC\n input: question: What are the official names of cities that have population over 1500 or less than 500? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n input: question: What are the prices of products that have never gotten a complaint? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)\n Now please use valid SQLite to answer the following questions: What are the codes of countries with more than 50 players?",
    "Here are 5 examples including input and output:\n input: question: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n input: question: What are the names of the districts that have both mall and village store style shops? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n input: question: Find the average and oldest age for students with different sex. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n input: question: List the writers who have written more than one book. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n input: question: Return the hispanic percentage for cities in which the black percentage is greater than 10. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Hispanic FROM city WHERE Black  >  10\n Now please use valid SQLite to answer the following questions: Find the total number of tours for each ranking date.",
    "Here are 5 examples including input and output:\n input: question: What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id\n input: question: What are the cities that do not have any branches with more than 100 members? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100\n input: question: Which game type has most number of games? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1\n input: question: What is the complete description of the job of a researcher? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'\n input: question: What are the different product names? What is the average product price for each of them? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\n Now please use valid SQLite to answer the following questions: How many total tours were there for each ranking date?",
    "Here are 5 examples including input and output:\n input: question: Find the ids of orders whose status is 'Success'. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'\n input: question: Count the number of clubs for which the student named \"Eric Tai\" is a member. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"\n input: question: Return the number of music festivals of each category. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category\n input: question: display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000\n input: question: Show names of companies and that of employees in descending order of number of years working for that employee. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working\n Now please use valid SQLite to answer the following questions: Find the number of matches happened in each year.",
    "Here are 5 examples including input and output:\n input: question: Show all storm names affecting region \"Denmark\". serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n input: question: What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"\n input: question: Give the songs included in volumes that have more than 1 week on top. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume WHERE Weeks_on_Top  >  1\n input: question: How many medicines have the FDA approval status 'No' ? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'\n input: question: Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000 serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001\n Now please use valid SQLite to answer the following questions: How many matches were played in each year?",
    "Here are 5 examples including input and output:\n input: question: Show the name, role code, and date of birth for the employee with name 'Armani'. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'\n input: question: Count the number of accounts. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) FROM accounts\n input: question: List the name of the company that produced more than one phone model. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;\n input: question: Show the opening year in whcih at least two churches opened. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2\n input: question: Show the name of storms which don't have affected region in record. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\n Now please use valid SQLite to answer the following questions: Find the name and rank of the 3 youngest winners across all matches.",
    "Here are 5 examples including input and output:\n input: question: List the name of ships in ascending order of tonnage. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship ORDER BY Tonnage ASC\n input: question: What are the names of wines with scores higher than 90? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE WHERE score  >  90\n input: question: What is the city with the smallest GDP? Return the city and its GDP. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1\n input: question: Find the types and details for all premises and order by the premise type. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type\n input: question: Find the student first and last names and grade points of all enrollments. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID\n Now please use valid SQLite to answer the following questions: What are the names and ranks of the three youngest winners across all matches?",
    "Here are 5 examples including input and output:\n input: question: What are the last names of faculty who are part of the computer science department? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n input: question: What is the label with the most albums? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1\n input: question: What is maximum group equity shareholding of the companies? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT max(group_equity_shareholding) FROM operate_company\n input: question: Find the names of the top 10 airlines that operate the most number of routes. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10\n input: question: Find the id and name of the most expensive base price room. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: How many different winners both participated in the WTA Championships and were left handed?",
    "Here are 5 examples including input and output:\n input: question: Find the ids of the problems that are reported by the staff whose last name is Bosco. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"\n input: question: How many papers are published in total? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM papers\n input: question: Show the different countries and the number of members from each. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Country ,  COUNT(*) FROM member GROUP BY Country\n input: question: What are the location and nickname of each school? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID\n input: question: Show the theme for exhibitions with both records of an attendance below 100 and above 500. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500\n Now please use valid SQLite to answer the following questions: Find the number of left handed winners who participated in the WTA Championships.",
    "Here are 5 examples including input and output:\n input: question: What are the ids of the problems which are reported after 1978-06-26? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"\n input: question: What is the project id and detail for the project with at least two documents? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n input: question: What is the campus fee of \"San Francisco State University\" in year 1996? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996\n input: question: For each party, return the name of the party and the number of delegates from that party. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party\n input: question: Find the name of dorms that can accommodate more than 300 students. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE student_capacity  >  300\n Now please use valid SQLite to answer the following questions: Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "Here are 5 examples including input and output:\n input: question: Please show the police forces and the number of counties with each police force. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force\n input: question: Show the name for regions and the number of storms for each region. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id\n input: question: What are the minimum, average, and maximum quantities ordered? Check all the invoices. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES\n input: question: Find the average hours for the students whose tryout decision is no. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'\n input: question: How many addresses are in the district of California? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM address WHERE district  =  'California'\n Now please use valid SQLite to answer the following questions: What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "Here are 5 examples including input and output:\n input: question: Give the color description for the product 'catnip'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n input: question: Show all book categories and the number of books in each category. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT category ,  count(*) FROM book_club GROUP BY category\n input: question: What is the most common maximum page size? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n input: question: What is the description for the budget type with code ORG? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n input: question: Find the number of distinct room types available. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(DISTINCT roomtype) FROM room\n Now please use valid SQLite to answer the following questions: Find the number of players for each hand type.",
    "Here are 5 examples including input and output:\n input: question: Which service id and type has the least number of participants? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1\n input: question: Count the number of products that were never ordered. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n input: question: What is the zip code of the hosue of the employee named Janessa Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n input: question: What are the payment method codes that have been used by more than 3 parties? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\n input: question: How many different types of transactions are there? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\n Now please use valid SQLite to answer the following questions: How many players are there for each hand type?",
    "Here are 5 examples including input and output:\n input: question: Which states have more than 2 parks? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n input: question: Count the number of products. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products\n input: question: How many different departments are there in each school that has less than 5 apartments? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n input: question: Give me the minimum and maximum bathroom count among all the apartments. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n input: question: List the ids of the problems from the product \"voluptatem\" that are reported after 1995? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"\n Now please use valid SQLite to answer the following questions: How many ships ended up being 'Captured'?",
    "Here are 5 examples including input and output:\n input: question: How many reviewers listed? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT count(*) FROM Reviewer\n input: question: What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with. serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC\n input: question: List the name of enzymes in descending lexicographical order. serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme ORDER BY name DESC\n input: question: List the names of all the distinct product names in alphabetical order? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT DISTINCT product_name FROM product ORDER BY product_name\n input: question: Which schools do not have any player? Give me the school locations. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\n Now please use valid SQLite to answer the following questions: List the name and tonnage ordered by in descending alphaetical order for the names.",
    "Here are 5 examples including input and output:\n input: question: What are the subject ID, subject name, and the number of available courses for each subject? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n input: question: Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: List all region names in alphabetical order. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT region_name FROM region ORDER BY region_name\n input: question: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;\n input: question: What is the most common mill type, and how many are there? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the name, date and result of each battle.",
    "Here are 5 examples including input and output:\n input: question: Show the flight number of flights with three lowest distances. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3\n input: question: What are the titles of courses without prerequisites? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\n input: question: How many budget record has a budget amount smaller than the invested amount? serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT count(*) FROM budget WHERE budgeted  <  invested\n input: question: What is the maximum, minimum, and average amount of money outsanding for all customers? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;\n input: question: What are the amenities in alphabetical order that Anonymous Donor Hall has? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name\n Now please use valid SQLite to answer the following questions: What is maximum and minimum death toll caused each time?",
    "Here are 5 examples including input and output:\n input: question: Show different locations of railways along with the corresponding number of railways at each location. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION\n input: question: What are the last names for all scholarship students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'\n input: question: What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n input: question: What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'\n input: question: What are the names of storms that did not affect any regions? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\n Now please use valid SQLite to answer the following questions: What is the average number of injuries caused each time?",
    "Here are 5 examples including input and output:\n input: question: Which event names were used more than twice for party events? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n input: question: List the names of aircrafts and that won matches at least twice. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n input: question: Find the product names whose average product price is below 1000000. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\n input: question: List the course name of courses sorted by credits. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE ORDER BY Credits\n input: question: What is the county that produces the most wines scoring higher than 90? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the death and injury situations caused by the ship with tonnage 't'?",
    "Here are 5 examples including input and output:\n input: question: How many departments does the college has? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_name) FROM department\n input: question: What is the response received date for the document described as Regular that was granted more than 100 dollars? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n input: question: What are the name and id of the three highest priced rooms? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;\n input: question: Return the prices of wines produced before 2010. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Price FROM WINE WHERE YEAR  <  2010\n input: question: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n Now please use valid SQLite to answer the following questions: What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "Here are 5 examples including input and output:\n input: question: How many sections does each course has? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code\n input: question: What are the dates that have the 5 highest cloud cover rates and what are the rates? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5\n input: question: Find the description and credit for the course QM-261? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'\n input: question: List the studios of each film and the number of films produced by that studio. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n input: question: List in alphabetic order all different amenities. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name\n Now please use valid SQLite to answer the following questions: What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "Here are 5 examples including input and output:\n input: question: What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"\n input: question: What is the name of the organization that was formed most recently? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n input: question: Which grade is studying in classroom 103? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT grade FROM list WHERE classroom  =  103\n input: question: What are the famous titles of the artist \"Triumfall\"? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\n input: question: Show the school name and type for schools without a school bus. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\n Now please use valid SQLite to answer the following questions: What are the ids and names of the battles that led to more than 10 people killed in total.",
    "Here are 5 examples including input and output:\n input: question: What is the total number of enrollment of schools that do not have any goalie player? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n input: question: Find the name of dorms which have TV Lounge but no Study Room as amenity. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\n input: question: Find the average prices of all products from each manufacture, and list each company's name. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n input: question: How many students received a yes from tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM tryout WHERE decision  =  'yes'\n input: question: Which problem id and log id are assigned to the staff named Rylan Homenick? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\n Now please use valid SQLite to answer the following questions: What is the ship id and name that caused most total injuries?",
    "Here are 5 examples including input and output:\n input: question: How many Patent outcomes are generated from all the projects? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'\n input: question: Show me the distinct payment method codes from the invoice record. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT DISTINCT payment_method_code FROM INVOICES\n input: question: Show the status shared by cities with population bigger than 1500 and smaller than 500. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n input: question: Find the number of students in one classroom. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) ,  classroom FROM list GROUP BY classroom\n input: question: Show ids, customer ids, card type codes, card numbers for all cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\n Now please use valid SQLite to answer the following questions: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "Here are 5 examples including input and output:\n input: question: What are the student ids for all male students? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT StuID FROM Student WHERE Sex  =  'M'\n input: question: What campuses are located in Chico? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\n input: question: What is the number of branches that have more than the average number of memberships? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n input: question: Give the different locations of tracks. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT DISTINCT LOCATION FROM track\n input: question: what is the name of the country that participated in the most tournament competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many different results are there for the battles?",
    "Here are 5 examples including input and output:\n input: question: What are the low and high estimates of film markets? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\n input: question: Count the number of chip model that do not have wifi. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT count(*) FROM chip_model WHERE wifi  =  'No'\n input: question: What are the names of technicians and the machine series that they repair? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n input: question: What are names of patients who made an appointment? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn\n input: question: How many milliseconds long is Fast As a Shark? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";\n Now please use valid SQLite to answer the following questions: How many battles did not lose any ship with tonnage '225'?",
    "Here are 5 examples including input and output:\n input: question: What are the first name, last name, and gender of all the good customers? Order by their last name. serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name\n input: question: Which industry has the most companies? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the line 1 of addresses shared by some students and some teachers? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id\n input: question: What is the name of the district with the smallest area? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1\n input: question: Find the first names and last names of the authors whose institution affiliation is \"Google\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n Now please use valid SQLite to answer the following questions: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "Here are 5 examples including input and output:\n input: question: How many assets can each parts be used in? List the part name and the number. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n input: question: Show names of musicals which have at least three actors. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n input: question: What are all the different book publishers? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT DISTINCT publisher FROM book_club\n input: question: What are all the catalog entry names? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT distinct(catalog_entry_name) FROM catalog_contents\n input: question: Which artist has the most albums? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "Here are 5 examples including input and output:\n input: question: Find the name of amenity that is most common in all dorms. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1\n input: question: What is the maximum page size for everything that has more than 3 products listed? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\n input: question: How many players were in the team Boston Red Stockings in 2000? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000\n input: question: Show the first name, last name, and phone number for all female faculty members. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'\n input: question: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n Now please use valid SQLite to answer the following questions: What are the notes of the death events which has substring 'East'?",
    "Here are 5 examples including input and output:\n input: question: What is the maximum and mininum number of transit passengers for all airports? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\n input: question: What are the last names of individuals who have been contact individuals for an organization? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id\n input: question: What is the status of the city that has hosted the most competitions? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: How many actors have appeared in each musical? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n input: question: Give the average quantity of stocks. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT avg(Quantity) FROM stock\n Now please use valid SQLite to answer the following questions: what are all the addresses including line 1 and line 2?",
    "Here are 5 examples including input and output:\n input: question: Count the number of universities that do not participate in the baketball match. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)\n input: question: Show the location code, the starting date and ending data in that location for all the documents. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\n input: question: Give the name of the lowest earning instructor in the Statistics department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n input: question: List the first and last names of all distinct staff members who are assigned to the problem whose id is 1. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1\n input: question: How many assessment notes are there in total? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(*) FROM ASSESSMENT_NOTES\n Now please use valid SQLite to answer the following questions: What is the first and second line for all addresses?",
    "Here are 5 examples including input and output:\n input: question: What are the names for tracks without a race in class 'GT'. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n input: question: Return the name and id of the furniture with the highest market rate. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1\n input: question: Find the first and last name of students who are living in the dorms that have amenity TV Lounge. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n input: question: Give me the names of members whose address is in Harford or Waterbury. serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n input: question: Find the total balance across checking accounts. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT sum(balance) FROM checking\n Now please use valid SQLite to answer the following questions: How many courses in total are listed?",
    "Here are 5 examples including input and output:\n input: question: Which person whose friends have the oldest average age? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1\n input: question: Find the name and checking balance of the account with the lowest savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n input: question: Which customers use \"Cash\" for payment method? Return the customer names. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"\n input: question: Find the number of team franchises that are active (have 'Y' as \"active\" information). serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM team_franchise WHERE active = 'Y';\n input: question: Return the names of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n Now please use valid SQLite to answer the following questions: How many courses are there?",
    "Here are 5 examples including input and output:\n input: question: What are the distinct first names of the students who have class president votes? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE\n input: question: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'\n input: question: How many entrepreneurs are there? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT count(*) FROM entrepreneur\n input: question: What is the list of program names, sorted by the order of launch date? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch\n input: question: How much money did Lucas Mancini spend? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n Now please use valid SQLite to answer the following questions: How is the math course described?",
    "Here are 5 examples including input and output:\n input: question: What are all company names that have a corresponding movie directed in the year 1999? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\n input: question: Count the number of different film ratings. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(DISTINCT rating) FROM film\n input: question: What is the category and typical buying price  of the product with name \"cumin\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"\n input: question: Show the account id with most number of transactions. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the student IDs for everybody who worked for more than 10 hours per week on all sports? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10\n Now please use valid SQLite to answer the following questions: What are the descriptions for all the math courses?",
    "Here are 5 examples including input and output:\n input: question: Who performed the song named \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"\n input: question: List the names and phone numbers of all the distinct suppliers who supply red jeans. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\n input: question: Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100\n input: question: which countries have more than 2 airports? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT country FROM airport GROUP BY country HAVING count(*)  >  2\n input: question: Find the id of routes whose source and destination airports are in the United States. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n Now please use valid SQLite to answer the following questions: What is the zip code of the address in the city Port Chelsea?",
    "Here are 5 examples including input and output:\n input: question: How many students are enrolled in some classes that are taught by an accounting professor? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\n input: question: What are the speeds of the longest roller coaster? serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1\n input: question: What are the total enrollments of universities of each affiliation type? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n input: question: Find the names of the candidates whose support percentage is lower than their oppose rate. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\n input: question: How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";\n Now please use valid SQLite to answer the following questions: What is the zip code for Port Chelsea?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the regions in alphabetical order? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT region_name FROM region ORDER BY region_name\n input: question: What are the enrollment dates of all the tests that have result \"Pass\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"\n input: question: Find the name of projects that require between 100 and 300 hours of work. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT name FROM projects WHERE hours BETWEEN 100 AND 300\n input: question: Show the protein name and the institution name. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id\n input: question: How many kinds of enzymes are there? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM enzyme\n Now please use valid SQLite to answer the following questions: Which department offers the most number of degrees? List department name and id.",
    "Here are 5 examples including input and output:\n input: question: What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\n input: question: Display the first name and department name for each employee. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n input: question: What are the unit of measure and category code for the 'chervil' product? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"\n input: question: What are the names of the students who took classes in 2009 or 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010\n input: question: How many airports' names have the word Interanation in them? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airports WHERE name LIKE '%International%'\n Now please use valid SQLite to answer the following questions: What is the name and id of the department with the most number of degrees ?",
    "Here are 5 examples including input and output:\n input: question: Find all the papers published by the institution \"Google\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n input: question: What is the customer id, first and last name with most number of accounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the country of origin for the artist who made the least number of songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1\n input: question: How many students are from each city, and which cities have more than one cities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1\n input: question: What is the unit of measurement of product named \"cumin\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\n Now please use valid SQLite to answer the following questions: How many departments offer any degree?",
    "Here are 5 examples including input and output:\n input: question: Which policy type appears most frequently in the available policies? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Show all track names that have had no races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n input: question: Find all the songs performed by artist with last name \"Heilo\" serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"\n input: question: How many rooms are there? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Rooms;\n input: question: Find the id of the customers who have order status both \"On Road\" and \"Shipped\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\n Now please use valid SQLite to answer the following questions: How many different departments offer degrees?",
    "Here are 5 examples including input and output:\n input: question: How many roles are there? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM ROLES\n input: question: Give id of the instructor who advises students in the History department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n input: question: What are the actual delivery dates of orders with quantity 1? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1\n input: question: How many cards does customer Art Turcotte have? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n input: question: When did the first payment happen? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many different degree names are offered?",
    "Here are 5 examples including input and output:\n input: question: List the name, nationality and id of all male architects ordered by their names lexicographically. serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name\n input: question: How many debates are there? serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT count(*) FROM debate\n input: question: Return all the distinct secretary votes made in the fall election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\n input: question: What are the names of all playlists that have more than 100 tracks? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n input: question: Show the ages of gymnasts in descending order of total points. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\n Now please use valid SQLite to answer the following questions: How many different degrees are offered?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the customers who bought product \"food\" at least once? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n input: question: Compute the number of products with a price larger than or equal to $180. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM products WHERE price >= 180\n input: question: What are the different role codes for users, and how many users have each? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT count(*) ,  role_code FROM users GROUP BY role_code\n input: question: Show all different home cities. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT DISTINCT home_city FROM driver\n input: question: What are the themes of farm competitions sorted by year in ascending order? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Theme FROM farm_competition ORDER BY YEAR ASC\n Now please use valid SQLite to answer the following questions: How many degrees does the engineering department offer?",
    "Here are 5 examples including input and output:\n input: question: Show the name and service for all trains in order by time. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  service FROM train ORDER BY TIME\n input: question: How many papers have \"Atsushi Ohori\" published? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n input: question: Find the number of web accelerators used for each Operating system. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system\n input: question: What are the ids of all male students who do not play football? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n input: question: What is the party that has the largest number of representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many degrees does the engineering department have?",
    "Here are 5 examples including input and output:\n input: question: What are the titles of all albums that start with A in alphabetical order? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;\n input: question: What is the name of each course and the corresponding number of student enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n input: question: List the names of mountains that do not have any climber. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n input: question: When did customer with first name as Carole and last name as Bernhard became a customer? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n input: question: What is the savings balance of the account belonging to the customer with the highest checking balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names and descriptions of all the sections?",
    "Here are 5 examples including input and output:\n input: question: Count the number of artists who are older than 46 and joined after 1990. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990\n input: question: Show the rank, first name, and last name for all the faculty. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  Fname ,  Lname FROM Faculty\n input: question: Find the name of students who have taken the prerequisite course of the course with title International Finance. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\n input: question: Find the average access count across all documents? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT avg(access_count) FROM documents\n input: question: List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;\n Now please use valid SQLite to answer the following questions: What are the names and descriptions for all the sections?",
    "Here are 5 examples including input and output:\n input: question: For each zip code, find the ids of all trips that have a higher average mean temperature above 60? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n input: question: How many customers are from California? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM customers WHERE state = \"CA\";\n input: question: What is the average and maximum number of total passengers for train stations in London or Glasgow? serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'\n input: question: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n input: question: Show all locations with only 1 station. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1\n Now please use valid SQLite to answer the following questions: What are the names and id of courses having at most 2 sections?",
    "Here are 5 examples including input and output:\n input: question: What is average age for different job title? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  job FROM Person GROUP BY job\n input: question: What is the name of the customer who has greatest total loan amount? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n input: question: Return the ids of the two department store chains with the most department stores. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2\n input: question: What are the lot details of lots associated with transactions with share count smaller than 50? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50\n input: question: Show all majors. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT Major FROM Student\n Now please use valid SQLite to answer the following questions: What are the names and ids of every course with less than 2 sections?",
    "Here are 5 examples including input and output:\n input: question: Find the names and descriptions of courses that belong to the subject named \"Computer Science\". serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"\n input: question: Show the names of donors who donated to both school \"Glenn\" and \"Triton.\" serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'\n input: question: What are the names of all campuses located at Chico? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\n input: question: Return the names and typical buying prices for all products. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_name ,  typical_buying_price FROM products\n input: question: What are the card numbers of members from Kentucky? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n Now please use valid SQLite to answer the following questions: List the section_name in reversed lexicographical order.",
    "Here are 5 examples including input and output:\n input: question: Find the name of the first 5 customers. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5\n input: question: Return the name of the characteristic that is most common across all products. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of companies that do not make DVD drives? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'\n input: question: What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'\n input: question: List the name of the aircraft that has been named winning aircraft the most number of times. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of the sections in reverse alphabetical order?",
    "Here are 5 examples including input and output:\n input: question: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n input: question: How many products have their color described as 'white' or have a characteristic with the name 'hot'? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\n input: question: For each constructor id, how many races are there? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n input: question: Where us the club named \"Tennis Club\" located? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"\n input: question: Find the phone number of all the customers and staff. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT phone_number FROM customers UNION SELECT phone_number FROM staff\n Now please use valid SQLite to answer the following questions: What is the semester which most student registered in? Show both the name and the id.",
    "Here are 5 examples including input and output:\n input: question: How many different cities are they from? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(DISTINCT city) FROM Person\n input: question: Show the names for all females from Canada having a wedding in year 2016. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'\n input: question: Find the first name of students who are living in the Smith Hall. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\n input: question: What are the first names and department numbers for employees with last name McEwen? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\n input: question: List all the customers in increasing order of IDs. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n Now please use valid SQLite to answer the following questions: For each semester, what is the name and id of the one with the most students registered?",
    "Here are 5 examples including input and output:\n input: question: Report the distinct advisors who have more than 2 students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2\n input: question: Which teachers teach in classroom 110? Give me their first names. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM teachers WHERE classroom  =  110\n input: question: Return all distinct detention type codes. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT DISTINCT detention_type_code FROM Detention\n input: question: How many scientists are there? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) FROM scientists\n input: question: List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\" serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"\n Now please use valid SQLite to answer the following questions: What is the description of the department whose name has the substring the computer?",
    "Here are 5 examples including input and output:\n input: question: What is the average age for all people in the table? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) FROM Person\n input: question: In how many cities are there airports in the country of Greenland? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'\n input: question: Find the name, age, and job title of persons who are friends with Alice for the longest years. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n input: question: Show the document name and the document date for all documents on project with details 'Graph Database project'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n input: question: What is the average song duration for the songs that are in mp3 format and whose resolution below 800? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800\n Now please use valid SQLite to answer the following questions: What is the department description for the one whose name has the word computer?",
    "Here are 5 examples including input and output:\n input: question: Find the balance of the checking account belonging to an owner whose name contains 'ee'. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'\n input: question: Find all the locations whose names contain the word \"film\". serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"\n input: question: Find the attribute data type for the attribute named \"Green\". serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"\n input: question: Who are the members of the club named \"Bootup Baltimore\"? Give me their last names. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\n input: question: Find the name and credit score of the customers who have some loans. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n Now please use valid SQLite to answer the following questions: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "Here are 5 examples including input and output:\n input: question: How many fault status codes are recorded in the fault log parts table? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT DISTINCT fault_status FROM Fault_Log_Parts\n input: question: List the names of aircrafts and that did not win any match. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n input: question: Return the name of the heaviest entrepreneur. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n input: question: How many documents correspond with each project id? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT project_id ,  count(*) FROM Documents GROUP BY project_id\n input: question: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'\n Now please use valid SQLite to answer the following questions: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "Here are 5 examples including input and output:\n input: question: Find the document type name of the document named \"How to read a book\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"\n input: question: What is the maximum and minimum grade point of students who live in NYC? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"\n input: question: How many medicines were not approved by the FDA? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'\n input: question: Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\". serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"\n input: question: For each fourth-grade classroom, show the classroom number and the total number of students using it. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom\n Now please use valid SQLite to answer the following questions: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "Here are 5 examples including input and output:\n input: question: Find the names of nurses who are on call. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\n input: question: Show names for artists without any exhibition. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\n input: question: List the names of editors that are not on any journal committee. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n input: question: What are the ids of all employees that don't have certificates? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n input: question: What are the rank, first name, and last name of the faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  Fname ,  Lname FROM Faculty\n Now please use valid SQLite to answer the following questions: What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "Here are 5 examples including input and output:\n input: question: Show the names of companies and the number of employees they have serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\n input: question: What are the names of climbers and the corresponding names of mountains that they climb? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n input: question: What are teh names of the different products, as well as the number of customers who have ordered each product. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n input: question: Return the sum and average of all settlement amounts. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements\n input: question: List name and damage for all storms in a descending order of max speed. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC\n Now please use valid SQLite to answer the following questions: Find the kind of program which most number of students are enrolled in?",
    "Here are 5 examples including input and output:\n input: question: What are the average score and average staff number of all shops? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT avg(num_of_staff) ,  avg(score) FROM shop\n input: question: Which engineer has visited the most times? Show the engineer id, first name and last name. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the average ROM size of phones produced by the company named \"Nokia Corporation\"? serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";\n input: question: What is the average number of cities of markets with low film market estimate bigger than 10000? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n input: question: What are the names of rooms that have either king or queen bed? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\n Now please use valid SQLite to answer the following questions: What is the degree summary name that has the most number of students enrolled?",
    "Here are 5 examples including input and output:\n input: question: Which catalog content has the highest height? Give me the catalog entry name. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\n input: question: Show the names of products that are in at least two events in ascending alphabetical order of product name. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name\n input: question: What are the personal name, family name, and author ID of the course author who teaches the most courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Show the names of players and names of their coaches in descending order of the votes of players. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC\n input: question: Show the people that have been comptroller the most times and the corresponding number of times. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the program which most number of students are enrolled in. List both the id and the summary.",
    "Here are 5 examples including input and output:\n input: question: Count the number of customers. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(*) FROM customers\n input: question: When was the document named \"Marry CV\" stored? Give me the date. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"\n input: question: List all the cities in a decreasing order of each city's stations' highest latitude. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC\n input: question: What is minimum age for different job title? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT min(age) ,  job FROM Person GROUP BY job\n input: question: Find the number of items without any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n Now please use valid SQLite to answer the following questions: What is the program id and the summary of the degree that has the most students enrolled?",
    "Here are 5 examples including input and output:\n input: question: What is the party of the representative that has the smallest number of votes. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1\n input: question: List the first names of people in alphabetical order? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT first_name FROM people ORDER BY first_name\n input: question: Show the id and builder of the railway that are associated with the most trains. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'\n input: question: List the total points of gymnasts in descending order of floor exercise points. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n Now please use valid SQLite to answer the following questions: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "Here are 5 examples including input and output:\n input: question: What are the names of enzymes in descending order? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme ORDER BY name DESC\n input: question: What are the albums produced in year 2010? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2010\n input: question: Who are the advisors for students that live in a city with city code \"BAL\"? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"\n input: question: Find the details of all the markets that are accessible by walk or bus. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n input: question: How many different colleges do attend the tryout test? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT cName) FROM tryout\n Now please use valid SQLite to answer the following questions: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "Here are 5 examples including input and output:\n input: question: What are the ids, date opened, name, and other details for all accounts? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\n input: question: What is the name and country of origin of the artist who released a song that has \"love\" in its title? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"\n input: question: From which hometowns did no gymnasts come from? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n input: question: What is the id of the product that is booked for 3 times? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3\n input: question: Give the ids of the three products purchased in the largest amounts. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Which semesters do not have any student enrolled? List the semester name.",
    "Here are 5 examples including input and output:\n input: question: Count the number of courses with more than 2 credits. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT count(*) FROM COURSE WHERE Credits  >  2\n input: question: How many customers have an account? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(DISTINCT customer_id) FROM Accounts\n input: question: Find the cell mobile number of the candidates whose assessment code is \"Fail\"? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n input: question: What is the software platform that is most common amongst all devices? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the name of the movie produced after 2000 and directed by James Cameron? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000\n Now please use valid SQLite to answer the following questions: What is the name of the semester with no students enrolled?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the chairs of festivals, sorted in ascending order of the year held? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC\n input: question: List the names of aircrafts and the number of times it won matches. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft\n input: question: For each reviewer id, what is the title and rating for the movie with the smallest rating? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID\n input: question: What is the average bike availability in stations that are not located in Palo Alto? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n input: question: Return the famous titles of the artist called \"Triumfall\". serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\n Now please use valid SQLite to answer the following questions: What are all the course names of the courses which ever have students enrolled in?",
    "Here are 5 examples including input and output:\n input: question: How many rooms have a king bed? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n input: question: What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"\n input: question: Show name, address road, and city for all branches sorted by open year. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT name ,  address_road ,  city FROM branch ORDER BY open_year\n input: question: What are the companies and investors that correspond to each entrepreneur? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Company ,  Investor FROM entrepreneur\n input: question: List the names of all courses ordered by their titles and credits. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course ORDER BY title ,  credits\n Now please use valid SQLite to answer the following questions: What are the names of all courses that have some students enrolled?",
    "Here are 5 examples including input and output:\n input: question: How many movie reviews does each director get? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director\n input: question: Return the title of the film with the highest high estimate? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n input: question: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n input: question: What are the names and trade names of the medcines that are FDA approved? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\n input: question: Which students not enrolled in any course? Find their personal names. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n Now please use valid SQLite to answer the following questions: What's the name of the course with most number of enrollments?",
    "Here are 5 examples including input and output:\n input: question: Show the party with drivers from Hartford and drivers older than 40. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40\n input: question: For each account type, find the average account balance of customers with credit score lower than 50. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n input: question: What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality. serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\n input: question: What are the first name and last name of all the teachers? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT firstname ,  lastname FROM teachers\n input: question: Find names and ids of all documents with document type code BK. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n Now please use valid SQLite to answer the following questions: What is the name of the course with the most students enrolled?",
    "Here are 5 examples including input and output:\n input: question: Show the location code of the country \"Canada\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"\n input: question: Find the full names of employees who help customers with the first name Leonie. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"\n input: question: Find the titles of albums that contain tracks of both the Reggae and Rock genres. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n input: question: What distinct accelerator names are compatible with the browswers that have market share higher than 15? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;\n input: question: Return the address content for the customer whose name is \"Maudie Kertzmann\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n Now please use valid SQLite to answer the following questions: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "Here are 5 examples including input and output:\n input: question: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n input: question: What are all the songs in albums under label \"Universal Music Group\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"\n input: question: What are the student ID and login name of the student who are enrolled in the most courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: How many friends does Dan have? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n input: question: What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n Now please use valid SQLite to answer the following questions: What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "Here are 5 examples including input and output:\n input: question: How many papers are written by authors from the institution \"University of Pennsylvania\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\n input: question: How many customers did not have any event? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n input: question: Find the semester and year which has the least number of student taking any class. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\n input: question: Find the name of dorms that do not have any amenity serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n input: question: Find the name of the train whose route runs through greatest number of stations. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Show the date and id of the transcript with at least 2 course results.",
    "Here are 5 examples including input and output:\n input: question: Which tourist attractions are visited at least twice? Give me their names and ids. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n input: question: Find the number of papers published by the institution \"University of Pennsylvania\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\n input: question: Find the name of the genre that is most frequent across all tracks. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the number of people whose age is greater than all engineers. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n input: question: How many documents have the status code done? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT count(*) FROM Documents WHERE document_status_code = \"done\";\n Now please use valid SQLite to answer the following questions: What is the date and id of the transcript with at least 2 courses listed?",
    "Here are 5 examples including input and output:\n input: question: Please show the industries of companies in descending order of the number of companies. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n input: question: What is the name and salary for employee with id 242518965? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  salary FROM Employee WHERE eid  =  242518965\n input: question: Find the names of departments that are either in division AS or in division EN and in Building NEB. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"\n input: question: What are the name and id of the team offering the lowest average salary? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;\n input: question: What are the names of races held between 2009 and 2011? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n Now please use valid SQLite to answer the following questions: What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "Here are 5 examples including input and output:\n input: question: What are the name of the players who received a card in descending order of the hours of training? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC\n input: question: Find the year and semester when offers the largest number of courses. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n input: question: What are the maximum duration and resolution of songs grouped and ordered by languages? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages\n input: question: What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\n input: question: What is the total number of all football games played by scholarship students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'\n Now please use valid SQLite to answer the following questions: What is the mobile phone number of the student named Timmothy Ward ?",
    "Here are 5 examples including input and output:\n input: question: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n input: question: Find the name of students who took some course offered by Statistics department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\n input: question: What is the last name of the student who got a grade A in the class with code 10018. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018\n input: question: Find the job ID for those jobs which average salary is above 8000. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000\n input: question: How many distinct hometowns did these people have? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT count(DISTINCT Hometown) FROM people\n Now please use valid SQLite to answer the following questions: Who is the first student to register? List the first name, middle name and last name.",
    "Here are 5 examples including input and output:\n input: question: Find the first names of the teachers that teach first grade. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n input: question: Show all team names. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Name FROM Team\n input: question: What is the maximum and minimum height of all players? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT max(weight) ,  min(weight) FROM Player\n input: question: Show the name of technicians aged either 36 or 37 serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n input: question: How many routes go from the United States to Canada? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n Now please use valid SQLite to answer the following questions: What is the first, middle, and last name of the first student to register?",
    "Here are 5 examples including input and output:\n input: question: How many employees have salary between 100000 and 200000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\n input: question: What are the amenities in the dorm that a student who has the last name of Smith lives in? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n input: question: How many lesson does customer with first name Ray took? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"\n input: question: What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000\n input: question: How many credits is the course that the student with the last name Smithson took, and what is its description? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\n Now please use valid SQLite to answer the following questions: Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "Here are 5 examples including input and output:\n input: question: How many times does ROY SWEAZY has reserved a room. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n input: question: Show the unique first names, last names, and phone numbers for all customers with any account. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n input: question: For each phone, show its names and total number of stocks. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name\n input: question: what are the names of the channels that broadcast in both morning and night? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n input: question: Find the number of students who participate in the tryout for each college ordered by descending count. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC\n Now please use valid SQLite to answer the following questions: What is the first, middle, and last name of the earliest school graduate?",
    "Here are 5 examples including input and output:\n input: question: Show the most common location of performances. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1\n input: question: give me names of all compatible browsers and accelerators in the descending order of compatible year serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC\n input: question: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;\n input: question: How many medications are prescribed for each brand? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\n input: question: Show the times used by climbers to climb mountains in Country Uganda. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"\n Now please use valid SQLite to answer the following questions: Whose permanent address is different from his or her current address? List his or her first name.",
    "Here are 5 examples including input and output:\n input: question: What is the incident type description for the incident type with code \"VIOLENCE\"? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"\n input: question: Show all allergies with number of students affected. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\n input: question: List the names of players that do not have coaches. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)\n input: question: How many drama workshop groups are there in each city? Return both the city and the count. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town\n input: question: Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: What is the first name of the student whose permanent address is different from his or her current one?",
    "Here are 5 examples including input and output:\n input: question: Which tourist attractions can we get to by bus? Tell me the names of the attractions. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"\n input: question: Find the name of physicians whose position title contains the word 'senior'. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM physician WHERE POSITION LIKE '%senior%'\n input: question: What is the list of school locations sorted in descending order of school foundation year? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT LOCATION FROM school ORDER BY Founded DESC\n input: question: What are the different majors? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT Major FROM Student\n input: question: Which part has the least chargeable amount? List the part id and amount. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which address holds the most number of students currently? List the address id and all lines.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the cameras that have taken picture of the most mountains? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n input: question: List the dates of debates with number of audience bigger than 150 serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Date FROM debate WHERE Num_of_Audience  >  150\n input: question: Which city has the lowest GDP? Please list the city name and its GDP. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1\n input: question: Count the number of appelations in Napa County. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n input: question: What is the total number of faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty\n Now please use valid SQLite to answer the following questions: What is the id, line 1, and line 2 of the address with the most students?",
    "Here are 5 examples including input and output:\n input: question: Show ids for all aircrafts with more than 1000 distance. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT aid FROM Aircraft WHERE distance  >  1000\n input: question: What are the names of all instructors with names that include \"dar\"? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE name LIKE '%dar%'\n input: question: What are the first name and last name of the players whose death record is empty? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT name_first ,  name_last FROM player WHERE death_year = '';\n input: question: Find the id and surname of the driver who participated the most number of races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n input: question: What is the average cost of procedures that physician John Wen was trained in? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n Now please use valid SQLite to answer the following questions: On average, when were the transcripts printed?",
    "Here are 5 examples including input and output:\n input: question: What are the first names, office locations of all lecturers who have taught some course? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num\n input: question: Return the number of customers who have at least one order with \"Cancelled\" status. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"\n input: question: Return the name of the mountain with the greatest height. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n input: question: Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n input: question: Find the number of scientists involved for the projects that require more than 300 hours. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name\n Now please use valid SQLite to answer the following questions: What is the average transcript date?",
    "Here are 5 examples including input and output:\n input: question: How many staff in total? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Staff;\n input: question: Which document type is described with the prefix 'Initial'? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\n input: question: What is the total and maximum duration for all trips with the bike id 636? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n input: question: What is the number of routes that end at John F Kennedy International Airport? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\n input: question: What are the full names and cities of employees who have the letter Z in their first names? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n Now please use valid SQLite to answer the following questions: When is the first transcript released? List the date and details.",
    "Here are 5 examples including input and output:\n input: question: List document type codes and the number of documents in each code. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n input: question: Provide the full names of employees earning more than the employee with id 163. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )\n input: question: What are the names of the technicians that are assigned to repair machines with more point values than 70? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70\n input: question: What are the names of the countries and average invoice size of the top countries by size? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;\n input: question: Which type of policy is most frequently used? Give me the policy type code. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the earliest date of a transcript release, and what details can you tell me?",
    "Here are 5 examples including input and output:\n input: question: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\n input: question: What is the duration, file size, and song format for every pop song, ordered by title alphabetically? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name\n input: question: What are the names of people in ascending alphabetical order? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Name FROM People ORDER BY Name ASC\n input: question: Show the student id of the oldest student. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\n input: question: Show the average, maximum, minimum enrollment of all schools. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\n Now please use valid SQLite to answer the following questions: How many transcripts are released?",
    "Here are 5 examples including input and output:\n input: question: What are the maximum and minimum number of cities in all markets. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT max(Number_cities) ,  min(Number_cities) FROM market\n input: question: What are the names of customers with accounts, and what are the total savings balances for each? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n input: question: Return the names of products in the category 'Spices'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"\n input: question: Count the number of cities in the state of Colorado. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"\n input: question: Which authors did not submit to any workshop? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\n Now please use valid SQLite to answer the following questions: How many transcripts are listed?",
    "Here are 5 examples including input and output:\n input: question: Find the list of page size which have more than 3 product listed serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\n input: question: List the names of pilots that do not have any record. serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)\n input: question: Show all allergy type with number of students affected. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n input: question: What are the names of all employees who have a salary higher than average? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n input: question: Find the names and phone numbers of customers living in California state. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n Now please use valid SQLite to answer the following questions: What is the last transcript release date?",
    "Here are 5 examples including input and output:\n input: question: What are the first names and office locations for all professors sorted alphabetically by first name? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname\n input: question: Find the year which offers the largest number of courses. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n input: question: Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1\n input: question: When did Linda Smith visit Subway? serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n input: question: Which distinct source system code includes the substring 'en'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'\n Now please use valid SQLite to answer the following questions: When was the last transcript released?",
    "Here are 5 examples including input and output:\n input: question: What is the minimum, average, and maximum distance of all aircrafts. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft\n input: question: Find the first names of students with age above 22. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Fname FROM STUDENT WHERE Age  >  22\n input: question: Which buildings does \"Emma\" manage? Give me the short names of the buildings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"\n input: question: How many customers have opened an account? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(DISTINCT customer_id) FROM Accounts\n input: question: Find the number of rooms for different block code? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode\n Now please use valid SQLite to answer the following questions: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "Here are 5 examples including input and output:\n input: question: How many journalists are there? serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT count(*) FROM journalist\n input: question: Show the draft pick numbers and draft classes of players whose positions are defenders. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n input: question: How many different projects are there? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(DISTINCT name) FROM projects\n input: question: Find the name and email of the users who have more than 1000 followers. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name ,  email FROM user_profiles WHERE followers  >  1000\n input: question: Find the name and position of the head of the department with the least employees. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n Now please use valid SQLite to answer the following questions: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "Here are 5 examples including input and output:\n input: question: What is the description of the role named \"Proof Reader\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"\n input: question: Find all the zip codes in which the max dew point have never reached 70. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70\n input: question: What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)\n input: question: Find the id, forename and number of races of all drivers who have at least participated in two races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n input: question: Find the states where have some college students in tryout and their decisions are yes. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n Now please use valid SQLite to answer the following questions: Show the date of the transcript which shows the least number of results, also list the id.",
    "Here are 5 examples including input and output:\n input: question: How many followers does each user have? serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT count(*) FROM follows\n input: question: Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\". serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"\n input: question: Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"\n input: question: What are the codes, names, and descriptions of the different document types? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types\n input: question: List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'\n Now please use valid SQLite to answer the following questions: What is the date and id of the transcript with the least number of results?",
    "Here are 5 examples including input and output:\n input: question: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n input: question: What are the unique types of player positions in the tryout? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT pPos) FROM tryout\n input: question: How many students does KAWA GORDON teaches? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"\n input: question: For each denomination, return the denomination and the count of schools with that denomination. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination\n input: question: What are the details for the projects which were launched by the organization with the most projects? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n Now please use valid SQLite to answer the following questions: Find the semester when both Master students and Bachelor students got enrolled in.",
    "Here are 5 examples including input and output:\n input: question: Which authors have last name \"Ueno\"? List their first names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname FROM authors WHERE lname  =  \"Ueno\"\n input: question: What are the start station's name and id for the one that had the most start trips in August? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the name of the person who has friends with age above 40 but not under age 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n input: question: What is the average age for each city and what are those cities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(age) ,  city_code FROM student GROUP BY city_code\n input: question: What are the names of artists who did not have an exhibition in 2004? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n Now please use valid SQLite to answer the following questions: What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the country with the most number of home airlines? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: What is the ordered list of customer ids? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n input: question: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n input: question: What is the description of the service type which offers both the photo product and the film product? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'\n input: question: What are the dates of ceremony and results for each music festival? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Date_of_ceremony ,  RESULT FROM music_festival\n Now please use valid SQLite to answer the following questions: How many different addresses do the students currently live?",
    "Here are 5 examples including input and output:\n input: question: Find the phone numbers of customers using the most common policy type among the available policies. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\n input: question: Find the id of users who are followed by Mary and Susan. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n input: question: How many different colleges were represented at tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT cName) FROM tryout\n input: question: What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages\n input: question: Show the school name and driver name for all school buses. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id\n Now please use valid SQLite to answer the following questions: What are the different addresses that have students living there?",
    "Here are 5 examples including input and output:\n input: question: How many customers are living in city \"Lake Geovannyton\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"\n input: question: Find the names of the customers who have order status both \"On Road\" and \"Shipped\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\n input: question: What is the location name of the document \"Robin CV\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"\n input: question: How many professors teach a class with the code ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n input: question: Which course authors teach two or more courses? Give me their addresses and author IDs. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n Now please use valid SQLite to answer the following questions: List all the student details in reversed lexicographical order.",
    "Here are 5 examples including input and output:\n input: question: What are the last names of faculty in building Barton, sorted by last name? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname\n input: question: Find the name and account balance of the customer whose name includes the letter ‘a’. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'\n input: question: What is the id and name of the employee with the highest salary? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\n input: question: Find the name of the item with the lowest average rating. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1\n input: question: On average, how old are the members in the club \"Hopkins Student Enterprises\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"\n Now please use valid SQLite to answer the following questions: What other details can you tell me about students in reverse alphabetical order?",
    "Here are 5 examples including input and output:\n input: question: What are the descriptions and names of the courses that have student enrollment bigger than 2? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n input: question: What is the maximum level of managers in countries that are not \"Australia\"? serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n input: question: Show the manager name with most number of gas stations opened after 2000. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\n input: question: What is the name of all tracks in the album named Balls to the Wall? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n input: question: What is the partition id of the user named \"Iron Man\". serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'\n Now please use valid SQLite to answer the following questions: Describe the section h.",
    "Here are 5 examples including input and output:\n input: question: What are the maximum, minimum and average home games each stadium held? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium\n input: question: What are the ids of all songs that have higher resolution of the average resolution in the modern genre? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")\n input: question: Find the id and star rating of each hotel and sort them in increasing order of price. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC\n input: question: Find how many different affiliation types there are. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(DISTINCT affiliation) FROM university\n input: question: Find the name of the youngest organization. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the description for the section named h?",
    "Here are 5 examples including input and output:\n input: question: Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200\n input: question: What are the names of the dorm that does not have a TV Lounge? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n input: question: What is the name of the department in the Building Mergenthaler? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n input: question: list the card number of all members whose hometown address includes word \"Kentucky\". serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n input: question: Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "Here are 5 examples including input and output:\n input: question: Which country has at most 3 stadiums listed? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3\n input: question: what is the average number of factories and maximum number of shops for manufacturers that opened before 1990. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990\n input: question: What are the names of manufacturers with revenue greater than the average of all revenues? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\n input: question: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'\n input: question: Show names of cities and names of counties they are in. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\n Now please use valid SQLite to answer the following questions: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "Here are 5 examples including input and output:\n input: question: What is the average distance and average price for flights from Los Angeles. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n input: question: List the personal names and family names of all the students in alphabetical order of family name. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name ,  family_name FROM Students ORDER BY family_name\n input: question: What is the most common hometown of gymnasts? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the dates of orders which belong to the customer named \"Jeramie\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n input: question: Return the address and email of the customer with the first name Linda. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n Now please use valid SQLite to answer the following questions: List the title of all cartoons in alphabetical order.",
    "Here are 5 examples including input and output:\n input: question: Which delegates are from counties with population smaller than 100000? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000\n input: question: What are the names of all the stores in the largest district by population? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n input: question: How many different source system code for the cmi cross references are there? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT count(DISTINCT source_system_code) FROM CMI_cross_references\n input: question: Give the names of characteristics that are in two or more products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n input: question: What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100\n Now please use valid SQLite to answer the following questions: What are the titles of the cartoons sorted alphabetically?",
    "Here are 5 examples including input and output:\n input: question: What are the dates of the orders made by the customer named \"Jeramie\"? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n input: question: What is the name of each dorm that has a TV Lounge but no study rooms? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\n input: question: Display all the information about the department Marketing. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM  departments WHERE department_name  =  'Marketing'\n input: question: List the carriers of devices that have no devices in stock. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)\n input: question: What are the average price and score of wines for each appelation? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n Now please use valid SQLite to answer the following questions: List all cartoon directed by \"Ben Jones\".",
    "Here are 5 examples including input and output:\n input: question: How many female students live in Smith Hall? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n input: question: Which committees have delegates from the Democratic party? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n input: question: What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )\n input: question: List the clubs that have at least a member with advisor \"1121\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n input: question: What is the full name of the employee who has the most customers? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of all cartoons directed by Ben Jones?",
    "Here are 5 examples including input and output:\n input: question: For each team, return the team name, id and the maximum salary among the team. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\n input: question: Who has a friend that is from new york city? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\n input: question: What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200\n input: question: What is the average gpa of the students enrolled in the course with code ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'\n input: question: Count the number of female Professors we have. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"\n Now please use valid SQLite to answer the following questions: How many cartoons were written by \"Joseph Kuhr\"?",
    "Here are 5 examples including input and output:\n input: question: How many different bike ids are there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT count(DISTINCT bike_id) FROM trip\n input: question: What is the name, city, and country of the airport with the lowest altitude? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n input: question: What is the address content of the customer named \"Maudie Kertzmann\"? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n input: question: How many coaches does each club has? List the club id, name and the number of coaches. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n input: question: Find the last name of the staff whose email address contains \"wrau\". serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"\n Now please use valid SQLite to answer the following questions: What is the number of cartoones written by Joseph Kuhr?",
    "Here are 5 examples including input and output:\n input: question: Count the total number of settlements made. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT count(*) FROM Settlements\n input: question: List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\". serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"\n input: question: What are the distinct last names of the students who have class president votes? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\n input: question: List ids and details for all projects. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT project_id ,  project_details FROM Projects\n input: question: Find the three most expensive procedures. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures ORDER BY cost LIMIT 3\n Now please use valid SQLite to answer the following questions: list all cartoon titles and their directors ordered by their air date",
    "Here are 5 examples including input and output:\n input: question: What are the total number of credits offered by each department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n input: question: List all product names in ascending order of price. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name FROM Products ORDER BY Product_Price ASC\n input: question: What is the name, latitude, and city of the station that is located the furthest South? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1\n input: question: What are the names of enzymes whose product is not 'Heme'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name FROM enzyme WHERE product != 'Heme'\n input: question: Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n Now please use valid SQLite to answer the following questions: What is the name and directors of all the cartoons that are ordered by air date?",
    "Here are 5 examples including input and output:\n input: question: Find the number of classes in each school. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code\n input: question: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"\n input: question: What is the name and country for the artist with most number of exhibitions? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the different types of video games? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT DISTINCT gtype FROM Video_games\n input: question: What is the membership level with the most people? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "Here are 5 examples including input and output:\n input: question: Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Compute the mean price of procedures physician John Wen was trained in. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: How many sections does each course have? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code\n input: question: What are the type codes of the policies used by the customer \"Dayana Robel\"? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n input: question: Find the total amount of products ordered before 2018-03-17 07:13:53. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"\n Now please use valid SQLite to answer the following questions: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "Here are 5 examples including input and output:\n input: question: What is the description of the club named \"Tennis Club\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"\n input: question: What are the positions with both players having more than 20 points and less than 10 points. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\n input: question: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n input: question: What are the distinct visit dates? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT DISTINCT Visit_Date FROM VISITS\n input: question: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n Now please use valid SQLite to answer the following questions: Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "Here are 5 examples including input and output:\n input: question: List the names of people that have not been on the affirmative side of debates. serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n input: question: Find the name and gender of the candidate who got the highest support rate. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n input: question: Show names for all aircrafts with distances more than the average. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n input: question: What is the name of the tallest building? serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT name FROM building ORDER BY height_feet DESC LIMIT 1\n input: question: What is the founded year of the non public school that was founded most recently? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the country with the most number of TV Channels and how many does it have?",
    "Here are 5 examples including input and output:\n input: question: Show the most common college of authors of submissions. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the first name of students not enrolled in any course. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n input: question: Give me the theme and location of each party. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Party_Theme ,  LOCATION FROM party\n input: question: Which channels are not owned by CCTV? Give me the channel names. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM channel WHERE OWNER != 'CCTV'\n input: question: What are the dates of the assessment notes? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT date_of_notes FROM Assessment_Notes\n Now please use valid SQLite to answer the following questions: List the number of different series names and contents in the TV Channel table.",
    "Here are 5 examples including input and output:\n input: question: Find the maximum and total number of followers of all users. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT max(followers) ,  sum(followers) FROM user_profiles\n input: question: How many students are there for each major? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT major ,  count(*) FROM Student GROUP BY major\n input: question: For each election cycle, report the number of voting records. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\n input: question: Count how many appointments have been made in total. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) FROM appointment\n input: question: What is each customer's move in date, and the corresponding customer id and details? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id\n Now please use valid SQLite to answer the following questions: How many different series and contents are listed in the TV Channel table?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all cities with more than one airport and how many airports do they have? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1\n input: question: Find the name of customers whose credit score is below the average credit scores of all customers. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\n input: question: List all pilot names in ascending alphabetical order. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Name FROM pilot ORDER BY Name ASC\n input: question: Return the publisher that has published the most books. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1\n input: question: Which location names contain the word \"film\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"\n Now please use valid SQLite to answer the following questions: What is the content of TV Channel with serial name \"Sky Radio\"?",
    "Here are 5 examples including input and output:\n input: question: What are all the distinct participant ids who attended any events? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT count(DISTINCT participant_id) FROM participants_in_Events\n input: question: What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n input: question: What is the campus fee for San Francisco State University in 1996? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996\n input: question: What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\n input: question: Show card number, name, and hometown for all members in a descending order of level. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n Now please use valid SQLite to answer the following questions: What is the content of the series Sky Radio?",
    "Here are 5 examples including input and output:\n input: question: Show the names and details of all the staff members. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name ,  Other_Details FROM Staff\n input: question: Find the name of the department that offers the largest number of credits of all classes. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n input: question: What are the details of the student who registered for the most number of courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show ids for all the male faculty. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty WHERE Sex  =  'M'\n input: question: What are the names of actors ordered descending by the year in which their musical was awarded? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n Now please use valid SQLite to answer the following questions: What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "Here are 5 examples including input and output:\n input: question: What are the names and budgets of departments with budgets greater than the average? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n input: question: What is the receipt date of the document with id 3? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT receipt_date FROM Documents WHERE document_id = 3;\n input: question: What campus has the most degrees  conferrred over its entire existence? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1\n input: question: Which locations are shared by more than two wrestlers? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2\n input: question: Give me the title and highest price for each film. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n Now please use valid SQLite to answer the following questions: What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "Here are 5 examples including input and output:\n input: question: How many students did not have any course enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)\n input: question: What are the ids and details of all accounts? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT account_id ,  account_details FROM Accounts\n input: question: What is the most common participant type? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of wines whose production year are before the year of all wines by Brander winery? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")\n input: question: What city does the employee who helps the customer with postal code 70174 live in? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n Now please use valid SQLite to answer the following questions: How many TV Channel using language English?",
    "Here are 5 examples including input and output:\n input: question: How many airlines does Russia has? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines WHERE country  =  'Russia'\n input: question: Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'\n input: question: How many students whose are playing the role of goalie? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM tryout WHERE pPos  =  'goalie'\n input: question: How many manufacturers have headquarters in either Tokyo or Beijing? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'\n input: question: Find the id and name of customers whose address contains WY state and do not use credit card for payment. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n Now please use valid SQLite to answer the following questions: How many TV Channels use the English language?",
    "Here are 5 examples including input and output:\n input: question: What are the details and opening hours of the museums? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID\n input: question: Show the advisors of the students whose city of residence has city code \"BAL\". serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"\n input: question: Find the id of the order which is shipped most recently. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)\n input: question: Find the name, headquarter and founder of the manufacturer that has the highest revenue. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n input: question: What are all the document type codes and document type names? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT document_type_code ,  document_type_name FROM Ref_document_types\n Now please use valid SQLite to answer the following questions: List the language used least number of TV Channel. List language and number of TV Channel.",
    "Here are 5 examples including input and output:\n input: question: List all the names of schools with an endowment amount smaller than or equal to 10. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10\n input: question: What are the number of international and domestic passengers of the airport named London \"Heathrow\"? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n input: question: What are the card numbers, names, and hometowns of every member ordered by descending level? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n input: question: Show station names without any trains. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)\n input: question: Give the names and scores of wines made from white grapes. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"\n Now please use valid SQLite to answer the following questions: What are the languages used by the least number of TV Channels and how many channels use it?",
    "Here are 5 examples including input and output:\n input: question: What is the least popular kind of decor? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\n input: question: Show me the number of parks the state of NY has. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM park WHERE state  =  'NY';\n input: question: Find the number of songs in all the studio albums. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"\n input: question: Show the name, average attendance, total attendance for stadiums where no accidents happened. serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id\n input: question: What are the names and ids of artists with 3 or more albums, listed in alphabetical order? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name\n Now please use valid SQLite to answer the following questions: List each language and the number of TV Channels using it.",
    "Here are 5 examples including input and output:\n input: question: List the codes of all courses that take place in room KLR209. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'\n input: question: Which reign is the most common among wrestlers? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Count the total number of policies used by the customer named \"Dayana Robel\". serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"\n input: question: Count the number of products with the 'hot' charactersitic. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n input: question: List the name of artworks that are not nominated. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)\n Now please use valid SQLite to answer the following questions: For each language, list the number of TV Channels that use it.",
    "Here are 5 examples including input and output:\n input: question: Count the number of colors. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM ref_colors\n input: question: Show all game names played by at least 1000 hours. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000\n input: question: What are the names of different music genres? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Name FROM GENRE\n input: question: What are the ids and last names of all drivers who participated in the most races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n input: question: How many professors attained either Ph.D. or Masters degrees? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n Now please use valid SQLite to answer the following questions: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all directors who have made one movie except for the director named NULL? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1\n input: question: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year\n input: question: What are the states with colleges that have enrollments less than the some other college? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\n input: question: How many states have smaller colleges than average? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\n input: question: List venues of all matches in the order of their dates starting from the most recent one. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT venue FROM MATCH ORDER BY date DESC\n Now please use valid SQLite to answer the following questions: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "Here are 5 examples including input and output:\n input: question: What are the names of all pilots 30 years old or young in descending alphabetical order? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n input: question: Show the most common nationality of hosts. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the average number of customers across banks in the state of Utah? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n input: question: Count the number of players who enter hall of fame for each year. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;\n input: question: Which building has the largest number of company offices? Give me the building name. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "Here are 5 examples including input and output:\n input: question: find all dependent names who have a spouse relation with some employee. serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'\n input: question: Which locations have 2 or more cinemas with capacity over 300? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n input: question: What is the name of the school with smallest enrollment size per state? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n input: question: How many different advisors are listed? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(DISTINCT advisor) FROM Student\n input: question: What is the number of players who have points less than 30 for each position? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n Now please use valid SQLite to answer the following questions: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "Here are 5 examples including input and output:\n input: question: List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;\n input: question: Show all member names who are not in charge of any event. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n input: question: What are the names of wines produced before any wine from the Brander winery? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")\n input: question: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n input: question: What is the language that was used most often in songs with resolution above 500? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the Episode of all TV series sorted by rating.",
    "Here are 5 examples including input and output:\n input: question: Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\n input: question: Find the names of stadiums whose capacity is smaller than the average capacity. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)\n input: question: Show the number of male and female assistant professors. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex\n input: question: What are the names of the different bank branches, and what are their total loan amounts? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n input: question: What are the ids of all reviewers who have not given 4 stars at least once? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT rID FROM Rating WHERE stars != 4\n Now please use valid SQLite to answer the following questions: What are all of the episodes ordered by ratings?",
    "Here are 5 examples including input and output:\n input: question: Find the salaries of all distinct instructors that are less than the largest salary. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)\n input: question: Find the number of students taught by the teacher KAWA GORDON. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"\n input: question: Report all advisors that advise more than 2 students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2\n input: question: Find the ids of the nurses who are on call in block floor 1 and block code 1. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1\n input: question: On average how large is the population of the counties? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT avg(Population) FROM county\n Now please use valid SQLite to answer the following questions: List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "Here are 5 examples including input and output:\n input: question: Which room has the highest rate? List the room's full name, rate, check in and check out date. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;\n input: question: Find the states of the colleges that have students in the tryout who played in striker position. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'\n input: question: Find all the customer information in state NY. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT * FROM CUSTOMER WHERE State  =  \"NY\"\n input: question: What are the visit date and details of the visitor whose detail is 'Vincent'? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"\n input: question: Count the number of different scientists assigned to any project. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(DISTINCT scientist) FROM assignedto\n Now please use valid SQLite to answer the following questions: What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "Here are 5 examples including input and output:\n input: question: Find the physicians who are trained in a procedure that costs more than 5000. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\n input: question: What is the salaray and name of the employee that is certified to fly the most planes? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n input: question: What are the first and last names of all the candidates? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id\n input: question: How many games are free of injury accidents? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )\n input: question: What are the id and name of the stations that have ever had more than 12 bikes available? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n Now please use valid SQLite to answer the following questions: What is minimum and maximum share of TV series?",
    "Here are 5 examples including input and output:\n input: question: Show the average room count of the apartments that have booking status code \"Provisional\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n input: question: In the year 2000, what is the campus fee for San Francisco State University? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000\n input: question: Find the name of accounts whose checking balance is higher than corresponding saving balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\n input: question: Show the themes of parties and the names of the party hosts. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID\n input: question: Find all the forenames of distinct drivers who was in position 1 as standing and won? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1\n Now please use valid SQLite to answer the following questions: What is the maximum and minimum share for the TV series?",
    "Here are 5 examples including input and output:\n input: question: Which types of policy are chosen by more than 2 customers? Give me the policy type codes. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2\n input: question: Find all the customer last names that do not have invoice totals larger than 20. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20\n input: question: What are the statement id and statement detail for the statement that has the most corresponding accounts? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show ids for all transactions whose amounts are greater than the average. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n input: question: Return the names of parties that have two or more events. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "Here are 5 examples including input and output:\n input: question: How many elections are there? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT count(*) FROM election\n input: question: Show the maximum amount of transaction. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT max(amount_of_transaction) FROM TRANSACTIONS\n input: question: What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'\n input: question: For the airline ids with the top 10 most routes operated, what are their names? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10\n input: question: Show the most common nationality for journalists. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: When did the episode \"A Love of a Lifetime\" air?",
    "Here are 5 examples including input and output:\n input: question: Return the channel code and contact number of the customer contact channel whose active duration was the longest. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)\n input: question: Find all the songs whose name contains the word \"the\". serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT title FROM songs WHERE title LIKE '% the %'\n input: question: How many stations does Mountain View city has? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n input: question: What are the job ids for jobs done more than once for a period of more than 300 days? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2\n input: question: find the name of the program that was launched most recently. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "Here are 5 examples including input and output:\n input: question: What is the most used instrument? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of all songs produced by the artist with the first name \"Marianne\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"\n input: question: What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100\n input: question: Find the famous titles of artists that do not have any volume. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n input: question: What are the bed type and name of all the rooms with traditional decor? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\n Now please use valid SQLite to answer the following questions: What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "Here are 5 examples including input and output:\n input: question: Sort the names of all counties in descending alphabetical order. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY County_name DESC\n input: question: What are the names of courses without prerequisites? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\n input: question: What are the titles of the books whose writer is not \"Elaine Lee\"? serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Title FROM book WHERE Writer != \"Elaine Lee\"\n input: question: For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n input: question: List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;\n Now please use valid SQLite to answer the following questions: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "Here are 5 examples including input and output:\n input: question: What is the average sales of the journals that have an editor whose work type is 'Photo'? serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'\n input: question: Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'\n input: question: How many climbers are there? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT count(*) FROM climber\n input: question: What are the statement ids, statement details, and account details, for all accounts? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id\n input: question: Show flight number, origin, destination of all flights in the alphabetical order of the departure cities. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n Now please use valid SQLite to answer the following questions: What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "Here are 5 examples including input and output:\n input: question: What is the description of document type 'Paper'? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";\n input: question: Please show the employee last names that serves no more than 20 customers. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\n input: question: Which cities have lower temperature in March than in July and have been once host cities? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n input: question: What are the wines that have prices higher than 50 and made of Red color grapes? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\n input: question: What are the last names that are used by customers and staff? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff\n Now please use valid SQLite to answer the following questions: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "Here are 5 examples including input and output:\n input: question: List all statement ids and statement details. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT STATEMENT_ID ,  statement_details FROM Statements\n input: question: Show all church names that have hosted least two weddings. serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2\n input: question: Which students are advised by Michael Goodrich? Give me their first and last names. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"\n input: question: Show all cities without a branch having more than 100 memberships. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100\n input: question: Find the rank of the faculty that the fewest faculties belong to. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the episode for the TV series named \"Sky Radio\"?",
    "Here are 5 examples including input and output:\n input: question: Find the names of all reviewers who have ratings with a NULL value for the date. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"\n input: question: Find the number of students who are older than 18 and do not have allergy to either food or animal. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\n input: question: What is the song in the volume with the maximum weeks on top? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\n input: question: Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\" serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"\n input: question: What are the full name (first and last name) and salary for all employees who does not have any value for commission? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\n Now please use valid SQLite to answer the following questions: Find the number of cartoons directed by each of the listed directors.",
    "Here are 5 examples including input and output:\n input: question: Find the product category description of the product category with code \"Spices\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"\n input: question: What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"\n input: question: List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif' serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'\n input: question: How many professors are teaching class with code ACCT-211? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n input: question: List the names and emails of customers who payed by Visa card. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'\n Now please use valid SQLite to answer the following questions: How many cartoons did each director create?",
    "Here are 5 examples including input and output:\n input: question: Show the nations that have both hosts older than 45 and hosts younger than 35. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n input: question: How many captains are in each rank? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) ,  rank FROM captain GROUP BY rank\n input: question: Which papers did the author \"Olin Shivers\" write? Give me the paper titles. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\n input: question: Which film has the most number of actors or actresses? List the film name, film id and description. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\n input: question: List the names of all players who have a crossing score higher than 90 and prefer their right foot. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"\n Now please use valid SQLite to answer the following questions: Find the production code and channel of the most recently aired cartoon .",
    "Here are 5 examples including input and output:\n input: question: Find the name of the target user with the lowest trust score. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1\n input: question: Find the total saving balance for each account name. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n input: question: What is the total number of professors with a Ph.D. ? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n input: question: Give me the payment Id, the date and the amount for all the payments processed with Visa. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'\n input: question: What are the official names of cities, ordered descending by population? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city ORDER BY Population DESC\n Now please use valid SQLite to answer the following questions: What is the produdction code and channel of the most recent cartoon ?",
    "Here are 5 examples including input and output:\n input: question: Find the id and city of the student address with the highest average monthly rental. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n input: question: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\n input: question: What is the average number of international passengers for an airport? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT avg(International_Passengers) FROM airport\n input: question: What is the average fastest lap speed for races held after 2004, for each race, ordered by year? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year\n input: question: What are all distinct country for artists? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT DISTINCT country FROM artist\n Now please use valid SQLite to answer the following questions: Find the package choice and series name of the TV channel that has high definition TV.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the tourist attractions that can be accessed by bus? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"\n input: question: What are all the dates of enrollment and completion in record? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment\n input: question: Show all card type codes and the number of cards in each type. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n input: question: What is the total credit does each department offer? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code\n input: question: What information do you have on colleges sorted by increasing enrollment numbers? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT * FROM College ORDER BY enr\n Now please use valid SQLite to answer the following questions: What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "Here are 5 examples including input and output:\n input: question: List the name of albums that are released by aritist whose name has 'Led' serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'\n input: question: Find the name of the tryout players who are from the college with largest size. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)\n input: question: List the name of physicians who took some appointment. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n input: question: Who are the friends of Bob? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'\n input: question: Show the names of members and the decoration themes they have. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID\n Now please use valid SQLite to answer the following questions: which countries' tv channels are playing some cartoon written by Todd Casey?",
    "Here are 5 examples including input and output:\n input: question: Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;\n input: question: Show the location codes and the number of documents in each location. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code\n input: question: Return the names of all regions other than Denmark. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT region_name FROM region WHERE region_name != 'Denmark'\n input: question: Find the delegates who are from counties with population below 100000. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000\n input: question: List all country and league names. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id\n Now please use valid SQLite to answer the following questions: What are the countries that have cartoons on TV that were written by Todd Casey?",
    "Here are 5 examples including input and output:\n input: question: Show the maximum share count of transactions where the amount is smaller than 10000 serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n input: question: Sort all the rooms according to the price. Just report the room names. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms ORDER BY basePrice;\n input: question: For each zip code, select all those that have an average mean visiblity below 10. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\n input: question: On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"\n input: question: Find courses that ran in Fall 2009 but not in Spring 2010. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\n Now please use valid SQLite to answer the following questions: which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "Here are 5 examples including input and output:\n input: question: List the method, date and amount of all the payments, in ascending order of date. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n input: question: What are the names of all singers that are from the UK and released a song in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"\n input: question: Find the maximum and minimum monthly rental for all student addresses. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses\n input: question: What are the names of all the customers? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers\n input: question: What is the name of the nurse has the most appointments? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the countries that are not playing cartoons written by Todd Casey?",
    "Here are 5 examples including input and output:\n input: question: Which rank has the smallest number of faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1\n input: question: Find the average height and weight for all males (sex is M). serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n input: question: Which patient is undergoing the most recent treatment? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1\n input: question: What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20\n input: question: Which three cities have the largest regional population? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "Here are 5 examples including input and output:\n input: question: What is the total account balance for customers with a credit score of above 100 for the different states? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state\n input: question: Find the student ID and personal name of the student with at least two enrollments. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2\n input: question: What is the location of the club named \"Tennis Club\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"\n input: question: Show the id of the employee named Ebba. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"\n input: question: What are the state and country of all the cities that have post codes starting with 4.\\ serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"\n Now please use valid SQLite to answer the following questions: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "Here are 5 examples including input and output:\n input: question: How old is each student and how many students are each age? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT age ,  count(*) FROM Student GROUP BY age\n input: question: Hom many musicians performed in the song \"Flash\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n input: question: Return the characteristic names of the 'sesame' product. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n input: question: Which papers were written by authors from the institution \"Google\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n input: question: List the physicians' employee ids together with their primary affiliation departments' ids. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1\n Now please use valid SQLite to answer the following questions: find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "Here are 5 examples including input and output:\n input: question: Return the average, maximum, and minimum budgets in millions for movies made before the year 2000. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000\n input: question: How many customers are there? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Customers;\n input: question: Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100\n input: question: What is the name of the most recent movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\n input: question: How many distinct parties are there for representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT count(DISTINCT Party) FROM representative\n Now please use valid SQLite to answer the following questions: What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "Here are 5 examples including input and output:\n input: question: List the ids, names and market shares of all browsers. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT id ,  name ,  market_share FROM browser\n input: question: Who is the composer of track Fast As a Shark? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";\n input: question: List the description of all the colors. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT color_description FROM ref_colors\n input: question: What are all details of the students who registered but did not attend any course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n input: question: Show the ids of the employees who don't authorize destruction for any document. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n Now please use valid SQLite to answer the following questions: find id of the tv channels that from the countries where have more than two tv channels.",
    "Here are 5 examples including input and output:\n input: question: How many members are not living in Hartford? serialized_schema:  | coffee_shop | shop : shop_id , address , num_of_staff , score , open_year | member : member_id , name , membership_card , age , time_of_purchase , level_of_membership , address | happy_hour : hh_id , shop_id , month , num_of_shaff_in_charge | happy_hour_member : hh_id , member_id , total_amount output: SELECT count(*) FROM member WHERE address != 'Hartford'\n input: question: How many distinct transaction types are used in the transactions? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS\n input: question: What are the types of every competition and in which countries are they located? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type ,  Country FROM competition\n input: question: List the names of people that are not perpetrators. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)\n input: question: What is the structure of the document with the least number of accesses? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the ids of all tv channels that have more than 2 TV channels?",
    "Here are 5 examples including input and output:\n input: question: Which payment method is used by most customers? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n input: question: What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n input: question: What is the number of states that has some colleges whose enrollment is smaller than the average enrollment? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\n input: question: How many kids stay in the rooms reserved by ROY SWEAZY? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n input: question: Return the average price of products that have each category code. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code\n Now please use valid SQLite to answer the following questions: find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "Here are 5 examples including input and output:\n input: question: Return the investor who have invested in the greatest number of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the names of students and their respective departments, ordered by number of credits from least to greatest? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  dept_name FROM student ORDER BY tot_cred\n input: question: What are the names of all students who tried out in alphabetical order? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n input: question: Find the name and id of the item with the highest average rating. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1\n input: question: Are the customers holding coupons with amount 500 bad or good? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500\n Now please use valid SQLite to answer the following questions: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "Here are 5 examples including input and output:\n input: question: Find the names of all instructors in Comp. Sci. department with salary > 80000. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000\n input: question: How many users are logged in? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT count(*) FROM users WHERE user_login  =  1\n input: question: Find the name of the customer who made the most orders. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: list the first and last names, and the addresses of all employees in the ascending order of their birth date. serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate\n input: question: What are the names of the three artists who have produced the most songs, and how many works did they produce? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "Here are 5 examples including input and output:\n input: question: Show all the distinct product names with price higher than the average. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)\n input: question: how many degrees were conferred between 1998 and 2002? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\n input: question: Find the name of the activity that has the largest number of student participants. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n input: question: find the total market rate of the furnitures that have the top 2 market shares. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2\n input: question: Return the description and unit of measurement for products in the 'Herbs' category. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"\n Now please use valid SQLite to answer the following questions: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "Here are 5 examples including input and output:\n input: question: Give the names of tracks that do not have a race in the class 'GT'. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n input: question: What amenities does Smith Hall have in alphabetical order? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name\n input: question: What are the names of customers who have taken out more than one loan? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n input: question: What are the other account details for the account with the name 338? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n input: question: What are the distinct positions of the players from a country whose capital is Dublin? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"\n Now please use valid SQLite to answer the following questions: How many poker players are there?",
    "Here are 5 examples including input and output:\n input: question: For each station, find its latitude and the minimum duration of trips that ended at the station. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id\n input: question: What is the id and name of the staff who has been assigned for the least amount of time? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1\n input: question: Return the completion date for all the tests that have \"Fail\" result. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"\n input: question: What are the most common types of interactions between enzymes and medicine, and how many types are there? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1\n input: question: Find the distinct names of all races held between 2014 and 2017? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n Now please use valid SQLite to answer the following questions: Count the number of poker players.",
    "Here are 5 examples including input and output:\n input: question: Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\". serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"\n input: question: What is the average time span of contact channels in the database? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels\n input: question: What is the budget type code with most number of documents. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the first and last names of the 5 customers who purchased something most recently? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n input: question: display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )\n Now please use valid SQLite to answer the following questions: List the earnings of poker players in descending order.",
    "Here are 5 examples including input and output:\n input: question: Show the average amount of transactions with type code \"SALE\". serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"\n input: question: What is the apartment number of the apartment with the most beds? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1\n input: question: What are the descriptions of the courses with name \"database\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT course_description FROM COURSES WHERE course_name  =  \"database\"\n input: question: Count the number of bank branches. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(*) FROM bank\n input: question: Show storm name with at least two regions and 10 cities affected. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10\n Now please use valid SQLite to answer the following questions: What are the earnings of poker players, ordered descending by value?",
    "Here are 5 examples including input and output:\n input: question: Show the names of the drivers without a school bus. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)\n input: question: What is the number of days that had an average humity above 50 and an average visibility above 8? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8\n input: question: Find the name of all customers. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers\n input: question: Find the average access counts of documents with functional area \"Acknowledgement\". serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"\n input: question: What are the ids of all songs that are available on mp4 or have a higher resolution than 720? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\n Now please use valid SQLite to answer the following questions: List the final tables made and the best finishes of poker players.",
    "Here are 5 examples including input and output:\n input: question: What is the id, genre, and name of the artist for every English song ordered by ascending rating? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n input: question: What are the title, id, and description of the movie with the greatest number of actors? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\n input: question: What is the average price range of five star hotels that allow pets? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n input: question: How many aircrafts exist in the database? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Aircraft\n input: question: What is the name of the course that has the most student enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the final tables made and best finishes for all poker players?",
    "Here are 5 examples including input and output:\n input: question: What are the first and last names of all customers who lived in Lockmanfurt? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n input: question: Return the name, rate, check in and check out date for the room with the highest rate. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;\n input: question: Which accelerator name contains substring \"Opera\"? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"\n input: question: List all the name of organizations in order of the date formed. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT organization_name FROM organizations ORDER BY date_formed ASC\n input: question: What are the phones and emails of workshop groups in which services are performed? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n Now please use valid SQLite to answer the following questions: What is the average earnings of poker players?",
    "Here are 5 examples including input and output:\n input: question: Which policy type has the most records in the database? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Show the names of all the clients with no booking. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n input: question: What is the names of movies whose created year is after all movies directed by Steven Spielberg? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")\n input: question: What are the first names of the professors who do not teach a class. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num\n input: question: How many customers have email that contains \"gmail.com\"? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n Now please use valid SQLite to answer the following questions: Return the average earnings across all poker players.",
    "Here are 5 examples including input and output:\n input: question: How many employees do we have? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Employees\n input: question: What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'\n input: question: What is the total amount of products purchased before 2018-03-17 07:13:53? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"\n input: question: Count the number of parties. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT count(*) FROM party\n input: question: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n Now please use valid SQLite to answer the following questions: What is the money rank of the poker player with the highest earnings?",
    "Here are 5 examples including input and output:\n input: question: How many students live in HKG or CHI? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n input: question: How many tracks does each genre have and what are the names of the top 5? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;\n input: question: which pilot is in charge of the most number of flights? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1\n input: question: Find the number of employees whose title is IT Staff from each city? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n input: question: What is department name and office for the professor whose last name is Heffington? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'\n Now please use valid SQLite to answer the following questions: Return the money rank of the player with the greatest earnings.",
    "Here are 5 examples including input and output:\n input: question: What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\n input: question: List the title of films that do not have any market estimation. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\n input: question: What are the different dorm amenity names in alphabetical order? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name\n input: question: What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\n input: question: For each city, how many branches opened before 2010? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city\n Now please use valid SQLite to answer the following questions: What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "Here are 5 examples including input and output:\n input: question: Find all the campuses opened in 1958. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE YEAR  =  1958\n input: question: Find each student's first name. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT fname FROM student\n input: question: What are the names of the clubs that have players in the position of \"Right Wing\"? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\n input: question: Find the name of customers who have both saving and checking account types. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'\n input: question: What is the number of professors who are in the Accounting or Biology departments? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n Now please use valid SQLite to answer the following questions: Return the maximum final tables made across all poker players who have earnings below 200000.",
    "Here are 5 examples including input and output:\n input: question: Find the id of the song that lasts the longest. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1\n input: question: How many distinct incident type codes are there? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident\n input: question: Show the studios that have not produced films with director \"Walter Hill\". serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"\n input: question: What are the names of students who have taken the prerequisite for the course International Finance? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\n input: question: Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)\n Now please use valid SQLite to answer the following questions: What are the names of poker players?",
    "Here are 5 examples including input and output:\n input: question: Give the state that has the most customers. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\n input: question: how many people are there whose weight is higher than 85 for each gender? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex\n input: question: List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";\n input: question: For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"\n input: question: What are the names of the storms that affected both the regions of Afghanistan and Albania? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\n Now please use valid SQLite to answer the following questions: Return the names of all the poker players.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the customers and staff members? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n input: question: List the amount and donor name for the largest amount of donation. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1\n input: question: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\n input: question: What is the name of the marketing region that the store Rob Dinning belongs to? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"\n input: question: How many companies were created by Andy? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\n Now please use valid SQLite to answer the following questions: What are the names of poker players whose earnings is higher than 300000?",
    "Here are 5 examples including input and output:\n input: question: Show the guest first names, start dates, and end dates of all the apartment bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id\n input: question: Find the number of students in each major. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  major FROM student GROUP BY major\n input: question: What is the total share of transactions? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT sum(share_count) FROM TRANSACTIONS\n input: question: What are the maximum and minimum resolution of songs whose duration is 3 minutes? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\n input: question: Show the names of countries and the average speed of roller coasters from each country. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n Now please use valid SQLite to answer the following questions: Give the names of poker players who have earnings above 300000.",
    "Here are 5 examples including input and output:\n input: question: Count the number of candidates. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT count(*) FROM candidate\n input: question: Show each student's first name and last name. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT firstname ,  lastname FROM list\n input: question: Find the name of the most expensive hardware product. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n input: question: Find the first names of all customers that live in Brazil and have an invoice. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"\n input: question: What are the names of the states that have 2 to 4 employees living there? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;\n Now please use valid SQLite to answer the following questions: List the names of poker players ordered by the final tables made in ascending order.",
    "Here are 5 examples including input and output:\n input: question: What are the codes of card types that have 5 or more cards? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n input: question: Which publishers did not publish a book in 1989? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989\n input: question: What are the countries for appelations with at most 3 wines? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3\n input: question: What are the file sizes and formats for all songs with a resolution lower than 800? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800\n input: question: Find the names of procedures which physician John Wen was trained in. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n Now please use valid SQLite to answer the following questions: What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "Here are 5 examples including input and output:\n input: question: How many professors who are from either Accounting or Biology department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n input: question: Show the race class and number of races in each class. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT CLASS ,  count(*) FROM race GROUP BY CLASS\n input: question: What is the average number of stars that each reviewer awards for a movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n input: question: What is the id and name of the department store that has both marketing and managing department? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n input: question: What are the different regions of clubs in ascending alphabetical order? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT DISTINCT Region FROM club ORDER BY Region ASC\n Now please use valid SQLite to answer the following questions: What is the birth date of the poker player with the lowest earnings?",
    "Here are 5 examples including input and output:\n input: question: What are the three countries that the least players are from? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n input: question: List all different genre types. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT DISTINCT name FROM genres;\n input: question: Show the names of countries that have more than one roller coaster. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n input: question: How many invoices correspond to each order id? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n input: question: Show writers who have published a book with price more than 4000000. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n Now please use valid SQLite to answer the following questions: Return the birth date of the poker player with the lowest earnings.",
    "Here are 5 examples including input and output:\n input: question: What are the different names of all the races in reverse alphabetical order? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races ORDER BY name DESC\n input: question: Find the count and code of the job has most employees. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1\n input: question: How many credits does course CIS-220 have, and what its description? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'\n input: question: Find the titles of items whose rating is higher than the average review rating of all items. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\n input: question: Find the name of physicians who are affiliated with Surgery or Psychiatry department. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n Now please use valid SQLite to answer the following questions: What is the money rank of the tallest poker player?",
    "Here are 5 examples including input and output:\n input: question: How many employees have a first name of Ludie? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n input: question: Please show the most common publication date. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"\n input: question: What are the phone and email for customer Harold? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"\n input: question: what is the name of the instructor who is in Statistics department and earns the lowest salary? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the money rank of the poker player with the greatest height.",
    "Here are 5 examples including input and output:\n input: question: How many available hotels are there in total? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT count(*) FROM HOTELS\n input: question: Find the captain rank that has some captains in both Cutter and Armed schooner classes. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'\n input: question: Which districts have at least two addresses? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT district FROM address GROUP BY district HAVING count(*)  >=  2\n input: question: What is the name of the body builder with the greatest body weight? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n input: question: Show the names of the buildings that have more than one company offices. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1\n Now please use valid SQLite to answer the following questions: What is the average earnings of poker players with height higher than 200?",
    "Here are 5 examples including input and output:\n input: question: Return the maximum enrollment across all schools. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT max(Enrollment) FROM university\n input: question: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n input: question: How many body builders are there? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT count(*) FROM body_builder\n input: question: Show the game name that has most number of hours played. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\n input: question: Find the number of routes operated by American Airlines. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\n Now please use valid SQLite to answer the following questions: Give average earnings of poker players who are taller than 200.",
    "Here are 5 examples including input and output:\n input: question: Show the name of drivers in descending order of age. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT name FROM driver ORDER BY age DESC\n input: question: What is the type description of the organization whose detail is listed as 'quo'? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'\n input: question: How many perpetrators are there? serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT count(*) FROM perpetrator\n input: question: Count the number of races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT count(*) FROM race\n input: question: List the all the distinct names of the products with the characteristic name 'warm'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n Now please use valid SQLite to answer the following questions: What are the names of poker players in descending order of earnings?",
    "Here are 5 examples including input and output:\n input: question: Find the name of the students who have more than one advisor? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n input: question: What is the name of every city that has at least 15 stations and how many stations does it have? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15\n input: question: Find the names of the items that did not receive any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n input: question: Find the name of the artist who made the album \"Balls to the Wall\". serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n input: question: List the names of people that are not employed by any company serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\n Now please use valid SQLite to answer the following questions: Return the names of poker players sorted by their earnings descending.",
    "Here are 5 examples including input and output:\n input: question: Find the titles of the papers the author \"Stephanie Weirich\" wrote. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n input: question: What are the official names of cities that have hosted more than one competition? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\n input: question: What are the titles of movies and books corresponding to companies incorporated in China? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n input: question: Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n input: question: Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"\n Now please use valid SQLite to answer the following questions: What are different nationalities of people and the corresponding number of people from each nation?",
    "Here are 5 examples including input and output:\n input: question: How many customers in total? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Customers;\n input: question: What are the name and population of each county? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name ,  Population FROM county\n input: question: What are the different ids and names of the stations that have had more than 12 bikes available? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n input: question: How many people in total can stay in the modern rooms of this inn? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n input: question: How many allergies are there? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(DISTINCT allergy) FROM Allergy_type\n Now please use valid SQLite to answer the following questions: How many people are there of each nationality?",
    "Here are 5 examples including input and output:\n input: question: Find the full name and id of the college that has the most baseball players. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n input: question: show the lowest low temperature and highest wind speed in miles per hour. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather\n input: question: What are all the the participant ids, type code and details? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants\n input: question: Please list the age and famous title of artists in descending order of age. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC\n input: question: How many patients do each physician take care of? List their names and number of patients they take care of. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n Now please use valid SQLite to answer the following questions: What is the most common nationality of people?",
    "Here are 5 examples including input and output:\n input: question: Show the distinct director of films with market estimation in the year of 1995. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\n input: question: How many universities have a campus fee higher than average? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n input: question: what are the event details of the services that have the type code 'Marriage'? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'\n input: question: For each zip code, how many times has the maximum wind speed reached 25 mph? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n input: question: What are the names of documents that have both one of the three most common types and one of three most common structures? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Give the nationality that is most common across all people.",
    "Here are 5 examples including input and output:\n input: question: What is the average fastest lap speed for the Monaco Grand Prix in 2008? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n input: question: For each classroom with at least 2 classes, how many classes are offered? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\n input: question: Find the SSN and name of scientists who are assigned to the project with the longest hours. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\n input: question: Find the ids of reviewers who didn't only give 4 star. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT rID FROM Rating WHERE stars != 4\n input: question: Find the number of female students (with F sex) living in Smith Hall serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n Now please use valid SQLite to answer the following questions: What are the nationalities that are shared by at least two people?",
    "Here are 5 examples including input and output:\n input: question: What details are there on the research staff? List the result in ascending alphabetical order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\n input: question: Please show different denominations and the corresponding number of schools. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination\n input: question: Find the state, account type, and credit score of the customer whose number of loan is 0. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n input: question: What is first names of the top 5 staff who have handled the greatest number of complaints? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5\n input: question: Who is the youngest male? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n Now please use valid SQLite to answer the following questions: Return the nationalities for which there are two or more people.",
    "Here are 5 examples including input and output:\n input: question: Show the types of schools that have two schools. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n input: question: Find names and times of trains that run through stations for the local authority Chiltern. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"\n input: question: Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"\n input: question: Show all the Store_Name of drama workshop groups. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Store_Name FROM Drama_Workshop_Groups\n input: question: What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\n Now please use valid SQLite to answer the following questions: List the names and birth dates of people in ascending alphabetical order of name.",
    "Here are 5 examples including input and output:\n input: question: List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\n input: question: What are the distinct types of mills that are built by American or Canadian architects? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\n input: question: What are the unique block codes that have available rooms? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0\n input: question: How many accounts do we have? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Accounts\n input: question: What is the maximum and minimum resolution of all songs that are approximately 3 minutes long? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\n Now please use valid SQLite to answer the following questions: What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "Here are 5 examples including input and output:\n input: question: Find the top 3 artists who have the largest number of songs works whose language is Bangla. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n input: question: Return all the information for each election record. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT * FROM election\n input: question: What are all the company names that have a book published by Alyson? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'\n input: question: Find the number of scientists who are not assigned to any project. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n input: question: Show the names and ids of tourist attractions that are visited at most once. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n Now please use valid SQLite to answer the following questions: Show names of people whose nationality is not \"Russia\".",
    "Here are 5 examples including input and output:\n input: question: List the school color of the school that has the largest enrollment. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n input: question: How many accounts does the customer with first name Art and last name Turcotte have? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n input: question: Show names of technicians in ascending order of quality rank of the machine they are assigned. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\n input: question: Show the names of products and the number of events they are in, sorted by the number of events in descending order. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC\n input: question: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'\n Now please use valid SQLite to answer the following questions: What are the names of people who are not from Russia?",
    "Here are 5 examples including input and output:\n input: question: Find the average number of customers cross all banks. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(no_of_customers) FROM bank\n input: question: What are the id of students who registered courses or attended courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n input: question: Which marketing region has the most drama workshop groups? Give me the region code. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1\n input: question: Please show the most common type of ships. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order). serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\n Now please use valid SQLite to answer the following questions: List the names of people that are not poker players.",
    "Here are 5 examples including input and output:\n input: question: Give me the names and prices of furnitures which some companies are manufacturing. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID\n input: question: What are the names of the races held after 2017 in Spain? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\n input: question: List the branch name and city without any registered members. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)\n input: question: What is the total checking balance in all accounts? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT sum(balance) FROM checking\n input: question: How many accelerators are not compatible with the browsers listed ? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );\n Now please use valid SQLite to answer the following questions: What are the names of people who do not play poker?",
    "Here are 5 examples including input and output:\n input: question: Find the average credit score of the customers who do not have any loan. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n input: question: Count the number of different ranks of captain. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(DISTINCT rank) FROM captain\n input: question: Find the team that attended the least number of home games in 1980. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n input: question: Show all titles and their instructors' names for courses in 2008, in alphabetical order by title. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\n input: question: Find the number of male (sex is 'M') students who have some food type allery. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n Now please use valid SQLite to answer the following questions: How many distinct nationalities are there?",
    "Here are 5 examples including input and output:\n input: question: How many video games exist? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(*) FROM Video_games\n input: question: What is the number of ships? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT count(*) FROM ship\n input: question: How many students exist? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student\n input: question: show all train numbers and names ordered by their time from early to late. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT train_number ,  name FROM train ORDER BY TIME\n input: question: How many schools are in the basketball match? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(DISTINCT school_id) FROM basketball_match\n Now please use valid SQLite to answer the following questions: Count the number of different nationalities.",
    "Here are 5 examples including input and output:\n input: question: Find the first name and major of the students who are not allegry to soy. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n input: question: Compute the total order quantities of the product \"photo\". serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n input: question: What is the average fee on a CSU campus in 2005? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\n input: question: What are the names of body builders? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n input: question: How many wines are produced at Robert Biale winery? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n Now please use valid SQLite to answer the following questions: How many states are there?",
    "Here are 5 examples including input and output:\n input: question: Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\n input: question: What are the name of courses that have at least five enrollments? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5\n input: question: What are the ids and durations of the trips with the top 3 durations? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n input: question: How many rooms have not had any reservation yet? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)\n input: question: Show different occupations along with the number of players in each occupation. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation\n Now please use valid SQLite to answer the following questions: List the contestant numbers and names, ordered by contestant name descending.",
    "Here are 5 examples including input and output:\n input: question: Find the number of students whose age is older than the average age for each gender. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n input: question: In which buildings are there at least ten professors? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10\n input: question: Find the distinct names of all wines that have prices higher than some wines from John Anthony winery. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")\n input: question: Find the total population of the top 3 districts with the largest area. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n input: question: For each origin, how many flights came from there? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin ,  count(*) FROM Flight GROUP BY origin\n Now please use valid SQLite to answer the following questions: List the vote ids, phone numbers and states of all votes.",
    "Here are 5 examples including input and output:\n input: question: What are the average, maximum, and minimum number of floors for all buildings? serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building\n input: question: What are the locations that have gas stations owned by a company with a market value greater than 100? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100\n input: question: Find the names of all directors whose movies are rated by Sarah Martinez. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'\n input: question: Count the number of programs broadcast for each time section of a day. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\n input: question: What are the names of parties and their respective regions? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id\n Now please use valid SQLite to answer the following questions: What are the maximum and minimum values of area codes?",
    "Here are 5 examples including input and output:\n input: question: What are the countries of markets and their corresponding years of market estimation? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\n input: question: Find the average checking balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT avg(balance) FROM checking\n input: question: Show the height of the mountain climbed by the climber with the maximum points. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n input: question: Count the number of classrooms in Lamberton. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) FROM classroom WHERE building  =  'Lamberton'\n input: question: How many Bangladeshi artists are listed? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n Now please use valid SQLite to answer the following questions: What is last date created of votes from the state 'CA'?",
    "Here are 5 examples including input and output:\n input: question: Find the name and age of the person who is a friend of Dan or Alice. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'\n input: question: What are the SSN and names of scientists working on the project with the most hours? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\n input: question: In which year were most of ships built? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of perpetrators in country \"China\" or \"Japan\"? serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n input: question: Who is the youngest employee in the company? List employee's first and last name. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What are the names of the contestants whose names are not 'Jessie Alloway'",
    "Here are 5 examples including input and output:\n input: question: Show the name of track with most number of races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the name of each user and number of tweets tweeted by each of them. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid\n input: question: List each donator name and the amount of endowment in descending order of the amount of endowment. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\n input: question: List the names of counties in descending order of population. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Name FROM county_public_safety ORDER BY Population DESC\n input: question: Count the products that have the color description \"white\" or have the characteristic name \"hot\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\n Now please use valid SQLite to answer the following questions: What are the distinct states and create time of all votes?",
    "Here are 5 examples including input and output:\n input: question: What are the birthdays of people in ascending order of height? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT Birth_Date FROM People ORDER BY Height ASC\n input: question: Which model has the least amount of RAM? List the model name and the amount of RAM. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;\n input: question: Return the average enrollment of universities founded before 1850. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT avg(enrollment) FROM university WHERE founded  <  1850\n input: question: Find the names of stadiums which have never had any event. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)\n input: question: Show the season, the player, and the name of the team that players belong to. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id\n Now please use valid SQLite to answer the following questions: What are the contestant numbers and names of the contestants who had at least two votes?",
    "Here are 5 examples including input and output:\n input: question: Find the names of customers who never ordered product Latte. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\n input: question: Show the names of employees with role name Editor. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"\n input: question: List all media types. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT name FROM media_types;\n input: question: Show all the locations with at least two cinemas with capacity above 300. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n input: question: Count the number of documents that do not have expenses. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )\n Now please use valid SQLite to answer the following questions: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "Here are 5 examples including input and output:\n input: question: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'\n input: question: What are the the songs in volumes, listed in ascending order? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume ORDER BY Song\n input: question: What are the last names of students studying major 50? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT LName FROM STUDENT WHERE Major  =  50\n input: question: Count the number of schools. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT count(*) FROM school\n input: question: List all of the ids for left-footed players with a height between 180cm and 190cm. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"\n Now please use valid SQLite to answer the following questions: What are the number of votes from state 'NY' or 'CA'?",
    "Here are 5 examples including input and output:\n input: question: Find the id and color description of the products with at least 2 characteristics. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n input: question: Show the booking status code and the corresponding number of bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\n input: question: Which major has the most students? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1\n input: question: Who is the author of the paper titled \"Binders Unbound\"? Give me the last name. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"\n input: question: What are the ids and names of the architects who built at least 3 bridges ? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n Now please use valid SQLite to answer the following questions: How many contestants did not get voted?",
    "Here are 5 examples including input and output:\n input: question: What are the names of banks in the state of New York? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT bname FROM bank WHERE state  =  'New York'\n input: question: Find the average unit price of jazz tracks. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n input: question: What is the average age for a male in each job? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n input: question: Return the categories of music festivals that have the result \"Awarded\". serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"\n input: question: Find the ship type that are used by both ships with Panama and Malta flags. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'\n Now please use valid SQLite to answer the following questions: What is the area code in which the most voters voted?",
    "Here are 5 examples including input and output:\n input: question: What are the types of competition and number of competitions for that type? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\n input: question: Find the name of the instructors who taught C Programming course before. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n input: question: How many unique labels are there for albums? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT label) FROM albums\n input: question: How many premises are there? serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT count(*) FROM premises\n input: question: How many students are there? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student\n Now please use valid SQLite to answer the following questions: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "Here are 5 examples including input and output:\n input: question: How many albums has Billy Cobam released? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n input: question: Find the female friends of Alice. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'\n input: question: Show the cinema name and location for cinemas with capacity above average. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)\n input: question: Return the full name of the customer who made the first rental. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1\n input: question: How many sports do we have? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT sportname) FROM Sportsinfo\n Now please use valid SQLite to answer the following questions: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "Here are 5 examples including input and output:\n input: question: What are the title and maximum price of each film? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n input: question: How many regions are affected? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT count(DISTINCT region_id) FROM affected_region\n input: question: Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\". serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"\n input: question: Find the order id and customer id associated with the oldest order. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n input: question: What are the times of elimination for wrestlers with over 50 days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\n Now please use valid SQLite to answer the following questions: Return the names of the contestants whose names contain the substring 'Al' .",
    "Here are 5 examples including input and output:\n input: question: List the names of climbers in descending order of points. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM climber ORDER BY Points DESC\n input: question: What are the log id and entry description of each problem? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id ,  log_entry_description FROM problem_log\n input: question: What is the zip code the county named \"Howard\" is located in? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\n input: question: For each company, return the company name and the name of the building its office is located in. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id\n input: question: what are the order id and customer id of the oldest order? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of all the countries that became independent after 1950?",
    "Here are 5 examples including input and output:\n input: question: What is the average unit price of tracks that belong to Jazz genre? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n input: question: Find the name of customer who has the highest amount of loans. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n input: question: Show the names of journalists from \"England\" or \"Wales\". serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"\n input: question: Return the claim start date for the claims whose claimed amount is no more than the average serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n input: question: What is the name corresponding to the accoung with the lowest sum of checking and savings balances? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\n Now please use valid SQLite to answer the following questions: Give the names of the nations that were founded after 1950.",
    "Here are 5 examples including input and output:\n input: question: How many submissions are there? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT count(*) FROM submission\n input: question: Find the distinct names of wines produced before the year of 2000 or after the year of 2010. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010\n input: question: How many distinct colleges are associated with players from the team with name \"Columbus Crew\". serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n input: question: Find the name and budget of departments whose budgets are more than the average budget. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n input: question: What are all the distinct last names of all the engineers? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT DISTINCT last_name FROM Maintenance_Engineers\n Now please use valid SQLite to answer the following questions: How many countries have a republic as their form of government?",
    "Here are 5 examples including input and output:\n input: question: What are the different allergy types? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT allergytype FROM Allergy_type\n input: question: Return the positions of players on the team Ryley Goldner. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n input: question: Which skill is used in fixing the most number of faults? List the skill id and description. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show the most common country across members. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the names of the pilots that have not won any matches in Australia? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n Now please use valid SQLite to answer the following questions: How many countries have governments that are republics?",
    "Here are 5 examples including input and output:\n input: question: Which students have professors as their advisors? Find their student ids. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"\n input: question: List the name of all rooms sorted by their prices. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms ORDER BY basePrice;\n input: question: List the states which have between 2 to 4 staffs living there. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;\n input: question: Find the team of each player and sort them in ascending alphabetical order. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Team FROM player ORDER BY Team ASC\n input: question: What is the largest payment amount? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the total surface area of the countries in the Caribbean region?",
    "Here are 5 examples including input and output:\n input: question: Show the working years of managers in descending order of their level. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC\n input: question: How many hours do the players train on average? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(HS) FROM Player\n input: question: Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"\n input: question: Find the number of distinct bed types available in this inn. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(DISTINCT bedType) FROM Rooms;\n input: question: List the names of all music genres. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Name FROM GENRE\n Now please use valid SQLite to answer the following questions: How much surface area do the countires in the Carribean cover together?",
    "Here are 5 examples including input and output:\n input: question: List the names of all the distinct customers who bought a keyboard. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n input: question: What is the number of graduates in \"San Francisco State University\" in year 2004? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"\n input: question: What are the names of perpetrators? serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\n input: question: How many different positions of players are there? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT count(DISTINCT POSITION) FROM player\n input: question: What address was the document with id 4 mailed to? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;\n Now please use valid SQLite to answer the following questions: Which continent is Anguilla in?",
    "Here are 5 examples including input and output:\n input: question: What are the different positions of players from UCLA or Duke colleges? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n input: question: How many tracks are in each genre? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\n input: question: How many project members were leaders or started working before '1989-04-24 23:51:54'? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'\n input: question: List all people names in the order of their date of birth from old to young. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people ORDER BY date_of_birth\n input: question: Count the number of wrestlers. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT count(*) FROM wrestler\n Now please use valid SQLite to answer the following questions: What is the continent name which Anguilla belongs to?",
    "Here are 5 examples including input and output:\n input: question: How many stations are in Mountain View? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n input: question: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT classroom ,  grade FROM list\n input: question: Find the distinct Advisor of students who have treasurer votes in the spring election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"\n input: question: What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1\n input: question: What are the states, account types, and credit scores for customers who have 0 loans? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n Now please use valid SQLite to answer the following questions: Which region is the city Kabul located in?",
    "Here are 5 examples including input and output:\n input: question: Show all allergies and their types. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergy ,  allergytype FROM Allergy_type\n input: question: What is the name of the youngest captain? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain ORDER BY age LIMIT 1\n input: question: What is the name and opening year for the branch that registered the most members in 2016? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the titles of albums by the artist \"AC/DC\"? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n input: question: What is the placement date of the order whose invoice number is 10? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10\n Now please use valid SQLite to answer the following questions: What region is Kabul in?",
    "Here are 5 examples including input and output:\n input: question: How many students does each advisor have? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT advisor ,  count(*) FROM Student GROUP BY advisor\n input: question: Find the highest rank of all reviews. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT min(rank) FROM review\n input: question: Show all role codes and the number of employees in each role. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code ,  count(*) FROM Employees GROUP BY role_code\n input: question: What are the names of all genres in alphabetical order, combined with its ratings? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT g_name ,  rating FROM genre ORDER BY g_name\n input: question: What is the weight of the shortest person? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Weight FROM people ORDER BY Height ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which language is the most popular in Aruba?",
    "Here are 5 examples including input and output:\n input: question: What is the most popular full name of the actors? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\n input: question: For each position, what is the average number of points for players in that position? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION\n input: question: Show codes and fates of missions, and names of ships involved. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n input: question: What are the names of all songs that are in mp3 format and have a resolution lower than 1000? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\n input: question: What is the name and salary of all employees in order of salary? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  salary FROM Employee ORDER BY salary\n Now please use valid SQLite to answer the following questions: What language is predominantly spoken in Aruba?",
    "Here are 5 examples including input and output:\n input: question: Find the name of medication used on the patient who stays in room 111? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111\n input: question: Show name and distance for all aircrafts. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft\n input: question: What are the guest first name, start date, and end date of each apartment booking? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id\n input: question: What is the course title of the prerequisite of course Mobile Computing? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n input: question: Show publishers with a book published in 1989 and a book in 1990. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n Now please use valid SQLite to answer the following questions: What are the population and life expectancies in Brazil?",
    "Here are 5 examples including input and output:\n input: question: What are id and name of the products whose price is lower than 600 or higher than 900? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\n input: question: How many exhibition are there in year 2005 or after? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n input: question: What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5\n input: question: Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC\n input: question: What are the years of film market estimation for the market of Japan, ordered by year descending? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC\n Now please use valid SQLite to answer the following questions: Give me Brazil’s population and life expectancies.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the clubs ordered in descending alphabetical order? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT name FROM club ORDER BY name DESC\n input: question: Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC\n input: question: For each state, find the total account balance of customers whose credit score is above 100. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state\n input: question: What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'\n input: question: What are the names of the artists that are from the UK and sang songs in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n Now please use valid SQLite to answer the following questions: What are the region and population of Angola?",
    "Here are 5 examples including input and output:\n input: question: Find the captain rank that has no captain in Third-rate ship of the line class. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'\n input: question: For each distinct product name, show its average product price. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\n input: question: Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841. serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)\n input: question: List all employees in the circulation history of the document with id 1. List the employee's name. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;\n input: question: What is the name of the activity with the most students? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What region does Angola belong to and what is its population?",
    "Here are 5 examples including input and output:\n input: question: What are the different locations of the school with the code BUS? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\n input: question: Find the total claimed amount of all the claims. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT sum(Amount_Claimed) FROM Claims\n input: question: Count the number of films. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT count(*) FROM film\n input: question: Show the location with most number of train stations. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1\n input: question: Find the name, type, and flag of the ship that is built in the most recent year. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the average expected life expectancy for countries in the region of Central Africa?",
    "Here are 5 examples including input and output:\n input: question: How many cinema do we have? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM cinema\n input: question: How many states that have some college students playing in the mid position but not in the goalie position. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n input: question: What is the unit price of the tune \"Fast As a Shark\"? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";\n input: question: Find the first name and office of the professor who is in the history department and has a Ph.D. degree. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'\n input: question: What are the names of every person who has a friend over 40 and under 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n Now please use valid SQLite to answer the following questions: How long is the people’s average life expectancy in Central Africa?",
    "Here are 5 examples including input and output:\n input: question: which country did participated in the most number of Tournament competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: Show all cities where at least one customer lives in but no performer lives in. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n input: question: What is the maximum stars and year for the most recent movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\n input: question: What are the birth dates of employees living in Edmonton? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"\n input: question: What is the location of the festival with the largest number of audience? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the name of country that has the shortest life expectancy in Asia?",
    "Here are 5 examples including input and output:\n input: question: Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10\n input: question: Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\". serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\n input: question: Find the name of rooms booked by some customers whose first name contains ROY. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'\n input: question: get the details of employees who manage a department. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id\n input: question: What is the average enrollment of schools? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT avg(Enrollment) FROM school\n Now please use valid SQLite to answer the following questions: Give the name of the country in Asia with the lowest life expectancy.",
    "Here are 5 examples including input and output:\n input: question: What is the date of the performance with the highest number of attendees? serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1\n input: question: How many distinct courses are enrolled in by students? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(course_id) FROM Student_Course_Enrolment\n input: question: What are the dates and locations of performances? serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT Date ,  LOCATION FROM performance\n input: question: Where is the club \"Pen and Paper Gaming\" located? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"\n input: question: Show the name and the nationality of the oldest host. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the total population and maximum GNP in Asia?",
    "Here are 5 examples including input and output:\n input: question: Find the names and number of works of all artists who have at least one English songs. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1\n input: question: Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n input: question: How many gymnasts are there? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT count(*) FROM gymnast\n input: question: What are the email addresses of teachers whose address has zip code \"918\"? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"\n input: question: What are the completion dates of all the tests that have result \"Fail\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"\n Now please use valid SQLite to answer the following questions: How many people live in Asia, and what is the largest GNP among them?",
    "Here are 5 examples including input and output:\n input: question: Find the name of account that has the lowest total checking and saving balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\n input: question: What are the names of colleges that have two or more players, listed in descending alphabetical order? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC\n input: question: For each policy type, return its type code and its count in the record. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\n input: question: Find all the order items whose product id is 11. What are the order item ids? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_item_id FROM order_items WHERE product_id = 11\n input: question: For each country and airline name, how many routes are there? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n Now please use valid SQLite to answer the following questions: What is the average life expectancy in African countries that are republics?",
    "Here are 5 examples including input and output:\n input: question: Find the county where produces the most number of wines with score higher than 90. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1\n input: question: What are all role codes? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT role_code FROM ROLES;\n input: question: What is the first and last name of all the German drivers? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"\n input: question: What are the id and first name of the student whose addresses have the highest average monthly rental? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n input: question: For each grade 0 classroom, return the classroom number and the count of students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\n Now please use valid SQLite to answer the following questions: Give the average life expectancy for countries in Africa which are republics?",
    "Here are 5 examples including input and output:\n input: question: What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\n input: question: What are the first and last name of all biology professors? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"\n input: question: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n input: question: List the names of companies by ascending number of sales. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Name FROM company ORDER BY Sales_in_Billion ASC\n input: question: What is the name and distance for aircraft with id 12? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft WHERE aid  =  12\n Now please use valid SQLite to answer the following questions: What is the total surface area of the continents Asia and Europe?",
    "Here are 5 examples including input and output:\n input: question: What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\n input: question: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\n input: question: Give me the average and minimum price (in Euro) of the products. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n input: question: What is the first name of the author with last name \"Ueno\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname FROM authors WHERE lname  =  \"Ueno\"\n input: question: Please show the categories of the music festivals and the count. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category\n Now please use valid SQLite to answer the following questions: Give the total surface area covered by countries in Asia or Europe.",
    "Here are 5 examples including input and output:\n input: question: What are the memories and carriers of phones? serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Memory_in_G ,  Carrier FROM phone\n input: question: How many wrestlers are there? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT count(*) FROM wrestler\n input: question: How many lessons did the customer with the first name Ray take? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"\n input: question: Which nurses are in charge of patients undergoing treatments? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\n input: question: display the average salary of employees for each department who gets a commission percentage. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n Now please use valid SQLite to answer the following questions: How many people live in Gelderland district?",
    "Here are 5 examples including input and output:\n input: question: What is the school code of the accounting department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"\n input: question: What are the names of the directors who made exactly one movie excluding director NULL? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1\n input: question: What is the total amount of settlement made for all the settlements? serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT sum(Amount_Settled) FROM Settlements\n input: question: For each Orange county campus, report the number of degrees granted after 2000. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus\n input: question: Find the total hours of all projects. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT sum(hours) FROM projects\n Now please use valid SQLite to answer the following questions: What is the total population of Gelderland district?",
    "Here are 5 examples including input and output:\n input: question: Count the number of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT count(*) FROM entrepreneur\n input: question: Give the order ids for all orders, as well as the total product quantity in each. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\n input: question: Find the name and age of all males in order of their age. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE gender  =  'male' ORDER BY age\n input: question: Show all party names and their region names. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id\n input: question: What are the names of storms that both affected two or more regions and affected a total of 10 or more cities? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10\n Now please use valid SQLite to answer the following questions: What is the average GNP and total population in all nations whose government is US territory?",
    "Here are 5 examples including input and output:\n input: question: What are the star rating descriptions of the hotels with price above 10000? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\n input: question: Show the statuses of roller coasters longer than 3300 or higher than 100. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100\n input: question: Wat is the tax source system code and master customer id of the taxes related to each parking fine id? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id\n input: question: Please show the songs that have result \"nominated\" at music festivals. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"\n input: question: List the id of students who registered course statistics in the order of registration date. serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date\n Now please use valid SQLite to answer the following questions: Give the mean GNP and total population of nations which are considered US territory.",
    "Here are 5 examples including input and output:\n input: question: What are the prices of products that have never gotten a complaint? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)\n input: question: Find the details for all chip models. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT * FROM chip_model\n input: question: When did the staff member with first name as Janessa and last name as Sawayn join the company? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n input: question: Show names of actors in descending order of the year their musical is awarded. serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n input: question: Which services type had both successful and failure event details? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'\n Now please use valid SQLite to answer the following questions: How many unique languages are spoken in the world?",
    "Here are 5 examples including input and output:\n input: question: Return the hispanic percentage for cities in which the black percentage is greater than 10. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Hispanic FROM city WHERE Black  >  10\n input: question: How many instructors teach a course in the Spring of 2010? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: What is the average balance in checking accounts? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT avg(balance) FROM checking\n input: question: Compute the average number of hosts for parties. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT avg(Number_of_hosts) FROM party\n input: question: Find the id of the order made most recently. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the number of distinct languages used around the world?",
    "Here are 5 examples including input and output:\n input: question: What are the different product names? What is the average product price for each of them? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name\n input: question: How many aircrafts have distance between 1000 and 5000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000\n input: question: What are the names of players who have the best dribbling? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)\n input: question: What are the different names and ages of every friend of either Dan or alice? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'\n input: question: Find the country that has the most stadiums. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many type of governments are in Africa?",
    "Here are 5 examples including input and output:\n input: question: Show names of companies and that of employees in descending order of number of years working for that employee. serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working\n input: question: What are the average, maximum and total revenues of all companies? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers\n input: question: What is the campus fee in the year 2000 for San Jose State University? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000\n input: question: Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n input: question: What is the average, maximum, and minimum for the number of hours spent training? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player\n Now please use valid SQLite to answer the following questions: How many different forms of governments are there in Africa?",
    "Here are 5 examples including input and output:\n input: question: Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000 serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001\n input: question: What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"\n input: question: Which state has the greatest total number of bank customers? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\n input: question: Find the name and revenue of the company that earns the highest revenue in each city. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\n input: question: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n Now please use valid SQLite to answer the following questions: What is the total number of languages used in Aruba?",
    "Here are 5 examples including input and output:\n input: question: Show the name of storms which don't have affected region in record. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\n input: question: List the id, genre and artist name of English songs ordered by rating. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n input: question: What are the names of all the video games and their types in alphabetical order? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname ,  gtype FROM Video_games ORDER BY gname\n input: question: What is the code of the course which the student whose last name is Smithson took? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'\n input: question: display those employees who joined after 7th September, 1987. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE hire_date  >  '1987-09-07'\n Now please use valid SQLite to answer the following questions: How many languages are spoken in Aruba?",
    "Here are 5 examples including input and output:\n input: question: Find the student first and last names and grade points of all enrollments. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID\n input: question: Find the number of routes with destination airports in Italy. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n input: question: What is the name and country of origin for each artist who has released a song with a resolution higher than 900? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\n input: question: What are the first names of all the students? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT fname FROM student\n input: question: How many books fall into each category? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT category ,  count(*) FROM book_club GROUP BY category\n Now please use valid SQLite to answer the following questions: How many official languages does Afghanistan have?",
    "Here are 5 examples including input and output:\n input: question: Find the id and name of the most expensive base price room. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;\n input: question: What are the total points of gymnasts, ordered by their floor exercise points descending? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n input: question: How many products are in the 'Spices' category and have a typical price of over 1000? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000\n input: question: What is the product with the highest height? Give me the catalog entry name. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1\n input: question: List the names of products that are not in any event. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\n Now please use valid SQLite to answer the following questions: How many official languages are spoken in Afghanistan?",
    "Here are 5 examples including input and output:\n input: question: Show the theme for exhibitions with both records of an attendance below 100 and above 500. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500\n input: question: What is the type of the document whose description starts with the word 'Initial'? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\n input: question: What is the name of the shop that has the greatest quantity of devices in stock? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1\n input: question: Find the first names and last names of teachers in alphabetical order of last name. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT first_name ,  last_name FROM Teachers ORDER BY last_name\n input: question: Which studios have an average gross of over 4500000? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000\n Now please use valid SQLite to answer the following questions: What is name of the country that speaks the largest number of languages?",
    "Here are 5 examples including input and output:\n input: question: Find the name of dorms that can accommodate more than 300 students. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE student_capacity  >  300\n input: question: Please show different types of artworks with the corresponding number of artworks of each type. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE\n input: question: Among the procedures that cost more than 1000, which were not specialized in by physician John Wen? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: Find the number of reviews. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM review\n input: question: find the names of programs whose origin is not in Beijing. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program WHERE origin != 'Beijing'\n Now please use valid SQLite to answer the following questions: Give the name of the nation that uses the greatest amount of languages.",
    "Here are 5 examples including input and output:\n input: question: How many addresses are in the district of California? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM address WHERE district  =  'California'\n input: question: Count the number of characteristics. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM CHARACTERISTICS\n input: question: How many lessons have been cancelled? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";\n input: question: Find the phone number of performer \"Ashley\". serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n input: question: What are the ids of all female students who play football? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n Now please use valid SQLite to answer the following questions: Which continent has the most diverse languages?",
    "Here are 5 examples including input and output:\n input: question: Find the number of distinct room types available. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(DISTINCT roomtype) FROM room\n input: question: What is average and maximum salary of all employees. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(salary) ,  max(salary) FROM Employee\n input: question: What is the id of the longest song? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files ORDER BY duration DESC LIMIT 1\n input: question: What are the maximum and minimum number of silver medals for all the clubs? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT max(Silver) ,  min(Silver) FROM club_rank\n input: question: What are the papers published under the institution \"Indiana University\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n Now please use valid SQLite to answer the following questions: Which continent speaks the most languages?",
    "Here are 5 examples including input and output:\n input: question: How many different types of transactions are there? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(DISTINCT transaction_type) FROM Financial_Transactions\n input: question: What are the cities that have more than 2 airports sorted by number of airports? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\n input: question: Give the different reigns of wrestlers who are not located in Tokyo, Japan. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n input: question: What is the mail date of the document with id 7? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;\n input: question: What is the name and date of the race that occurred most recently? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many countries speak both English and Dutch?",
    "Here are 5 examples including input and output:\n input: question: List the ids of the problems from the product \"voluptatem\" that are reported after 1995? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"\n input: question: How many artworks are there? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT count(*) FROM artwork\n input: question: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n input: question: What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"\n input: question: What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\n Now please use valid SQLite to answer the following questions: What is the number of nations that use English and Dutch?",
    "Here are 5 examples including input and output:\n input: question: Which schools do not have any player? Give me the school locations. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\n input: question: Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\" serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"\n input: question: what is the name and position of the head whose department has least number of employees? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n input: question: What are names of customers who never ordered product Latte. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'\n input: question: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n Now please use valid SQLite to answer the following questions: What are the names of nations speak both English and French?",
    "Here are 5 examples including input and output:\n input: question: What is the most common mill type, and how many are there? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n input: question: Find the distinct years when the governor was named \"Eliot Spitzer\". serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"\n input: question: Find the classrooms in which grade 4 is studying. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT classroom FROM list WHERE grade  =  4\n input: question: What are the average and minimum age of captains in different class? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS\n input: question: What are the countries that participated in both friendly and tournament type competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'\n Now please use valid SQLite to answer the following questions: Give the names of nations that speak both English and French.",
    "Here are 5 examples including input and output:\n input: question: What are the amenities in alphabetical order that Anonymous Donor Hall has? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name\n input: question: How many accounts are there in total? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) FROM accounts\n input: question: How many movie ratings have more than 3 stars? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT count(*) FROM Rating WHERE stars  >  3\n input: question: What is the address for the customer with id 10? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10\n input: question: Find the names of all modern rooms with a base price below $160 and two beds. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';\n Now please use valid SQLite to answer the following questions: What are the names of nations where both English and French are official languages?",
    "Here are 5 examples including input and output:\n input: question: What are the names of storms that did not affect any regions? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\n input: question: What are the ages of the gymnasts, ordered descending by their total points? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\n input: question: What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\n input: question: Find the name of scientists who are assigned to some project. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n input: question: Count the number of different complaint type codes. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(DISTINCT complaint_type_code) FROM complaints\n Now please use valid SQLite to answer the following questions: Give the names of countries with English and French as official languages.",
    "Here are 5 examples including input and output:\n input: question: What is the county that produces the most wines scoring higher than 90? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1\n input: question: Count the number of storms in which at least 1 person died. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT count(*) FROM storm WHERE Number_Deaths  >  0\n input: question: What is the name and description for document type code RV? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"\n input: question: Which friend of Zach has the longest-lasting friendship? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n input: question: What are the names of wines made from red grapes? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"\n Now please use valid SQLite to answer the following questions: What is the number of distinct continents where Chinese is spoken?",
    "Here are 5 examples including input and output:\n input: question: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n input: question: List phone number and email address of customer with more than 2000 outstanding balance. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;\n input: question: Find the names of all instructors who have taught some course and the course_id. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID\n input: question: What campuses opened before 1800? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE YEAR  <  1800\n input: question: Show all artist names and the number of exhibitions for each artist. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id\n Now please use valid SQLite to answer the following questions: How many continents speak Chinese?",
    "Here are 5 examples including input and output:\n input: question: List in alphabetic order all different amenities. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name\n input: question: Return the different classes of races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT DISTINCT CLASS FROM race\n input: question: Find the code of the document type \"Paper\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n input: question: What are the positions of both players that have more than 20 20 points and less than 10 points? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\n input: question: Find the id and location of circuits that belong to France or Belgium? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n Now please use valid SQLite to answer the following questions: What are the regions that use English or Dutch?",
    "Here are 5 examples including input and output:\n input: question: Show the school name and type for schools without a school bus. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\n input: question: Find the branch name of the bank that has the most number of customers. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1\n input: question: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n input: question: How many students are affected by cat allergies? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n input: question: Show the years, book titles, and publishers for all books, in descending order by year. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\n Now please use valid SQLite to answer the following questions: Which regions speak Dutch or English?",
    "Here are 5 examples including input and output:\n input: question: Which problem id and log id are assigned to the staff named Rylan Homenick? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\n input: question: What are the average profits of companies? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT avg(Profits_billion) FROM Companies\n input: question: List all the characteristic names and data types of product \"cumin\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"\n input: question: What are the names of the courses that have exactly 1 student enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n input: question: What are the names of customers with accounts, and how many checking accounts do each of them have? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n Now please use valid SQLite to answer the following questions: What are the countries where either English or Dutch is the official language ?",
    "Here are 5 examples including input and output:\n input: question: Show ids, customer ids, card type codes, card numbers for all cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\n input: question: What is the total rating of channel for each channel owner? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\n input: question: What is the name of the product with the color description 'yellow'? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'\n input: question: How many eliminations did each team have? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team\n input: question: What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"\n Now please use valid SQLite to answer the following questions: Which countries have either English or Dutch as an official language?",
    "Here are 5 examples including input and output:\n input: question: what is the name of the country that participated in the most tournament competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: What city is the headquarter of the store Blackville? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n input: question: How many artists do not have any album? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n input: question: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\n input: question: Show the total number of rooms of the apartments in the building with short name \"Columbus Square\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"\n Now please use valid SQLite to answer the following questions: Which language is the most popular on the Asian continent?",
    "Here are 5 examples including input and output:\n input: question: How many milliseconds long is Fast As a Shark? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";\n input: question: List all the event names by year from the most recent to the oldest. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT name FROM event ORDER BY YEAR DESC\n input: question: What are the details for all projects that did not hire any staff in a research role? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n input: question: Find the id and number of shops for the company that produces the most expensive furniture. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1\n input: question: What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000\n Now please use valid SQLite to answer the following questions: What is the language that is used by the largest number of Asian nations?",
    "Here are 5 examples including input and output:\n input: question: Find the first names and last names of the authors whose institution affiliation is \"Google\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n input: question: How many papers are published by the institution \"Tokohu University\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"\n input: question: Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3\n input: question: What is the average base price of rooms, for each bed type? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n input: question: What are the names of the customers who have made two or less orders? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\n Now please use valid SQLite to answer the following questions: Which languages are spoken by only one country in republic governments?",
    "Here are 5 examples including input and output:\n input: question: Which artist has the most albums? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n input: question: List the research staff details, and order in ascending order. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\n input: question: Find the names of states that have some college students playing in goalie and mid positions. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\n input: question: How many markets have number of cities smaller than 300? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT count(*) FROM market WHERE Number_cities  <  300\n input: question: Show all video games with type Collectible card game. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\n Now please use valid SQLite to answer the following questions: What languages are only used by a single country with a republic government?",
    "Here are 5 examples including input and output:\n input: question: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n input: question: What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC\n input: question: What is the number of colleges with a student population greater than 15000? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM College WHERE enr  >  15000\n input: question: What are the distinct secretary votes in the fall election cycle? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\n input: question: Find the number of patients' prescriptions physician John Dorian made. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"\n Now please use valid SQLite to answer the following questions: Find the city with the largest population that uses English.",
    "Here are 5 examples including input and output:\n input: question: Give the average quantity of stocks. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT avg(Quantity) FROM stock\n input: question: How many students are attending English courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n input: question: What are the distinct ages of the heads who are acting? serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'\n input: question: Find the number of items that did not receive any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n input: question: What is the minimum salary in each department? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n Now please use valid SQLite to answer the following questions: What is the most populace city that speaks English?",
    "Here are 5 examples including input and output:\n input: question: How many assessment notes are there in total? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(*) FROM ASSESSMENT_NOTES\n input: question: What is the name of tracks whose genre is Rock? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n input: question: What are the codes of the locations with at least three documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\n input: question: Return the different countries for artists. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT DISTINCT country FROM artist\n input: question: what are the names and classes of the ships that do not have any captain yet? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\n Now please use valid SQLite to answer the following questions: Find the name, population and expected life length of asian country with the largest area?",
    "Here are 5 examples including input and output:\n input: question: Find the total balance across checking accounts. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT sum(balance) FROM checking\n input: question: Find the first name of the band mate that has performed in most songs. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1\n input: question: What is the id for the employee called Ebba? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"\n input: question: How many total pounds were purchased in the year 2018 at all London branches? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018\n input: question: What is average age of male for different job title? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n Now please use valid SQLite to answer the following questions: What are the name, population, and life expectancy of the largest Asian country by land?",
    "Here are 5 examples including input and output:\n input: question: Return the names of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n input: question: Return the names of artists and the themes of their exhibitions that had a ticket price higher than average. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n input: question: list in alphabetic order all course names and their instructors' names in year 2008. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\n input: question: List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;\n input: question: Which students are unaffected by allergies? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n Now please use valid SQLite to answer the following questions: What is average life expectancy in the countries where English is not the official language?",
    "Here are 5 examples including input and output:\n input: question: How much money did Lucas Mancini spend? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n input: question: What are the names of the products that have a color description of 'red' and the 'fast' characteristic? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"\n input: question: Which film has the highest rental rate? And what is the rate? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n input: question: What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1\n input: question: Return the names of all counties sorted by county name in descending alphabetical order. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY County_name DESC\n Now please use valid SQLite to answer the following questions: Give the mean life expectancy of countries in which English is not the official language.",
    "Here are 5 examples including input and output:\n input: question: What are the student IDs for everybody who worked for more than 10 hours per week on all sports? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10\n input: question: What is the description of role code ED? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT role_description FROM ROLES WHERE role_code = \"ED\";\n input: question: Count the number of accounts corresponding to each customer id. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n input: question: Which physicians are trained in procedures that are more expensive than 5000? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000\n input: question: What is the number of aircraft? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT count(*) FROM aircraft\n Now please use valid SQLite to answer the following questions: What is the total number of people living in the nations that do not use English?",
    "Here are 5 examples including input and output:\n input: question: Find the id of routes whose source and destination airports are in the United States. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n input: question: What are the ids for transactions that have an amount greater than the average amount of a transaction? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n input: question: Show the average transaction amount for different transaction types. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code\n input: question: List the customers first and last name of 10 least expensive invoices. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;\n input: question: Find the total access count of all documents in the most popular document type. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many people live in countries that do not speak English?",
    "Here are 5 examples including input and output:\n input: question: How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";\n input: question: What are the ids of all the employees who have destroyed documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: Count the number of tracks. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT count(*) FROM track\n input: question: Show the facility codes of apartments with more than 4 bedrooms. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n input: question: What are the names and data types of the characteristics of the 'cumin' product? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"\n Now please use valid SQLite to answer the following questions: What is the official language spoken in the country whose head of state is Beatrix?",
    "Here are 5 examples including input and output:\n input: question: How many kinds of enzymes are there? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM enzyme\n input: question: Who is the person whose age is below 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE age  <  30\n input: question: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')\n input: question: What are card ids, customer ids, card types, and card numbers for each customer card? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\n input: question: Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There\n Now please use valid SQLite to answer the following questions: What is the official language used in the country the name of whose head of state is Beatrix.",
    "Here are 5 examples including input and output:\n input: question: How many airports' names have the word Interanation in them? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airports WHERE name LIKE '%International%'\n input: question: How many enzymes do not have any interactions? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n input: question: What are the movie titles with the highest average rating and what are those ratings? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1\n input: question: What are the ids and details for each project? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT project_id ,  project_details FROM Projects\n input: question: What is the name of the wrestler with the fewest days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "Here are 5 examples including input and output:\n input: question: What is the unit of measurement of product named \"cumin\"? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\n input: question: Show home city where at least two drivers older than 40 are from. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2\n input: question: List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\" serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";\n input: question: Show different publishers together with the number of publications they have. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n input: question: Return the result that is most frequent at music festivals. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: For the countries founded before 1930, what is the total number of distinct official languages?",
    "Here are 5 examples including input and output:\n input: question: Find the id of the customers who have order status both \"On Road\" and \"Shipped\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"\n input: question: What is the age of the tallest person? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Age FROM people ORDER BY Height DESC LIMIT 1\n input: question: What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'\n input: question: For every medicine id, what are the names of the medicines that can interact with more than one enzyme? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n input: question: What are the famous titles of artists who do not have any volumes? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n Now please use valid SQLite to answer the following questions: What are the countries that have greater surface area than any country in Europe?",
    "Here are 5 examples including input and output:\n input: question: When did the first payment happen? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1\n input: question: Show the names of authors from college \"Florida\" or \"Temple\" serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\n input: question: What are the names of the tracks that are Rock or Jazz songs? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n input: question: Give the ids and names of products with price lower than 600 or higher than 900. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\n input: question: What is the most common company type, and how many are there? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which countries have greater area than that of any country in Europe?",
    "Here are 5 examples including input and output:\n input: question: Show the ages of gymnasts in descending order of total points. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC\n input: question: Find the names of all the employees whose the role name is \"Editor\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"\n input: question: Find the names of the top 3 departments that provide the largest amount of courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3\n input: question: List the carriers of devices in ascending alphabetical order. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Carrier FROM device ORDER BY Carrier ASC\n input: question: Find the ids and first names of the 3 teachers that have the most number of assessment notes? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: What are the African countries that have a  population less than any country in Asia?",
    "Here are 5 examples including input and output:\n input: question: What are the themes of farm competitions sorted by year in ascending order? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Theme FROM farm_competition ORDER BY YEAR ASC\n input: question: How many different countries are all the swimmers from? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT count(DISTINCT nationality) FROM swimmer\n input: question: Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40\n input: question: Select the code of the product that is cheapest in each product category. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT code ,  name ,  min(price) FROM products GROUP BY name\n input: question: Find the names of all swimmers, sorted by their 100 meter scores in ascending order. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT name FROM swimmer ORDER BY meter_100\n Now please use valid SQLite to answer the following questions: Which African countries have a smaller population than that of any country in Asia?",
    "Here are 5 examples including input and output:\n input: question: What is the party that has the largest number of representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n input: question: which gender got the highest average uncertain ratio. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n input: question: display all the information about the department Marketing. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM  departments WHERE department_name  =  'Marketing'\n input: question: What is the first and last name of the students who are not in the largest major? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)\n input: question: Find the ids and names of stations from which at least 200 trips started. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n Now please use valid SQLite to answer the following questions: Which Asian countries have a population that is larger than any country in Africa?",
    "Here are 5 examples including input and output:\n input: question: What is the savings balance of the account belonging to the customer with the highest checking balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\n input: question: Find the name and email of the user followed by the least number of people. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n input: question: What is the type of vocables that appears most frequently? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n input: question: List the types of competition and the number of competitions of each type. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\n input: question: What are the maximum scores the team Boston Red Stockings got when the team won in postseason? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';\n Now please use valid SQLite to answer the following questions: What are the Asian countries which have a population larger than that of any country in Africa?",
    "Here are 5 examples including input and output:\n input: question: List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;\n input: question: List the names of hosts who did not serve as a host of any party in our record. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)\n input: question: What is the year and semester with the most courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n input: question: What are the different affiliations, and how many schools with each have an enrollment size of above 20000? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation\n input: question: How many games are played for all students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(gamesplayed) FROM Sportsinfo\n Now please use valid SQLite to answer the following questions: What are the country codes for countries that do not speak English?",
    "Here are 5 examples including input and output:\n input: question: Show all locations with only 1 station. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1\n input: question: How long does track Fast As a Shark has? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";\n input: question: What is the average price for wines not produced in Sonoma county? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\n input: question: What are the full name, hire date, salary, and department id for employees without the letter M in their first name? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\n input: question: Show the average price of hotels for each star rating code. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\n Now please use valid SQLite to answer the following questions: Return the country codes for countries that do not speak English.",
    "Here are 5 examples including input and output:\n input: question: Show all majors. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT Major FROM Student\n input: question: List the campuses in Los Angeles county. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n input: question: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n input: question: What is the average age for each dorm and what are the names of each dorm? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name\n input: question: Find the titles of items that received both a rating higher than 8 and a rating below 5. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5\n Now please use valid SQLite to answer the following questions: What are the country codes of countries where people use languages other than English?",
    "Here are 5 examples including input and output:\n input: question: What are the card numbers of members from Kentucky? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n input: question: How many farms are there? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT count(*) FROM farm\n input: question: How many games were played in park \"Columbia Park\" in 1907? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\n input: question: Find the locations that have more than one movie theater with capacity above 300. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n input: question: Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC\n Now please use valid SQLite to answer the following questions: Give the country codes for countries in which people speak langauges that are not English.",
    "Here are 5 examples including input and output:\n input: question: List the name of the aircraft that has been named winning aircraft the most number of times. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the names of all the dorms that don't have any amenities? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n input: question: What are the names of representatives in descending order of votes? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC\n input: question: What is the latitude, longitude, city of the station from which the shortest trip started? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n input: question: Count the number of players who were born in USA and have bats information 'R'. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';\n Now please use valid SQLite to answer the following questions: What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "Here are 5 examples including input and output:\n input: question: Find the phone number of all the customers and staff. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT phone_number FROM customers UNION SELECT phone_number FROM staff\n input: question: What are the distinct names of nurses on call? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse\n input: question: What are the names of musicals with nominee \"Bob Fosse\"? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n input: question: What are the first names and office of the professors who are in the history department and have a Ph.D? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'\n input: question: What are the names of the schools with the top 3 largest class sizes? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM college ORDER BY enr DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Return the codes of countries that do not speak English and do not have Republics for governments.",
    "Here are 5 examples including input and output:\n input: question: List all the customers in increasing order of IDs. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n input: question: What are the names of all the scientists in alphabetical order? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT name FROM scientists ORDER BY name\n input: question: Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\n input: question: Find the number of manufactures that are based in Tokyo or Beijing. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'\n input: question: Show the start dates and end dates of all the apartment bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n Now please use valid SQLite to answer the following questions: Which cities are in European countries where English is not the official language?",
    "Here are 5 examples including input and output:\n input: question: List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\" serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"\n input: question: What are the names of all movies that were made after 2000 or reviewed by Brittany Harris? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000\n input: question: What are the names of departments that have primarily affiliated physicians. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1\n input: question: Return the names and locations of shops, ordered by name in alphabetical order. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\n input: question: Return the maximum and minimum number of cities across all markets. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT max(Number_cities) ,  min(Number_cities) FROM market\n Now please use valid SQLite to answer the following questions: What are the names of cities in Europe for which English is not the official language?",
    "Here are 5 examples including input and output:\n input: question: What is the average song duration for the songs that are in mp3 format and whose resolution below 800? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800\n input: question: What is the name and category code of the product with the highest price? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1\n input: question: Show the description of transaction type with code \"PUR\". serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"\n input: question: What is the last name of the staff who has handled the first ever complaint? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1\n input: question: In which year are there festivals both inside the 'United States' and outside the 'United States'? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'\n Now please use valid SQLite to answer the following questions: Which unique cities are in Asian countries where Chinese is the official language ?",
    "Here are 5 examples including input and output:\n input: question: Find the name and credit score of the customers who have some loans. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n input: question: What are the names of all stations with a latitude smaller than 37.5? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name FROM station WHERE lat  <  37.5\n input: question: What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\n input: question: For each player, what are their name, season, and country that they belong to? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country\n input: question: What are the names of representatives and the dates of elections they participated in. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID\n Now please use valid SQLite to answer the following questions: Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "Here are 5 examples including input and output:\n input: question: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'\n input: question: What is the most common competition type? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the names of all patients who have an undergoing treatment and are staying in room 111. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111\n input: question: What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)\n input: question: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n Now please use valid SQLite to answer the following questions: What are the name, independence year, and surface area of the country with the smallest population?",
    "Here are 5 examples including input and output:\n input: question: For each fourth-grade classroom, show the classroom number and the total number of students using it. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom\n input: question: List the name and phone number of all suppliers in the alphabetical order of their addresses. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\n input: question: How many lessons did the customer Ryan Goodwin complete? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";\n input: question: What is the most common status across all cities? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the owner of the channel that has the highest rating ratio? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Give the name, year of independence, and surface area of the country that has the lowest population.",
    "Here are 5 examples including input and output:\n input: question: What are the rank, first name, and last name of the faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  Fname ,  Lname FROM Faculty\n input: question: What is the host year of city \"Taizhou ( Zhejiang )\"? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"\n input: question: Show the names of mountains with height more than 5000 or prominence more than 1000. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000\n input: question: What are the carriers of devices whose software platforms are not \"Android\"? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Carrier FROM device WHERE Software_Platform != 'Android'\n input: question: What are the ids and names of the companies that operated more than one flight? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: What are the population, name and leader of the country with the largest area?",
    "Here are 5 examples including input and output:\n input: question: List name and damage for all storms in a descending order of max speed. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC\n input: question: Find the year in which the least people enter hall of fame. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;\n input: question: What is the total number of postseason games that team Boston Red Stockings participated in? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );\n input: question: What is the language used most often in the songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1\n input: question: What is the title of the course with Differential Geometry as a prerequisite? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n Now please use valid SQLite to answer the following questions: Give the name, population, and head of state for the country that has the largest area.",
    "Here are 5 examples including input and output:\n input: question: What are the names of rooms that have either king or queen bed? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\n input: question: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\n input: question: Count the number of different companies. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT count(DISTINCT Company) FROM entrepreneur\n input: question: Which school has the fewest professors? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n input: question: What is the customer id, first and last name with least number of accounts. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "Here are 5 examples including input and output:\n input: question: Show the people that have been comptroller the most times and the corresponding number of times. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1\n input: question: How many bands are there? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM Band\n input: question: Find the titles of the papers that contain the word \"ML\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT title FROM papers WHERE title LIKE \"%ML%\"\n input: question: Which headquarter locations are used by more than 2 companies? serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\n input: question: List the votes of elections in descending order. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Votes FROM election ORDER BY Votes DESC\n Now please use valid SQLite to answer the following questions: What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "Here are 5 examples including input and output:\n input: question: Find the number of items without any review. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n input: question: Find the total number of king beds available. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n input: question: List the asset id, details, make and model for every asset. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets\n input: question: Give the ids for documents that have the budget description 'Government'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\n input: question: What are the team and the location of school each player belongs to? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID\n Now please use valid SQLite to answer the following questions: Find the number of cities in each district whose population is greater than the average population of cities?",
    "Here are 5 examples including input and output:\n input: question: List the total points of gymnasts in descending order of floor exercise points. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n input: question: Find the total number of rooms in the apartments that have facility code \"Gym\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n input: question: What are the names of device shops, and what are the carriers that they carry devices in stock for? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID\n input: question: Show different teams in eliminations and the number of eliminations from each team. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team\n input: question: What are all the different first names of the drivers who are in position as standing and won? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1\n Now please use valid SQLite to answer the following questions: How many cities in each district have a population that is above the average population across all cities?",
    "Here are 5 examples including input and output:\n input: question: How many different colleges do attend the tryout test? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT cName) FROM tryout\n input: question: What is the title, phone number and hire date for the employee named Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n input: question: List countries that have more than one swimmer. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1\n input: question: What are the types of competition that have most 5 competitions for that type? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5\n input: question: What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100\n Now please use valid SQLite to answer the following questions: Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "Here are 5 examples including input and output:\n input: question: Give the ids of the three products purchased in the largest amounts. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n input: question: Which destination has least number of flights? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n input: question: What are the names of candidates who have a lower support rate than oppose rate? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\n input: question: What types of vocals are used in the song \"Badlands\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"\n input: question: What are the first names and support rep ids for employees serving 10 or more customers? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n Now please use valid SQLite to answer the following questions: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the movie produced after 2000 and directed by James Cameron? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000\n input: question: What is the total number of hours per week and number of games played by students under 20? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20\n input: question: What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\n input: question: What is the name of the instructor who advises the student with the greatest number of total credits? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\n input: question: Which people severed as governor most frequently? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "Here are 5 examples including input and output:\n input: question: Return the famous titles of the artist called \"Triumfall\". serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\n input: question: What is the description of the most popular role among users that have logged in? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\n input: question: What are the ids of the top three products that were purchased in the largest amount? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n input: question: What are the average prices of products, grouped by manufacturer name? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n input: question: Compute the total amount of settlement across all the settlements. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT sum(Amount_Settled) FROM Settlements\n Now please use valid SQLite to answer the following questions: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "Here are 5 examples including input and output:\n input: question: List the names of all courses ordered by their titles and credits. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course ORDER BY title ,  credits\n input: question: Find the name of physicians who are in charge of more than one patient. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1\n input: question: For each product which has problems, what are the number of problems and the product id? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\n input: question: Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\n input: question: What is the customer first, last name and id with least number of accounts. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names and areas of countries with the top 5 largest area?",
    "Here are 5 examples including input and output:\n input: question: Which students not enrolled in any course? Find their personal names. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n input: question: What is the last name of the musician that have produced the most songs? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\n input: question: What are the average prominence of the mountains in country 'Morocco'? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'\n input: question: List the name of all projects that are operated longer than the average working hours of all projects. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)\n input: question: What are the themes of competitions that have corresponding host cities with more than 1000 residents? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000\n Now please use valid SQLite to answer the following questions: Return the names and surface areas of the 5 largest countries.",
    "Here are 5 examples including input and output:\n input: question: Find names and ids of all documents with document type code BK. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n input: question: Find the country that the most papers are affiliated with. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1\n input: question: What are the faculty ids of all the male faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty WHERE Sex  =  'M'\n input: question: Show the locations shared by shops with open year later than 2012 and shops with open year before 2008. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\n input: question: How many railways are there? serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT count(*) FROM railway\n Now please use valid SQLite to answer the following questions: What are names of countries with the top 3 largest population?",
    "Here are 5 examples including input and output:\n input: question: Return the address content for the customer whose name is \"Maudie Kertzmann\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n input: question: How many papers are \"Atsushi Ohori\" the author of? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n input: question: Give the number of students living in either HKG or CHI. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n input: question: What is the average salary for each job title? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title\n input: question: What is the lowest and highest rating star? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT max(stars) ,  min(stars) FROM Rating\n Now please use valid SQLite to answer the following questions: Return the names of the 3 most populated countries.",
    "Here are 5 examples including input and output:\n input: question: What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: How many students got accepted after the tryout? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM tryout WHERE decision  =  'yes'\n input: question: What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )\n input: question: List the creation year, name and budget of each department. serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT creation ,  name ,  budget_in_billions FROM department\n input: question: Who are all the directors? serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT DISTINCT directed_by FROM film\n Now please use valid SQLite to answer the following questions: What are the names of the nations with the 3 lowest populations?",
    "Here are 5 examples including input and output:\n input: question: Find the name of the train whose route runs through greatest number of stations. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the ids for all sporty students who are on scholarship? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\n input: question: What kind of decor has the least number of reservations? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;\n input: question: Find the number of funiture types produced by each manufacturer as well as the company names. serialized_schema:  | manufacturer | manufacturer : manufacturer_id , open_year , name , num_of_factories , num_of_shops | furniture : furniture_id , name , num_of_component , market_rate | furniture_manufacte : manufacturer_id , furniture_id , price_in_dollar output: SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id\n input: question: What are the names of all the circuits that are in the UK or Malaysia? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n Now please use valid SQLite to answer the following questions: Return the names of the 3 countries with the fewest people.",
    "Here are 5 examples including input and output:\n input: question: How many documents have the status code done? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT count(*) FROM Documents WHERE document_status_code = \"done\";\n input: question: Please show different denominations and the corresponding number of schools in descending order. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC\n input: question: How many weddings are there in year 2016? serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT count(*) FROM wedding WHERE YEAR  =  2016\n input: question: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n input: question: What is the name of the airline with the most routes? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: how many countries are in Asia?",
    "Here are 5 examples including input and output:\n input: question: What are the names of races held between 2009 and 2011? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n input: question: What are the first names of all history professors who do not teach? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num\n input: question: How many captains with younger than 50 are in each rank? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank\n input: question: Show the average share count of transactions each each investor, ordered by average share count. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)\n input: question: Count the number of Professors who have office in building NEB. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"\n Now please use valid SQLite to answer the following questions: Count the number of countries in Asia.",
    "Here are 5 examples including input and output:\n input: question: What is the total number of all football games played by scholarship students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'\n input: question: Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate\n input: question: What are the names of all people who are friends with Alice for the shortest amount of time? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n input: question: Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n input: question: What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"\n Now please use valid SQLite to answer the following questions: What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "Here are 5 examples including input and output:\n input: question: How many distinct hometowns did these people have? serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT count(DISTINCT Hometown) FROM people\n input: question: Which channels broadcast both in the morning and at night? Give me the channel names. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n input: question: Find id of the candidate who most recently accessed the course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n input: question: How many students are enrolled in college? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM College\n input: question: For each grade 0 classroom, report the total number of students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\n Now please use valid SQLite to answer the following questions: Give the names of countries that are in Europe and have a population equal to 80000.",
    "Here are 5 examples including input and output:\n input: question: How many routes go from the United States to Canada? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n input: question: List the locations that are shared by more than two wrestlers. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2\n input: question: What are the sale details and dates of transactions with amount smaller than 3000? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000\n input: question: Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30\n input: question: Find the average age and number of male students (with sex M) from each city. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\n Now please use valid SQLite to answer the following questions: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "Here are 5 examples including input and output:\n input: question: How many credits is the course that the student with the last name Smithson took, and what is its description? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'\n input: question: What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check' serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'\n input: question: Give the id and product type of the product with the lowest price. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\n input: question: Find the name and id of the top 3 expensive rooms. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;\n input: question: Find the number of trains starting from each origin. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT origin ,  count(*) FROM train GROUP BY origin\n Now please use valid SQLite to answer the following questions: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "Here are 5 examples including input and output:\n input: question: Find the number of students who participate in the tryout for each college ordered by descending count. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC\n input: question: Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'\n input: question: List all company names with a book published by Alyson. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'\n input: question: What is the description of the color for most products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\n input: question: What are the first names of students studying in room 107? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT firstname FROM list WHERE classroom  =  107\n Now please use valid SQLite to answer the following questions: What are the cities whose population is between 160000 and 900000?",
    "Here are 5 examples including input and output:\n input: question: Show the times used by climbers to climb mountains in Country Uganda. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"\n input: question: Return the average, minimum, maximum, and total transaction amounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\n input: question: For each headquarter, what are the headquarter and how many companies are centered there? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\n input: question: Find the name of product that is produced by both companies Creative Labs and Sony. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n input: question: How many different locations does each school have? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\n Now please use valid SQLite to answer the following questions: Return the names of cities that have a population between 160000 and 900000 .",
    "Here are 5 examples including input and output:\n input: question: Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1\n input: question: List the names of courses in alphabetical order? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT course_name FROM courses ORDER BY course_name\n input: question: What is the mean longitude for all stations that have never had more than 10 bikes available? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n input: question: Show white percentages of cities and the crime rates of counties they are in. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\n input: question: find the name of all departments that do actually have one or more employees assigned to them. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n Now please use valid SQLite to answer the following questions: Which language is spoken by the largest number of countries?",
    "Here are 5 examples including input and output:\n input: question: Which part has the least chargeable amount? List the part id and amount. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1\n input: question: What are the details of the markets that can be accessed by walk or bus? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n input: question: Count the members of the club \"Tennis Club\". serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"\n input: question: Which bike traveled the most often in zip code 94002? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the ids of the trips that lasted the longest and how long did they last? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n Now please use valid SQLite to answer the following questions: Give the language that is spoken in the most countries.",
    "Here are 5 examples including input and output:\n input: question: What is the total number of faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty\n input: question: Give the title of the prerequisite to the course International Finance. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n input: question: What are the order details of the products with price higher than 2000? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000\n input: question: What is the average price for flights from Los Angeles to Honolulu. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n input: question: Find the payment method that is used most frequently. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the language spoken by the largest percentage of people in each country?",
    "Here are 5 examples including input and output:\n input: question: What is the average cost of procedures that physician John Wen was trained in? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: What are the names of representatives whose party is not \"Republican\"? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Name FROM Representative WHERE Party != \"Republican\"\n input: question: List all the salary values players received in 2010 and 2001. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001\n input: question: Return the cities with more than 3 airports in the United States. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n input: question: Show the name of the party that has at least two records. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\n Now please use valid SQLite to answer the following questions: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "Here are 5 examples including input and output:\n input: question: Find the number of scientists involved for the projects that require more than 300 hours. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name\n input: question: List the document ids for any documents with the status code done and the type code paper. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";\n input: question: For each product type, return the maximum and minimum price. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n input: question: What is the name of department where has the largest number of professors with a Ph.D. degree? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of the technicians by ascending order of age? serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Name FROM technician ORDER BY Age ASC\n Now please use valid SQLite to answer the following questions: What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "Here are 5 examples including input and output:\n input: question: What are the full names and cities of employees who have the letter Z in their first names? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n input: question: How many staff live in state Georgia? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\n input: question: What are the names of the wrestlers, ordered descending by days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler ORDER BY Days_held DESC\n input: question: Show all the ranks and the number of male and female faculty for each rank. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n input: question: Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"\n Now please use valid SQLite to answer the following questions: Count the number of countries for which Spanish is the predominantly spoken language.",
    "Here are 5 examples including input and output:\n input: question: Which type of policy is most frequently used? Give me the policy type code. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Count the number of farms. serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT count(*) FROM farm\n input: question: Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000\n input: question: What are the id of each employee and the number of document destroyed by that employee? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID\n input: question: Find the male friend of Alice whose job is a doctor? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'\n Now please use valid SQLite to answer the following questions: What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "Here are 5 examples including input and output:\n input: question: Show the average, maximum, minimum enrollment of all schools. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\n input: question: Find the first and last names of all the female (sex is F) students who have president votes. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"\n input: question: Which Payments were processed with Visa? List the payment Id, the date and the amount. serialized_schema:  | insurance_policies | customers : customer_id , customer_details | customer_policies : policy_id , customer_id , policy_type_code , start_date , end_date | claims : claim_id , policy_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled | settlements : settlement_id , claim_id , date_claim_made , date_claim_settled , amount_claimed , amount_settled , customer_policy_id | payments : payment_id , settlement_id , payment_method_code , date_payment_made , amount_payment output: SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'\n input: question: Find the name of rooms whose price is higher than the average price. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n input: question: How many transaction does each account have? Show the number and account id. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT count(*) ,  account_id FROM Financial_transactions\n Now please use valid SQLite to answer the following questions: Return the codes of countries for which Spanish is the predominantly spoken language.",
    "Here are 5 examples including input and output:\n input: question: Which authors did not submit to any workshop? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\n input: question: What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'\n input: question: What is the average bike availablility for stations not in Palo Alto? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n input: question: Find the busiest source airport that runs most number of routes in China. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n input: question: Give me a list of all the channel names sorted by the channel rating in descending order. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM channel ORDER BY rating_in_percent DESC\n Now please use valid SQLite to answer the following questions: How many conductors are there?",
    "Here are 5 examples including input and output:\n input: question: Find the names and phone numbers of customers living in California state. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n input: question: List the names of wrestlers and the teams in elimination in descending order of days held. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC\n input: question: List the writers of the books in ascending alphabetical order. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Writer FROM book ORDER BY Writer ASC\n input: question: List the names of wrestlers that have not been eliminated. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)\n input: question: What are the names of instructors who didn't teach? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n Now please use valid SQLite to answer the following questions: Count the number of conductors.",
    "Here are 5 examples including input and output:\n input: question: Which distinct source system code includes the substring 'en'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'\n input: question: What are the names of artists that have not had any exhibitions? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\n input: question: What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'\n input: question: What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code\n input: question: What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n Now please use valid SQLite to answer the following questions: List the names of conductors in ascending order of age.",
    "Here are 5 examples including input and output:\n input: question: Find the number of rooms for different block code? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode\n input: question: When did the staff member named Janessa Sawayn join the company? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n input: question: What are the ids of all students who have advisor number 1121? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE Advisor  =  1121\n input: question: Find the name and capacity of the stadium where the event named \"World Junior\" happened. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'\n input: question: What are the names and job titles of every person ordered alphabetically by name? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name ,  job FROM Person ORDER BY name\n Now please use valid SQLite to answer the following questions: What are the names of conductors, ordered by age?",
    "Here are 5 examples including input and output:\n input: question: Find the name and position of the head of the department with the least employees. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n input: question: find the name of people whose height is lower than the average. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)\n input: question: List the name of the phone model launched in year 2002 and with the highest RAM size. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n input: question: Find the last names of teachers who are not involved in any detention. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id\n input: question: Find the appelations that produce wines after the year of 2008 but not in Central Coast area. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n Now please use valid SQLite to answer the following questions: What are the names of conductors whose nationalities are not \"USA\"?",
    "Here are 5 examples including input and output:\n input: question: Find the states where have some college students in tryout and their decisions are yes. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n input: question: List the name and residence for players whose occupation is not \"Researcher\". serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n input: question: What are the first names of all teachers who have taught a course and the corresponding course codes? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num\n input: question: how many schools exist in total? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT school_code) FROM department\n input: question: Find the number of employees of each gender whose salary is lower than 50000. serialized_schema:  | company_1 | works_on : essn , pno , hours | employee : fname , minit , lname , ssn , bdate , address , sex , salary , super_ssn , dno | department : dname , dnumber , mgr_ssn , mgr_start_date | project : pname , pnumber , plocation , dnum | dependent : essn , dependent_name , sex , bdate , relationship | dept_locations : dnumber , dlocation output: SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex\n Now please use valid SQLite to answer the following questions: Return the names of conductors that do not have the nationality \"USA\".",
    "Here are 5 examples including input and output:\n input: question: List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'\n input: question: Show the enrollment and primary_conference of the oldest college. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n input: question: How many users are there? serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT count(*) FROM user_profiles\n input: question: Find the name of the department that offers the highest total credits? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n input: question: Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"\n Now please use valid SQLite to answer the following questions: What are the record companies of orchestras in descending order of years in which they were founded?",
    "Here are 5 examples including input and output:\n input: question: What are the details for the projects which were launched by the organization with the most projects? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n input: question: What are the invoice dates, order ids, and order details for all invoices? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\n input: question: What are the ids, scores, and dates of the games which caused at least two injury accidents? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n input: question: Show all the distinct president votes made on 08/30/2015. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\n input: question: Show all locations and the total number of platforms and passengers for all train stations in each location. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION\n Now please use valid SQLite to answer the following questions: Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "Here are 5 examples including input and output:\n input: question: What are the names of artists who did not have an exhibition in 2004? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n input: question: Show the denomination shared by more than one school. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1\n input: question: List all the document names which contains \"CV\". serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"\n input: question: Show all artist names who didn't have an exhibition in 2004. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n input: question: What is the total number of gas stations that opened between 2000 and 2005? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005\n Now please use valid SQLite to answer the following questions: What is the average attendance of shows?",
    "Here are 5 examples including input and output:\n input: question: What are the dates of ceremony and results for each music festival? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Date_of_ceremony ,  RESULT FROM music_festival\n input: question: Find the average number of followers for the users who had some tweets. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n input: question: What are the names of the people who have no friends who are students? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n input: question: What are the names of students who have more than one advisor? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n input: question: What is the total number of clubs that have less than 10 medals in total? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT count(*) FROM club_rank WHERE Total  <  10\n Now please use valid SQLite to answer the following questions: Return the average attendance across all shows.",
    "Here are 5 examples including input and output:\n input: question: Show the school name and driver name for all school buses. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id\n input: question: Count the number of customers who are active. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM customer WHERE active = '1'\n input: question: What is the title of the course that is a prerequisite for Mobile Computing? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n input: question: How many courses are offered by the Computer Info. Systems department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"\n input: question: Find the names of the workshop groups where services with product name \"film\" are performed. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"\n Now please use valid SQLite to answer the following questions: What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "Here are 5 examples including input and output:\n input: question: Which course authors teach two or more courses? Give me their addresses and author IDs. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n input: question: Give me a list of all the last names of authors sorted in alphabetical order serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT lname FROM authors ORDER BY lname\n input: question: Show all the locations where no cinema has capacity over 800. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800\n input: question: Find the names of the artists who are from UK and have produced English songs. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n input: question: What is the year in which most ships were built? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "Here are 5 examples including input and output:\n input: question: On average, how old are the members in the club \"Hopkins Student Enterprises\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"\n input: question: Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation\n input: question: Return the names of shops, ordered by year of opening ascending. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Shop_Name FROM shop ORDER BY Open_Year ASC\n input: question: Find the last name and age of the student who has allergy to both milk and cat. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n input: question: What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"\n Now please use valid SQLite to answer the following questions: How many different nationalities do conductors have?",
    "Here are 5 examples including input and output:\n input: question: What is the partition id of the user named \"Iron Man\". serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'\n input: question: List the total points of gymnasts in descending order. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n input: question: What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n input: question: What is the average amount of items ordered in each order? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT avg(order_quantity) FROM order_items\n input: question: What are the details and star ratings of the three hotels with the lowest price ranges? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3\n Now please use valid SQLite to answer the following questions: Count the number of different nationalities of conductors.",
    "Here are 5 examples including input and output:\n input: question: Find the name of the youngest organization. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n input: question: display the employee ID and job name for all those jobs in department 80. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80\n input: question: What are the names of regions with two or more storms? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n input: question: Show the location name and code with the least documents. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n input: question: What are the names of all movies directed by Steven Spielberg? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE director = 'Steven Spielberg'\n Now please use valid SQLite to answer the following questions: List names of conductors in descending order of years of work.",
    "Here are 5 examples including input and output:\n input: question: Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1\n input: question: What is the average total score of body builders with height bigger than 200? serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200\n input: question: Which district has the largest population? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1\n input: question: How many customers have an active value of 1? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM customer WHERE active = '1'\n input: question: List all countries of markets in ascending alphabetical order. serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Country FROM market ORDER BY Country ASC\n Now please use valid SQLite to answer the following questions: What are the names of conductors, sorted descending by the number of years they have worked?",
    "Here are 5 examples including input and output:\n input: question: Show names of cities and names of counties they are in. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\n input: question: Show the locations of parties and the names of the party hosts in ascending order of the age of the host. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n input: question: What are the aircrafts with top 3 shortest lengthes? List their names. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name FROM Aircraft ORDER BY distance LIMIT 3\n input: question: What is the maximum training hours for the students whose training hours is greater than 1000 in different positions? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n input: question: Find the author who achieved the highest score in a submission. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the name of the conductor with the most years of work.",
    "Here are 5 examples including input and output:\n input: question: Return the address and email of the customer with the first name Linda. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n input: question: List the companies and the investors of entrepreneurs. serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Company ,  Investor FROM entrepreneur\n input: question: What are the ids of the faculty members who do not advise any student. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student\n input: question: How many players did Boston Red Stockings have in 2000? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000\n input: question: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: What is the name of the conductor who has worked the greatest number of years?",
    "Here are 5 examples including input and output:\n input: question: What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100\n input: question: What is the description of the type of the company who concluded its contracts most recently? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1\n input: question: What are names for top three branches with most number of membership? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3\n input: question: Find the names of all instructors in the Art department who have taught some course and the course_id. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'\n input: question: What is all the information about the Marketing department? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM  departments WHERE department_name  =  'Marketing'\n Now please use valid SQLite to answer the following questions: Show the names of conductors and the orchestras they have conducted.",
    "Here are 5 examples including input and output:\n input: question: What are the average price and score of wines for each appelation? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n input: question: What are the names of wrestlers days held less than 100? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler WHERE Days_held  <  100\n input: question: Which apartments have type code \"Flat\"? Give me their apartment numbers. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"\n input: question: What ranks do we have for faculty? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT rank FROM Faculty\n input: question: Show ids for all employees with at least 100000 salary. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT eid FROM Employee WHERE salary  >  100000\n Now please use valid SQLite to answer the following questions: What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "Here are 5 examples including input and output:\n input: question: What is the full name of the employee who has the most customers? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the average millisecond length of Latin and Pop tracks. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"\n input: question: What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200\n input: question: Find the distinct majors of students who have treasurer votes. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote\n input: question: List the name of physicians who never took any appointment. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n Now please use valid SQLite to answer the following questions: Show the names of conductors that have conducted more than one orchestras.",
    "Here are 5 examples including input and output:\n input: question: Count the number of female Professors we have. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"\n input: question: Show the names of members whose country is \"United States\" or \"Canada\". serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"\n input: question: What is the average attendance of stadiums with capacity percentage higher than 100%? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100\n input: question: What are the product ids and color descriptions for products with two or more characteristics? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n input: question: What are the customer name and date of the orders whose status is \"Delivered\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"\n Now please use valid SQLite to answer the following questions: What are the names of conductors who have conducted at more than one orchestra?",
    "Here are 5 examples including input and output:\n input: question: Find the last name of the staff whose email address contains \"wrau\". serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"\n input: question: What is the minimum, mean, and maximum age across all students? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT min(age) ,  avg(age) ,  max(age) FROM Student\n input: question: How many airlines are there? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines\n input: question: For each college, return the college name and the count of authors with submissions from that college. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College ,  COUNT(*) FROM submission GROUP BY College\n input: question: For each faculty rank, show the number of faculty members who have it. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT rank ,  count(*) FROM Faculty GROUP BY rank\n Now please use valid SQLite to answer the following questions: Show the name of the conductor that has conducted the most number of orchestras.",
    "Here are 5 examples including input and output:\n input: question: Find the three most expensive procedures. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures ORDER BY cost LIMIT 3\n input: question: How many students does each advisor have? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor\n input: question: Find the names of all races held in 2017. serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name FROM races WHERE YEAR = 2017\n input: question: Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'. serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'\n input: question: What is the team name and acc regular season score of the school that was founded for the longest time? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the name of the conductor who has conducted the most orchestras?",
    "Here are 5 examples including input and output:\n input: question: Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n input: question: What is the name of the ship with the largest tonnage? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1\n input: question: Find the number of companies whose industry is \"Banking\" or \"Conglomerate\", serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\n input: question: What are the delegate and name of the county they belong to, for each county? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District\n input: question: Find the name of the customer that has been involved in the most policies. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "Here are 5 examples including input and output:\n input: question: What is the membership level with the most people? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n input: question: What is the carrier of the most expensive phone? serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\n input: question: Find the title of the course that is offered by more than one department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course GROUP BY title HAVING count(*)  >  1\n input: question: What is the name of every college in alphabetical order that has more than 18000 students enrolled? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n input: question: What are the names of all pilots listed by descending age? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Name FROM pilot ORDER BY Age DESC\n Now please use valid SQLite to answer the following questions: What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "Here are 5 examples including input and output:\n input: question: Find the total amount of products ordered before 2018-03-17 07:13:53. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"\n input: question: Show ids for all documents in type CV without expense budgets. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n input: question: What are the names and type codes of products? serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Name ,  Product_Type_Code FROM Products\n input: question: List the names of gymnasts in ascending order by their heights. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC\n input: question: How many bank branches are there? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(*) FROM bank\n Now please use valid SQLite to answer the following questions: Please show the different record companies and the corresponding number of orchestras.",
    "Here are 5 examples including input and output:\n input: question: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n input: question: What is the entry name of the most expensive catalog (in USD)? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1\n input: question: Find the names of the students who are in the position of striker and got a yes tryout decision. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'\n input: question: Which countries have more than two members? serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2\n input: question: What is the name of the tourist attraction that is associated with the photo \"game1\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"\n Now please use valid SQLite to answer the following questions: How many orchestras does each record company manage?",
    "Here are 5 examples including input and output:\n input: question: What is the founded year of the non public school that was founded most recently? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\n input: question: Find the number of clubs where \"Tracy Kim\" is a member. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n input: question: What are the dates of publications in descending order of price? serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Publication_Date FROM publication ORDER BY Price DESC\n input: question: What is the average fee for a CSU campus in the year of 1996? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n input: question: How many undergraduates are there at San Jose State serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"\n Now please use valid SQLite to answer the following questions: Please show the record formats of orchestras in ascending order of count.",
    "Here are 5 examples including input and output:\n input: question: What are the dates of the assessment notes? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT date_of_notes FROM Assessment_Notes\n input: question: What is the id, name and IATA code of the airport that had most number of flights? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n input: question: Who are the owners of the programs that broadcast both in the morning and at night? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"\n input: question: What are the names of scientists who are assigned to any project? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n input: question: What is the name, city, country, and elevation for every airport in the city of New York? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'\n Now please use valid SQLite to answer the following questions: What are the major record formats of orchestras, sorted by their frequency?",
    "Here are 5 examples including input and output:\n input: question: What is each customer's move in date, and the corresponding customer id and details? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id\n input: question: Find the name of the customer who made an order most recently. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1\n input: question: List the area and county of all appelations. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Area ,  County FROM APPELLATIONS\n input: question: What are the apartment number, start date, and end date of each apartment booking? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id\n input: question: What is the maximum and minimum market value of companies? serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n Now please use valid SQLite to answer the following questions: List the record company shared by the most number of orchestras.",
    "Here are 5 examples including input and output:\n input: question: Which location names contain the word \"film\"? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"\n input: question: Show the names of phones that are on market with number of shops greater than 50. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50\n input: question: What is the name of each aircraft and how many flights does each one complete? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n input: question: Return the names of the regions affected by storms that had a death count of at least 10. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10\n input: question: Give me all the phone numbers and email addresses of the workshop groups where services are performed. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n Now please use valid SQLite to answer the following questions: What is the record company used by the greatest number of orchestras?",
    "Here are 5 examples including input and output:\n input: question: Show card number, name, and hometown for all members in a descending order of level. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n input: question: How many instruments does the song \"Badlands\" use? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"\n input: question: List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;\n input: question: Find the titles of all movies that have no ratings. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)\n input: question: What are the details and ways to get to tourist attractions related to royal family? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID\n Now please use valid SQLite to answer the following questions: List the names of orchestras that have no performance.",
    "Here are 5 examples including input and output:\n input: question: What are the names of actors ordered descending by the year in which their musical was awarded? serialized_schema:  | musical | musical : musical_id , name , year , award , category , nominee , result | actor : actor_id , name , musical_id , character , duration , age output: SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n input: question: Show the role description and the id of the project staff involved in most number of project outcomes? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the countries that contain 3 or more cities? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n input: question: Show the result of the submission with the highest score. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1\n input: question: Which transportation method is used the most often to get to tourist attractions? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the orchestras that do not have any performances?",
    "Here are 5 examples including input and output:\n input: question: Give me the title and highest price for each film. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n input: question: What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy\n input: question: Show the most frequently used carrier of the phones. serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the total capacity of all dorms. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT sum(student_capacity) FROM dorm\n input: question: Count the number of games taken place in park \"Columbia Park\" in 1907. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\n Now please use valid SQLite to answer the following questions: Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "Here are 5 examples including input and output:\n input: question: What city does the employee who helps the customer with postal code 70174 live in? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n input: question: Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"\n input: question: What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\n input: question: Find the id of songs that are available in mp4 format and have resolution lower than 1000. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\n input: question: Find the ids of orders which are shipped after 2000-01-01. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"\n Now please use valid SQLite to answer the following questions: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "Here are 5 examples including input and output:\n input: question: Find the id and name of customers whose address contains WY state and do not use credit card for payment. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n input: question: Find the name of bank branch that provided the greatest total amount of loans. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1\n input: question: Show the company name with the number of gas station. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\n input: question: What are the name and active date of the customers whose contact channel code is email? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n input: question: How many cities are there in state \"Colorado\"? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"\n Now please use valid SQLite to answer the following questions: Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "Here are 5 examples including input and output:\n input: question: What are all the document type codes and document type names? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT document_type_code ,  document_type_name FROM Ref_document_types\n input: question: What are the instruments are used in the song \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"\n input: question: Show all information on the airport that has the largest number of international passengers. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1\n input: question: What is the most popular file format? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1\n input: question: Find the details of all the distinct customers who have orders with status \"On Road\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"\n Now please use valid SQLite to answer the following questions: Count the number of orchestras that have CD or DVD as their record format.",
    "Here are 5 examples including input and output:\n input: question: Give the names and scores of wines made from white grapes. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"\n input: question: Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80\n input: question: Find the name of customers who do not have an saving account. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n input: question: How many artists are from Bangladesh? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n input: question: List all headquarters and the number of companies in each headquarter. serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\n Now please use valid SQLite to answer the following questions: Show the years in which orchestras that have given more than one performance are founded.",
    "Here are 5 examples including input and output:\n input: question: What are the names and ids of artists with 3 or more albums, listed in alphabetical order? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name\n input: question: What is the name of the department and office location for the professor with the last name of Heffington? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'\n input: question: Retrieve the title of the paper that has the largest number of authors. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n input: question: Which paper has the most authors? Give me the paper title. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n input: question: display the ID for those employees who did two or more jobs in the past. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n Now please use valid SQLite to answer the following questions: What are years of founding for orchestras that have had more than a single performance?",
    "Here are 5 examples including input and output:\n input: question: List the name of artworks that are not nominated. serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)\n input: question: What are the names of all tracks that are on playlists titled Movies? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";\n input: question: What are the names of students who haven't taken any Biology courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n input: question: List the grape, appelation and name of wines whose score is higher than 93 ordered by Name. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name\n input: question: What is the number of flights? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Flight\n Now please use valid SQLite to answer the following questions: How many high schoolers are there?",
    "Here are 5 examples including input and output:\n input: question: How many professors attained either Ph.D. or Masters degrees? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n input: question: when is the hire date for those employees whose first name does not containing the letter M? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'\n input: question: Find the department name that is in Building \"Mergenthaler\". serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n input: question: How many male (sex is M) students have class senator votes in the fall election cycle? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"\n input: question: What are the years, titles, and publishers for all books, ordered by year descending? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\n Now please use valid SQLite to answer the following questions: Count the number of high schoolers.",
    "Here are 5 examples including input and output:\n input: question: List venues of all matches in the order of their dates starting from the most recent one. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT venue FROM MATCH ORDER BY date DESC\n input: question: Find the contact channel code that was used by the customer named \"Tillman Ernser\". serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\n input: question: How many colleges has more than 15000 students? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM College WHERE enr  >  15000\n input: question: Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n input: question: What is all the information about employees hired before June 21, 2002? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE hire_date  <  '2002-06-21'\n Now please use valid SQLite to answer the following questions: Show the names and grades of each high schooler.",
    "Here are 5 examples including input and output:\n input: question: Which building has the largest number of company offices? Give me the building name. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Show all sport name and the number of students. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname\n input: question: Find the papers which have \"Olin Shivers\" as an author. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\n input: question: How many students play sports? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT StuID) FROM Sportsinfo\n input: question: What are all the album titles, in alphabetical order? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Title FROM ALBUM ORDER BY Title\n Now please use valid SQLite to answer the following questions: What are the names and grades for each high schooler?",
    "Here are 5 examples including input and output:\n input: question: What is the number of players who have points less than 30 for each position? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n input: question: What are the first and last names of all customers with between 1000 and 3000 dollars outstanding? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;\n input: question: What are the main indstries and total market value for each industry? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry\n input: question: Return the names and ids of each account, as well as the number of transactions. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n input: question: What are the names and seatings for all tracks opened after 2000, ordered by seating? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n Now please use valid SQLite to answer the following questions: Show all the grades of the high schoolers.",
    "Here are 5 examples including input and output:\n input: question: What is the language that was used most often in songs with resolution above 500? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1\n input: question: Show id, first name and last name for all customers and the number of accounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n input: question: Find the physician who prescribed the highest dose. What is his or her name? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1\n input: question: Find the first names of all the teachers that teach in classroom 110. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM teachers WHERE classroom  =  110\n input: question: What are the origins of all flights that are headed to Honolulu? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\n Now please use valid SQLite to answer the following questions: What is the grade of each high schooler?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of all reviewers who have not given 4 stars at least once? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT rID FROM Rating WHERE stars != 4\n input: question: Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000. serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\n input: question: How old is the doctor named Zach? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'\n input: question: Show names for all aircrafts of which John Williams has certificates. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\n input: question: What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)\n Now please use valid SQLite to answer the following questions: What grade is Kyle in?",
    "Here are 5 examples including input and output:\n input: question: On average how large is the population of the counties? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT avg(Population) FROM county\n input: question: Find the count of universities whose campus fee is greater than the average campus fee. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n input: question: Find the number of customers in the banks at New York City. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n input: question: Show ids for all students who have advisor 1121. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE Advisor  =  1121\n input: question: Find the prices of products which has never received a single complaint. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)\n Now please use valid SQLite to answer the following questions: Return the grade for the high schooler named Kyle.",
    "Here are 5 examples including input and output:\n input: question: Count the number of different scientists assigned to any project. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(DISTINCT scientist) FROM assignedto\n input: question: How many people are under 40 for each gender? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\n input: question: Show the dates, places, and names of events in descending order of the attendance. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC\n input: question: Please show the team that has the most number of technicians. serialized_schema:  | machine_repair | repair : repair_id , name , launch_date , notes | machine : machine_id , making_year , class , team , machine_series , value_points , quality_rank | technician : technician_id , name , team , starting_year , age | repair_assignment : technician_id , repair_id , machine_id output: SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Return the type code of the document named \"David CV\". serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"\n Now please use valid SQLite to answer the following questions: Show the names of all high schoolers in grade 10.",
    "Here are 5 examples including input and output:\n input: question: What are the id and name of the stations that have ever had more than 12 bikes available? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n input: question: What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars\n input: question: Find the number of stores in each city. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n input: question: What are the different types of forms? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT DISTINCT form_type_code FROM forms\n input: question: What is the name of the ship that is commanded by the youngest captain? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of all high schoolers in grade 10?",
    "Here are 5 examples including input and output:\n input: question: Find all the forenames of distinct drivers who was in position 1 as standing and won? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1\n input: question: Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"\n input: question: What is the id of the project with least number of documents? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n input: question: List every individual's first name, middle name and last name in alphabetical order by last name. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\n input: question: What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year\n Now please use valid SQLite to answer the following questions: Show the ID of the high schooler named Kyle.",
    "Here are 5 examples including input and output:\n input: question: Return the names of parties that have two or more events. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2\n input: question: List the race class with at least two races. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n input: question: Show name and salary for all employees sorted by salary. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  salary FROM Employee ORDER BY salary\n input: question: Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\n input: question: What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )\n Now please use valid SQLite to answer the following questions: What is Kyle's id?",
    "Here are 5 examples including input and output:\n input: question: Show the most common nationality for journalists. serialized_schema:  | news_report | event : event_id , date , venue , name , event_attendance | journalist : journalist_id , name , nationality , age , years_working | news_report : journalist_id , event_id , work_type output: SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the last name of the musician that has been at the back position the most? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\n input: question: What is the station station and end station for the trips with the three smallest ids? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n input: question: What is maximum, minimum and average amount of outstanding of customer? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;\n input: question: What is the detail of the location UK Gallery? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n Now please use valid SQLite to answer the following questions: How many high schoolers are there in grade 9 or 10?",
    "Here are 5 examples including input and output:\n input: question: find the name of the program that was launched most recently. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch DESC LIMIT 1\n input: question: What are the three products that have the most problems?s serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3\n input: question: List the software platform shared by the greatest number of devices. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1\n input: question: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n input: question: What are the first, middle, and last names of all individuals, ordered by last name? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name\n Now please use valid SQLite to answer the following questions: Count the number of high schoolers in grades 9 or 10.",
    "Here are 5 examples including input and output:\n input: question: What are the bed type and name of all the rooms with traditional decor? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\n input: question: What is the total amount of grants given by each organisations? Also list the organisation id. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id\n input: question: How many languages are in these films? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(DISTINCT language_id) FROM film\n input: question: Group by ships by flag, and return number of ships that have each flag. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT count(*) ,  flag FROM ship GROUP BY flag\n input: question: What is all the information regarding employees who are managers? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id\n Now please use valid SQLite to answer the following questions: Show the number of high schoolers for each grade.",
    "Here are 5 examples including input and output:\n input: question: List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200. serialized_schema:  | body_builder | body_builder : body_builder_id , people_id , snatch , clean_jerk , total | people : people_id , name , height , weight , birth_date , birth_place output: SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;\n input: question: What are the players who played for Columbus Crew, and how many years did each play for? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n input: question: Count the total number of bookings made. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT count(*) FROM BOOKINGS\n input: question: List the distinct region of clubs in ascending alphabetical order. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT DISTINCT Region FROM club ORDER BY Region ASC\n input: question: What is the payment method of the customer that has purchased the least quantity of items? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1\n Now please use valid SQLite to answer the following questions: How many high schoolers are in each grade?",
    "Here are 5 examples including input and output:\n input: question: Show flight number, origin, destination of all flights in the alphabetical order of the departure cities. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n input: question: Which poll resource provided the most number of candidate information? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1\n input: question: List the distinct police forces of counties whose location is not on east side. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\n input: question: What are the employee ids for employees who make more than the average? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)\n input: question: Which people severed as comptroller most frequently? Give me the name of the person and the frequency count. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which grade has the most high schoolers?",
    "Here are 5 examples including input and output:\n input: question: What are the last names that are used by customers and staff? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff\n input: question: What is the first name of the students who are in age 20 to 25 and living in PHL city? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\n input: question: List the name of browsers in descending order by market share. serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT name FROM browser ORDER BY market_share DESC\n input: question: Show the countries that have managers of age above 50 or below 46. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46\n input: question: Find the subject ID, subject name, and the corresponding number of available courses for each subject. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n Now please use valid SQLite to answer the following questions: Return the grade that has the greatest number of high schoolers.",
    "Here are 5 examples including input and output:\n input: question: Find the rank of the faculty that the fewest faculties belong to. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n input: question: What are the first and last names for all customers? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT first_name ,  last_name FROM Customers;\n input: question: How many authors are there? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT count(*) FROM authors\n input: question: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n input: question: How many events are there? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT count(*) FROM event\n Now please use valid SQLite to answer the following questions: Show me all grades that have at least 4 students.",
    "Here are 5 examples including input and output:\n input: question: What are the full name (first and last name) and salary for all employees who does not have any value for commission? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\n input: question: Find the title of course that is provided by both Statistics and Psychology departments. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'\n input: question: Show the names of all the employees with role \"HR\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"\n input: question: What are the planned delivery date and actual delivery date for each booking? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS\n input: question: Find the checking balance of the accounts whose savings balance is higher than the average savings balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\n Now please use valid SQLite to answer the following questions: Which grades have 4 or more high schoolers?",
    "Here are 5 examples including input and output:\n input: question: List the names and emails of customers who payed by Visa card. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'\n input: question: List the maximum scores of the team Boston Red Stockings when the team won in postseason? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';\n input: question: List the names and buildings of all departments sorted by the budget from large to small. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  building FROM department ORDER BY budget DESC\n input: question: How many different professors are there for the different schools? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code\n input: question: List the names of all scientists sorted in alphabetical order. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT name FROM scientists ORDER BY name\n Now please use valid SQLite to answer the following questions: Show the student IDs and numbers of friends corresponding to each.",
    "Here are 5 examples including input and output:\n input: question: List the names of all players who have a crossing score higher than 90 and prefer their right foot. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"\n input: question: Find the first names of all the authors who have written a paper with title containing the word \"Functional\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"\n input: question: Which sport has most number of students on scholarship? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1\n input: question: What are the names of the songs whose rating is below the rating of all songs in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n input: question: Count the number of items store 1 has in stock. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT count(*) FROM inventory WHERE store_id  =  1\n Now please use valid SQLite to answer the following questions: How many friends does each student have?",
    "Here are 5 examples including input and output:\n input: question: What are the official names of cities, ordered descending by population? serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Official_Name FROM city ORDER BY Population DESC\n input: question: How many different types of sports do we offer? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT sportname) FROM Sportsinfo\n input: question: Return the highest acc percent across all basketball matches. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n input: question: What is the average and maximum number of hours students who made the team practiced? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n input: question: Find the name and active date of the customer that use email as the contact channel. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n Now please use valid SQLite to answer the following questions: Show the names of high school students and their corresponding number of friends.",
    "Here are 5 examples including input and output:\n input: question: What are all distinct country for artists? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT DISTINCT country FROM artist\n input: question: find the highest support percentage, lowest consider rate and oppose rate of all candidates. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate\n input: question: Find the payment method and phone of the party with email \"enrico09@example.com\". serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"\n input: question: List the names of all songs that have 4 minute duration or are in English. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"\n input: question: What is the title and id of the film that has the greatest number of copies in inventory? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of the high schoolers and how many friends does each have?",
    "Here are 5 examples including input and output:\n input: question: What information do you have on colleges sorted by increasing enrollment numbers? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT * FROM College ORDER BY enr\n input: question: what are the top 3 highest support rates? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n input: question: List the builders of railways in ascending alphabetical order. serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT Builder FROM railway ORDER BY Builder ASC\n input: question: What are the first names of student who only took one course? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1\n input: question: What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'\n Now please use valid SQLite to answer the following questions: What is the name of the high schooler who has the greatest number of friends?",
    "Here are 5 examples including input and output:\n input: question: Show the names of members and the decoration themes they have. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID\n input: question: Find the names of the products with length smaller than 3 or height greater than 5. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5\n input: question: List names of all pilot aged 30 or younger in descending alphabetical order. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n input: question: List all customer status codes and the number of customers having each status code. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;\n input: question: Give me the descriptions of the service types that cost more than 100. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100\n Now please use valid SQLite to answer the following questions: Return the name of the high school student with the most friends.",
    "Here are 5 examples including input and output:\n input: question: List all country and league names. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id\n input: question: Show the number of transactions for different investors. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id\n input: question: What is the average height of the players from the college named 'Yale University'? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n input: question: Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office\n input: question: Find the level name of the catalog with the lowest price (in USD). serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n Now please use valid SQLite to answer the following questions: Show the names of high schoolers who have at least 3 friends.",
    "Here are 5 examples including input and output:\n input: question: Find courses that ran in Fall 2009 but not in Spring 2010. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: Show the names of editors and the theme of journals for which they serve on committees. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n input: question: Find the name of services that have been used for more than 2 times in first notification of loss. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2\n input: question: For each advisor, report the total number of students advised by him or her. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor\n input: question: Which cities have lower temperature in March than in Dec and have never served as host cities? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n Now please use valid SQLite to answer the following questions: What are the names of high schoolers who have 3 or more friends?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the nurse has the most appointments? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\n input: question: What is the first and last name of artist who performed \"Le Pop\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"\n input: question: What are ids of the all distinct orders, sorted by placement date? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed\n input: question: What are the names of all colleges with a larger enrollment than the largest college in Florida? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n input: question: What are the teams that have the 5 oldest players? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Team FROM player ORDER BY Age DESC LIMIT 5\n Now please use valid SQLite to answer the following questions: Show the names of all of the high schooler Kyle's friends.",
    "Here are 5 examples including input and output:\n input: question: Which three cities have the largest regional population? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n input: question: What is the first and last name of the employee who reports to Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";\n input: question: What is the name and job title of the staff who was assigned the latest? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\n input: question: Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"\n input: question: display the employee id and salary of all employees who report to Payam (first name). serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )\n Now please use valid SQLite to answer the following questions: Return the names of friends of the high school student Kyle.",
    "Here are 5 examples including input and output:\n input: question: What are the state and country of all the cities that have post codes starting with 4.\\ serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"\n input: question: How many routes does American Airlines operate? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\n input: question: Find the number of courses provided in each semester and year. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n input: question: Count the number of films whose title contains the word 'Dummy'. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n input: question: Find all the songs that do not have a lead vocal. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n Now please use valid SQLite to answer the following questions: How many friends does the high school student Kyle have?",
    "Here are 5 examples including input and output:\n input: question: List the physicians' employee ids together with their primary affiliation departments' ids. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1\n input: question: What are the different cities where students live? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n input: question: For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\n input: question: What is allergy type of a cat allergy? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\n input: question: List the names of counties that do not have any cities. serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\n Now please use valid SQLite to answer the following questions: Count the number of friends Kyle has.",
    "Here are 5 examples including input and output:\n input: question: How many distinct parties are there for representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT count(DISTINCT Party) FROM representative\n input: question: Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n input: question: What are the different classes of races, and how many races correspond to each? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT CLASS ,  count(*) FROM race GROUP BY CLASS\n input: question: What are the names of courses with 1 credit? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT CName FROM COURSE WHERE Credits  =  1\n input: question: Find the founder of the company whose name begins with the letter 'S'. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT founder FROM manufacturers WHERE name LIKE 'S%'\n Now please use valid SQLite to answer the following questions: Show ids of all students who do not have any friends.",
    "Here are 5 examples including input and output:\n input: question: Show the ids of the employees who don't authorize destruction for any document. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: What are the names and trade names of the medicines which has 'Yes' value in the FDA record? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'\n input: question: Find the name and email of the user whose name contains the word ‘Swift’. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'\n input: question: Find the last name and hire date of the professor who is in office DRE 102. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n input: question: How many games are held after season 2007? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT count(*) FROM game WHERE season  >  2007\n Now please use valid SQLite to answer the following questions: What are the ids of high school students who do not have friends?",
    "Here are 5 examples including input and output:\n input: question: What is the structure of the document with the least number of accesses? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n input: question: Show names of shops that have more than one kind of device in stock. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\n input: question: Show the titles of books in descending order of publication price. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\n input: question: Find the maximum and minimum durations of tracks in milliseconds. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n input: question: Count the total number of counties. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT count(*) FROM county\n Now please use valid SQLite to answer the following questions: Show names of all high school students who do not have any friends.",
    "Here are 5 examples including input and output:\n input: question: Return the average price of products that have each category code. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code\n input: question: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";\n input: question: How many characteristics does the product named \"laurel\" have? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\n input: question: Count different addresses of each school. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\n input: question: For each main industry, what is the total number of companies for the industry with the highest total market value? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of students who have no friends?",
    "Here are 5 examples including input and output:\n input: question: Are the customers holding coupons with amount 500 bad or good? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500\n input: question: List the names of all routes in alphabetic order. serialized_schema:  | customer_deliveries | products : product_id , product_name , product_price , product_description | addresses : address_id , address_details , city , zip_postcode , state_province_county , country | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , date_became_customer | regular_orders : regular_order_id , distributer_id | regular_order_products : regular_order_id , product_id | actual_orders : actual_order_id , order_status_code , regular_order_id , actual_order_date | actual_order_products : actual_order_id , product_id | customer_addresses : customer_id , address_id , date_from , address_type , date_to | delivery_routes : route_id , route_name , other_route_details | delivery_route_locations : location_code , route_id , location_address_id , location_name | trucks : truck_id , truck_licence_number , truck_details | employees : employee_id , employee_address_id , employee_name , employee_phone | order_deliveries : location_code , actual_order_id , delivery_status_code , driver_employee_id , truck_id , delivery_date output: SELECT route_name FROM Delivery_Routes ORDER BY route_name\n input: question: Find the student ID and login name of the student with the most course enrollments serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the first and last name of the oldest employee? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1\n input: question: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid. serialized_schema:  | customers_campaigns_ecommerce | premises : premise_id , premises_type , premise_details | products : product_id , product_category , product_name | customers : customer_id , payment_method , customer_name , customer_phone , customer_email , customer_address , customer_login , customer_password | mailshot_campaigns : mailshot_id , product_category , mailshot_name , mailshot_start_date , mailshot_end_date | customer_addresses : customer_id , premise_id , date_address_from , address_type_code , date_address_to | customer_orders : order_id , customer_id , order_status_code , shipping_method_code , order_placed_datetime , order_delivered_datetime , order_shipping_charges | mailshot_customers : mailshot_id , customer_id , outcome_code , mailshot_customer_date | order_items : item_id , order_item_status_code , order_id , product_id , item_status_code , item_delivered_datetime , item_order_quantity output: SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'\n Now please use valid SQLite to answer the following questions: Show the ids of high schoolers who have friends and are also liked by someone else.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the three artists who have produced the most songs, and how many works did they produce? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n input: question: What are the first and last names of the customers with the 10 cheapest invoices? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;\n input: question: How many video games have type Massively multiplayer online game? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"\n input: question: What are the codes and names of the cheapest products in each category? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT code ,  name ,  min(price) FROM products GROUP BY name\n input: question: List all open years when at least two shops are opened. serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: What are the ids of students who both have friends and are liked?",
    "Here are 5 examples including input and output:\n input: question: Return the description and unit of measurement for products in the 'Herbs' category. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"\n input: question: List first name and last name of customers lived in city Lockmanfurt. serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n input: question: What are the ids of the students who either registered or attended a course? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n input: question: Find the total student enrollment for different affiliation type schools. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n input: question: What are the first and last names of the top 10 longest-serving employees? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n Now please use valid SQLite to answer the following questions: Show name of all students who have some friends and also are liked by someone else.",
    "Here are 5 examples including input and output:\n input: question: What are the distinct positions of the players from a country whose capital is Dublin? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"\n input: question: What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion\n input: question: Show all video game types and the number of video games in each type. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype\n input: question: Find the number of distinct courses that have enrolled students. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(course_id) FROM Student_Course_Enrolment\n input: question: Find the maximum and average capacity among rooms in each building. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n Now please use valid SQLite to answer the following questions: What are the names of high schoolers who both have friends and are liked?",
    "Here are 5 examples including input and output:\n input: question: Find the distinct names of all races held between 2014 and 2017? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n input: question: What is the number of students playing as a goalie? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(*) FROM tryout WHERE pPos  =  'goalie'\n input: question: What are the names of ships that were involved in a mission launched after 1928? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\n input: question: What is the average and minimum age of all artists from United States. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n input: question: Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"\n Now please use valid SQLite to answer the following questions: Count the number of likes for each student id.",
    "Here are 5 examples including input and output:\n input: question: display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )\n input: question: Which allergy is the most common? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1\n input: question: List the name of ships that are not involved in any mission serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\n input: question: What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"\n input: question: Find the countries that have never participated in any competition with Friendly type. serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n Now please use valid SQLite to answer the following questions: How many likes correspond to each student id?",
    "Here are 5 examples including input and output:\n input: question: Show storm name with at least two regions and 10 cities affected. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10\n input: question: Find the IDs of customers whose name contains \"Diana\". serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n input: question: List the order dates of all the bookings. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Order_Date FROM BOOKINGS\n input: question: Which restaurants have highest rating? List the restaurant name and its rating. serialized_schema:  | restaurant_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | restaurant : resid , resname , address , rating | type_of_restaurant : resid , restypeid | restaurant_type : restypeid , restypename , restypedescription | visits_restaurant : stuid , resid , time , spent output: SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n input: question: What are the last names of employees who serve at most 20 customers? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\n Now please use valid SQLite to answer the following questions: Show the names of high schoolers who have likes, and numbers of likes for each.",
    "Here are 5 examples including input and output:\n input: question: What are the ids of all songs that are available on mp4 or have a higher resolution than 720? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\n input: question: How many members are there? serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT count(*) FROM member\n input: question: Show the name, home city, and age for all drivers. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT name ,  home_city ,  age FROM driver\n input: question: Find the title and star rating of the movie that got the least rating star for each reviewer. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID\n input: question: What are the names of the courses in alphabetical order? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT course_name FROM courses ORDER BY course_name\n Now please use valid SQLite to answer the following questions: What are the names of high schoolers who have likes, and how many likes does each have?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the course that has the most student enrollment? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the id of the organization with the maximum number of outcomes and how many outcomes are there? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n input: question: What are the ids, full names, and phones of each customer? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n input: question: Find the id and name of the staff who has been assigned for the shortest period. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1\n input: question: Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"\n Now please use valid SQLite to answer the following questions: What is the name of the high schooler who has the greatest number of likes?",
    "Here are 5 examples including input and output:\n input: question: What are the phones and emails of workshop groups in which services are performed? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n input: question: List all countries and their number of airlines in the descending order of number of airlines. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC\n input: question: Which advisors are advising more than 2 students? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2\n input: question: What are the dates of transactions with at least 100 share count or amount bigger than 100? serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100\n input: question: Which range contains the most mountains? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Give the name of the student with the most likes.",
    "Here are 5 examples including input and output:\n input: question: How many customers have email that contains \"gmail.com\"? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n input: question: Return the type of transaction with the highest total amount. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1\n input: question: Find the average and total capacity of dorms for the students with gender X. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n input: question: What are the names of all directors who made one movie? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1\n input: question: Find the names of customers who have bought by at least three distinct products. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3\n Now please use valid SQLite to answer the following questions: Show the names of students who have at least 2 likes.",
    "Here are 5 examples including input and output:\n input: question: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n input: question: List the age of all music artists. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Age FROM artist\n input: question: Show the names and heights of buildings with at least two institutions founded after 1880. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2\n input: question: Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1\n input: question: What are the times used by climbers who climbed mountains in the country of Uganda? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"\n Now please use valid SQLite to answer the following questions: What are the names of students who have 2 or more likes?",
    "Here are 5 examples including input and output:\n input: question: What is department name and office for the professor whose last name is Heffington? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'\n input: question: How many different cities do have some airport in the country of Greenland? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'\n input: question: Find the number of different cities which banks are located at. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(DISTINCT city) FROM bank\n input: question: How many candidates are there? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT count(*) FROM candidate\n input: question: What are the first names and last names of students with address in Wisconsin state? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"\n Now please use valid SQLite to answer the following questions: Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "Here are 5 examples including input and output:\n input: question: For each city, how many branches opened before 2010? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city\n input: question: What are the names and locations of all enzymes listed? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name ,  LOCATION FROM enzyme\n input: question: Which contact channel codes were used less than 5 times? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n input: question: Show the names and ids of tourist attractions that are visited at least two times. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n input: question: How many different students play games? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT StuID) FROM Plays_games\n Now please use valid SQLite to answer the following questions: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "Here are 5 examples including input and output:\n input: question: What is the number of professors who are in the Accounting or Biology departments? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n input: question: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n input: question: Find all information of all the products with a price between $60 and $120. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT * FROM products WHERE price BETWEEN 60 AND 120\n input: question: Display the first name, and department number for all employees whose last name is \"McEwen\". serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\n input: question: What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)\n Now please use valid SQLite to answer the following questions: How many likes does Kyle have?",
    "Here are 5 examples including input and output:\n input: question: Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)\n input: question: Show the id and salary of Mark Young. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n input: question: What are the names and location of the wrestlers? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name ,  LOCATION FROM wrestler\n input: question: Which cities have regional population above 8000000 or below 5000000? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000\n input: question: the names of models that launched between 2002 and 2004. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\n Now please use valid SQLite to answer the following questions: Return the number of likes that the high schooler named Kyle has.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the storms that affected both the regions of Afghanistan and Albania? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\n input: question: What are the distinct salaries of all instructors who earned less than the maximum salary? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)\n input: question: Find the address of the location named \"UK Gallery\". serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n input: question: What are the name, origin and owner of each program? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name ,  origin ,  OWNER FROM program\n input: question: Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n Now please use valid SQLite to answer the following questions: Find the average grade of all students who have some friends.",
    "Here are 5 examples including input and output:\n input: question: How many companies were created by Andy? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\n input: question: How many churches have a wedding in year 2016? serialized_schema:  | wedding | people : people_id , name , country , is_male , age | church : church_id , name , organized_by , open_date , continuation_of | wedding : church_id , male_id , female_id , year output: SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016\n input: question: What is the maximum OMIM value in the database? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT max(OMIM) FROM enzyme\n input: question: Find the id and name of the stadium where the largest number of injury accidents occurred. serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n input: question: How many distinct countries are the climbers from? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT COUNT(DISTINCT Country) FROM climber\n Now please use valid SQLite to answer the following questions: What is the average grade of students who have friends?",
    "Here are 5 examples including input and output:\n input: question: Show the names of countries and the average speed of roller coasters from each country. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n input: question: Find the average rating star for each movie that are not reviewed by Brittany Harris. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID\n input: question: Find the first names of students studying in room 108. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM list WHERE classroom  =  108\n input: question: Find the average and maximum rating of all reviews. serialized_schema:  | epinions_1 | item : i_id , title | review : a_id , u_id , i_id , rating , rank | useracct : u_id , name | trust : source_u_id , target_u_id , trust output: SELECT avg(rating) ,  max(rating) FROM review\n input: question: What are the distinct first names and cities of the students who have allergy either to milk or to cat? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"\n Now please use valid SQLite to answer the following questions: Find the minimum grade of students who have no friends.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the states that have 2 to 4 employees living there? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;\n input: question: What are the shipping agent names? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT shipping_agent_name FROM Ref_Shipping_Agents;\n input: question: What is the film title and inventory id of the item in the inventory which was rented most frequently? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1\n input: question: For each submission, show the author and their affiliated college. serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author ,  College FROM submission\n input: question: Find the number of different cities that employees live in. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(DISTINCT city) FROM EMPLOYEE\n Now please use valid SQLite to answer the following questions: What is the lowest grade of students who do not have any friends?",
    "Here are 5 examples including input and output:\n input: question: Find the names of procedures which physician John Wen was trained in. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: Count the number of companies. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT count(*) FROM Companies\n input: question: What are the schools that were either founded before 1850 or are public? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\n input: question: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'? serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'\n input: question: Which is the email of the party that has used the services the most number of times? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which states have both owners and professionals living there?",
    "Here are 5 examples including input and output:\n input: question: What are the different regions of clubs in ascending alphabetical order? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT DISTINCT Region FROM club ORDER BY Region ASC\n input: question: List the ids of all distinct orders ordered by placed date. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed\n input: question: How many students have cat allergies? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n input: question: Give the full name and staff id of the staff who has handled the fewest payments. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n input: question: Show all the distinct institution types. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT DISTINCT TYPE FROM institution\n Now please use valid SQLite to answer the following questions: Find the states where both owners and professionals live.",
    "Here are 5 examples including input and output:\n input: question: Show writers who have published a book with price more than 4000000. serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n input: question: Show the number of customers for each gender. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT gender ,  count(*) FROM Customers GROUP BY gender\n input: question: Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC\n input: question: How many parks are there in Atlanta city? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT count(*) FROM park WHERE city = 'Atlanta';\n input: question: Which vocal type has the band mate with last name \"Heilo\" played the most? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the average age of the dogs who have gone through any treatments?",
    "Here are 5 examples including input and output:\n input: question: Find the name of physicians who are affiliated with Surgery or Psychiatry department. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n input: question: What is the role name and role description for employee called Ebba? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"\n input: question: Give me a list of the names of all songs ordered by their resolution. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song ORDER BY resolution\n input: question: What are the names, classes, and dates for all races? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT name ,  CLASS ,  date FROM race\n input: question: How many parties are there? serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT count(*) FROM party\n Now please use valid SQLite to answer the following questions: Find the average age of the dogs who went through treatments.",
    "Here are 5 examples including input and output:\n input: question: what is the name of the instructor who is in Statistics department and earns the lowest salary? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n input: question: Show the average and maximum damage for all storms with max speed higher than 1000. serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000\n input: question: Which cities' temperature in March is lower than that in July or higher than that in Oct? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct\n input: question: List the number of invoices and the invoice total from California. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\n input: question: What is the largest major? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "Here are 5 examples including input and output:\n input: question: Show the names of the buildings that have more than one company offices. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1\n input: question: What is the name of the customer who has made the largest amount of claim in a single claim? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\n input: question: Which college has any student who is a goalie and succeeded in the tryout. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'\n input: question: How many distinct students have been in detention? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT count(DISTINCT student_id) FROM Students_in_Detention\n input: question: Find the names of states that have some college students playing in the mid position but not in the goalie position. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n Now please use valid SQLite to answer the following questions: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "Here are 5 examples including input and output:\n input: question: Find the number of routes operated by American Airlines. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\n input: question: Of complaints with the type code \"Product Failure\", how many had each different status code? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code\n input: question: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\n input: question: Show the denomination shared by schools founded before 1890 and schools founded after 1900 serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n input: question: How many assets does each third party company supply? List the count and the company id. serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n Now please use valid SQLite to answer the following questions: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "Here are 5 examples including input and output:\n input: question: List the all the distinct names of the products with the characteristic name 'warm'. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n input: question: For each classroom, show the classroom number and count the number of distinct grades that use the room. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom\n input: question: List the grape, winery and year of the wines whose price is bigger than 100 ordered by year. serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR\n input: question: Show the type of school and the number of buses for each type. serialized_schema:  | school_bus | driver : driver_id , name , party , home_city , age | school : school_id , grade , school , location , type | school_bus : school_id , driver_id , years_working , if_full_time output: SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type\n input: question: What is the nickname of the employee named Janessa Sawayn? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n Now please use valid SQLite to answer the following questions: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "Here are 5 examples including input and output:\n input: question: List the names of people that are not employed by any company serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\n input: question: Retrieve all the last names of authors in alphabetical order. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT lname FROM authors ORDER BY lname\n input: question: What are the names of modern rooms that have a base price lower than $160 and two beds. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';\n input: question: How many students are advised by each rank of faculty? List the rank and the number of students. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank\n input: question: Compute the average profits companies make. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT avg(Profits_billion) FROM Companies\n Now please use valid SQLite to answer the following questions: Which first names are used for professionals or owners but are not used as dog names?",
    "Here are 5 examples including input and output:\n input: question: Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"\n input: question: What are the maximum price and score of wines in each year? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n input: question: How many tracks are in the AAC audio file media type? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"\n input: question: What is average number of students enrolled in Florida colleges? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(enr) FROM College WHERE state  =  'FL'\n input: question: Find the id of the courses that do not have any prerequisite? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\n Now please use valid SQLite to answer the following questions: Find the first names that are used for professionals or owners but are not used as dog names.",
    "Here are 5 examples including input and output:\n input: question: How many allergies are there? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(DISTINCT allergy) FROM Allergy_type\n input: question: Show the carriers of devices in stock at more than one shop. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1\n input: question: What are the course codes for every class that the student with the last name Smithson took? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'\n input: question: Show flight number for all flights with more than 2000 distance. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT flno FROM Flight WHERE distance  >  2000\n input: question: What is the first, last name, gpa of the youngest one among students whose GPA is above 3? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "Here are 5 examples including input and output:\n input: question: How many patients do each physician take care of? List their names and number of patients they take care of. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n input: question: How many regions do we have? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT count(*) FROM region\n input: question: What are the names of shops that have more than a single kind of device in stock? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\n input: question: What is the number of routes whose destinations are Italian airports? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n input: question: What is the last date that a staff member left a project? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "Here are 5 examples including input and output:\n input: question: What are the names of documents that have both one of the three most common types and one of three most common structures? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n input: question: What is the name of the perpetrator with the biggest weight. serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1\n input: question: Find the number of apartments that have no facility. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)\n input: question: Which room has the largest number of reservations? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n input: question: On which day was the order placed whose shipment tracking number is 3452? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\n Now please use valid SQLite to answer the following questions: Which owner owns the most dogs? List the owner id, first name and last name.",
    "Here are 5 examples including input and output:\n input: question: Find the number of female students (with F sex) living in Smith Hall serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n input: question: How many distinct governors are there? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT count(DISTINCT Governor) FROM party\n input: question: Show all donor names. serialized_schema:  | school_finance | school : school_id , school_name , location , mascot , enrollment , ihsaa_class , ihsaa_football_class , county | budget : school_id , year , budgeted , total_budget_percent_budgeted , invested , total_budget_percent_invested , budget_invested_percent | endowment : endowment_id , school_id , donator_name , amount output: SELECT DISTINCT donator_name FROM endowment\n input: question: What are the names of all the different reviewers who rates Gone with the Wind? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'\n input: question: What are the maximum and average height of the mountains? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT max(height) ,  avg(height) FROM mountain\n Now please use valid SQLite to answer the following questions: Return the owner id, first name and last name of the owner who has the most dogs.",
    "Here are 5 examples including input and output:\n input: question: Who is the youngest male? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n input: question: Which project made the most number of outcomes? List the project details and the project id. serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n input: question: Which city has the highest temperature in February? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1\n input: question: Find the names of districts where have both city mall and village store type stores. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n input: question: List all schools and their nicknames in the order of founded year. serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT school ,  nickname FROM university ORDER BY founded\n Now please use valid SQLite to answer the following questions: Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "Here are 5 examples including input and output:\n input: question: What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\n input: question: How many clubs have total medals less than 10? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT count(*) FROM club_rank WHERE Total  <  10\n input: question: display all the information of the employees whose salary if within the range of smallest salary and 2500. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500\n input: question: What are the names of all females who are friends with Zach? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'\n input: question: What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200\n Now please use valid SQLite to answer the following questions: What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "Here are 5 examples including input and output:\n input: question: What is the maximum and minimum resolution of all songs that are approximately 3 minutes long? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\n input: question: How many tracks belong to rock genre? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n input: question: What are the main industries of the companies without gas stations and what are the companies? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\n input: question: Find the distinct student first names of all students that have grade point at least 3.8 in one course. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8\n input: question: What are the different software platforms for devices, ordered by frequency descending? serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n Now please use valid SQLite to answer the following questions: What is the name of the breed with the most dogs?",
    "Here are 5 examples including input and output:\n input: question: Show the names and ids of tourist attractions that are visited at most once. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n input: question: Find all the players' first name and last name who have empty death record. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT name_first ,  name_last FROM player WHERE death_year = '';\n input: question: Which orders have shipment after 2000-01-01? Give me the order ids. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"\n input: question: Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000. serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\n input: question: Find the product names that are colored 'white' but do not have unit of measurement \"Handful\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n Now please use valid SQLite to answer the following questions: Which breed do the most dogs have? Give me the breed name.",
    "Here are 5 examples including input and output:\n input: question: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'\n input: question: Which customers do not have a first notification of loss record? Give me the customer names. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n input: question: Show teams that have suffered more than three eliminations. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\n input: question: What is the total amount of moeny paid by the customer Carole Bernhard? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\n input: question: What are the names of movies that get 3 star and 4 star? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4\n Now please use valid SQLite to answer the following questions: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "Here are 5 examples including input and output:\n input: question: Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order). serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC\n input: question: Find the forename and surname of drivers whose nationality is German? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"\n input: question: Find the name, city, and country of the airport that has the lowest altitude. serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n input: question: Which problem log was created most recently? Give me the log id. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1\n input: question: Find the total number of students in each department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n Now please use valid SQLite to answer the following questions: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "Here are 5 examples including input and output:\n input: question: How many accelerators are not compatible with the browsers listed ? serialized_schema:  | browser_web | web_client_accelerator : id , name , operating_system , client , connection | browser : id , name , market_share | accelerator_compatible_browser : accelerator_id , browser_id , compatible_since_year output: SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );\n input: question: What are the movie titles and average rating of the movies with the lowest average rating? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1\n input: question: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n input: question: What are the names and locations of festivals? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT Festival_Name ,  LOCATION FROM festival_detail\n input: question: What is the number of cities in the United States with more than 3 airports? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n Now please use valid SQLite to answer the following questions: What is the description of the treatment type that costs the least money in total?",
    "Here are 5 examples including input and output:\n input: question: Find the number of male (sex is 'M') students who have some food type allery. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n input: question: What is the number of distinct teams that suffer elimination? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT COUNT (DISTINCT team) FROM elimination\n input: question: What are the full names and department ids for the lowest paid employees across all departments. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)\n input: question: Find the average hours of all projects. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT avg(hours) FROM projects\n input: question: What are the distinct names and phone numbers for suppliers who have red jeans? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\n Now please use valid SQLite to answer the following questions: Give me the description of the treatment type whose total cost is the lowest.",
    "Here are 5 examples including input and output:\n input: question: How many schools are in the basketball match? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT count(DISTINCT school_id) FROM basketball_match\n input: question: What are the names of regions that were affected by the storm in which the most people died? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1\n input: question: In February, which city marks the highest temperature? serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1\n input: question: What is the department name and corresponding building for the department with the greatest budget? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1\n input: question: List the name of all different customers who have some loan sorted by their total loan amount. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)\n Now please use valid SQLite to answer the following questions: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "Here are 5 examples including input and output:\n input: question: How many wines are produced at Robert Biale winery? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n input: question: Which head's name has the substring 'Ha'? List the id and name. serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'\n input: question: Give the average number of cities within markets that had a low market estimation larger than 10000? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n input: question: Count the number of distinct product types. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT count(DISTINCT product_type_code) FROM products\n input: question: Show origins of all flights with destination Honolulu. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\n Now please use valid SQLite to answer the following questions: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "Here are 5 examples including input and output:\n input: question: Show different occupations along with the number of players in each occupation. serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation\n input: question: What are the songs in volumes associated with the artist aged 32 or older? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32\n input: question: Show the times of elimination by \"Punk\" or \"Orton\". serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"\n input: question: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\n input: question: Give the distinct famous release dates for all artists. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT distinct(Famous_Release_date) FROM artist\n Now please use valid SQLite to answer the following questions: Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "Here are 5 examples including input and output:\n input: question: For each origin, how many flights came from there? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin ,  count(*) FROM Flight GROUP BY origin\n input: question: What are the names and prices of all products in the store? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM products\n input: question: What are the distinct names of wines that have appellations in the North Coast area? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"\n input: question: Find the names of all reviewers who have contributed three or more ratings. serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3\n input: question: What is the description of document status code 'working'? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";\n Now please use valid SQLite to answer the following questions: Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "Here are 5 examples including input and output:\n input: question: What are the names of parties and their respective regions? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id\n input: question: What is the order date of each booking? serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Order_Date FROM BOOKINGS\n input: question: Show the id and details of the investor that has the largest number of transactions. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Return the booking start date and end date for the apartments that have type code \"Duplex\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"\n input: question: what are the names of people who did not participate in the candidate election. serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)\n Now please use valid SQLite to answer the following questions: What are the first name and last name of the professionals who have done treatment with cost below average?",
    "Here are 5 examples including input and output:\n input: question: How many Bangladeshi artists are listed? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n input: question: Show all distinct location names. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT DISTINCT Location_Name FROM LOCATIONS\n input: question: Show the names of companies in the banking or retailing industry? serialized_schema:  | company_employee | people : people_id , age , name , nationality , graduation_college | company : company_id , name , headquarters , industry , sales_in_billion , profits_in_billion , assets_in_billion , market_value_in_billion | employment : company_id , people_id , year_working output: SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"\n input: question: What is the customer id of the customer who has the most orders? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: Which products has been complained by the customer who has filed least amount of complaints? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1\n Now please use valid SQLite to answer the following questions: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "Here are 5 examples including input and output:\n input: question: Who is the youngest employee in the company? List employee's first and last name. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;\n input: question: Show the station name and number of trains in each station. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id\n input: question: What are the mission codes, fates, and names of the ships involved? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n input: question: What are the names of the songs whose title has the word \"the\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT title FROM songs WHERE title LIKE '% the %'\n input: question: Find the campus fee of \"San Jose State University\" in year 2000. serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000\n Now please use valid SQLite to answer the following questions: List the date of each treatment, together with the first name of the professional who operated it.",
    "Here are 5 examples including input and output:\n input: question: Count the products that have the color description \"white\" or have the characteristic name \"hot\". serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\n input: question: Find the team of the player of the highest age. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Team FROM player ORDER BY Age DESC LIMIT 1\n input: question: What are the names of all colleges that have two or more players? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2\n input: question: How many locations are listed in the database? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT count(*) FROM Ref_locations\n input: question: What is the characteristic name used by most number of the products? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the date and the operating professional's first name of each treatment?",
    "Here are 5 examples including input and output:\n input: question: Show the season, the player, and the name of the team that players belong to. serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id\n input: question: Find courses that ran in Fall 2009 and in Spring 2010. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010\n input: question: List all the services in the alphabetical order. serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT service_name FROM services ORDER BY service_name\n input: question: Show the average age for male and female students. serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT avg(age) ,  sex FROM Student GROUP BY sex\n input: question: What are the names of mountains in ascending alphabetical order? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT Name FROM mountain ORDER BY Name ASC\n Now please use valid SQLite to answer the following questions: List the cost of each treatment and the corresponding treatment type description.",
    "Here are 5 examples including input and output:\n input: question: Count the number of documents that do not have expenses. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )\n input: question: List the season, home team, away team of all the games. serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT season ,  home_team ,  away_team FROM game\n input: question: Return the first names and last names of all guests serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT guest_first_name ,  guest_last_name FROM Guests\n input: question: What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n input: question: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n Now please use valid SQLite to answer the following questions: What are the cost and treatment type description of each treatment?",
    "Here are 5 examples including input and output:\n input: question: List all of the ids for left-footed players with a height between 180cm and 190cm. serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"\n input: question: Which category does the product named \"flax\" belong to? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_code FROM products WHERE product_name  =  \"flax\"\n input: question: Find the origins from which more than 1 train starts. serialized_schema:  | station_weather | train : id , train_number , name , origin , destination , time , interval | station : id , network_name , services , local_authority | route : train_id , station_id | weekly_weather : station_id , day_of_week , high_temperature , low_temperature , precipitation , wind_speed_mph output: SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1\n input: question: How many services are there? serialized_schema:  | insurance_fnol | customers : customer_id , customer_name | services : service_id , service_name | available_policies : policy_id , policy_type_code , customer_phone | customers_policies : customer_id , policy_id , date_opened , date_closed | first_notification_of_loss : fnol_id , customer_id , policy_id , service_id | claims : claim_id , fnol_id , effective_date | settlements : settlement_id , claim_id , effective_date , settlement_amount output: SELECT count(*) FROM services\n input: question: What is the area of the appelation that produces the highest number of wines before the year of 2010? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List each owner's first name, last name, and the size of his for her dog.",
    "Here are 5 examples including input and output:\n input: question: What are the ids and names of the architects who built at least 3 bridges ? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n input: question: List the names of buildings with at least 200 feet of height and with at least 20 floors. serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20\n input: question: List all information about college sorted by enrollment number in the ascending order. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT * FROM College ORDER BY enr\n input: question: What is the count of aircrafts that have a distance between 1000 and 5000? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000\n input: question: In how many different cities are banks located? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT count(DISTINCT city) FROM bank\n Now please use valid SQLite to answer the following questions: What are each owner's first name, last name, and the size of their dog?",
    "Here are 5 examples including input and output:\n input: question: Find the ship type that are used by both ships with Panama and Malta flags. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'\n input: question: Show the number of trains serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT count(*) FROM train\n input: question: What are the details of the project that is producing both patents and papers as outcomes? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'\n input: question: What is the number of states that has some college whose enrollment is larger than the average enrollment? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n input: question: Return the ids and details corresponding to projects for which there are more than two documents. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n Now please use valid SQLite to answer the following questions: List pairs of the owner's first name and the dogs's name.",
    "Here are 5 examples including input and output:\n input: question: How many students are there? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM student\n input: question: What are the names, color descriptions, and product descriptions for products in the 'Herbs' category? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"\n input: question: How many train stations are there? serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT count(*) FROM station\n input: question: return all columns of the albums created in the year of 2012. serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2012\n input: question: Which customers have made at least two orders? Give me each customer name and number of orders made. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: What are each owner's first name and their dogs's name?",
    "Here are 5 examples including input and output:\n input: question: How many sports do we have? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT count(DISTINCT sportname) FROM Sportsinfo\n input: question: What is the sum of checking and savings balances for all customers, ordered by the total balance? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance\n input: question: What are the salaries and manager ids for employees who have managers? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\n input: question: What is the total salary paid by team Boston Red Stockings in 2010? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010\n input: question: What are the staff roles of the staff who serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'\n Now please use valid SQLite to answer the following questions: List the names of the dogs of the rarest breed and the treatment dates of them.",
    "Here are 5 examples including input and output:\n input: question: What are the times of elimination for wrestlers with over 50 days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\n input: question: What is the zip code that has the lowest average mean sea level pressure? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1\n input: question: What is the level name of the cheapest catalog (in USD)? serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n input: question: How many female Professors do we have? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"\n input: question: What are the names and year of joining for artists that do not have the country \"United States\"? serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT name ,  year_join FROM artist WHERE country != 'United States'\n Now please use valid SQLite to answer the following questions: Which dogs are of the rarest breed? Show their names and treatment dates.",
    "Here are 5 examples including input and output:\n input: question: what are the order id and customer id of the oldest order? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n input: question: Find the starting date and ending data in location for the document named \"Robin CV\". serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\n input: question: What is the last name of the musician who was in the most songs? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1\n input: question: Find the id of the product ordered the most often on invoices. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the number of faculty at Long Beach State University in 2002? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"\n Now please use valid SQLite to answer the following questions: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "Here are 5 examples including input and output:\n input: question: What is the name corresponding to the accoung with the lowest sum of checking and savings balances? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1\n input: question: Count the number of exhibitions that happened in or after 2005. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n input: question: Return the day Number and stored date for all the documents. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date\n input: question: List total amount of  invoice from Chicago, IL. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n input: question: What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80\n Now please use valid SQLite to answer the following questions: Find the first names of owners living in Virginia and the names of dogs they own.",
    "Here are 5 examples including input and output:\n input: question: What are all the distinct last names of all the engineers? serialized_schema:  | assets_maintenance | third_party_companies : company_id , company_type , company_name , company_address , other_company_details | maintenance_contracts : maintenance_contract_id , maintenance_contract_company_id , contract_start_date , contract_end_date , other_contract_details | parts : part_id , part_name , chargeable_yn , chargeable_amount , other_part_details | skills : skill_id , skill_code , skill_description | staff : staff_id , staff_name , gender , other_staff_details | assets : asset_id , maintenance_contract_id , supplier_company_id , asset_details , asset_make , asset_model , asset_acquired_date , asset_disposed_date , other_asset_details | asset_parts : asset_id , part_id | maintenance_engineers : engineer_id , company_id , first_name , last_name , other_details | engineer_skills : engineer_id , skill_id | fault_log : fault_log_entry_id , asset_id , recorded_by_staff_id , fault_log_entry_datetime , fault_description , other_fault_details | engineer_visits : engineer_visit_id , contact_staff_id , engineer_id , fault_log_entry_id , fault_status , visit_start_datetime , visit_end_datetime , other_visit_details | part_faults : part_fault_id , part_id , fault_short_name , fault_description , other_fault_details | fault_log_parts : fault_log_entry_id , part_fault_id , fault_status | skills_required_to_fix : part_fault_id , skill_id output: SELECT DISTINCT last_name FROM Maintenance_Engineers\n input: question: Find the name and email for the users who have more than one follower. serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n input: question: Show the census ranking of cities whose status are not \"Village\". serialized_schema:  | farm | city : city_id , official_name , status , area_km_2 , population , census_ranking | farm : farm_id , year , total_horses , working_horses , total_cattle , oxen , bulls , cows , pigs , sheep_and_goats | farm_competition : competition_id , year , theme , host_city_id , hosts | competition_record : competition_id , farm_id , rank output: SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n input: question: What are the start date and end date of the booking that has booked the product named 'Book collection A'? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'\n input: question: What is the primary conference of the school that has the lowest acc percent score in the competition? serialized_schema:  | university_basketball | basketball_match : team_id , school_id , team_name , acc_regular_season , acc_percent , acc_home , acc_road , all_games , all_games_percent , all_home , all_road , all_neutral | university : school_id , school , location , founded , affiliation , enrollment , nickname , primary_conference output: SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the pilots that have not won any matches in Australia? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n input: question: What are the first names of all students taking accoutning and Computer Information Systems classes? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'\n input: question: For each location, how many gas stations are there in order? serialized_schema:  | gas_company | company : company_id , rank , company , headquarters , main_industry , sales_billion , profits_billion , assets_billion , market_value | gas_station : station_id , open_year , location , manager_name , vice_manager_name , representative_name | station_company : station_id , company_id , rank_of_the_year output: SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n input: question: How many distinct locations have the things with service detail 'Unsatisfied' been located in? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'\n input: question: What are the details and id of the project with the most outcomes? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Find the arriving date and the departing date of the dogs that received a treatment.",
    "Here are 5 examples including input and output:\n input: question: What is the largest payment amount? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n input: question: Who belong to the institution \"University of Oxford\"? Show the first names and last names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n input: question: Count the number of different countries that climbers are from. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT COUNT(DISTINCT Country) FROM climber\n input: question: Which staff handled least number of payments? List the full name and the id. serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n input: question: List the email addresses of the drama workshop groups located in Alaska state. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"\n Now please use valid SQLite to answer the following questions: List the last name of the owner owning the youngest dog.",
    "Here are 5 examples including input and output:\n input: question: List the names of all music genres. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT Name FROM GENRE\n input: question: What are the different card type codes, and how many different customers hold each type? serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code\n input: question: Find the players' first name and last name who won award both in 1960 and in 1961. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n input: question: List all role codes, role names, and role descriptions. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code ,  role_name ,  role_description FROM ROLES\n input: question: What campus has the most faculties in 2003? serialized_schema:  | csu_1 | campuses : id , campus , location , county , year | csu_fees : campus , year , campusfee | degrees : year , campus , degrees | discipline_enrollments : campus , discipline , year , undergraduate , graduate | enrollments : campus , year , totalenrollment_ay , fte_ay | faculty : campus , year , faculty output: SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Who owns the youngest dog? Give me his or her last name.",
    "Here are 5 examples including input and output:\n input: question: What address was the document with id 4 mailed to? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;\n input: question: Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"\n input: question: Show the first names and last names of customers without any account. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n input: question: Show the names of members in ascending order of their rank in rounds. serialized_schema:  | decoration_competition | college : college_id , name , leader_name , college_location | member : member_id , name , country , college_id | round : round_id , member_id , decoration_theme , rank_in_round output: SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC\n input: question: Which teams had more than 3 eliminations? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\n Now please use valid SQLite to answer the following questions: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "Here are 5 examples including input and output:\n input: question: Count the number of wrestlers. serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT count(*) FROM wrestler\n input: question: How many employees live in Georgia? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\n input: question: What are the ids of the students who registered for some courses but had the least number of courses for all students? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n input: question: What is the name of organization that has the greatest number of contact individuals? serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n input: question: Find the number of classes offered for all class rooms that held at least 2 classes. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\n Now please use valid SQLite to answer the following questions: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "Here are 5 examples including input and output:\n input: question: What are the states, account types, and credit scores for customers who have 0 loans? serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n input: question: Find the id and first name of the student that has the most number of assessment notes? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n input: question: Show last names for all student who are on scholarship. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'\n input: question: Show the name of the shop that has the most kind of devices in stock. serialized_schema:  | device | device : device_id , device , carrier , package_version , applications , software_platform | shop : shop_id , shop_name , location , open_date , open_year | stock : shop_id , device_id , quantity output: SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What is the name and price of the cheapest product? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the arriving date and the departing date of all the dogs?",
    "Here are 5 examples including input and output:\n input: question: What is the placement date of the order whose invoice number is 10? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10\n input: question: What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'\n input: question: Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"\n input: question: List the distinct ranges of the mountains with the top 3 prominence. serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3\n input: question: Show ids for all employees who don't have a certificate. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n Now please use valid SQLite to answer the following questions: List the arrival date and the departure date for all the dogs.",
    "Here are 5 examples including input and output:\n input: question: What is the weight of the shortest person? serialized_schema:  | entrepreneur | entrepreneur : entrepreneur_id , people_id , company , money_requested , investor | people : people_id , name , height , weight , date_of_birth output: SELECT Weight FROM people ORDER BY Height ASC LIMIT 1\n input: question: For each city, return the highest latitude among its stations. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT city ,  max(lat) FROM station GROUP BY city\n input: question: Find the saving balance of the account with the highest checking balance. serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\n input: question: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n input: question: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007. serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\n Now please use valid SQLite to answer the following questions: How many dogs went through any treatments?",
    "Here are 5 examples including input and output:\n input: question: What is the name and salary of all employees in order of salary? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  salary FROM Employee ORDER BY salary\n input: question: What are the names of the ships  that are from either the US or the UK? serialized_schema:  | ship_mission | mission : mission_id , ship_id , code , launched_year , location , speed_knots , fate | ship : ship_id , name , type , nationality , tonnage output: SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"\n input: question: How many party events do we have? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(*) FROM party_events\n input: question: What is the maximum number that a certain service is provided? List the service id, details and number. serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1\n input: question: How many times the number of adults and kids staying in a room reached the maximum capacity of the room? serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;\n Now please use valid SQLite to answer the following questions: Count the number of dogs that went through a treatment.",
    "Here are 5 examples including input and output:\n input: question: Show publishers with a book published in 1989 and a book in 1990. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n input: question: Find the number of classes in each department. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code\n input: question: List categories that have at least two books after year 1989. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2\n input: question: Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\". serialized_schema:  | twitter_1 | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers output: SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')\n input: question: find the full name of employees who report to Nancy Edwards? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";\n Now please use valid SQLite to answer the following questions: How many professionals have performed any treatment to dogs?",
    "Here are 5 examples including input and output:\n input: question: What are the years of film market estimation for the market of Japan, ordered by year descending? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC\n input: question: What are the naems of all the projects, and how many scientists were assigned to each of them? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\n input: question: What are the title and issues of the books? serialized_schema:  | book_2 | publication : publication_id , book_id , publisher , publication_date , price | book : book_id , title , issues , writer output: SELECT Title ,  Issues FROM book\n input: question: Select the project names which are not assigned yet. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n input: question: What are all the labels? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT DISTINCT label FROM Albums\n Now please use valid SQLite to answer the following questions: Find the number of professionals who have ever treated dogs.",
    "Here are 5 examples including input and output:\n input: question: What are the names of the artists that are from the UK and sang songs in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n input: question: Find the accreditation level that more than 3 phones use. serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3\n input: question: Count the number of different hometowns of these people. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT count(DISTINCT Hometown) FROM people\n input: question: Show the name, phone, and payment method code for all customers in descending order of customer number. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n input: question: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n Now please use valid SQLite to answer the following questions: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "Here are 5 examples including input and output:\n input: question: What is the name of the activity with the most students? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n input: question: What are the phone, room, and building of the faculty member called Jerry Prince? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"\n input: question: What are the names of all schools that have students trying out for the position of goal and 'mid'-field. serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'\n input: question: Find the number of rooms with more than 50 capacity for each building. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building\n input: question: Find the names of bank branches that have provided a loan to any customer whose credit score is below 100. serialized_schema:  | loan_1 | bank : branch_id , bname , no_of_customers , city , state | customer : cust_id , cust_name , acc_type , acc_bal , no_of_loans , credit_score , branch_id , state | loan : loan_id , loan_type , cust_id , branch_id , amount output: SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100\n Now please use valid SQLite to answer the following questions: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "Here are 5 examples including input and output:\n input: question: Find the name, type, and flag of the ship that is built in the most recent year. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1\n input: question: what is id of students who registered some courses but the least number of courses in these students? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n input: question: Find the name of the ships that have more than one captain. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n input: question: Show all date and share count of transactions. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT date_of_transaction ,  share_count FROM TRANSACTIONS\n input: question: List all cities of addresses in alphabetical order. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT city FROM Addresses ORDER BY city\n Now please use valid SQLite to answer the following questions: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "Here are 5 examples including input and output:\n input: question: What are the names of every person who has a friend over 40 and under 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n input: question: What are the ids of songs that are available in either mp4 format or have resolution above 720? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\n input: question: What is the number of airports per country, ordered from most to least? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\n input: question: How many countries do not have an roller coaster longer than 3000? serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )\n input: question: What is the name of the institution that \"Matthias Blume\" belongs to? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n Now please use valid SQLite to answer the following questions: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "Here are 5 examples including input and output:\n input: question: What is the location of the festival with the largest number of audience? serialized_schema:  | entertainment_awards | festival_detail : festival_id , festival_name , chair_name , location , year , num_of_audience | artwork : artwork_id , type , name | nomination : artwork_id , festival_id , result output: SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1\n input: question: What is the department name of the students with lowest gpa belongs to? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\n input: question: What is the height of the mountain climbined by the climbing who had the most points? serialized_schema:  | climbing | mountain : mountain_id , name , height , prominence , range , country | climber : climber_id , name , country , time , points , mountain_id output: SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n input: question: What are the different names for all songs that have a higher resolution than English songs? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")\n input: question: What is the average age for all managers? serialized_schema:  | railway | railway : railway_id , railway , builder , built , wheels , location , objectnumber | train : train_id , train_num , name , from , arrival , railway_id | manager : manager_id , name , country , working_year_starts , age , level | railway_manage : railway_id , manager_id , from_year output: SELECT avg(Age) FROM manager\n Now please use valid SQLite to answer the following questions: How many dogs have an age below the average?",
    "Here are 5 examples including input and output:\n input: question: What is the average enrollment of schools? serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT avg(Enrollment) FROM school\n input: question: Find the first names of all the authors ordered in alphabetical order. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT fname FROM authors ORDER BY fname\n input: question: Find the code of city where most of students are living in. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n input: question: Show all distinct building descriptions. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT DISTINCT building_description FROM Apartment_Buildings\n input: question: Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee. serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;\n Now please use valid SQLite to answer the following questions: Count the number of dogs of an age below the average.",
    "Here are 5 examples including input and output:\n input: question: Show the name and the nationality of the oldest host. serialized_schema:  | party_host | party : party_id , party_theme , location , first_year , last_year , number_of_hosts | host : host_id , name , nationality , age | party_host : party_id , host_id , is_main_in_charge output: SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\n input: question: How many players played each position? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n input: question: What are the life spans of representatives from New York state or Indiana state? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n input: question: Find the full names of employees living in the city of Calgary. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n input: question: What are the distinct registration dates and the election cycles? serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD\n Now please use valid SQLite to answer the following questions: How much does the most recent treatment cost?",
    "Here are 5 examples including input and output:\n input: question: What are the completion dates of all the tests that have result \"Fail\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"\n input: question: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n input: question: How many bookings does each booking status have? List the booking status code and the number of corresponding bookings. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\n input: question: What are the first names of students in room 108? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT firstname FROM list WHERE classroom  =  108\n input: question: Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\". serialized_schema:  | phone_1 | chip_model : model_name , launch_year , ram_mib , rom_mib , slots , wifi , bluetooth | screen_mode : graphics_mode , char_cells , pixels , hardware_colours , used_kb , map , type | phone : company_name , hardware_model_name , accreditation_type , accreditation_level , date , chip_model , screen_mode output: SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";\n Now please use valid SQLite to answer the following questions: Show me the cost of the most recently performed treatment.",
    "Here are 5 examples including input and output:\n input: question: For each country and airline name, how many routes are there? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n input: question: What are the 3 most common cloud covers in the zip code of 94107? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3\n input: question: How many total credits are offered by each department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n input: question: What are the distinct move in dates of the residents? serialized_schema:  | local_govt_and_lot | customers : customer_id , customer_details | properties : property_id , property_type_code , property_address , other_details | residents : resident_id , property_id , date_moved_in , date_moved_out , other_details | organizations : organization_id , parent_organization_id , organization_details | services : service_id , organization_id , service_type_code , service_details | residents_services : resident_id , service_id , date_moved_in , property_id , date_requested , date_provided , other_details | things : thing_id , organization_id , type_of_thing_code , service_type_code , service_details | customer_events : customer_event_id , customer_id , date_moved_in , property_id , resident_id , thing_id | customer_event_notes : customer_event_note_id , customer_event_id , service_type_code , resident_id , property_id , date_moved_in | timed_status_of_things : thing_id , date_and_date , status_of_thing_code | timed_locations_of_things : thing_id , date_and_time , location_code output: SELECT DISTINCT date_moved_in FROM residents\n input: question: What are the different parties of representative? Show the party name and the number of representatives in each party. serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party ,  COUNT(*) FROM representative GROUP BY Party\n Now please use valid SQLite to answer the following questions: How many dogs have not gone through any treatment?",
    "Here are 5 examples including input and output:\n input: question: For each grade 0 classroom, return the classroom number and the count of students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom\n input: question: What is the product description of the product booked with an amount of 102.76? serialized_schema:  | products_for_hire | discount_coupons : coupon_id , date_issued , coupon_amount | customers : customer_id , coupon_id , good_or_bad_customer , first_name , last_name , gender_mf , date_became_customer , date_last_hire | bookings : booking_id , customer_id , booking_status_code , returned_damaged_yn , booking_start_date , booking_end_date , count_hired , amount_payable , amount_of_discount , amount_outstanding , amount_of_refund | products_for_hire : product_id , product_type_code , daily_hire_cost , product_name , product_description | payments : payment_id , booking_id , customer_id , payment_type_code , amount_paid_in_full_yn , payment_date , amount_due , amount_paid | products_booked : booking_id , product_id , returned_yn , returned_late_yn , booked_count , booked_amount | view_product_availability : product_id , booking_id , status_date , available_yn output: SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76\n input: question: What are the ids of the two department store chains with the largest number of department stores? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2\n input: question: What information is there on albums from 2010? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT * FROM Albums WHERE YEAR  =  2010\n input: question: How many games has each stadium held? serialized_schema:  | game_injury | stadium : id , name , home_games , average_attendance , total_attendance , capacity_percentage | game : stadium_id , id , season , date , home_team , away_team , score , competition | injury_accident : game_id , id , player , injury , number_of_matches , source output: SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id\n Now please use valid SQLite to answer the following questions: Tell me the number of dogs that have not received any treatment .",
    "Here are 5 examples including input and output:\n input: question: What is the name and distance for aircraft with id 12? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft WHERE aid  =  12\n input: question: What is the description for the CIS-220 and how many credits does it have? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'\n input: question: List the teams of the players with the top 5 largest ages. serialized_schema:  | school_player | school : school_id , school , location , enrollment , founded , denomination , boys_or_girls , day_or_boarding , year_entered_competition , school_colors | school_details : school_id , nickname , colors , league , class , division | school_performance : school_id , school_year , class_a , class_aa | player : player_id , player , team , age , position , school_id output: SELECT Team FROM player ORDER BY Age DESC LIMIT 5\n input: question: What are the names and distances for all airplanes? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT name ,  distance FROM Aircraft\n input: question: What is the role code with the largest number of employees? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How many owners temporarily do not have any dogs?",
    "Here are 5 examples including input and output:\n input: question: Please show the categories of the music festivals and the count. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category\n input: question: Show all transaction types. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT DISTINCT transaction_type FROM Financial_Transactions\n input: question: Show the product type codes which have at least two products. serialized_schema:  | customers_and_products_contacts | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | products : product_id , product_type_code , product_name , product_price | customers : customer_id , payment_method_code , customer_number , customer_name , customer_address , customer_phone , customer_email | contacts : contact_id , customer_id , gender , first_name , last_name , contact_phone | customer_address_history : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_date , order_status_code | order_items : order_item_id , order_id , product_id , order_quantity output: SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2\n input: question: Return the name of the organization which has the most contact individuals. serialized_schema:  | e_government | addresses : address_id , line_1_number_building , town_city , zip_postcode , state_province_county , country | services : service_id , service_type_code , service_name , service_descriptio | forms : form_id , form_type_code , service_id , form_number , form_name , form_description | individuals : individual_id , individual_first_name , individual_middle_name , inidividual_phone , individual_email , individual_address , individual_last_name | organizations : organization_id , date_formed , organization_name , uk_vat_number | parties : party_id , payment_method_code , party_phone , party_email | organization_contact_individuals : individual_id , organization_id , date_contact_from , date_contact_to | party_addresses : party_id , address_id , date_address_from , address_type_code , date_address_to | party_forms : party_id , form_id , date_completion_started , form_status_code , date_fully_completed | party_services : booking_id , customer_id , service_id , service_datetime , booking_made_date output: SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n input: question: List all document ids and receipt dates of documents. serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT document_id ,  receipt_date FROM Documents;\n Now please use valid SQLite to answer the following questions: Find the number of owners who do not own any dogs at this moment.",
    "Here are 5 examples including input and output:\n input: question: display the average salary of employees for each department who gets a commission percentage. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n input: question: Report the first name and last name of all the students. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT firstname ,  lastname FROM list\n input: question: What are the names of all the tracks that are in both the Movies and music playlists? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n input: question: How many musicians play in the song \"Flash\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n input: question: How many cities are in counties that have populations of over 20000? serialized_schema:  | county_public_safety | county_public_safety : county_id , name , population , police_officers , residents_per_officer , case_burden , crime_rate , police_force , location | city : city_id , county_id , name , white , black , amerindian , asian , multiracial , hispanic output: SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n Now please use valid SQLite to answer the following questions: How many professionals did not operate any treatment on dogs?",
    "Here are 5 examples including input and output:\n input: question: Find the total hours of all projects. serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT sum(hours) FROM projects\n input: question: What is the headquarter of the company whose founder is James? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT headquarter FROM manufacturers WHERE founder  =  'James'\n input: question: How long is the total lesson time took by the customer named Rylan Goodwin? serialized_schema:  | driving_school | addresses : address_id , line_1_number_building , city , zip_postcode , state_province_county , country | staff : staff_id , staff_address_id , nickname , first_name , middle_name , last_name , date_of_birth , date_joined_staff , date_left_staff | vehicles : vehicle_id , vehicle_details | customers : customer_id , customer_address_id , customer_status_code , date_became_customer , date_of_birth , first_name , last_name , amount_outstanding , email_address , phone_number , cell_mobile_phone_number | customer_payments : customer_id , datetime_payment , payment_method_code , amount_payment | lessons : lesson_id , customer_id , lesson_status_code , staff_id , vehicle_id , lesson_date , lesson_time , price output: SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";\n input: question: Find the first names of the faculty members who are playing Canoeing or Kayaking. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n input: question: What are the names of the songs that are modern or sung in English? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"\n Now please use valid SQLite to answer the following questions: Find the number of professionals who have not treated any dogs.",
    "Here are 5 examples including input and output:\n input: question: What are the names of storms that both affected two or more regions and affected a total of 10 or more cities? serialized_schema:  | storm_record | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected output: SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10\n input: question: Give the hometowns from which two or more gymnasts are from. serialized_schema:  | gymnast | gymnast : gymnast_id , floor_exercise_points , pommel_horse_points , rings_points , vault_points , parallel_bars_points , horizontal_bar_points , total_points | people : people_id , name , age , height , hometown output: SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n input: question: Show the statement detail and the corresponding document name for the statement with detail 'Private Project'. serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'\n input: question: Which countries has the most number of airlines? serialized_schema:  | flight_4 | routes : rid , dst_apid , dst_ap , src_apid , src_ap , alid , airline , codeshare | airports : apid , name , city , country , x , y , elevation , iata , icao | airlines : alid , name , iata , icao , callsign , country , active output: SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: what is the GDP of the city with the largest population. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "Here are 5 examples including input and output:\n input: question: List the id of students who registered course statistics in the order of registration date. serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date\n input: question: how many programs are broadcast in each time section of the day? serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\n input: question: Count the number of tourists who did not visit any place. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n input: question: Return the apartment number with the largest number of bedrooms. serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1\n input: question: What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n Now please use valid SQLite to answer the following questions: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "Here are 5 examples including input and output:\n input: question: Which services type had both successful and failure event details? serialized_schema:  | local_govt_in_alabama | services : service_id , service_type_code | participants : participant_id , participant_type_code , participant_details | events : event_id , service_id , event_details | participants_in_events : event_id , participant_id output: SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'\n input: question: What is the location code with the most documents? serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n input: question: What is the last name of the professor whose office is located in DRE 102, and when were they hired? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n input: question: Show the name and date for each race and its track name. serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\n input: question: Which authors have written a paper with title containing the word \"Monadic\"? Return their last names. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"\n Now please use valid SQLite to answer the following questions: What is the average age of all the dogs?",
    "Here are 5 examples including input and output:\n input: question: Find the id of the order made most recently. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1\n input: question: How many albums are there? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT count(*) FROM ALBUM\n input: question: Show the fleet series of the aircrafts flied by pilots younger than 34 serialized_schema:  | pilot_record | aircraft : aircraft_id , order_year , manufacturer , model , fleet_series , powertrain , fuel_propulsion | pilot : pilot_id , pilot_name , rank , age , nationality , position , join_year , team | pilot_record : record_id , pilot_id , aircraft_id , date output: SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34\n input: question: What are the customer ids for customers who do not have an account? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts\n input: question: Show all customer ids and the number of cards owned by each customer. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\n Now please use valid SQLite to answer the following questions: Compute the average age of all the dogs.",
    "Here are 5 examples including input and output:\n input: question: Find the country that has the most stadiums. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1\n input: question: For each dorm, how many amenities does it have? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid\n input: question: List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities. serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'\n input: question: Count the number of members in club \"Bootup Baltimore\" whose age is below 18. serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18\n input: question: What are the names and ids of documents that have the type code BK? serialized_schema:  | cre_Docs_and_Epenses | ref_document_types : document_type_code , document_type_name , document_type_description | ref_budget_codes : budget_type_code , budget_type_description | projects : project_id , project_details | documents : document_id , document_type_code , project_id , document_date , document_name , document_description , other_details | statements : statement_id , statement_details | documents_with_expenses : document_id , budget_type_code , document_details | accounts : account_id , statement_id , account_details output: SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n Now please use valid SQLite to answer the following questions: What is the age of the oldest dog?",
    "Here are 5 examples including input and output:\n input: question: What is the average, maximum, and minimum for the number of hours spent training? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player\n input: question: Which customer is associated with the latest policy? serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)\n input: question: What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000\n input: question: Find the name of the room with the maximum occupancy. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;\n input: question: Show details of all visitors. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT Tourist_Details FROM VISITORS\n Now please use valid SQLite to answer the following questions: Tell me the age of the oldest dog.",
    "Here are 5 examples including input and output:\n input: question: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n input: question: For each zip code, return how many times max wind speed reached 25? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n input: question: Return the cell phone number and email address for all students. serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT cell_mobile_number ,  email_address FROM STUDENTS\n input: question: What is the total amount of all payments? serialized_schema:  | sakila_1 | actor : actor_id , first_name , last_name , last_update | address : address_id , address , address2 , district , city_id , postal_code , phone , last_update | category : category_id , name , last_update | city : city_id , city , country_id , last_update | country : country_id , country , last_update | customer : customer_id , store_id , first_name , last_name , email , address_id , active , create_date , last_update | film : film_id , title , description , release_year , language_id , original_language_id , rental_duration , rental_rate , length , replacement_cost , rating , special_features , last_update | film_actor : actor_id , film_id , last_update | film_category : film_id , category_id , last_update | film_text : film_id , title , description | inventory : inventory_id , film_id , store_id , last_update | language : language_id , name , last_update | payment : payment_id , customer_id , staff_id , rental_id , amount , payment_date , last_update | rental : rental_id , rental_date , inventory_id , customer_id , return_date , staff_id , last_update | staff : staff_id , first_name , last_name , address_id , picture , email , store_id , active , username , password , last_update | store : store_id , manager_staff_id , address_id , last_update output: SELECT sum(amount) FROM payment\n input: question: Give me a list of id and status of orders which belong to the customer named \"Jeramie\". serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n Now please use valid SQLite to answer the following questions: How much does each charge type costs? List both charge type and amount.",
    "Here are 5 examples including input and output:\n input: question: display those employees who joined after 7th September, 1987. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT * FROM employees WHERE hire_date  >  '1987-09-07'\n input: question: List the name, born state and age of the heads of departments ordered by age. serialized_schema:  | department_management | department : department_id , name , creation , ranking , budget_in_billions , num_employees | head : head_id , name , born_state , age | management : department_id , head_id , temporary_acting output: SELECT name ,  born_state ,  age FROM head ORDER BY age\n input: question: What are the top 10 customers' first and last names by total number of orders and how many orders did they make? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n input: question: Where is the history department? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT dept_address FROM department WHERE dept_name  =  'History'\n input: question: What is the title of the album that was released by the artist whose name has the phrase 'Led'? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'\n Now please use valid SQLite to answer the following questions: List each charge type and its amount.",
    "Here are 5 examples including input and output:\n input: question: How many books fall into each category? serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT category ,  count(*) FROM book_club GROUP BY category\n input: question: Return all the committees that have delegates from Democratic party. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n input: question: What is the average longitude of stations that never had bike availability more than 10? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n input: question: Return the id and full name of the customer with the most accounts. serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n input: question: Retrieve the country that has published the most papers. serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: How much does the most expensive charge type costs?",
    "Here are 5 examples including input and output:\n input: question: List the names of products that are not in any event. serialized_schema:  | solvency_ii | addresses : address_id , address_details | locations : location_id , other_details | products : product_id , product_type_code , product_name , product_price | parties : party_id , party_details | assets : asset_id , other_details | channels : channel_id , other_details | finances : finance_id , other_details | events : event_id , address_id , channel_id , event_type_code , finance_id , location_id | products_in_events : product_in_event_id , event_id , product_id | parties_in_events : party_id , event_id , role_code | agreements : document_id , event_id | assets_in_events : asset_id , event_id output: SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\n input: question: What is the average and oldest age for each gender of student? serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n input: question: Find the number of voting records in total. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT count(*) FROM VOTING_RECORD\n input: question: What are the last name and office of all history professors? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'\n input: question: What is the total number of people who has no friend living in the city of Austin. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n Now please use valid SQLite to answer the following questions: What is the charge amount of the most expensive charge type?",
    "Here are 5 examples including input and output:\n input: question: Which studios have an average gross of over 4500000? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000\n input: question: Find the list of attribute data types possessed by more than 3 attribute definitions. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n input: question: What is the total and maximum duration of trips with bike id 636? serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n input: question: Which customers have orders with status \"Packing\"? Give me the customer names. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"\n input: question: Which cities have served as host cities more than once? Return me their GDP and population. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1\n Now please use valid SQLite to answer the following questions: List the email, cell phone and home phone of all the professionals.",
    "Here are 5 examples including input and output:\n input: question: find the names of programs whose origin is not in Beijing. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program WHERE origin != 'Beijing'\n input: question: What procedures cost less than 5000 and have John Wen as a trained physician? serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n input: question: Show origin and destination for flights with price higher than 300. serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT origin ,  destination FROM Flight WHERE price  >  300\n input: question: How many departments offer courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT dept_name) FROM course\n input: question: Find the name of instructors who didn't teach any courses? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n Now please use valid SQLite to answer the following questions: What are the email, cell phone and home phone of each professional?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of all female students who play football? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n input: question: Find the last names of the students in third grade that are not taught by COVIN JEROME. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"\n input: question: Find the code of the role that have the most employees. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n input: question: Sort all the distinct products in alphabetical order. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT DISTINCT product_name FROM products ORDER BY product_name\n input: question: Which are the first and last names of the students taught by MARROTTE KIRK? serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"\n Now please use valid SQLite to answer the following questions: What are all the possible breed type and size type combinations?",
    "Here are 5 examples including input and output:\n input: question: What are the papers published under the institution \"Indiana University\"? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n input: question: Show all role codes with at least 3 employees. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\n input: question: Count the number of stores the chain South has. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"\n input: question: What are the emails and phone numbers of all customers, sorted by email address and phone number? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number\n input: question: Find all types of store and number of them. serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT TYPE ,  count(*) FROM store GROUP BY TYPE\n Now please use valid SQLite to answer the following questions: Find the distinct breed type and size type combinations for dogs.",
    "Here are 5 examples including input and output:\n input: question: What is the name and date of the race that occurred most recently? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\n input: question: Report the total number of students for each fourth-grade classroom. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom\n input: question: Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"\n input: question: Which program was launched most recently? Return the program name. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM program ORDER BY launch DESC LIMIT 1\n input: question: What are the names of teams that do no have match season record? serialized_schema:  | match_season | country : country_id , country_name , capital , official_native_language | team : team_id , name | match_season : season , player , position , country , team , draft_pick_number , draft_class , college | player : player_id , player , years_played , total_wl , singles_wl , doubles_wl , team output: SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\n Now please use valid SQLite to answer the following questions: List the first name of all the professionals along with the description of the treatment they have done.",
    "Here are 5 examples including input and output:\n input: question: What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\n input: question: Show the ids of all employees who don't destroy any document. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: What are the titles of films that do not have a film market estimation? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\n input: question: List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\n input: question: Return the name, phone number and email address for the customer with the most orders. serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are each professional's first name and description of the treatment they have performed?",
    "Here are 5 examples including input and output:\n input: question: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n input: question: What are the names and other details for accounts corresponding to the customer named Meaghan Keeling? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"\n input: question: Find the id and last name of the student that has the most behavior incidents? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n input: question: Find the number of patients who are not using the medication of Procrastin-X. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\n input: question: Find the visit date and details of the tourist whose detail is 'Vincent' serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"\n Now please use valid SQLite to answer the following questions: How many singers are there?",
    "Here are 5 examples including input and output:\n input: question: What are the countries that participated in both friendly and tournament type competitions? serialized_schema:  | sports_competition | club : club_id , name , region , start_year | club_rank : rank , club_id , gold , silver , bronze , total | player : player_id , name , position , club_id , apps , tries , goals , points | competition : competition_id , year , competition_type , country | competition_result : competition_id , club_id_1 , club_id_2 , score output: SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'\n input: question: Return the code of the card type that is most common. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Return the issue date of the volume that has spent the fewest weeks on top. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\n input: question: What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n input: question: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. serialized_schema:  | journal_committee | journal : journal_id , date , theme , sales | editor : editor_id , name , age | journal_committee : editor_id , journal_id , work_type output: SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID\n Now please use valid SQLite to answer the following questions: What is the count of singers?",
    "Here are 5 examples including input and output:\n input: question: Find the names of all modern rooms with a base price below $160 and two beds. serialized_schema:  | inn_1 | rooms : roomid , roomname , beds , bedtype , maxoccupancy , baseprice , decor | reservations : code , room , checkin , checkout , rate , lastname , firstname , adults , kids output: SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';\n input: question: Find the name of captains whose rank are either Midshipman or Lieutenant. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\n input: question: display the department id and the total salary for those departments which contains at least two employees. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2\n input: question: What is the party of the youngest people? serialized_schema:  | debate | people : people_id , district , name , party , age | debate : debate_id , date , venue , num_of_audience | debate_people : debate_id , affirmative , negative , if_affirmative_win output: SELECT Party FROM people ORDER BY Age ASC LIMIT 1\n input: question: Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"\n Now please use valid SQLite to answer the following questions: List the name of singers in ascending order of net worth.",
    "Here are 5 examples including input and output:\n input: question: Count the number of different complaint type codes. serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT count(DISTINCT complaint_type_code) FROM complaints\n input: question: Which patients made more than one appointment? Tell me the name and phone number of these patients. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1\n input: question: Return the names of songs for which format is mp3 and resolution is below 1000. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\n input: question: For each county, find the name of the county and the number of delegates from that county. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n input: question: How many different products correspond to each order id? serialized_schema:  | customers_and_invoices | customers : customer_id , customer_first_name , customer_middle_initial , customer_last_name , gender , email_address , login_name , login_password , phone_number , town_city , state_county_province , country | orders : order_id , customer_id , date_order_placed , order_details | invoices : invoice_number , order_id , invoice_date | accounts : account_id , customer_id , date_account_opened , account_name , other_account_details | product_categories : production_type_code , product_type_description , vat_rating | products : product_id , parent_product_id , production_type_code , unit_price , product_name , product_color , product_size | financial_transactions : transaction_id , account_id , invoice_number , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details | order_items : order_item_id , order_id , product_id , product_quantity , other_order_item_details | invoice_line_items : order_item_id , invoice_number , product_id , product_title , product_quantity , product_price , derived_product_cost , derived_vat_payable , derived_total_cost output: SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id\n Now please use valid SQLite to answer the following questions: What are the names of singers ordered by ascending net worth?",
    "Here are 5 examples including input and output:\n input: question: What are the names of wines made from red grapes? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"\n input: question: Return the song in the volume that has spent the most weeks on top? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\n input: question: What are the department names and how many employees work in each of them? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name\n input: question: Find the name of the department that has the biggest number of students minored in? serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\n input: question: What are the authors of submissions and their colleges? serialized_schema:  | workshop_paper | workshop : workshop_id , date , venue , name | submission : submission_id , scores , author , college | acceptance : submission_id , workshop_id , result output: SELECT Author ,  College FROM submission\n Now please use valid SQLite to answer the following questions: What are the birth year and citizenship of singers?",
    "Here are 5 examples including input and output:\n input: question: Show all artist names and the number of exhibitions for each artist. serialized_schema:  | theme_gallery | artist : artist_id , name , country , year_join , age | exhibition : exhibition_id , year , theme , artist_id , ticket_price | exhibition_record : exhibition_id , date , attendance output: SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id\n input: question: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n input: question: Show the transaction type code that occurs the most frequently. serialized_schema:  | tracking_share_transactions | investors : investor_id , investor_details | lots : lot_id , investor_id , lot_details | ref_transaction_types : transaction_type_code , transaction_type_description | transactions : transaction_id , investor_id , transaction_type_code , date_of_transaction , amount_of_transaction , share_count , other_details | sales : sales_transaction_id , sales_details | purchases : purchase_transaction_id , purchase_details | transactions_lots : transaction_id , lot_id output: SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Who are the top 3 players in terms of overall rating? serialized_schema:  | soccer_1 | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass output: SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3\n input: question: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n Now please use valid SQLite to answer the following questions: What are the birth years and citizenships of the singers?",
    "Here are 5 examples including input and output:\n input: question: Find the id and location of circuits that belong to France or Belgium? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n input: question: How many Annual Meeting events happened in the United Kingdom region? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n input: question: Show me the classrooms grade 5 is using. serialized_schema:  | student_1 | list : lastname , firstname , grade , classroom | teachers : lastname , firstname , classroom output: SELECT DISTINCT classroom FROM list WHERE grade  =  5\n input: question: Show card type codes with at least 5 cards. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n input: question: What is the average price range of hotels for each each star rating code? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\n Now please use valid SQLite to answer the following questions: List the name of singers whose citizenship is not \"France\".",
    "Here are 5 examples including input and output:\n input: question: Show the years, book titles, and publishers for all books, in descending order by year. serialized_schema:  | culture_company | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id output: SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\n input: question: Show the names of members and the dates of performances they attended in descending order of attendance of the performances. serialized_schema:  | performance_attendance | member : member_id , name , nationality , role | performance : performance_id , date , host , location , attendance | member_attendance : member_id , performance_id , num_of_pieces output: SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC\n input: question: What are the titles of films and corresponding types of market estimations? serialized_schema:  | film_rank | film : film_id , title , studio , director , gross_in_dollar | market : market_id , country , number_cities | film_market_estimation : estimation_id , low_estimate , high_estimate , film_id , type , market_id , year output: SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID\n input: question: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n input: question: What is all the customer information for customers in NY state? serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT * FROM CUSTOMER WHERE State  =  \"NY\"\n Now please use valid SQLite to answer the following questions: What are the names of the singers who are not French citizens?",
    "Here are 5 examples including input and output:\n input: question: What are the names of customers with accounts, and how many checking accounts do each of them have? serialized_schema:  | small_bank_1 | accounts : custid , name | savings : custid , balance | checking : custid , balance output: SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n input: question: Find the names of females who are friends with Zach serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'\n input: question: How many flights do we have? serialized_schema:  | flight_1 | flight : flno , origin , destination , distance , departure_date , arrival_date , price , aid | aircraft : aid , name , distance | employee : eid , name , salary | certificate : eid , aid output: SELECT count(*) FROM Flight\n input: question: For which countries are there more than four distinct addresses listed? serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n input: question: What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'? serialized_schema:  | mountain_photos | mountain : id , name , height , prominence , range , country | camera_lens : id , brand , name , focal_length_mm , max_aperture | photos : id , camera_lens_id , mountain_id , color , name output: SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'\n Now please use valid SQLite to answer the following questions: Show the name of singers whose birth year is either 1948 or 1949?",
    "Here are 5 examples including input and output:\n input: question: What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction? serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"\n input: question: Count the number of distinct channel owners. serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT count(DISTINCT OWNER) FROM channel\n input: question: What are the titles for courses with two prerequisites? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2\n input: question: What is the total number of students enrolled in schools without any goalies? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n input: question: Count the number of characteristics of the 'flax' product. serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"\n Now please use valid SQLite to answer the following questions: What are the names of the singers whose birth years are either 1948 or 1949?",
    "Here are 5 examples including input and output:\n input: question: Show the total number of rooms of the apartments in the building with short name \"Columbus Square\". serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"\n input: question: What are ids and total number of hours played for each game? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\n input: question: Return the unique name for stations that have ever had 7 bikes available. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7\n input: question: Show the names and locations of institutions that are founded after 1990 and have the type \"Private\". serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'\n input: question: What is the description of the product category with the code 'Spices'? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"\n Now please use valid SQLite to answer the following questions: What is the name of the singer with the largest net worth?",
    "Here are 5 examples including input and output:\n input: question: What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000? serialized_schema:  | department_store | addresses : address_id , address_details | staff : staff_id , staff_gender , staff_name | suppliers : supplier_id , supplier_name , supplier_phone | department_store_chain : dept_store_chain_id , dept_store_chain_name | customers : customer_id , payment_method_code , customer_code , customer_name , customer_address , customer_phone , customer_email | products : product_id , product_type_code , product_name , product_price | supplier_addresses : supplier_id , address_id , date_from , date_to | customer_addresses : customer_id , address_id , date_from , date_to | customer_orders : order_id , customer_id , order_status_code , order_date | department_stores : dept_store_id , dept_store_chain_id , store_name , store_address , store_phone , store_email | departments : department_id , dept_store_id , department_name | order_items : order_item_id , order_id , product_id | product_suppliers : product_id , supplier_id , date_supplied_from , date_supplied_to , total_amount_purchased , total_value_purchased | staff_department_assignments : staff_id , department_id , date_assigned_from , job_title_code , date_assigned_to output: SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000\n input: question: Please show the most common status of roller coasters. serialized_schema:  | roller_coaster | roller_coaster : roller_coaster_id , name , park , country_id , length , height , speed , opened , status | country : country_id , name , population , area , languages output: SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n input: question: What are the emails and phone numbers of custoemrs who have never filed a complaint? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)\n input: question: What are the titles of courses that are offered in more than one department? serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT title FROM course GROUP BY title HAVING count(*)  >  1\n input: question: For each sex, what is the name and sex of the candidate with the oppose rate for their sex? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex\n Now please use valid SQLite to answer the following questions: What is the name of the singer who is worth the most?",
    "Here are 5 examples including input and output:\n input: question: What are the names of the customers who have made two or less orders? serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\n input: question: What are the first names of all teachers who have taught a course and the corresponding descriptions? serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code\n input: question: How many distinct students are enrolled in courses? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment\n input: question: What is the name of the artist who produced the shortest song? serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n input: question: Find the major that is studied by the largest number of students. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: Show different citizenship of singers and the number of singers of each citizenship.",
    "Here are 5 examples including input and output:\n input: question: Show all video games with type Collectible card game. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\n input: question: What details do we have on the students who registered for courses most recently? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n input: question: List the problem id and log id which are assigned to the staff named Rylan Homenick. serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\n input: question: Which building has most faculty members? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\n input: question: Find the average age of female (sex is F) students who have secretary votes in the spring election cycle. serialized_schema:  | voter_2 | student : stuid , lname , fname , age , sex , major , advisor , city_code | voting_record : stuid , registration_date , election_cycle , president_vote , vice_president_vote , secretary_vote , treasurer_vote , class_president_vote , class_senator_vote output: SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"\n Now please use valid SQLite to answer the following questions: For each citizenship, how many singers are from that country?",
    "Here are 5 examples including input and output:\n input: question: Find the number of patients' prescriptions physician John Dorian made. serialized_schema:  | hospital_1 | physician : employeeid , name , position , ssn | department : departmentid , name , head | affiliated_with : physician , department , primaryaffiliation | procedures : code , name , cost | trained_in : physician , treatment , certificationdate , certificationexpires | patient : ssn , name , address , phone , insuranceid , pcp | nurse : employeeid , name , position , registered , ssn | appointment : appointmentid , patient , prepnurse , physician , start , end , examinationroom | medication : code , name , brand , description | prescribes : physician , patient , medication , date , appointment , dose | block : blockfloor , blockcode | room : roomnumber , roomtype , blockfloor , blockcode , unavailable | on_call : nurse , blockfloor , blockcode , oncallstart , oncallend | stay : stayid , patient , room , staystart , stayend | undergoes : patient , procedures , stay , dateundergoes , physician , assistingnurse output: SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"\n input: question: What is the last name of the author that has published the most papers? serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1\n input: question: List all ship names in the order of built year and class. serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name FROM ship ORDER BY built_year ,  CLASS\n input: question: Find the parties associated with the delegates from district 1. Who served as governors of the parties? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1\n input: question: Show name, opening year, and capacity for each cinema. serialized_schema:  | cinema | film : film_id , rank_in_series , number_in_season , title , directed_by , original_air_date , production_code | cinema : cinema_id , name , openning_year , capacity , location | schedule : cinema_id , film_id , date , show_times_per_day , price output: SELECT name ,  openning_year ,  capacity FROM cinema\n Now please use valid SQLite to answer the following questions: Please show the most common citizenship of singers.",
    "Here are 5 examples including input and output:\n input: question: What is the minimum salary in each department? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n input: question: What are the names of all the states with college students playing in the mid position but no goalies? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n input: question: What is the description of the product named \"Chocolate\"? serialized_schema:  | customer_complaints | staff : staff_id , gender , first_name , last_name , email_address , phone_number | customers : customer_id , customer_type_code , address_line_1 , address_line_2 , town_city , state , email_address , phone_number | products : product_id , parent_product_id , product_category_code , date_product_first_available , date_product_discontinued , product_name , product_description , product_price | complaints : complaint_id , product_id , customer_id , complaint_outcome_code , complaint_status_code , complaint_type_code , date_complaint_raised , date_complaint_closed , staff_id output: SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"\n input: question: Which of the mill names contains the french word 'Moulin'? serialized_schema:  | architecture | architect : id , name , nationality , gender | bridge : architect_id , id , name , location , length_meters , length_feet | mill : architect_id , id , location , name , type , built_year , notes output: SELECT name FROM mill WHERE name LIKE '%Moulin%'\n input: question: Tell me the name of the most pricy product. serialized_schema:  | cre_Drama_Workshop_Groups | ref_payment_methods : payment_method_code , payment_method_description | ref_service_types : service_type_code , parent_service_type_code , service_type_description | addresses : address_id , line_1 , line_2 , city_town , state_county , other_details | products : product_id , product_name , product_price , product_description , other_product_service_details | marketing_regions : marketing_region_code , marketing_region_name , marketing_region_descriptrion , other_details | clients : client_id , address_id , customer_email_address , customer_name , customer_phone , other_details | drama_workshop_groups : workshop_group_id , address_id , currency_code , marketing_region_code , store_name , store_phone , store_email_address , other_details | performers : performer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | customers : customer_id , address_id , customer_name , customer_phone , customer_email_address , other_details | stores : store_id , address_id , marketing_region_code , store_name , store_phone , store_email_address , other_details | bookings : booking_id , customer_id , workshop_group_id , status_code , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | performers_in_bookings : order_id , performer_id | customer_orders : order_id , customer_id , store_id , order_date , planned_delivery_date , actual_delivery_date , other_order_details | order_items : order_item_id , order_id , product_id , order_quantity , other_item_details | invoices : invoice_id , order_id , payment_method_code , product_id , order_quantity , other_item_details , order_item_id | services : service_id , service_type_code , workshop_group_id , product_description , product_name , product_price , other_product_service_details | bookings_services : order_id , product_id | invoice_items : invoice_item_id , invoice_id , order_id , order_item_id , product_id , order_quantity , other_item_details output: SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What is the most common singer citizenship ?",
    "Here are 5 examples including input and output:\n input: question: what are the names and classes of the ships that do not have any captain yet? serialized_schema:  | ship_1 | captain : captain_id , name , ship_id , age , class , rank | ship : ship_id , name , type , built_year , class , flag output: SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\n input: question: How many appelations are in Napa Country? serialized_schema:  | wine_1 | grapes : id , grape , color | appellations : no , appelation , county , state , area , isava | wine : no , grape , winery , appelation , state , name , year , price , score , cases , drink output: SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n input: question: What are the distinct classes that races can have? serialized_schema:  | race_track | race : race_id , name , class , date , track_id | track : track_id , name , location , seating , year_opened output: SELECT DISTINCT CLASS FROM race\n input: question: Which counties have two or more delegates? Give me the county names. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n input: question: What are the maximum and minimum population of the counties? serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT max(Population) ,  min(Population) FROM county\n Now please use valid SQLite to answer the following questions: Show different citizenships and the maximum net worth of singers of each citizenship.",
    "Here are 5 examples including input and output:\n input: question: What is average age of male for different job title? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n input: question: What are the names of people in ascending order of height? serialized_schema:  | perpetrator | perpetrator : perpetrator_id , people_id , date , year , location , country , killed , injured | people : people_id , name , height , weight , home town output: SELECT Name FROM People ORDER BY Height ASC\n input: question: What are the ids of all students who are not video game players? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games\n input: question: Find the number of records of each policy type and its type code. serialized_schema:  | insurance_and_eClaims | customers : customer_id , customer_details | staff : staff_id , staff_details | policies : policy_id , customer_id , policy_type_code , start_date , end_date | claim_headers : claim_header_id , claim_status_code , claim_type_code , policy_id , date_of_claim , date_of_settlement , amount_claimed , amount_piad | claims_documents : claim_id , document_type_code , created_by_staff_id , created_date | claims_processing_stages : claim_stage_id , next_claim_stage_id , claim_status_name , claim_status_description | claims_processing : claim_processing_id , claim_id , claim_outcome_code , claim_stage_id , staff_id output: SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code\n input: question: How many different FDA approval statuses exist for medicines? serialized_schema:  | medicine_enzyme_interaction | medicine : id , name , trade_name , fda_approved | enzyme : id , name , location , product , chromosome , omim , porphyria | medicine_enzyme_interaction : enzyme_id , medicine_id , interaction_type output: SELECT count(DISTINCT FDA_approved) FROM medicine\n Now please use valid SQLite to answer the following questions: For each citizenship, what is the maximum net worth?",
    "Here are 5 examples including input and output:\n input: question: Which students are unaffected by allergies? serialized_schema:  | allergy_1 | allergy_type : allergy , allergytype | has_allergy : stuid , allergy | student : stuid , lname , fname , age , sex , major , advisor , city_code output: SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n input: question: HOw many engineers are older than 30? serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'\n input: question: What are the total purchases for members rated at level 6? serialized_schema:  | shop_membership | member : member_id , card_number , name , hometown , level | branch : branch_id , name , open_year , address_road , city , membership_amount | membership_register_branch : member_id , branch_id , register_year | purchase : member_id , branch_id , year , total_pounds output: SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6\n input: question: List the name and gender for all artists who released songs in March. serialized_schema:  | music_1 | genre : g_name , rating , most_popular_in | artist : artist_name , country , gender , preferred_genre | files : f_id , artist_name , file_size , duration , formats | song : song_name , artist_name , country , f_id , genre_is , rating , languages , releasedate , resolution output: SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"\n input: question: What are the different region names, ordered by labels? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT DISTINCT region_name FROM region ORDER BY Label\n Now please use valid SQLite to answer the following questions: Show titles of songs and names of singers.",
    "Here are 5 examples including input and output:\n input: question: Return the names of all counties sorted by county name in descending alphabetical order. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY County_name DESC\n input: question: What are the different district names in order of descending city area? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT DISTINCT District_name FROM district ORDER BY city_area DESC\n input: question: How many drivers did not participate in the races held in 2009? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n input: question: What are the response received dates for the documents described as 'Regular' or granted with more than 100? serialized_schema:  | tracking_grants_for_research | document_types : document_type_code , document_description | documents : document_id , document_type_code , grant_id , sent_date , response_received_date , other_details | grants : grant_id , organisation_id , grant_amount , grant_start_date , grant_end_date , other_details | organisation_types : organisation_type , organisation_type_description | organisations : organisation_id , organisation_type , organisation_details | project_outcomes : project_id , outcome_code , outcome_details | project_staff : staff_id , project_id , role_code , date_from , date_to , other_details | projects : project_id , organisation_id , project_details | research_outcomes : outcome_code , outcome_description | research_staff : staff_id , employer_organisation_id , staff_details | staff_roles : role_code , role_description | tasks : task_id , project_id , task_details , eg agree objectives output: SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n input: question: What are the tracks that Dean Peeters bought? serialized_schema:  | store_1 | artists : id , name | sqlite_sequence : name , seq | albums : id , title , artist_id | employees : id , last_name , first_name , title , reports_to , birth_date , hire_date , address , city , state , country , postal_code , phone , fax , email | customers : id , first_name , last_name , company , address , city , state , country , postal_code , phone , fax , email , support_rep_id | genres : id , name | invoices : id , customer_id , invoice_date , billing_address , billing_city , billing_state , billing_country , billing_postal_code , total | media_types : id , name | tracks : id , name , album_id , media_type_id , genre_id , composer , milliseconds , bytes , unit_price | invoice_lines : id , invoice_id , track_id , unit_price , quantity | playlists : id , name | playlist_tracks : playlist_id , track_id output: SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";\n Now please use valid SQLite to answer the following questions: What are the song titles and singer names?",
    "Here are 5 examples including input and output:\n input: question: What is the number of aircraft? serialized_schema:  | aircraft | pilot : pilot_id , name , age | aircraft : aircraft_id , aircraft , description , max_gross_weight , total_disk_area , max_disk_loading | match : round , location , country , date , fastest_qualifying , winning_pilot , winning_aircraft | airport : airport_id , airport_name , total_passengers , %_change_2007 , international_passengers , domestic_passengers , transit_passengers , aircraft_movements , freight_metric_tonnes | airport_aircraft : id , airport_id , aircraft_id output: SELECT count(*) FROM aircraft\n input: question: Find the name of the person who has no student friends. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n input: question: For each competition, count the number of matches. serialized_schema:  | city_record | city : city_id , city , hanzi , hanyu_pinyin , regional_population , gdp | match : match_id , date , venue , score , result , competition | temperature : city_id , jan , feb , mar , apr , jun , jul , aug , sep , oct , nov , dec | hosting_city : year , match_id , host_city output: SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition\n input: question: Which city is the headquarter of the store named \"Blackville\" in? serialized_schema:  | store_product | product : product_id , product , dimensions , dpi , pages_per_minute_color , max_page_size , interface | store : store_id , store_name , type , area_size , number_of_product_category , ranking | district : district_id , district_name , headquartered_city , city_population , city_area | store_product : store_id , product_id | store_district : store_id , district_id output: SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n input: question: Find the name of the customers who have at most two orders. serialized_schema:  | tracking_orders | customers : customer_id , customer_name , customer_details | invoices : invoice_number , invoice_date , invoice_details | orders : order_id , customer_id , order_status , date_order_placed , order_details | products : product_id , product_name , product_details | order_items : order_item_id , product_id , order_id , order_item_status , order_item_details | shipments : shipment_id , order_id , invoice_number , shipment_tracking_number , shipment_date , other_shipment_details | shipment_items : shipment_id , order_item_id output: SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\n Now please use valid SQLite to answer the following questions: Show distinct names of singers that have songs with sales more than 300000.",
    "Here are 5 examples including input and output:\n input: question: Find the total access count of all documents in the most popular document type. serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\n input: question: Find the first names of all professors in the Accounting department who is teaching some course and the class room. serialized_schema:  | college_1 | class : class_code , crs_code , class_section , class_time , class_room , prof_num | course : crs_code , dept_code , crs_description , crs_credit | department : dept_code , dept_name , school_code , emp_num , dept_address , dept_extension | employee : emp_num , emp_lname , emp_fname , emp_initial , emp_jobcode , emp_hiredate , emp_dob | enroll : class_code , stu_num , enroll_grade | professor : emp_num , dept_code , prof_office , prof_extension , prof_high_degree | student : stu_num , stu_lname , stu_fname , stu_init , stu_dob , stu_hrs , stu_class , stu_gpa , stu_transfer , dept_code , stu_phone , prof_num output: SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'\n input: question: Show all distinct region names ordered by their labels. serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT DISTINCT region_name FROM region ORDER BY Label\n input: question: Find the name of persons who are friends with Alice for the shortest years. serialized_schema:  | network_2 | person : name , age , city , gender , job | personfriend : name , friend , year output: SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n input: question: List the names of all the channels owned by either CCTV or HBS serialized_schema:  | program_share | program : program_id , name , origin , launch , owner | channel : channel_id , name , owner , share_in_percent , rating_in_percent | broadcast : channel_id , program_id , time_of_day | broadcast_share : channel_id , program_id , date , share_in_percent output: SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'\n Now please use valid SQLite to answer the following questions: what are the different names of the singers that have sales more than 300000?",
    "Here are 5 examples including input and output:\n input: question: What are the names and data types of the characteristics of the 'cumin' product? serialized_schema:  | products_gen_characteristics | ref_characteristic_types : characteristic_type_code , characteristic_type_description | ref_colors : color_code , color_description | ref_product_categories : product_category_code , product_category_description , unit_of_measure | characteristics : characteristic_id , characteristic_type_code , characteristic_data_type , characteristic_name , other_characteristic_details | products : product_id , color_code , product_category_code , product_name , typical_buying_price , typical_selling_price , product_description , other_product_details | product_characteristics : product_id , characteristic_id , product_characteristic_value output: SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"\n input: question: Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\". serialized_schema:  | riding_club | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points output: SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"\n input: question: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte? serialized_schema:  | tracking_software_problems | problem_category_codes : problem_category_code , problem_category_description | problem_log : problem_log_id , assigned_to_staff_id , problem_id , problem_category_code , problem_status_code , log_entry_date , log_entry_description , log_entry_fix , other_log_details | problem_status_codes : problem_status_code , problem_status_description | product : product_id , product_name , product_details | staff : staff_id , staff_first_name , staff_last_name , other_staff_details | problems : problem_id , product_id , closure_authorised_by_staff_id , reported_by_staff_id , date_problem_reported , date_problem_closed , problem_description , other_problem_details output: SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n input: question: What are the first names of the faculty members playing both Canoeing and Kayaking? serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'\n input: question: Find the number of distinct amenities. serialized_schema:  | dorm_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | dorm : dormid , dorm_name , student_capacity , gender | dorm_amenity : amenid , amenity_name | has_amenity : dormid , amenid | lives_in : stuid , dormid , room_number output: SELECT count(*) FROM dorm_amenity\n Now please use valid SQLite to answer the following questions: Show the names of singers that have more than one song.",
    "Here are 5 examples including input and output:\n input: question: Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There\n input: question: What parties have at least three representatives? serialized_schema:  | election_representative | election : election_id , representative_id , date , votes , vote_percent , seats , place | representative : representative_id , name , state , party , lifespan output: SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3\n input: question: What the full names, ids of each employee and the name of the country they are in? serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n input: question: What is the id of the reviewer whose name has substring “Mike”? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"\n input: question: What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"? serialized_schema:  | music_2 | songs : songid , title | albums : aid , title , year , label , type | band : id , firstname , lastname | instruments : songid , bandmateid , instrument | performance : songid , bandmate , stageposition | tracklists : albumid , position , songid | vocals : songid , bandmate , type output: SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"\n Now please use valid SQLite to answer the following questions: What are the names of the singers that have more than one songs?",
    "Here are 5 examples including input and output:\n input: question: What is the name of the wrestler with the fewest days held? serialized_schema:  | wrestler | wrestler : wrestler_id , name , reign , days_held , location , event | elimination : elimination_id , wrestler_id , team , eliminated_by , elimination_move , time output: SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n input: question: Return the number of companies created by Andy. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'\n input: question: What is the document status description of the document with id 1? serialized_schema:  | cre_Doc_Control_Systems | ref_document_types : document_type_code , document_type_description | roles : role_code , role_description | addresses : address_id , address_details | ref_document_status : document_status_code , document_status_description | ref_shipping_agents : shipping_agent_code , shipping_agent_name , shipping_agent_description | documents : document_id , document_status_code , document_type_code , shipping_agent_code , receipt_date , receipt_number , other_details | employees : employee_id , role_code , employee_name , other_details | document_drafts : document_id , draft_number , draft_details | draft_copies : document_id , draft_number , copy_number | circulation_history : document_id , draft_number , copy_number , employee_id | documents_mailed : document_id , mailed_to_address_id , mailing_date output: SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;\n input: question: Show the transaction type and the number of transactions. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type\n input: question: What is the name of the project that has a scientist assigned to it whose name contains 'Smith'? serialized_schema:  | scientist_1 | scientists : ssn , name | projects : code , name , hours | assignedto : scientist , project output: SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\n Now please use valid SQLite to answer the following questions: Show the names of singers and the total sales of their songs.",
    "Here are 5 examples including input and output:\n input: question: Return the result that is most frequent at music festivals. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\n input: question: Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments. serialized_schema:  | hr_1 | regions : region_id , region_name | countries : country_id , country_name , region_id | departments : department_id , department_name , manager_id , location_id | jobs : job_id , job_title , min_salary , max_salary | employees : employee_id , first_name , last_name , email , phone_number , hire_date , job_id , salary , commission_pct , manager_id , department_id | job_history : employee_id , start_date , end_date , job_id , department_id | locations : location_id , street_address , postal_code , city , state_province , country_id output: SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)\n input: question: Show student ids who are on scholarship and have major 600. serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'\n input: question: Give the full name and phone of the customer who has the account name 162. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n input: question: Count the number of tracks that are part of the rock genre. serialized_schema:  | chinook_1 | album : albumid , title , artistid | artist : artistid , name | customer : customerid , firstname , lastname , company , address , city , state , country , postalcode , phone , fax , email , supportrepid | employee : employeeid , lastname , firstname , title , reportsto , birthdate , hiredate , address , city , state , country , postalcode , phone , fax , email | genre : genreid , name | invoice : invoiceid , customerid , invoicedate , billingaddress , billingcity , billingstate , billingcountry , billingpostalcode , total | invoiceline : invoicelineid , invoiceid , trackid , unitprice , quantity | mediatype : mediatypeid , name | playlist : playlistid , name | playlisttrack : playlistid , trackid | track : trackid , name , albumid , mediatypeid , genreid , composer , milliseconds , bytes , unitprice output: SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n Now please use valid SQLite to answer the following questions: For each singer name, what is the total sales for their songs?",
    "Here are 5 examples including input and output:\n input: question: What are the famous titles of artists who do not have any volumes? serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n input: question: What is the total revenue of all companies whose main office is at Tokyo or Taiwan? serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n input: question: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? serialized_schema:  | formula_1 | circuits : circuitid , circuitref , name , location , country , lat , lng , alt , url | races : raceid , year , round , circuitid , name , date , time , url | drivers : driverid , driverref , number , code , forename , surname , dob , nationality , url | status : statusid , status | seasons : year , url | constructors : constructorid , constructorref , name , nationality , url | constructorstandings : constructorstandingsid , raceid , constructorid , points , position , positiontext , wins | results : resultid , raceid , driverid , constructorid , number , grid , position , positiontext , positionorder , points , laps , time , milliseconds , fastestlap , rank , fastestlaptime , fastestlapspeed , statusid | driverstandings : driverstandingsid , raceid , driverid , points , position , positiontext , wins | constructorresults : constructorresultsid , raceid , constructorid , points , status | qualifying : qualifyid , raceid , driverid , constructorid , number , position , q1 , q2 , q3 | pitstops : raceid , driverid , stop , lap , time , duration , milliseconds | laptimes : raceid , driverid , lap , position , time , milliseconds output: SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n input: question: How many events are there for each party? serialized_schema:  | party_people | region : region_id , region_name , date , label , format , catalogue | party : party_id , minister , took_office , left_office , region_id , party_name | member : member_id , member_name , party_id , in_office | party_events : event_id , event_name , party_id , member_in_charge_id output: SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n input: question: Which catalog contents have length below 3 or above 5? Find the catalog entry names. serialized_schema:  | product_catalog | attribute_definitions : attribute_id , attribute_name , attribute_data_type | catalogs : catalog_id , catalog_name , catalog_publisher , date_of_publication , date_of_latest_revision | catalog_structure : catalog_level_number , catalog_id , catalog_level_name | catalog_contents : catalog_entry_id , catalog_level_number , parent_entry_id , previous_entry_id , next_entry_id , catalog_entry_name , product_stock_number , price_in_dollars , price_in_euros , price_in_pounds , capacity , length , height , width | catalog_contents_additional_attributes : catalog_entry_id , catalog_level_number , attribute_id , attribute_value output: SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5\n Now please use valid SQLite to answer the following questions: List the name of singers that do not have any song.",
    "Here are 5 examples including input and output:\n input: question: What is the most common company type, and how many are there? serialized_schema:  | flight_company | airport : id , city , country , iata , icao , name | operate_company : id , name , type , principal_activities , incorporated_in , group_equity_shareholding | flight : id , vehicle_flight_number , date , pilot , velocity , altitude , airport_id , company_id output: SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n input: question: Find the max and min grade point for all letter grade. serialized_schema:  | college_3 | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building | department : dno , division , dname , room , building , dphone | member_of : facid , dno , appt_type | course : cid , cname , credits , instructor , days , hours , dno | minor_in : stuid , dno | enrolled_in : stuid , cid , grade | gradeconversion : lettergrade , gradepoint output: SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION\n input: question: What is the date of enrollment of the course named \"Spanish\"? serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n input: question: Give me the name of the customer who ordered the most items in total. serialized_schema:  | customers_and_addresses | addresses : address_id , address_content , city , zip_postcode , state_province_county , country , other_address_details | products : product_id , product_details | customers : customer_id , payment_method , customer_name , date_became_customer , other_customer_details | customer_addresses : customer_id , address_id , date_address_from , address_type , date_address_to | customer_contact_channels : customer_id , channel_code , active_from_date , active_to_date , contact_number | customer_orders : order_id , customer_id , order_status , order_date , order_details | order_items : order_id , product_id , order_quantity output: SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n input: question: what are the first name and last name of all candidates? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id\n Now please use valid SQLite to answer the following questions: What is the sname of every sing that does not have any song?",
    "Here are 5 examples including input and output:\n input: question: Find the ids and first names of the 3 teachers that have the most number of assessment notes? serialized_schema:  | behavior_monitoring | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id output: SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n input: question: How many cities have a stadium that was opened before the year of 2006? serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006\n input: question: How many phones are there? serialized_schema:  | phone_market | phone : name , phone_id , memory_in_g , carrier , price | market : market_id , district , num_of_employees , num_of_shops , ranking | phone_market : market_id , phone_id , num_of_stock output: SELECT count(*) FROM phone\n input: question: What are all info of students who registered courses but not attended courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n input: question: Show all the activity names and the number of faculty involved in each activity. serialized_schema:  | activity_1 | activity : actid , activity_name | participates_in : stuid , actid | faculty_participates_in : facid , actid | student : stuid , lname , fname , age , sex , major , advisor , city_code | faculty : facid , lname , fname , rank , sex , phone , room , building output: SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID\n Now please use valid SQLite to answer the following questions: Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "Here are 5 examples including input and output:\n input: question: Find the names of all swimmers, sorted by their 100 meter scores in ascending order. serialized_schema:  | swimming | swimmer : id , name , nationality , meter_100 , meter_200 , meter_300 , meter_400 , meter_500 , meter_600 , meter_700 , time | stadium : id , name , capacity , city , country , opening_year | event : id , name , stadium_id , year | record : id , result , swimmer_id , event_id output: SELECT name FROM swimmer ORDER BY meter_100\n input: question: What are the ids of all students for courses and what are the names of those courses? serialized_schema:  | student_assessment | addresses : address_id , line_1 , line_2 , city , zip_postcode , state_province_county , country | people : person_id , first_name , middle_name , last_name , cell_mobile_number , email_address , login_name , password | students : student_id , student_details | courses : course_id , course_name , course_description , other_details | people_addresses : person_address_id , person_id , address_id , date_from , date_to | student_course_registrations : student_id , course_id , registration_date | student_course_attendance : student_id , course_id , date_of_attendance | candidates : candidate_id , candidate_details | candidate_assessments : candidate_id , qualification , assessment_date , asessment_outcome_code output: SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n input: question: What are the names of people who have a height greater than 200 or less than 190? serialized_schema:  | candidate_poll | candidate : candidate_id , people_id , poll_source , date , support_rate , consider_rate , oppose_rate , unsure_rate | people : people_id , sex , name , date_of_birth , height , weight output: SELECT name FROM people WHERE height  >  200 OR height  <  190\n input: question: What was the most popular position at tryouts? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1\n input: question: Show the name, time, and service for all trains. serialized_schema:  | train_station | station : station_id , name , annual_entry_exit , annual_interchanges , total_passengers , location , main_services , number_of_platforms | train : train_id , name , time , service | train_station : train_id , station_id output: SELECT name ,  TIME ,  service FROM train\n Now please use valid SQLite to answer the following questions: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "Here are 5 examples including input and output:\n input: question: Find the ids and names of stations from which at least 200 trips started. serialized_schema:  | bike_1 | station : id , name , lat , long , dock_count , city , installation_date | status : station_id , bikes_available , docks_available , time | trip : id , duration , start_date , start_station_name , start_station_id , end_date , end_station_name , end_station_id , bike_id , subscription_type , zip_code | weather : date , max_temperature_f , mean_temperature_f , min_temperature_f , max_dew_point_f , mean_dew_point_f , min_dew_point_f , max_humidity , mean_humidity , min_humidity , max_sea_level_pressure_inches , mean_sea_level_pressure_inches , min_sea_level_pressure_inches , max_visibility_miles , mean_visibility_miles , min_visibility_miles , max_wind_speed_mph , mean_wind_speed_mph , max_gust_speed_mph , precipitation_inches , cloud_cover , events , wind_dir_degrees , zip_code output: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n input: question: What are the start date and end date of each apartment booking? serialized_schema:  | apartment_rentals | apartment_buildings : building_id , building_short_name , building_full_name , building_description , building_address , building_manager , building_phone | apartments : apt_id , building_id , apt_type_code , apt_number , bathroom_count , bedroom_count , room_count | apartment_facilities : apt_id , facility_code | guests : guest_id , gender_code , guest_first_name , guest_last_name , date_of_birth | apartment_bookings : apt_booking_id , apt_id , guest_id , booking_status_code , booking_start_date , booking_end_date | view_unit_status : apt_id , apt_booking_id , status_date , available_yn output: SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n input: question: Find the stories of the building with the largest height. serialized_schema:  | company_office | buildings : id , name , city , height , stories , status | companies : id , name , headquarters , industry , sales_billion , profits_billion , assets_billion , market_value_billion | office_locations : building_id , company_id , move_in_year output: SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1\n input: question: What are the names of the colleges that are larger than at least one college in Florida? serialized_schema:  | soccer_2 | college : cname , state , enr | player : pid , pname , ycard , hs | tryout : pid , cname , ppos , decision output: SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')\n input: question: How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"? serialized_schema:  | protein_institute | building : building_id , name , street_address , years_as_tallest , height_feet , floors | institution : institution_id , institution , location , founded , type , enrollment , team , primary_conference , building_id | protein : common_name , protein_name , divergence_from_human_lineage , accession_number , sequence_length , sequence_identity_to_human_protein , institution_id output: SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'\n Now please use valid SQLite to answer the following questions: How many available features are there in total?",
    "Here are 5 examples including input and output:\n input: question: What are the maximum scores the team Boston Red Stockings got when the team won in postseason? serialized_schema:  | baseball_1 | all_star : player_id , year , game_num , game_id , team_id , league_id , gp , starting_pos | appearances : year , team_id , league_id , player_id , g_all , gs , g_batting , g_defense , g_p , g_c , g_1b , g_2b , g_3b , g_ss , g_lf , g_cf , g_rf , g_of , g_dh , g_ph , g_pr | manager_award : player_id , award_id , year , league_id , tie , notes | player_award : player_id , award_id , year , league_id , tie , notes | manager_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | player_award_vote : award_id , year , league_id , player_id , points_won , points_max , votes_first | batting : player_id , year , stint , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | batting_postseason : year , round , player_id , team_id , league_id , g , ab , r , h , double , triple , hr , rbi , sb , cs , bb , so , ibb , hbp , sh , sf , g_idp | player_college : player_id , college_id , year | fielding : player_id , year , stint , team_id , league_id , pos , g , gs , inn_outs , po , a , e , dp , pb , wp , sb , cs , zr | fielding_outfield : player_id , year , stint , glf , gcf , grf | fielding_postseason : player_id , year , team_id , league_id , round , pos , g , gs , inn_outs , po , a , e , dp , tp , pb , sb , cs | hall_of_fame : player_id , yearid , votedby , ballots , needed , votes , inducted , category , needed_note | home_game : year , league_id , team_id , park_id , span_first , span_last , games , openings , attendance | manager : player_id , year , team_id , league_id , inseason , g , w , l , rank , plyr_mgr | manager_half : player_id , year , team_id , league_id , inseason , half , g , w , l , rank | player : player_id , birth_year , birth_month , birth_day , birth_country , birth_state , birth_city , death_year , death_month , death_day , death_country , death_state , death_city , name_first , name_last , name_given , weight , height , bats , throws , debut , final_game , retro_id , bbref_id | park : park_id , park_name , park_alias , city , state , country | pitching : player_id , year , stint , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | pitching_postseason : player_id , year , round , team_id , league_id , w , l , g , gs , cg , sho , sv , ipouts , h , er , hr , bb , so , baopp , era , ibb , wp , hbp , bk , bfp , gf , r , sh , sf , g_idp | salary : year , team_id , league_id , player_id , salary | college : college_id , name_full , city , state , country | postseason : year , round , team_id_winner , league_id_winner , team_id_loser , league_id_loser , wins , losses , ties | team : year , league_id , team_id , franchise_id , div_id , rank , g , ghome , w , l , div_win , wc_win , lg_win , ws_win , r , ab , h , double , triple , hr , bb , so , sb , cs , hbp , sf , ra , er , era , cg , sho , sv , ipouts , ha , hra , bba , soa , e , dp , fp , name , park , attendance , bpf , ppf , team_id_br , team_id_lahman45 , team_id_retro | team_franchise : franchise_id , franchise_name , active , na_assoc | team_half : year , league_id , team_id , half , div_id , div_win , rank , g , w , l output: SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';\n input: question: Count the number of artists. serialized_schema:  | music_4 | artist : artist_id , artist , age , famous_title , famous_release_date | volume : volume_id , volume_issue , issue_date , weeks_on_top , song , artist_id | music_festival : id , music_festival , date_of_ceremony , category , volume , result output: SELECT count(*) FROM artist\n input: question: Which employees have either destroyed a document or made an authorization to do so? Return their employee ids. serialized_schema:  | cre_Doc_Tracking_DB | ref_document_types : document_type_code , document_type_name , document_type_description | ref_calendar : calendar_date , day_number | ref_locations : location_code , location_name , location_description | roles : role_code , role_name , role_description | all_documents : document_id , date_stored , document_type_code , document_name , document_description , other_details | employees : employee_id , role_code , employee_name , gender_mfu , date_of_birth , other_details | document_locations : document_id , location_code , date_in_location_from , date_in_locaton_to | documents_to_be_destroyed : document_id , destruction_authorised_by_employee_id , destroyed_by_employee_id , planned_destruction_date , actual_destruction_date , other_details output: SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n input: question: Find the personal names of students not enrolled in any course. serialized_schema:  | e_learning | course_authors_and_tutors : author_id , author_tutor_atb , login_name , password , personal_name , middle_name , family_name , gender_mf , address_line_1 | students : student_id , date_of_registration , date_of_latest_logon , login_name , password , personal_name , middle_name , family_name | subjects : subject_id , subject_name | courses : course_id , author_id , subject_id , course_name , course_description | student_course_enrolment : registration_id , student_id , course_id , date_of_enrolment , date_of_completion | student_tests_taken : registration_id , date_test_taken , test_result output: SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n input: question: Which cmi cross reference id is not related to any parking taxes? serialized_schema:  | local_govt_mdm | customer_master_index : master_customer_id , cmi_details | cmi_cross_references : cmi_cross_ref_id , master_customer_id , source_system_code | council_tax : council_tax_id , cmi_cross_ref_id | business_rates : business_rates_id , cmi_cross_ref_id | benefits_overpayments : council_tax_id , cmi_cross_ref_id | parking_fines : council_tax_id , cmi_cross_ref_id | rent_arrears : council_tax_id , cmi_cross_ref_id | electoral_register : electoral_register_id , cmi_cross_ref_id output: SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines\n Now please use valid SQLite to answer the following questions: What is the feature type name of feature AirCon?",
    "Here are 5 examples including input and output:\n input: question: How many games are played for all students? serialized_schema:  | game_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | video_games : gameid , gname , gtype | plays_games : stuid , gameid , hours_played | sportsinfo : stuid , sportname , hoursperweek , gamesplayed , onscholarship output: SELECT sum(gamesplayed) FROM Sportsinfo\n input: question: Count the number of courses in the Physics department. serialized_schema:  | college_2 | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id output: SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n input: question: What are the names of all the reviewers and movie names? serialized_schema:  | movie_1 | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate output: SELECT name FROM Reviewer UNION SELECT title FROM Movie\n input: question: Find the number of different products that are produced by companies at different headquarter cities. serialized_schema:  | manufactory_1 | manufacturers : code , name , headquarter , founder , revenue | products : code , name , price , manufacturer output: SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter\n input: question: Count the number of customer cards of the type Debit. serialized_schema:  | customers_card_transactions | accounts : account_id , customer_id , account_name , other_account_details | customers : customer_id , customer_first_name , customer_last_name , customer_address , customer_phone , customer_email , other_customer_details | customers_cards : card_id , customer_id , card_type_code , card_number , date_valid_from , date_valid_to , other_card_details | financial_transactions : transaction_id , previous_transaction_id , account_id , card_id , transaction_type , transaction_date , transaction_amount , transaction_comment , other_transaction_details output: SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\n Now please use valid SQLite to answer the following questions: Show the property type descriptions of properties belonging to that code.",
    "Here are 5 examples including input and output:\n input: question: Show the average price of hotels for each star rating code. serialized_schema:  | cre_Theme_park | ref_hotel_star_ratings : star_rating_code , star_rating_description | locations : location_id , location_name , address , other_details | ref_attraction_types : attraction_type_code , attraction_type_description | visitors : tourist_id , tourist_details | features : feature_id , feature_details | hotels : hotel_id , star_rating_code , pets_allowed_yn , price_range , other_hotel_details | tourist_attractions : tourist_attraction_id , attraction_type_code , location_id , how_to_get_there , name , description , opening_hours , other_details | street_markets : market_id , market_details | shops : shop_id , shop_details | museums : museum_id , museum_details | royal_family : royal_family_id , royal_family_details | theme_parks : theme_park_id , theme_park_details | visits : visit_id , tourist_attraction_id , tourist_id , visit_date , visit_details | photos : photo_id , tourist_attraction_id , name , description , filename , other_details | staff : staff_id , tourist_attraction_id , name , other_details | tourist_attraction_features : tourist_attraction_id , feature_id output: SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\n input: question: Find the titles of all the papers written by \"Aaron Turon\". serialized_schema:  | icfp_1 | inst : instid , name , country | authors : authid , lname , fname | papers : paperid , title | authorship : authid , instid , paperid , authorder output: SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"\n input: question: What is the description of the club \"Pen and Paper Gaming\"? serialized_schema:  | club_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | club : clubid , clubname , clubdesc , clublocation | member_of_club : stuid , clubid , position output: SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"\n input: question: Which county has the largest population? Give me the name of the county. serialized_schema:  | election | county : county_id , county_name , population , zip_code | party : party_id , year , party , governor , lieutenant_governor , comptroller , attorney_general , us_senate | election : election_id , counties_represented , district , delegate , party , first_elected , committee output: SELECT County_name FROM county ORDER BY Population DESC LIMIT 1\n input: question: Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed? serialized_schema:  | document_management | roles : role_code , role_description | users : user_id , role_code , user_name , user_login , password | document_structures : document_structure_code , parent_document_structure_code , document_structure_description | functional_areas : functional_area_code , parent_functional_area_code , functional_area_description | images : image_id , image_alt_text , image_name , image_url | documents : document_code , document_structure_code , document_type_code , access_count , document_name | document_functional_areas : document_code , functional_area_code | document_sections : section_id , document_code , section_sequence , section_code , section_title | document_sections_images : section_id , image_id output: SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1\n Now please use valid SQLite to answer the following questions: What are the names of properties that are either houses or apartments with more than 1 room?"
]