[
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###How many singers do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the total number of singers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show name, country, age for all singers ordered by age from the oldest to the youngest.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names, countries, and ages for every singer in descending order of age?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the average, minimum, and maximum age of all singers from France?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the average, minimum, and maximum age for all French singers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show the name and the release year of the song by the youngest singer.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names and release years for all the songs of the youngest singer?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are all distinct countries where singers above age 20 are from?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are  the different countries with singers above age 20?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show all countries and the number of singers in each country.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###How many singers are from each country?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###List all song names by singers above the average age.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are all the song names by singers who are older than average?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show location and name for all stadiums with a capacity between 5000 and 10000.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the locations and names of all stations with capacity between 5000 and 10000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the maximum capacity and the average of all stadiums ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the average and maximum capacities for all stadiums ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the name and capacity for the stadium with highest average attendance?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the name and capacity for the stadium with the highest average attendance?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###How many concerts are there in year 2014 or 2015?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###How many concerts occurred in 2014 or 2015?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show the stadium name and the number of concerts in each stadium.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###For each stadium, how many concerts play there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show the stadium name and capacity with most number of concerts in year 2014 or after.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the name and capacity of the stadium with the most concerts after 2013 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Which year has most number of concerts?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the year that had the most concerts?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show the stadium names without any concert.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names of the stadiums without any concerts?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show countries where a singer above age 40 and a singer below 30 are from.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show names for all stadiums except for stadiums having a concert in year 2014.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names of all stadiums that did not have a concert in 2014?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Show the name and theme for all concerts and the number of singers in each concert.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names , themes , and number of singers for every concert ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###List singer names and number of concerts for each singer.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names of the singers and number of concerts for each person?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###List all singer names in concerts in year 2014.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names of the singers who performed in a concert in 2014?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###what is the name and nation of the singer who have a song having 'Hey' in its name?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###Find the number of concerts happened in the stadium with the highest capacity .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)\n# singer (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)\n# concert (concert_ID, concert_Name, Theme, Stadium_ID, Year)\n# singer_in_concert (concert_ID, Singer_ID)\n#\n###What are the number of concerts that occurred in the stadium with the largest capacity ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the number of pets whose weight is heavier than 10.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###How many pets have a greater weight than 10?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the weight of the youngest dog.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###How much does the youngest dog weigh?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the maximum weight for each type of pet. List the maximum weight and pet type.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###List the maximum weight and type for each type of pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find number of pets owned by students who are older than 20.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###How many pets are owned by students that have an age greater than 20?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the number of dog pets that are raised by female students (with sex F).\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###How many dog pets are raised by female students?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the number of distinct type of pets.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###How many different types of pet are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the first name of students who have cat or dog pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What are the first names of every student who has a cat or dog as a pet?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the first name of students who have both cat and dog pets .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What are the students' first names who have both cats and dogs as pets?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the major and age of students who do not have a cat pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What major is every student who does not own a cat as a pet, and also how old are they?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the id of students who do not have a cat pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What are the ids of the students who do not own cats as pets?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the first name and age of students who have a dog but do not have a cat as a pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the first name of every student who has a dog but does not have a cat?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the type and weight of the youngest pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What type of pet is the youngest animal, and how much does it weigh?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the id and weight of all pets whose age is older than 1.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the id and weight of every pet who is older than 1?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the average and maximum age for each type of pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the average and maximum age for each pet type?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the average weight for each pet type.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the average weight for each type of pet?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the first name and age of students who have a pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What are the different first names and ages of the students who do have pets?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the id of the pet owned by student whose last name is ‘Smith’.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the id of the pet owned by the student whose last name is 'Smith'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the number of pets for each student who has any pet and student id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###For students who have pets , how many pets does each student have ? list their ids instead of names .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the first name and gender of student who have more than one pet.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the first name and gender of the all the students who have more than one pet?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the last name of the student who has a cat that is age 3.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the last name of the student who has a cat that is 3 years old?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###Find the average age of students who do not have any pet .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)\n# Has_Pet (StuID, PetID)\n# Pets (PetID, PetType, pet_age, weight)\n#\n###What is the average age for all students who do not own any pets ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many continents are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of continents?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many countries does each continent have? List the continent id, continent name and the number of countries.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###For each continent, list its id, name, and how many countries it has?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many countries are listed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many countries exist?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many models does each car maker produce? List maker full name, id and the number.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the full name of each car maker, along with its id and how many models it produces?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which model of the car has the minimum horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the model of the car with the smallest amount of horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Find the model of the car whose weight is below the average weight.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the model for the car with a weight smaller than the average?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Find the name of the makers that produced some cars in the year of 1970?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the name of the different car makers who produced a car in 1970?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Find the make and production time of the cars that were produced in the earliest year?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maker of the carr produced in the earliest year and what year was it?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which distinct car models are the produced after 1980?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the different models for the cards produced after 1980?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many car makers are there in each continents? List the continent name and the count.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the name of each continent and how many car makers are there in each one?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which of the countries has the most car makers? List the country name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the name of the country with the most car makers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many car models are produced by each maker ? Only list the count and the maker full name .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of car models that are produced by each maker and what is the id and full name of each maker?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the accelerate of the car make amc hornet sportabout (sw)?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How much does the car accelerate that makes amc hornet sportabout (sw)?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many car makers are there in france?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of makers of care in France?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many car models are produced in the usa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the count of the car models produced in the United States?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average miles per gallon(mpg) of the cars with 4 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average miles per gallon of all the cards with 4 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the smallest weight of the car produced with 8 cylinders on 1974 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the minimum weight of the car with 8 cylinders produced in 1974 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are all the makers and models?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the makers and models?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the countries having at least one car maker? List name and id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the names and ids of all countries with at least one car maker?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of the cars with horsepower more than 150?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of cars with a horsepower greater than 150?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average weight of cars each year?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average weight and year for each year?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which countries in europe have at least 3 car manufacturers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the names of all European countries with at least 3 manufacturers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maximum horsepower and the make of the car models with 3 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the largest amount of horsepower for the models with 3 cylinders and what make is it?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which model saves the most gasoline? That is to say, have the maximum miles per gallon.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the car model with the highest mpg ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average horsepower of the cars before 1980?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average horsepower for all cars produced before 1980 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average edispl of the cars of model volvo?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the average edispl for all volvos?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maximum accelerate for different number of cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maximum accelerate for all the different cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which model has the most version(make) of cars?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What model has the most different versions?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many cars have more than 4 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of cars with more than 4 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###how many cars were produced in 1980?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###In 1980, how many cars were made?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many car models were produced by the maker with full name American Motor Company?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of car models created by the car maker American Motor Company?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which makers designed more than 3 car models? List full name and the id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the names and ids of all makers with more than 3 models?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the different models created by either the car maker General Motors or weighed more than 3500?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###In which years cars were produced weighing no less than 3000 and no more than 4000 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the horsepower of the car with the largest accelerate?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the horsepower of the car with the greatest accelerate?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###For model volvo, how many cylinders does the car with the least accelerate have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###For a volvo model, how many cylinders does the version with least accelerate have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many cars have a larger accelerate than the car with the largest horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of cars with a greater accelerate than the one with the most horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many countries has more than 2 car makers ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of countries with more than 2 car makers ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###How many cars has over 6 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the number of carsw ith over 6 cylinders?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###For the cars with 4 cylinders, which model has the largest horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###For all of the 4 cylinder cars, which model has the most horsepower?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the name of the countries where there is not a single car maker?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the names of the countries with no car makers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# continents (ContId, Continent)\n# countries (CountryId, CountryName, Continent)\n# car_makers (Id, Maker, FullName, Country)\n# model_list (ModelId, Maker, Model)\n# car_names (MakeId, Model, Make)\n# cars_data (Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)\n#\n###What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which country does Airline \"JetBlue Airways\" belong to?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What country is Jetblue Airways affiliated with?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the abbreviation of Airline \"JetBlue Airways\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which abbreviation corresponds to Jetblue Airways?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###List all airline names and their abbreviations in \"USA\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are the airline names and abbreviations for airlines in the USA?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###List the airport code and name in the city of Anthony.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the airport code and airport name corresonding to the city Anthony.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many airlines do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the total number of airlines?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many airports do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of  airports.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of flights.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airline has abbreviation 'UAL'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the airline with abbreviation 'UAL'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many airlines are from USA?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of airlines in the USA.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which city and country is the Alton airport at?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the city and country for the Alton airport.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the airport name for airport 'AKO'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the name of the airport with code 'AKO'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are airport names at City 'Aberdeen'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are the names of airports in Aberdeen?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights depart from 'APG'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Count the number of flights departing from 'APG'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights have destination ATO?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Count the number of flights into ATO.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights depart from City Aberdeen?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of flights departing from Aberdeen.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights arriving in Aberdeen city?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of flights arriving in Aberdeen.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights fly from Aberdeen to Ashley?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights does airline 'JetBlue Airways' have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the number of Jetblue Airways flights.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many 'United Airlines' flights go to Airport 'ASY'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Count the number of United Airlines flights arriving in ASY Airport.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many 'United Airlines' flights depart from Airport 'AHD'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Return the number of United Airlines flights leaving from AHD Airport.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many United Airlines flights go to City 'Aberdeen'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Count the number of United Airlines flights that arrive in Aberdeen.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which city has most number of arriving flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which city has the most frequent destination airport?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which city has most number of departing flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which city is the most frequent source airport?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the code of airport that has the highest number of flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the airport code of the airport with the most flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the code of airport that has fewest number of flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the code of the airport with the least flights.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airline has most number of flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What airline serves the most flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find the abbreviation and country of the airline that has fewest number of flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What is the abbreviation of the airilne has the fewest flights and what country is it in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are airlines that have some flight departing from airport 'AHD'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have a flight with source airport AHD?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are airlines that have flights arriving at airport 'AHD'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have a flight with destination airport AHD?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find all airlines that have flights from both airports 'APG' and 'CVO'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have departing flights from both APG and CVO airports?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find all airlines that have flights from airport 'CVO' but not from 'APG'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have departures from CVO but not from APG airports?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find all airlines that have at least 10 flights.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have at least 10 flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find all airlines that have fewer than 200 flights.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airlines have less than 200 flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are flight numbers of Airline \"United Airlines\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which flight numbers correspond to United Airlines flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are flight numbers of flights departing from Airport \"APG\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the flight numbers of flights leaving from APG.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are flight numbers of flights arriving at Airport \"APG\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the flight numbers of flights landing at APG.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are flight numbers of flights departing from City \"Aberdeen \"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the flight numbers of flights leaving from Aberdeen.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###What are flight numbers of flights arriving at City \"Aberdeen\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Give the flight numbers of flights arriving in Aberdeen.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find the number of flights landing in the city of Aberdeen or Abilene.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###How many flights land in Aberdeen or Abilene?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Find the name of airports which do not have any flight in and out.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# airlines (uid, Airline, Abbreviation, Country)\n# airports (City, AirportCode, AirportName, Country, CountryAbbrev)\n# flights (Airline, FlightNo, SourceAirport, DestAirport)\n#\n###Which airports do not have departing or arriving flights?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###How many employees are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Count the number of employees\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Sort employee names by their age in ascending order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###List the names of employees and sort in ascending order of age.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What is the number of employees from each city?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Count the number of employees for each city.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which cities do more than one employee under age 30 come from?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the cities that have more than one employee under age 30.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the number of shops in each location.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###How many shops are there in each location?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the manager name and district of the shop whose number of products is the largest.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What are the manager name and district of the shop that sells the largest number of products?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###find the minimum and maximum number of products of all stores.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What are the minimum and maximum number of products across all the shops?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Return the name, location and district of all shops in descending order of number of products.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Sort all the shops by number products in descending order, and return the name, location and district of each shop.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the names of stores whose number products is more than the average number of products.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which shops' number products is above the average? Give me the shop names.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###find the name of employee who was awarded the most times in the evaluation.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which employee received the most awards in evaluations? Give me the employee name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the name of the employee who got the highest one time bonus.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which employee received the biggest bonus? Give me the employee name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the names of employees who never won any award in the evaluation.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What are the names of the employees who never received any evaluation?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What is the name of the shop that is hiring the largest number of employees?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which shop has the most employees? Give me the shop name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the name of the shops that do not hire any employee.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which shops run with no employees? Find the shop names\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the number of employees hired in each shop; show the shop name as well.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###For each shop, return the number of employees working there and the name of the shop.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What is total bonus given in all evaluations?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the total amount of bonus given in all the evaluations.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Give me all the information about hiring.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###What is all the information about hiring?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Which district has both stores with less than 3000 products and stores with more than 10000 products?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###How many different store locations are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# employee (Employee_ID, Name, Age, City)\n# shop (Shop_ID, Name, Location, District, Number_products, Manager_name)\n# hiring (Shop_ID, Employee_ID, Start_from, Is_full_time)\n# evaluation (Employee_ID, Year_awarded, Bonus)\n#\n###Count the number of distinct store locations.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many documents do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of documents.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###List document IDs, document names, and document descriptions for all documents.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids, names, and descriptions for all documents?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the document name and template id for document with description with the letter 'w' in it?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the names and template ids for documents that contain the letter w in their description.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the document id, template id and description for document named \"Robbin CV\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the document id, template id, and description for the document with the name Robbin CV.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many different templates do all document use?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of different templates used for documents.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many documents are using the template with type code 'PPT'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of documents that use the PPT template type.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template ids and number of documents using each template.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are all different template ids used for documents, and how many times were each of them used?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the id and type code for the template used by the most documents?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the id and type code of the template that is used for the greatest number of documents.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show ids for all templates that are used by more than one document.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the template ids of any templates used in more than a single document?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show ids for all templates not used by any document.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids for templates that are not used in any documents?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many templates do we have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of templates.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show template ids, version numbers, and template type codes for all templates.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids, version numbers, and type codes for each template?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all distinct template type codes for all templates.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the different template type codes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids of templates with template type code PP or PPT?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the ids of templates that have the code PP or PPT.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many templates have template type code CV?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of templates of the type CV.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the version number and template type code for the template with version number later than 5?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the version numbers and template type codes of templates with a version number greater than 5.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template type codes and number of templates for each.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the different template type codes, and how many templates correspond to each?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Which template type code has most number of templates?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the type code of the template type that the most templates belong to.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template type codes with less than three templates.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the codes of template types that have fewer than 3 templates?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What the smallest version number and its template type code?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the lowest version number, along with its corresponding template type code.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the template type code of the template used by document with the name \"Data base\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the template type code of the template that is used by a document named Data base.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all document names using templates with template type code BK.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the names of documents that use templates with the code BK?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template type codes and the number of documents using each type.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the different template type codes, and how many documents use each type?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Which template type code is used by most number of documents?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the code of the template type that is most commonly used in documents.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template type codes that are not used by any document.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the codes of template types that are not used for any document?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all template type codes and descriptions.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the type codes and descriptions for all template types?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the template type descriptions for template type code \"AD\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the template type description of the template type with the code AD.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the template type code for template type description \"Book\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the type code of the template type with the description \"Book\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the distinct template type descriptions for the templates ever used by any document?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the different descriptions for templates that have been used in a document.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the template ids with template type description \"Presentation\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the ids corresponding to templates with the description 'Presentation'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many paragraphs in total?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of paragraphs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###How many paragraphs for the document with name 'Summer Show'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Count the number of paragraphs in the document named 'Summer Show'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show paragraph details for paragraph with text 'Korea ' .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the details for the paragraph that includes the text 'Korea ' ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all paragraph ids and texts for the document with name 'Welcome to NY'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all paragraph texts for the document \"Customer reviews\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the paragraph texts for the document with the name 'Customer reviews'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all document ids and the number of paragraphs in each document. Order by document id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show all document ids, names and the number of paragraphs in each document.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids and names of each document, as well as the number of paragraphs in each?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###List all document ids with at least two paragraphs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids of documents that have 2 or more paragraphs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the document id and name with greatest number of paragraphs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the id and name of the document with the most paragraphs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the document id with least number of paragraphs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Return the id of the document with the fewest paragraphs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What is the document id with 1 to 2 paragraphs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Give the ids of documents that have between one and two paragraphs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###Show the document id with paragraph text 'Brazil' and 'Ireland'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Template_Types (Template_Type_Code, Template_Type_Description)\n# Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)\n# Documents (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)\n# Paragraphs (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)\n#\n###What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###How many teachers are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What is the total count of teachers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###List the names of teachers in ascending order of age.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers ordered by ascending age?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the age and hometown of teachers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What is the age and hometown of every teacher?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###List the name of teachers whose hometown is not `` Little Lever Urban District '' .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show the name of teachers aged either 32 or 33?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers who are aged either 32 or 33?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What is the hometown of the youngest teacher?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Where is the youngest teacher from?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show different hometown of teachers and the number of teachers from each hometown.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###For each hometown, how many teachers are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###List the most common hometown of teachers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What is the most commmon hometowns for teachers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show the hometowns shared by at least two teachers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the towns from which at least two teachers come from?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show names of teachers and the courses they are arranged to teach.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What is the name of each teacher and what course they teach?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show the name of the teacher for the math course.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the people who teach math courses?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show names of teachers and the number of courses they teach.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers and how many courses do they teach?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###Show names of teachers that teach at least two courses.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers who teach at least two courses?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###List the names of teachers who have not been arranged to teach courses.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# course (Course_ID, Staring_Date, Course)\n# teacher (Teacher_ID, Name, Age, Hometown)\n# course_arrange (Course_ID, Teacher_ID, Grade)\n#\n###What are the names of the teachers whose courses have not been arranged?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###How many visitors below age 30 are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What is the average age of the visitors whose membership level is not higher than 4?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the id and name of the museum that has the most staff members?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the average number of staff working for the museums that were open before 2009.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What are the opening year and staff number of the museum named Plaza Museum?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###find the id, name and age for visitors who visited some museums more than once.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What are the id and name of the museum visited most times?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What is the name of the museum that had no visitor yet?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the name and age of the visitor who bought the most tickets at once.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What are the average and maximum number of tickets bought in all visits?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What is the total ticket expense of the visitors whose membership level is 1?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###Find the number of visitors who did not visit any museum opened after 2010.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# museum (Museum_ID, Name, Num_of_Staff, Open_Year)\n# visitor (ID, Name, Level_of_membership, Age)\n# visit (Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)\n#\n###How many museums were opened after 2013 or before 2008?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the total number of players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many players are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the total number of matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Count the number of matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###List the first name and birth date of all players from the country with code USA.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the first names and birth dates of players from the USA?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the average age of losers and winners of all matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the average ages of losers and winners across matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the average rank of winners in all matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the average rank for winners in all matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the highest rank of losers in all matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the best rank of losers across all matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###find the number of distinct country codes of all players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many distinct countries do players come from?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the number of distinct name of losers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many different loser names are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the name of tourney that has more than 10 matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the names of tournaments that have more than 10 matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###List the names of all winners who played in both 2013 and 2016.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the names of players who won in both 2013 and 2016?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###List the number of all matches who played in years of 2013 or 2016.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many matches were played in 2013 or 2016?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the first name and country code of the oldest player.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the first name and country code of the oldest player?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###List the first and last name of all players in the order of birth date.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the full names of all players, sorted by birth date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###List the first and last name of all players who are left / L hand in the order of birth date.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the full names of all left handed players, in order of birth date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the first name and country code of the player who did the most number of tours.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the first name and country code of the player with the most tours?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the year that has the most number of matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Which year had the most matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the name and rank points of the winner who won the most times.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the name of the winner who has won the most matches, and how many rank points does this player have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the name of the winner with the most rank points who participated in the Australian Open tournament?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###find the names of loser and winner who played in the match with greatest number of minutes.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the names of the winner and loser who played in the longest match?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the average ranking for each player and their first name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the first names of all players, and their average rankings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the total ranking points for each player and their first name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the first names of all players, and their total ranking points?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###find the number of players for each country.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many players are from each country?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###find the code of the country where has the greatest number of players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the code of the country with the most players?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the codes of countries that have more than 50 players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the codes of countries with more than 50 players?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the total number of tours for each ranking date.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many total tours were there for each ranking date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the number of matches happened in each year.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many matches were played in each year?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the name and rank of the 3 youngest winners across all matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What are the names and ranks of the three youngest winners across all matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many different winners both participated in the WTA Championships and were left handed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the number of left handed winners who participated in the WTA Championships.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###Find the number of players for each hand type.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# players (player_id, first_name, last_name, hand, birth_date, country_code)\n# matches (best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)\n# rankings (ranking_date, ranking, player_id, ranking_points, tours)\n#\n###How many players are there for each hand type?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###How many ships ended up being 'Captured'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###List the name and tonnage ordered by in descending alphaetical order for the names.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###List the name, date and result of each battle.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What is maximum and minimum death toll caused each time?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What is the average number of injuries caused each time?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the death and injury situations caused by the ship with tonnage 't'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the name and results of the battles when the bulgarian commander is not 'Boril'\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the different ids and names of the battles that lost any 'Brig' type shipes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the ids and names of the battles that led to more than 10 people killed in total.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What is the ship id and name that caused most total injuries?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###How many different results are there for the battles?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###How many battles did not lose any ship with tonnage '225'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# battle (id, name, date, bulgarian_commander, latin_commander, result)\n# ship (lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)\n# death (caused_by_ship_id, id, note, killed, injured)\n#\n###What are the notes of the death events which has substring 'East'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###what are all the addresses including line 1 and line 2?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the first and second line for all addresses?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many courses in total are listed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many courses are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How is the math course described?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the descriptions for all the math courses?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the zip code of the address in the city Port Chelsea?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the zip code for Port Chelsea?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Which department offers the most number of degrees? List department name and id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the name and id of the department with the most number of degrees ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many departments offer any degree?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many different departments offer degrees?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many different degree names are offered?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many different degrees are offered?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many degrees does the engineering department offer?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many degrees does the engineering department have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names and descriptions of all the sections?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names and descriptions for all the sections?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names and id of courses having at most 2 sections?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names and ids of every course with less than 2 sections?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###List the section_name in reversed lexicographical order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names of the sections in reverse alphabetical order?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the semester which most student registered in? Show both the name and the id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###For each semester, what is the name and id of the one with the most students registered?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the description of the department whose name has the substring the computer?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the department description for the one whose name has the word computer?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the first, middle, and last names for everybody enrolled in a Bachelors program?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Find the kind of program which most number of students are enrolled in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the degree summary name that has the most number of students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Find the program which most number of students are enrolled in. List both the id and the summary.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the program id and the summary of the degree that has the most students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Which semesters do not have any student enrolled? List the semester name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the name of the semester with no students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are all the course names of the courses which ever have students enrolled in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the names of all courses that have some students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What's the name of the course with most number of enrollments?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the name of the course with the most students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the last name of the students who live in North Carolina but have not registered in any degree programs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Show the date and id of the transcript with at least 2 course results.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the date and id of the transcript with at least 2 courses listed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the phone number of the man with the first name Timmothy and the last name Ward?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the mobile phone number of the student named Timmothy Ward ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Who is the first student to register? List the first name, middle name and last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the first, middle, and last name of the first student to register?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Who is the earliest graduate of the school? List the first name, middle name and last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the first, middle, and last name of the earliest school graduate?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Whose permanent address is different from his or her current address? List his or her first name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the first name of the student whose permanent address is different from his or her current one?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Which address holds the most number of students currently? List the address id and all lines.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the id, line 1, and line 2 of the address with the most students?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###On average, when were the transcripts printed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the average transcript date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###When is the first transcript released? List the date and details.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the earliest date of a transcript release, and what details can you tell me?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many transcripts are released?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many transcripts are listed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the last transcript release date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###When was the last transcript released?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Show the date of the transcript which shows the least number of results, also list the id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the date and id of the transcript with the least number of results?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Find the semester when both Master students and Bachelor students got enrolled in.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the id of the semester that had both Masters and Bachelors students enrolled?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###How many different addresses do the students currently live?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the different addresses that have students living there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###List all the student details in reversed lexicographical order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What other details can you tell me about students in reverse alphabetical order?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Describe the section h.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What is the description for the section named h?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)\n# Courses (course_id, course_name, course_description, other_details)\n# Departments (department_id, department_name, department_description, other_details)\n# Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)\n# Sections (section_id, course_id, section_name, section_description, other_details)\n# Semesters (semester_id, semester_name, semester_description, other_details)\n# Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)\n# Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details)\n# Student_Enrolment_Courses (student_course_id, course_id, student_enrolment_id)\n# Transcripts (transcript_id, transcript_date, other_details)\n# Transcript_Contents (student_course_id, transcript_id)\n#\n###What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the title of all cartoons in alphabetical order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the titles of the cartoons sorted alphabetically?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List all cartoon directed by \"Ben Jones\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the names of all cartoons directed by Ben Jones?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###How many cartoons were written by \"Joseph Kuhr\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the number of cartoones written by Joseph Kuhr?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###list all cartoon titles and their directors ordered by their air date\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the name and directors of all the cartoons that are ordered by air date?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###Which country has the most of TV Channels? List the country and number of TV Channels it has.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the country with the most number of TV Channels and how many does it have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the number of different series names and contents in the TV Channel table.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###How many different series and contents are listed in the TV Channel table?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the content of TV Channel with serial name \"Sky Radio\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the content of the series Sky Radio?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the Package Option of TV Channel with serial name \"Sky Radio\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the Package Options of the TV Channels whose series names are Sky Radio?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###How many TV Channel using language English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###How many TV Channels use the English language?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the language used least number of TV Channel. List language and number of TV Channel.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the languages used by the least number of TV Channels and how many channels use it?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List each language and the number of TV Channels using it.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###For each language, list the number of TV Channels that use it.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the Episode of all TV series sorted by rating.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are all of the episodes ordered by ratings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are 3 most highly rated episodes in the TV series table and what were those ratings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is minimum and maximum share of TV series?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the maximum and minimum share for the TV series?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the air date of TV series with Episode \"A Love of a Lifetime\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###When did the episode \"A Love of a Lifetime\" air?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the weekly rank for the episode \"A Love of a Lifetime\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the name of the series that has the episode \"A Love of a Lifetime\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the episode for the TV series named \"Sky Radio\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###Find the number of cartoons directed by each of the listed directors.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###How many cartoons did each director create?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###Find the production code and channel of the most recently aired cartoon .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the produdction code and channel of the most recent cartoon ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###Find the package choice and series name of the TV channel that has high definition TV.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the package options and the name of the series for the TV Channel that supports high definition TV?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###which countries' tv channels are playing some cartoon written by Todd Casey?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the countries that have cartoons on TV that were written by Todd Casey?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###which countries' tv channels are not playing any cartoon written by Todd Casey?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the countries that are not playing cartoons written by Todd Casey?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###find the pixel aspect ratio and nation of the tv channels that do not use English.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What is the pixel aspect ratio and country of origin for all TV channels that do not use English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###find id of the tv channels that from the countries where have more than two tv channels.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the ids of all tv channels that have more than 2 TV channels?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###find the id of tv channels that do not play any cartoon directed by Ben Jones.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###find the package option of the tv channel that do not have any cartoon directed by Ben Jones.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)\n# TV_series (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)\n# Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)\n#\n###What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###How many poker players are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Count the number of poker players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###List the earnings of poker players in descending order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the earnings of poker players, ordered descending by value?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###List the final tables made and the best finishes of poker players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the final tables made and best finishes for all poker players?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the average earnings of poker players?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the average earnings across all poker players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the money rank of the poker player with the highest earnings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the money rank of the player with the greatest earnings.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the maximum number of final tables made among poker players with earnings less than 200000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the maximum final tables made across all poker players who have earnings below 200000.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of poker players?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the names of all the poker players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of poker players whose earnings is higher than 300000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Give the names of poker players who have earnings above 300000.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###List the names of poker players ordered by the final tables made in ascending order.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of poker players, ordered ascending by the number of final tables they have made?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the birth date of the poker player with the lowest earnings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the birth date of the poker player with the lowest earnings.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the money rank of the tallest poker player?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the money rank of the poker player with the greatest height.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the average earnings of poker players with height higher than 200?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Give average earnings of poker players who are taller than 200.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of poker players in descending order of earnings?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the names of poker players sorted by their earnings descending.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are different nationalities of people and the corresponding number of people from each nation?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###How many people are there of each nationality?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What is the most common nationality of people?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Give the nationality that is most common across all people.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the nationalities that are shared by at least two people?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Return the nationalities for which there are two or more people.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###List the names and birth dates of people in ascending alphabetical order of name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names and birth dates of people, ordered by their names in alphabetical order?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Show names of people whose nationality is not \"Russia\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of people who are not from Russia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###List the names of people that are not poker players.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###What are the names of people who do not play poker?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###How many distinct nationalities are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)\n# people (People_ID, Nationality, Name, Birth_Date, Height)\n#\n###Count the number of different nationalities.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###How many states are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###List the contestant numbers and names, ordered by contestant name descending.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###List the vote ids, phone numbers and states of all votes.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the maximum and minimum values of area codes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What is last date created of votes from the state 'CA'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the names of the contestants whose names are not 'Jessie Alloway'\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the distinct states and create time of all votes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the contestant numbers and names of the contestants who had at least two votes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the number of votes from state 'NY' or 'CA'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###How many contestants did not get voted?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What is the area code in which the most voters voted?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# AREA_CODE_STATE (area_code, state)\n# CONTESTANTS (contestant_number, contestant_name)\n# VOTES (vote_id, phone_number, state, contestant_number, created)\n#\n###Return the names of the contestants whose names contain the substring 'Al' .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of all the countries that became independent after 1950?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the names of the nations that were founded after 1950.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many countries have a republic as their form of government?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many countries have governments that are republics?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total surface area of the countries in the Caribbean region?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How much surface area do the countires in the Carribean cover together?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which continent is Anguilla in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the continent name which Anguilla belongs to?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which region is the city Kabul located in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What region is Kabul in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which language is the most popular in Aruba?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What language is predominantly spoken in Aruba?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the population and life expectancies in Brazil?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give me Brazil’s population and life expectancies.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the region and population of Angola?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What region does Angola belong to and what is its population?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the average expected life expectancy for countries in the region of Central Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How long is the people’s average life expectancy in Central Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the name of country that has the shortest life expectancy in Asia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the name of the country in Asia with the lowest life expectancy.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total population and maximum GNP in Asia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many people live in Asia, and what is the largest GNP among them?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the average life expectancy in African countries that are republics?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the average life expectancy for countries in Africa which are republics?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total surface area of the continents Asia and Europe?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the total surface area covered by countries in Asia or Europe.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many people live in Gelderland district?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total population of Gelderland district?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the average GNP and total population in all nations whose government is US territory?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the mean GNP and total population of nations which are considered US territory.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many unique languages are spoken in the world?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the number of distinct languages used around the world?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many type of governments are in Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many different forms of governments are there in Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total number of languages used in Aruba?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many languages are spoken in Aruba?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many official languages does Afghanistan have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many official languages are spoken in Afghanistan?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is name of the country that speaks the largest number of languages?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the name of the nation that uses the greatest amount of languages.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which continent has the most diverse languages?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which continent speaks the most languages?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many countries speak both English and Dutch?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the number of nations that use English and Dutch?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of nations speak both English and French?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the names of nations that speak both English and French.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of nations where both English and French are official languages?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the names of countries with English and French as official languages.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the number of distinct continents where Chinese is spoken?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many continents speak Chinese?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the regions that use English or Dutch?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which regions speak Dutch or English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the countries where either English or Dutch is the official language ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which countries have either English or Dutch as an official language?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which language is the most popular on the Asian continent?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the language that is used by the largest number of Asian nations?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which languages are spoken by only one country in republic governments?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What languages are only used by a single country with a republic government?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Find the city with the largest population that uses English.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the most populace city that speaks English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Find the name, population and expected life length of asian country with the largest area?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the name, population, and life expectancy of the largest Asian country by land?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is average life expectancy in the countries where English is not the official language?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the mean life expectancy of countries in which English is not the official language.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total number of people living in the nations that do not use English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many people live in countries that do not speak English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the official language spoken in the country whose head of state is Beatrix?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the official language used in the country the name of whose head of state is Beatrix.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total number of unique official languages spoken in the countries that are founded before 1930?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###For the countries founded before 1930, what is the total number of distinct official languages?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the countries that have greater surface area than any country in Europe?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which countries have greater area than that of any country in Europe?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the African countries that have a  population less than any country in Asia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which African countries have a smaller population than that of any country in Asia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which Asian countries have a population that is larger than any country in Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the Asian countries which have a population larger than that of any country in Africa?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the country codes for countries that do not speak English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the country codes for countries that do not speak English.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the country codes of countries where people use languages other than English?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the country codes for countries in which people speak langauges that are not English.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the codes of the countries that do not speak English and whose government forms are not Republic?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the codes of countries that do not speak English and do not have Republics for governments.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which cities are in European countries where English is not the official language?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of cities in Europe for which English is not the official language?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which unique cities are in Asian countries where Chinese is the official language ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the different names of cities that are in Asia and for which Chinese is the official language.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the name, independence year, and surface area of the country with the smallest population?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the name, year of independence, and surface area of the country that has the lowest population.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the population, name and leader of the country with the largest area?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the name, population, and head of state for the country that has the largest area.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of countries that speak more than 2 languages, as well as how many languages they speak?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Find the number of cities in each district whose population is greater than the average population of cities?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###How many cities in each district have a population that is above the average population across all cities?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Find the government form name and total population for each government form whose average life expectancy is longer than 72.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names and areas of countries with the top 5 largest area?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the names and surface areas of the 5 largest countries.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are names of countries with the top 3 largest population?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the names of the 3 most populated countries.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of the nations with the 3 lowest populations?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the names of the 3 countries with the fewest people.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###how many countries are in Asia?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Count the number of countries in Asia.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the names of the countries that are in the continent of Europe and have a population of 80000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the names of countries that are in Europe and have a population equal to 80000.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the cities whose population is between 160000 and 900000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the names of cities that have a population between 160000 and 900000 .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Which language is spoken by the largest number of countries?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Give the language that is spoken in the most countries.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the language spoken by the largest percentage of people in each country?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What is the total number of countries where Spanish is spoken by the largest percentage of people?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Count the number of countries for which Spanish is the predominantly spoken language.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###What are the codes of countries where Spanish is spoken by the largest percentage of people?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# city (ID, Name, CountryCode, District, Population)\n# sqlite_sequence (name, seq)\n# country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)\n# countrylanguage (CountryCode, Language, IsOfficial, Percentage)\n#\n###Return the codes of countries for which Spanish is the predominantly spoken language.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###How many conductors are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Count the number of conductors.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###List the names of conductors in ascending order of age.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors, ordered by age?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors whose nationalities are not \"USA\"?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Return the names of conductors that do not have the nationality \"USA\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the record companies of orchestras in descending order of years in which they were founded?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Return the record companies of orchestras, sorted descending by the years in which they were founded.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What is the average attendance of shows?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Return the average attendance across all shows.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the maximum and minimum share of performances whose type is not \"Live final\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Return the maximum and minimum shares for performances that do not have the type \"Live final\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###How many different nationalities do conductors have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Count the number of different nationalities of conductors.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###List names of conductors in descending order of years of work.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors, sorted descending by the number of years they have worked?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###List the name of the conductor with the most years of work.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What is the name of the conductor who has worked the greatest number of years?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Show the names of conductors and the orchestras they have conducted.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors as well as the corresonding orchestras that they have conducted?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Show the names of conductors that have conducted more than one orchestras.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors who have conducted at more than one orchestra?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Show the name of the conductor that has conducted the most number of orchestras.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What is the name of the conductor who has conducted the most orchestras?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Please show the name of the conductor that has conducted orchestras founded after 2008.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the names of conductors who have conducted orchestras founded after the year 2008?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Please show the different record companies and the corresponding number of orchestras.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###How many orchestras does each record company manage?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Please show the record formats of orchestras in ascending order of count.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the major record formats of orchestras, sorted by their frequency?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###List the record company shared by the most number of orchestras.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What is the record company used by the greatest number of orchestras?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###List the names of orchestras that have no performance.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the orchestras that do not have any performances?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Show the record companies shared by orchestras founded before 2003 and after 2003.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Find the number of orchestras whose record format is \"CD\" or \"DVD\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Count the number of orchestras that have CD or DVD as their record format.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###Show the years in which orchestras that have given more than one performance are founded.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# conductor (Conductor_ID, Name, Age, Nationality, Year_of_Work)\n# orchestra (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)\n# performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)\n# show (Show_ID, Performance_ID, If_first_show, Result, Attendance)\n#\n###What are years of founding for orchestras that have had more than a single performance?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many high schoolers are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Count the number of high schoolers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names and grades of each high schooler.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names and grades for each high schooler?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show all the grades of the high schoolers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is the grade of each high schooler?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What grade is Kyle in?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Return the grade for the high schooler named Kyle.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of all high schoolers in grade 10.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of all high schoolers in grade 10?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the ID of the high schooler named Kyle.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is Kyle's id?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many high schoolers are there in grade 9 or 10?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Count the number of high schoolers in grades 9 or 10.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the number of high schoolers for each grade.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many high schoolers are in each grade?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Which grade has the most high schoolers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Return the grade that has the greatest number of high schoolers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show me all grades that have at least 4 students.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Which grades have 4 or more high schoolers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the student IDs and numbers of friends corresponding to each.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many friends does each student have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of high school students and their corresponding number of friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of the high schoolers and how many friends does each have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is the name of the high schooler who has the greatest number of friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Return the name of the high school student with the most friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of high schoolers who have at least 3 friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of high schoolers who have 3 or more friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of all of the high schooler Kyle's friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Return the names of friends of the high school student Kyle.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many friends does the high school student Kyle have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Count the number of friends Kyle has.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show ids of all students who do not have any friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the ids of high school students who do not have friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show names of all high school students who do not have any friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of students who have no friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the ids of high schoolers who have friends and are also liked by someone else.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the ids of students who both have friends and are liked?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show name of all students who have some friends and also are liked by someone else.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of high schoolers who both have friends and are liked?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Count the number of likes for each student id.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many likes correspond to each student id?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of high schoolers who have likes, and numbers of likes for each.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of high schoolers who have likes, and how many likes does each have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is the name of the high schooler who has the greatest number of likes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Give the name of the student with the most likes.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of students who have at least 2 likes.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of students who have 2 or more likes?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Show the names of students who have a grade higher than 5 and have at least 2 friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###How many likes does Kyle have?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Return the number of likes that the high schooler named Kyle has.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Find the average grade of all students who have some friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is the average grade of students who have friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###Find the minimum grade of students who have no friends.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Highschooler (ID, name, grade)\n# Friend (student_id, friend_id)\n# Likes (student_id, liked_id)\n#\n###What is the lowest grade of students who do not have any friends?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which states have both owners and professionals living there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the states where both owners and professionals live.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the average age of the dogs who have gone through any treatments?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the average age of the dogs who went through treatments.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which first names are used for professionals or owners but are not used as dog names?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the first names that are used for professionals or owners but are not used as dog names.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professional did not operate any treatment on dogs? List the professional's id, role and email.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Give me the id, role and email of the professionals who did not perform any treatment on dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which owner owns the most dogs? List the owner id, first name and last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Return the owner id, first name and last name of the owner who has the most dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professionals have done at least two treatments? List the professional's id, role, and first name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the id, role, and first name of the professionals who have performed two or more treatments?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the name of the breed with the most dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which breed do the most dogs have? Give me the breed name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the description of the treatment type that costs the least money in total?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Give me the description of the treatment type whose total cost is the lowest.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professionals have done at least two types of treatments? List the professional id and cell phone.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the id and cell phone of the professionals who operate two or more types of treatments.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the first name and last name of the professionals who have done treatment with cost below average?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the date of each treatment, together with the first name of the professional who operated it.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the date and the operating professional's first name of each treatment?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the cost of each treatment and the corresponding treatment type description.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the cost and treatment type description of each treatment?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List each owner's first name, last name, and the size of his for her dog.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are each owner's first name, last name, and the size of their dog?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List pairs of the owner's first name and the dogs's name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are each owner's first name and their dogs's name?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the names of the dogs of the rarest breed and the treatment dates of them.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which dogs are of the rarest breed? Show their names and treatment dates.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the first names of owners living in Virginia and the names of dogs they own.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the arriving date and the departing date of the dogs who have gone through a treatment?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the arriving date and the departing date of the dogs that received a treatment.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the last name of the owner owning the youngest dog.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Who owns the youngest dog? Give me his or her last name.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the arriving date and the departing date of all the dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the arrival date and the departure date for all the dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many dogs went through any treatments?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Count the number of dogs that went through a treatment.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many professionals have performed any treatment to dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the number of professionals who have ever treated dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many dogs have an age below the average?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Count the number of dogs of an age below the average.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How much does the most recent treatment cost?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Show me the cost of the most recently performed treatment.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many dogs have not gone through any treatment?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Tell me the number of dogs that have not received any treatment .\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many owners temporarily do not have any dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the number of owners who do not own any dogs at this moment.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How many professionals did not operate any treatment on dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the number of professionals who have not treated any dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the average age of all the dogs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Compute the average age of all the dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the age of the oldest dog?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Tell me the age of the oldest dog.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How much does each charge type costs? List both charge type and amount.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List each charge type and its amount.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###How much does the most expensive charge type costs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What is the charge amount of the most expensive charge type?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the email, cell phone and home phone of all the professionals.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are the email, cell phone and home phone of each professional?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are all the possible breed type and size type combinations?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###Find the distinct breed type and size type combinations for dogs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###List the first name of all the professionals along with the description of the treatment they have done.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Breeds (breed_code, breed_name)\n# Charges (charge_id, charge_type, charge_amount)\n# Sizes (size_code, size_description)\n# Treatment_Types (treatment_type_code, treatment_type_description)\n# Owners (owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)\n# Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)\n# Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)\n# Treatments (treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)\n#\n###What are each professional's first name and description of the treatment they have performed?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###How many singers are there?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What is the count of singers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###List the name of singers in ascending order of net worth.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the names of singers ordered by ascending net worth?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the birth year and citizenship of singers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the birth years and citizenships of the singers?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###List the name of singers whose citizenship is not \"France\".\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the names of the singers who are not French citizens?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show the name of singers whose birth year is either 1948 or 1949?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the names of the singers whose birth years are either 1948 or 1949?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What is the name of the singer with the largest net worth?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What is the name of the singer who is worth the most?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show different citizenship of singers and the number of singers of each citizenship.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###For each citizenship, how many singers are from that country?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Please show the most common citizenship of singers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What is the most common singer citizenship ?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show different citizenships and the maximum net worth of singers of each citizenship.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###For each citizenship, what is the maximum net worth?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show titles of songs and names of singers.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the song titles and singer names?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show distinct names of singers that have songs with sales more than 300000.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###what are the different names of the singers that have sales more than 300000?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show the names of singers that have more than one song.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the names of the singers that have more than one songs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show the names of singers and the total sales of their songs.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###For each singer name, what is the total sales for their songs?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###List the name of singers that do not have any song.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What is the sname of every sing that does not have any song?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###Show the citizenship shared by singers with birth year before 1945 and after 1955.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)\n# song (Song_ID, Title, Singer_ID, Sales, Highest_Position)\n#\n###What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Feature_Types (feature_type_code, feature_type_name)\n# Ref_Property_Types (property_type_code, property_type_description)\n# Other_Available_Features (feature_id, feature_type_code, feature_name, feature_description)\n# Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)\n# Other_Property_Features (property_id, feature_id, property_feature_description)\n#\n###How many available features are there in total?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Feature_Types (feature_type_code, feature_type_name)\n# Ref_Property_Types (property_type_code, property_type_description)\n# Other_Available_Features (feature_id, feature_type_code, feature_name, feature_description)\n# Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)\n# Other_Property_Features (property_id, feature_id, property_feature_description)\n#\n###What is the feature type name of feature AirCon?\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Feature_Types (feature_type_code, feature_type_name)\n# Ref_Property_Types (property_type_code, property_type_description)\n# Other_Available_Features (feature_id, feature_type_code, feature_name, feature_description)\n# Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)\n# Other_Property_Features (property_id, feature_id, property_feature_description)\n#\n###Show the property type descriptions of properties belonging to that code.\nSELECT",
    "### Postgres SQL tables, with their properties:\n#\n# Ref_Feature_Types (feature_type_code, feature_type_name)\n# Ref_Property_Types (property_type_code, property_type_description)\n# Other_Available_Features (feature_id, feature_type_code, feature_name, feature_description)\n# Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)\n# Other_Property_Features (property_id, feature_id, property_feature_description)\n#\n###What are the names of properties that are either houses or apartments with more than 1 room?\nSELECT"
]