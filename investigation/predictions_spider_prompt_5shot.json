[
    "SELECT COUNT(*) FROM singers",
    "SELECT COUNT(*) FROM artists",
    "SELECT name, country, age FROM singers ORDER BY age ASC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singers WHERE country = \"France\";",
    "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singers WHERE nationality = 'French'",
    "SELECT name, release_year FROM songs WHERE singer_age = (SELECT MIN(singer_age) FROM songs)",
    "SELECT tracks.name, albums.title FROM tracks JOIN albums ON tracks.album_id = albums.id JOIN artists ON albums.artist_id = artists.id WHERE artists.birth_date = (SELECT MIN(birth_date) FROM artists)",
    "SELECT DISTINCT country FROM singers WHERE age > 20",
    "SELECT DISTINCT country FROM singers WHERE age > 20",
    "SELECT Country, COUNT(*) FROM singers GROUP BY Country",
    "SELECT Country, COUNT(*) FROM Singers GROUP BY Country",
    "SELECT Song FROM volume  JOIN artist ON volume.artist_id = artist.artist_id  WHERE artist.age > (SELECT AVG(age) FROM artist)",
    "I'm sorry, but I cannot answer the question without the serialized schema. Can you please provide the serialized schema?",
    "SELECT location, name FROM stadiums WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT Location, Name FROM stations WHERE Capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(capacity), AVG(capacity) FROM stadiums",
    "SELECT AVG(capacity), MAX(capacity) FROM stadiums",
    "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM game GROUP BY Stadium_ID ORDER BY AVG(Attendance) DESC LIMIT 1)",
    "SELECT Name, Capacity FROM stadium  WHERE Stadium_ID = (     SELECT Stadium_ID FROM (         SELECT AVG(Attendance) AS Avg_Attendance, Stadium_ID          FROM game          GROUP BY Stadium_ID          ORDER BY Avg_Attendance DESC          LIMIT 1     ) AS T )",
    "SELECT COUNT(*) FROM concerts WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concerts WHERE year IN (2014, 2015)",
    "SELECT stadium_name, COUNT(*) FROM concerts GROUP BY stadium_name",
    "SELECT Stadium, COUNT(*) FROM Concerts GROUP BY Stadium",
    "SELECT Stadium_Name, Capacity FROM Stadiums WHERE Stadium_ID IN (   SELECT Venue_ID FROM Concerts   WHERE strftime('%Y', Concert_Date) >= '2014'   GROUP BY Venue_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )",
    "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT venue_id FROM event WHERE event_type = 'concert' AND year > 2013 GROUP BY venue_id HAVING COUNT(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) AS concert_count FROM event WHERE event_type = 'concert' AND year > 2013 GROUP BY venue_id)))",
    "SELECT year, COUNT(*) AS num_concerts FROM concerts GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "I'm sorry, but the serialized schema is missing. Without the schema, I cannot generate the SQL query to answer the question.",
    "SELECT name FROM stadium WHERE NOT EXISTS (SELECT * FROM concert WHERE concert.stadium_id  =  stadium.id)",
    "SELECT name FROM stadiums WHERE stadium_id NOT IN (SELECT stadium_id FROM concerts)",
    "SELECT DISTINCT country FROM singers WHERE age > 40 AND name IN (SELECT name FROM singers WHERE age < 30)",
    "SELECT name FROM stadiums WHERE name NOT IN (SELECT stadium_name FROM concerts WHERE year = 2014)",
    "SELECT name FROM stadiums WHERE NOT EXISTS (SELECT * FROM concerts WHERE stadiums.id = concerts.stadium_id AND year = 2014);",
    "SELECT c.name, c.theme, COUNT(s.concert_id) AS num_singers FROM concerts AS c LEFT JOIN singers AS s ON c.concert_id = s.concert_id GROUP BY c.concert_id;",
    "SELECT name, theme, count(singer) FROM concerts GROUP BY name, theme",
    "I'm sorry, but I cannot answer the question without the schema of the database. Please provide the CREATE TABLE command for the database.",
    "SELECT Singer.name, COUNT(*) AS num_concerts FROM Singer JOIN Concert ON Singer.id = Concert.singer_id GROUP BY Singer.name",
    "SELECT DISTINCT singer_name FROM concerts WHERE year = 2014",
    "SELECT DISTINCT SingerName FROM Concerts WHERE ConcertYear = 2014",
    "SELECT T1.name, T1.nation  FROM singer AS T1  JOIN song AS T2 ON T1.singer_id = T2.singer_id  WHERE T2.name LIKE '%Hey%'",
    "SELECT T1.name, T1.country FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.title LIKE '%Hey%'",
    "SELECT name, location FROM stadiums WHERE id IN  (SELECT stadium_id FROM concerts WHERE strftime('%Y', date) = '2014' INTERSECT SELECT stadium_id FROM concerts WHERE strftime('%Y', date) = '2015');",
    "SELECT sName, sLocation FROM stadiums WHERE sID IN (SELECT sID FROM concerts WHERE cYear = 2014 INTERSECT SELECT sID FROM concerts WHERE cYear = 2015)",
    "SELECT count(*) FROM schedule WHERE cinema_id = (SELECT cinema_id FROM cinema ORDER BY capacity DESC LIMIT 1);",
    "SELECT COUNT(*) FROM concerts WHERE stadium_id = (SELECT stadium_id FROM stadiums ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT weight FROM dogs WHERE age = (SELECT MIN(age) FROM dogs)",
    "I'm sorry, but the serialized schema is missing. Can you please provide it?",
    "SELECT type, MAX(weight) FROM pets GROUP BY type",
    "SELECT type, MAX(weight) FROM pets GROUP BY type",
    "SELECT COUNT(*) FROM pets WHERE owner_id IN (SELECT student_id FROM students WHERE age > 20)",
    "SELECT count(*) FROM pets JOIN students ON pets.owner_id = students.student_id WHERE students.age > 20",
    "SELECT COUNT(*) FROM Pets p JOIN Student s ON p.owner_id = s.stuid WHERE p.pet_type = 'Dog' AND s.sex = 'F'",
    "SELECT COUNT(*) FROM pets JOIN students ON pets.owner_id = students.id WHERE pets.species = 'dog' AND students.gender = 'female'",
    "SELECT COUNT(DISTINCT pet_type) FROM pets",
    "SELECT COUNT(DISTINCT type_of_pet) FROM pets",
    "SELECT Fname FROM Students WHERE Stuid IN (SELECT Stuid FROM Pets WHERE Pet_type IN ('cat', 'dog'))",
    "SELECT DISTINCT T1.first_name FROM students AS T1 JOIN pets AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_type IN ('cat', 'dog')",
    "SELECT DISTINCT s.fname FROM student AS s JOIN pet AS p ON s.id = p.owner_id WHERE p.species = 'cat' AND s.id IN (SELECT owner_id FROM pet WHERE species = 'dog')",
    "SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM pets WHERE pet_type = 'cat') AND stuid IN (SELECT stuid FROM pets WHERE pet_type = 'dog')",
    "SELECT major, age FROM students WHERE pet_type <> 'cat'",
    "SELECT major, age FROM students WHERE pet <> \"cat\"",
    "SELECT id FROM students WHERE id NOT IN (SELECT student_id FROM pets WHERE pet_type = 'cat')",
    "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM OwnsPets WHERE PetType = 'cat')",
    "SELECT fname, age FROM students WHERE pet = 'dog' AND stuid NOT IN (SELECT stuid FROM students WHERE pet = 'cat') LIMIT 1;",
    "SELECT first_name FROM students WHERE has_dog  =  1 AND has_cat  =  0",
    "SELECT type, weight FROM pets WHERE age = (SELECT MIN(age) FROM pets)",
    "I'm sorry, but I cannot answer the question without the serialized schema. Please provide the serialized schema.",
    "SELECT id, weight FROM pets WHERE age > 1;",
    "SELECT id, weight FROM pet WHERE age > 1;",
    "SELECT type, AVG(age), MAX(age) FROM pets GROUP BY type",
    "SELECT pet_type, AVG(age) AS avg_age, MAX(age) AS max_age FROM pets GROUP BY pet_type",
    "SELECT pet_type, AVG(weight) FROM pets GROUP BY pet_type",
    "SELECT type, AVG(weight) FROM pets GROUP BY type",
    "SELECT first_name, age FROM students WHERE pet IS NOT NULL",
    "SELECT DISTINCT first_name, age FROM students WHERE student_id IN (SELECT student_id FROM pets)",
    "SELECT Pet_ID FROM Ownership  JOIN Student ON Ownership.Student_ID = Student.Student_ID  JOIN Pet ON Ownership.Pet_ID = Pet.Pet_ID  WHERE Student.Last_Name = 'Smith'",
    "SELECT PetID FROM Ownership WHERE OwnerID = (SELECT StuID FROM Student WHERE Lname = 'Smith')",
    "SELECT StudentID, COUNT(*) AS NumPets FROM Pets GROUP BY StudentID HAVING COUNT(*) > 0",
    "SELECT student_id, COUNT(*) FROM pets GROUP BY student_id",
    "SELECT stu_fname, stu_sex FROM student WHERE stu_num IN (SELECT stu_num FROM pet GROUP BY stu_num HAVING COUNT(*) > 1)",
    "SELECT first_name, gender FROM students WHERE student_id IN (SELECT student_id FROM pets GROUP BY student_id HAVING COUNT(*) > 1)",
    "SELECT s.last_name FROM student AS s JOIN pet AS p ON s.id = p.student_id WHERE p.species = 'cat' AND p.age = 3 ORDER BY p.id DESC LIMIT 1",
    "SELECT T1.last_name FROM students AS T1 JOIN pets AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_type = \"cat\" AND T2.age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM pet)",
    "I'm sorry, but the given serialized schema does not contain any table or information related to continents. Therefore, it is not possible to answer this question using the provided schema.",
    "SELECT COUNT(*) FROM continents",
    "SELECT Continent.continent_id, Continent.continent_name, COUNT(Country.country_id)  FROM Continent  JOIN Country ON Continent.continent_id = Country.continent_id  GROUP BY Continent.continent_id",
    "SELECT continent_id, continent_name, COUNT(*) AS num_countries FROM countries GROUP BY continent_id, continent_name",
    "SELECT COUNT(DISTINCT country) FROM addresses",
    "SELECT COUNT(*) FROM country",
    "SELECT M.maker_full_name, M.maker_id, COUNT(DISTINCT C.model_id) AS num_models FROM car_makers AS M JOIN car_models AS C ON M.maker_id = C.maker_id GROUP BY M.maker_id;",
    "SELECT id, name, COUNT(*) AS num_models FROM car_maker GROUP BY id, name",
    "SELECT model FROM cars ORDER BY horsepower ASC LIMIT 1;",
    "SELECT model FROM cars ORDER BY horsepower ASC LIMIT 1",
    "SELECT Model FROM Cars WHERE Weight < (SELECT AVG(Weight) FROM Cars)",
    "I'm sorry, but I cannot answer the question without the serialized schema. Please provide the serialized schema.",
    "SELECT DISTINCT Maker FROM Cars WHERE Year = 1970",
    "SELECT DISTINCT manufacturer FROM car WHERE year = 1970",
    "SELECT make, production_time FROM cars WHERE production_time IN (SELECT MIN(production_time) FROM cars)",
    "SELECT T2.maker, T1.year  FROM cars AS T1  JOIN makers AS T2 ON T1.maker_id = T2.maker_id  WHERE T1.year = (SELECT MIN(year) FROM cars)",
    "SELECT DISTINCT Car_Model FROM Cars WHERE Production_Year > 1980",
    "SELECT DISTINCT Model FROM cards WHERE Year > 1980",
    "SELECT continent, COUNT(DISTINCT car_maker) FROM car_makers GROUP BY continent",
    "SELECT c.Continent_Name, COUNT(DISTINCT cm.Car_Maker_ID) AS Num_Car_Makers FROM Continent AS c JOIN Country AS co ON c.Continent_ID = co.Continent_ID JOIN City AS ci ON co.Country_ID = ci.Country_ID JOIN Manufacturer AS m ON ci.City_ID = m.City_ID JOIN Car_Maker AS cm ON m.Manufacturer_ID = cm.Manufacturer_ID GROUP BY c.Continent_Name",
    "SELECT country_name FROM countries WHERE country_id IN (SELECT country_id FROM car_makers GROUP BY country_id ORDER BY count(*) DESC LIMIT 1)",
    "SELECT country FROM car_makers GROUP BY country ORDER BY count(*) DESC LIMIT 1",
    "SELECT COUNT(*) AS count, maker.full_name FROM car_models JOIN makers AS maker ON car_models.maker_id = maker.maker_id GROUP BY maker.full_name",
    "SELECT Maker.id, Maker.full_name, COUNT(Car.model) AS num_models FROM Maker JOIN Car ON Maker.id = Car.maker_id GROUP BY Maker.id, Maker.full_name",
    "I'm sorry, but the provided serialized schema does not contain any table related to cars or their accelerations. Please provide the correct schema or question.",
    "I'm sorry, but the necessary schema and data to answer this question is not provided. Can you please provide the CREATE TABLE command and some sample data for the relevant tables?",
    "SELECT count(*) FROM car_makers WHERE country = \"France\"",
    "SELECT count(*) FROM makers WHERE country = \"France\" AND product = \"care\"",
    "SELECT COUNT(*) FROM car_models WHERE country = 'USA'",
    "SELECT COUNT(DISTINCT model) FROM car WHERE country = 'United States'",
    "SELECT AVG(mpg) FROM cars WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars WHERE cylinders = 8 AND year = 1974",
    "SELECT min(weight) FROM cars WHERE cylinders = 8 AND year = 1974;",
    "SELECT Maker, Model FROM products",
    "I'm sorry, but I cannot answer the question without the CREATE TABLE command of the database. Can you please provide it?",
    "SELECT DISTINCT Country_ID, Country_Name FROM Car_Maker JOIN Country ON Car_Maker.Country_ID = Country.Country_ID",
    "SELECT DISTINCT T1.country_id, T1.country_name  FROM countries AS T1  JOIN car_makers AS T2 ON T1.country_id = T2.country_id",
    "SELECT COUNT(*) FROM cars WHERE horsepower > 150;",
    "SELECT COUNT(*) FROM cars WHERE horsepower > 150;",
    "I'm sorry, but the serialized schema is missing. Without the schema, I cannot generate the SQL query to answer the question.",
    "I'm sorry, but the provided schema does not contain any table that has both weight and year columns. Please provide the correct schema or question.",
    "SELECT country FROM car_manufacturers WHERE continent = 'Europe' GROUP BY country HAVING COUNT(DISTINCT manufacturer) >= 3",
    "SELECT T1.country_name  FROM countries AS T1  JOIN manufacturers AS T2 ON T1.country_code = T2.country_code  WHERE T1.continent = 'Europe'  GROUP BY T1.country_name  HAVING COUNT(DISTINCT T2.manufacturer_name) >= 3",
    "SELECT MAX(horsepower), make FROM cars WHERE cylinders = 3;",
    "SELECT Make FROM Cars WHERE Cylinders = 3 ORDER BY Horsepower DESC LIMIT 1",
    "I'm sorry, but I cannot answer this question as the necessary tables and columns are not provided in the serialized schema. Please provide the CREATE TABLE command for the relevant tables.",
    "SELECT Model FROM Cars ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars WHERE year < 1980",
    "SELECT AVG(Horsepower) FROM cars WHERE Year < 1980",
    "SELECT avg(edispl) FROM cars WHERE model = 'volvo'",
    "I'm sorry, but the serialized schema is missing. Without the schema, I cannot generate the SQL query to answer the question.",
    "I'm sorry, but I cannot answer the question without the schema of the database. Please provide the CREATE TABLE command for the database.",
    "SELECT Cylinder, MAX(Accelerate) FROM cars GROUP BY Cylinder",
    "SELECT make, COUNT(DISTINCT model) AS num_models FROM cars GROUP BY make ORDER BY num_models DESC LIMIT 1;",
    "I'm sorry, but I cannot answer the question without the serialized schema. Please provide the serialized schema.",
    "SELECT count(*) FROM cars WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars WHERE cylinders > 4",
    "I'm sorry, but I cannot answer the question as there is no serialized schema provided to generate the SQL query.",
    "I'm sorry, but I cannot answer the question without the serialized schema. Please provide the serialized schema.",
    "SELECT COUNT(*) FROM car_models WHERE maker_id = (SELECT maker_id FROM makers WHERE maker_full_name = 'American Motor Company')",
    "SELECT COUNT(*) FROM car_models WHERE car_maker = 'American Motor Company'",
    "SELECT MakerID, MakerName FROM Makers WHERE MakerID IN (SELECT MakerID FROM Models GROUP BY MakerID HAVING COUNT(*) > 3)",
    "SELECT maker_id, maker_name FROM makers WHERE maker_id IN (SELECT maker_id FROM models GROUP BY maker_id HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model FROM cars WHERE weight > 3500 OR maker = 'General Motors'",
    "SELECT DISTINCT Model FROM Cars WHERE Maker  =  'General Motors' OR Weight > 3500",
    "SELECT DISTINCT strftime('%Y', production_date) FROM cars WHERE weight >= 3000 AND weight <= 4000",
    "SELECT DISTINCT year FROM cars WHERE weight < 4000 AND year IN (SELECT year FROM cars WHERE weight > 3000)",
    "SELECT Horsepower FROM cars ORDER BY Accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars ORDER BY acceleration DESC LIMIT 1",
    "SELECT MIN(cylinders) FROM cars WHERE model = 'volvo' AND accelerate = (SELECT MIN(accelerate) FROM cars WHERE model = 'volvo')",
    "SELECT MIN(cylinders) FROM volvo WHERE model = \"volvo\" AND accelerate = (SELECT MIN(accelerate) FROM volvo WHERE model = \"volvo\")",
    "SELECT COUNT(*) FROM cars WHERE accelerate > (SELECT MAX(horsepower) FROM cars)",
    "SELECT COUNT(*) FROM cars WHERE accelerate > (SELECT MAX(horsepower) FROM cars)",
    "SELECT COUNT(*) FROM (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2) AS T1",
    "I'm sorry, but I cannot answer the question without the serialized schema. Can you please provide the serialized schema?",
    "SELECT COUNT(*) FROM cars WHERE cylinders > 6",
    "I'm sorry, but the provided serialized schema does not contain any table related to cars or cylinders. Please provide the correct schema or question.",
    "SELECT Model FROM cars WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1",
    "SELECT model FROM cars WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT DISTINCT Make.makeid, Make.makename  FROM Car  JOIN Make ON Car.makeid = Make.makeid  WHERE Car.horsepower > (SELECT MIN(horsepower) FROM Car)  AND Car.cylinders <= 3",
    "SELECT make_id, make_name FROM cars WHERE cylinders < 4 AND horsepower < (SELECT MIN(horsepower) FROM cars)",
    "SELECT MAX(mpg) FROM cars WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars WHERE cylinders = 8 OR year < 1980",
    "SELECT model FROM cars WHERE weight < 3500 AND manufacturer != 'Ford Motor Company'",
    "SELECT model FROM cars WHERE weight < 3500 AND manufacturer <> \"Ford Motor Company\"",
    "SELECT DISTINCT Country_name FROM Countries WHERE Country_name NOT IN (SELECT DISTINCT Country_name FROM Car_makers)",
    "SELECT country_name FROM countries WHERE country_id NOT IN (SELECT DISTINCT country_id FROM car_makers);",
    "SELECT Maker_ID, Maker_Name FROM Car_Makers WHERE Maker_ID IN (SELECT Maker_ID FROM Car_Models GROUP BY Maker_ID HAVING COUNT(*) >= 2) AND Maker_ID IN (SELECT Maker_ID FROM Car_Models GROUP BY Maker_ID HAVING COUNT(DISTINCT Maker_ID) > 3)",
    "SELECT CarMaker.id, CarMaker.maker  FROM CarMaker  JOIN CarModel ON CarMaker.id = CarModel.maker_id  WHERE CarMaker.id IN (SELECT maker_id FROM CarModel GROUP BY maker_id HAVING COUNT(*) >= 2 AND SUM(num_of_cars) > 3)",
    "SELECT T1.id, T1.name FROM countries AS T1 JOIN car_makers AS T2 ON T1.id = T2.country_id WHERE T1.id IN (SELECT country_id FROM car_makers GROUP BY country_id HAVING count(*) > 3) OR T2.car_model = 'fiat'",
    "SELECT country_id, country_name FROM countries WHERE country_id IN (SELECT country_id FROM car_makers GROUP BY country_id HAVING COUNT(DISTINCT maker_name) > 3) OR country_id IN (SELECT country_id FROM car_models WHERE model_name = 'fiat')",
    "SELECT country FROM airlines WHERE name = \"JetBlue Airways\"",
    "SELECT country FROM airlines WHERE name = \"Jetblue Airways\";",
    "SELECT abbreviation FROM airline WHERE name = 'JetBlue Airways'",
    "I'm sorry, but the provided serialized schema does not contain any table or information related to airlines or their abbreviations. Please provide the correct schema or more information about the table that contains the abbreviation and name of airlines.",
    "SELECT airline_name, abbreviation FROM airlines WHERE country = \"USA\"",
    "SELECT airline_name, airline_abbreviation FROM airlines WHERE country = \"USA\"",
    "SELECT Airport_Code, Name FROM airport WHERE City = 'Anthony'",
    "SELECT airport_code, airport_name FROM airport WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "I'm sorry, I cannot answer this question without the CREATE TABLE command of the database.",
    "SELECT name FROM airlines WHERE iata = 'UAL' OR icao = 'UAL'",
    "SELECT * FROM airline WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = \"USA\"",
    "SELECT City, Country FROM airports WHERE Name = \"Alton airport\"",
    "SELECT city, country FROM airports WHERE name = 'Alton';",
    "SELECT Airport_Name FROM Airports WHERE Airport_Code = 'AKO'"
]