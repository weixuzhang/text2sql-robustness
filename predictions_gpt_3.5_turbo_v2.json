[
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age  FROM singer  WHERE country = 'France'",
    "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM singer WHERE country = 'French'",
    "SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT DISTINCT singer.country FROM singer WHERE singer.age > 20",
    "SELECT singer.country, COUNT(singer.singer_id) AS num_singers FROM singer GROUP BY singer.country;",
    "SELECT singer.country, COUNT(singer.singer_id) AS num_singers FROM concert_singer AS singer GROUP BY singer.country",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     GROUP BY stadium_id     HAVING AVG(average) = (         SELECT MAX(avg_attendance)         FROM (             SELECT stadium_id, AVG(average) AS avg_attendance             FROM concert             GROUP BY stadium_id         ) AS avg_attendance_table     ) )",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     WHERE year >= 2014     GROUP BY stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     WHERE year > 2013     GROUP BY stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sic1, singer_in_concert sic2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sic1.singer_id AND s2.singer_id = sic2.singer_id AND sic1.concert_id = sic2.concert_id AND c.concert_id = sic1.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme",
    "SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT singer.name, singer.country  FROM singer  WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.song_name LIKE '%Hey%'",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2015 )",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id     WHERE concert.year = 2015 )",
    "SELECT COUNT(*)  FROM concert  WHERE stadium_id = (SELECT stadium_id                      FROM stadium                      ORDER BY capacity DESC                      LIMIT 1);",
    "SELECT COUNT(*)  FROM concert  WHERE stadium_id = (SELECT stadium_id                      FROM stadium                      ORDER BY capacity DESC                      LIMIT 1);",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT MIN(weight) FROM pets",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;",
    "SELECT pettype, MAX(weight) AS max_weight, MAX(pettype) AS type FROM pets GROUP BY pettype;",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE age > 20",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'F'",
    "SELECT COUNT(petid) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog')",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.stuid IN (     SELECT s.stuid     FROM student s     JOIN has_pet hp ON s.stuid = hp.stuid     JOIN pets p ON hp.petid = p.petid     WHERE p.pettype = 'dog' )",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.stuid IN (   SELECT s.stuid   FROM student s   JOIN has_pet hp ON s.stuid = hp.stuid   JOIN pets p ON hp.petid = p.petid   WHERE p.pettype = 'dog' )",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT DISTINCT student.major, student.age FROM student WHERE student.stuid NOT IN (   SELECT has_pet.stuid   FROM has_pet   JOIN pets ON has_pet.petid = pets.petid   WHERE pets.pettype = 'cat' )",
    "SELECT DISTINCT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT DISTINCT stuid FROM student WHERE stuid NOT IN (   SELECT stuid   FROM has_pet   JOIN pets ON has_pet.petid = pets.petid   WHERE pets.pettype = 'cat' )",
    "SELECT fname, age  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))  AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))) ORDER BY fname LIMIT 1;",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets_1.pets WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet) ORDER BY stuid ASC LIMIT 1;",
    "SELECT DISTINCT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid;",
    "SELECT petid  FROM has_pet  WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith')",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 0;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT student.fname, student.sex FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT(has_pet.petid) > 1;",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY hp.petid DESC LIMIT 1;",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY hp.petid DESC LIMIT 1;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT contid, continent, COUNT(countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.continent = countries.continent GROUP BY contid, continent",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970;",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970;",
    "SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) AS earliest_year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.maker ORDER BY earliest_year LIMIT 1;",
    "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS car_maker_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT c.continent, COUNT(DISTINCT cm.id) AS num_car_makers FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(DISTINCT car_makers.maker) DESC LIMIT 1;",
    "SELECT countryname  FROM countries  WHERE countryid = (     SELECT country      FROM car_makers      GROUP BY country      ORDER BY COUNT(DISTINCT maker) DESC      LIMIT 1 )",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)'",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = 'amc' AND model_list.model = 'hornet sportabout (sw)'",
    "SELECT COUNT(DISTINCT car_makers.id)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'france'",
    "SELECT COUNT(DISTINCT car_makers.id)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'France' AND car_makers.maker = 'care'",
    "SELECT COUNT(DISTINCT modelid)  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.maker  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE countries.continent = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.maker  INNER JOIN countries ON car_makers.country = countries.countryname  WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders=8 AND year=1974",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker;",
    "SELECT DISTINCT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
    "SELECT DISTINCT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3;",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker",
    "SELECT MAX(horsepower), maker FROM cars_data WHERE cylinders = 3",
    "SELECT model  FROM cars_data  WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE model = 'volvo')",
    "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT model FROM model_list WHERE maker = (     SELECT maker     FROM car_makers     WHERE id = (         SELECT makeid         FROM car_names         GROUP BY makeid         ORDER BY COUNT(*) DESC         LIMIT 1     ) ) GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(DISTINCT model_list.modelid)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid)  FROM model_list  WHERE maker = (SELECT id FROM car_makers WHERE maker = 'American Motor Company')",
    "SELECT car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(DISTINCT model_list.modelid) > 3;",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500;",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND year IN (SELECT year FROM cars_data WHERE weight > 3000)",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' ORDER BY accelerate ASC LIMIT 1;",
    "SELECT cylinders FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE makeid IN (SELECT id FROM car_makers WHERE maker = 'volvo')) ORDER BY accelerate LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2;",
    "SELECT COUNT(DISTINCT countries.countryid)  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryid  HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT car_names.makeid, car_makers.maker FROM car_names JOIN cars_data ON car_names.model = cars_data.id JOIN car_makers ON car_names.makeid = car_makers.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;",
    "SELECT model FROM model_list WHERE maker NOT LIKE 'Ford Motor Company' AND weight < 3500;",
    "SELECT model FROM model_list WHERE maker <> 'Ford Motor Company' AND weight < 3500;",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL;",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.maker) > 3;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT model) >= 2 ) AND car_makers.id IN (     SELECT maker     FROM car_names     GROUP BY maker     HAVING COUNT(DISTINCT make) > 3 )",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model WHERE car_makers.maker = 'fiat' OR countries.countryid IN (     SELECT car_makers.country     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.id) > 3 )",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (     SELECT car_makers.id     FROM car_makers     GROUP BY car_makers.country     HAVING COUNT(DISTINCT car_makers.maker) > 3 ) OR countries.countryid IN (     SELECT car_makers.country     FROM car_makers     INNER JOIN model_list ON car_makers.id = model_list.maker     WHERE model_list.model = 'fiat' )",
    "SELECT country FROM airlines WHERE airline = \"JetBlue Airways\"",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city='Anthony'",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city='Aberdeen'",
    "SELECT airportname FROM airports WHERE city='Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights  JOIN airports AS source ON flights.sourceairport = source.airportcode  JOIN airports AS dest ON flights.destairport = dest.airportcode  WHERE source.city = 'Aberdeen' AND dest.city = 'Ashley';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.destairport = 'ASY';",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'United Airlines' AND f.sourceairport = 'AHD';",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT airports.city  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  GROUP BY airports.city  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT airports.city  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  GROUP BY airports.city  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT sourceairport AS airport_code FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT abbreviation, country FROM airlines WHERE airline = (     SELECT airline     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.airline = airlines.uid AND flights.sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.uid;",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'CVO'  AND airlines.airline NOT IN  (SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG')",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO'  JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline NOT IN      (SELECT DISTINCT airlines.airline       FROM flights       JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG'       JOIN airlines ON flights.airline = airlines.uid)",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;",
    "SELECT airline FROM airlines WHERE airline IN (   SELECT airline   FROM flights   GROUP BY airline   HAVING COUNT(*) < 200 )",
    "SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM employee;",
    "SELECT COUNT(employee_id) FROM employee;",
    "SELECT name FROM employee ORDER BY age ASC;",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city, COUNT(employee_id) AS num_employees FROM employee GROUP BY city;",
    "SELECT city, COUNT(employee_id) AS num_employees FROM employee GROUP BY city;",
    "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1",
    "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;",
    "SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;",
    "SELECT location, COUNT(shop_id) AS num_shops FROM shop GROUP BY location;",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop;",
    "SELECT MIN(number_products), MAX(number_products) FROM shop;",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC;",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);",
    "SELECT name  FROM shop  WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT employee.name FROM employee_hire_evaluation JOIN evaluation ON employee_hire_evaluation.employee_id = evaluation.employee_id GROUP BY employee_hire_evaluation.employee_id ORDER BY COUNT(evaluation.bonus) DESC LIMIT 1;",
    "SELECT employee.name  FROM employee_hire_evaluation  JOIN evaluation ON employee_hire_evaluation.employee_id = evaluation.employee_id  WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;",
    "SELECT DISTINCT employee.name FROM employee WHERE employee.employee_id NOT IN (     SELECT evaluation.employee_id     FROM evaluation )",
    "SELECT employee.name  FROM employee  WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  GROUP BY shop.name  ORDER BY COUNT(hiring.employee_id) DESC  LIMIT 1;",
    "SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name  FROM shop  LEFT JOIN hiring ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL",
    "SELECT shop.name, COUNT(hiring.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;",
    "SELECT SUM(bonus) AS total_bonus FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation;",
    "SELECT * FROM hiring;",
    "SELECT * FROM hiring;",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000 AND district IN      (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT COUNT(DISTINCT location) FROM shop;",
    "SELECT COUNT(DISTINCT location) FROM shop;",
    "SELECT COUNT(*) FROM documents;",
    "SELECT COUNT(*) FROM documents;",
    "SELECT document_id, document_name, document_description FROM documents;",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'",
    "SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = 'Robbin CV'",
    "SELECT documents.document_id, documents.template_id, documents.document_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id) FROM templates;",
    "SELECT COUNT(DISTINCT template_id) FROM templates;",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;",
    "SELECT templates.template_id, COUNT(documents.template_id) AS usage_count FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (     SELECT documents.template_id     FROM documents     GROUP BY documents.template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1;",
    "SELECT template_id  FROM documents  GROUP BY template_id  HAVING COUNT(DISTINCT document_id) > 1;",
    "SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;",
    "SELECT template_id  FROM templates  WHERE template_id NOT IN (SELECT template_id FROM documents)",
    "SELECT COUNT(*) FROM templates;",
    "SELECT COUNT(*) FROM templates;",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates;",
    "SELECT DISTINCT template_type_code FROM ref_template_types;",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT version_number, template_type_code  FROM templates  WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5;",
    "SELECT template_type_code, COUNT(*) AS number_of_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (   SELECT template_type_code   FROM templates   GROUP BY template_type_code   HAVING COUNT(*) < 3 )",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code IN (     SELECT template_type_code      FROM templates      GROUP BY template_type_code      HAVING COUNT(*) < 3 )",
    "SELECT MIN(version_number), template_type_code FROM templates",
    "SELECT template_type_code, MIN(version_number) AS lowest_version_number FROM templates GROUP BY template_type_code;",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT templates.template_type_code, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code;",
    "SELECT template_type_code, COUNT(*) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_type_code IS NULL;",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       INNER JOIN documents ON templates.template_id = documents.template_id)",
    "SELECT template_type_code, template_type_description FROM ref_template_types;",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN documents ON templates.template_id = documents.template_id;",
    "SELECT DISTINCT templates.template_details FROM cre_Doc_Template_Mgt.templates JOIN cre_Doc_Template_Mgt.documents ON templates.template_id = documents.template_id WHERE documents.document_description IS NOT NULL;",
    "SELECT template_id  FROM templates  WHERE template_type_code = (SELECT template_type_code                               FROM ref_template_types                               WHERE template_type_description = 'Presentation')",
    "SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT COUNT(*) FROM paragraphs;",
    "SELECT COUNT(*) FROM paragraphs;",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea';",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';",
    "SELECT paragraph_id, paragraph_text FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  INNER JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Customer reviews'",
    "SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;",
    "SELECT document_id, COUNT(paragraph_id) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC;",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id FROM documents WHERE document_id IN (   SELECT document_id   FROM paragraphs   GROUP BY document_id   HAVING COUNT(*) >= 2 )",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2;",
    "SELECT document_id, document_name FROM documents WHERE document_id IN (   SELECT document_id   FROM paragraphs   GROUP BY document_id   HAVING COUNT(*) = (     SELECT MAX(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM paragraphs       GROUP BY document_id     ) AS counts   ) );",
    "SELECT documents.document_id, documents.document_name FROM documents JOIN (     SELECT document_id, COUNT(*) AS num_paragraphs     FROM paragraphs     GROUP BY document_id     ORDER BY num_paragraphs DESC     LIMIT 1 ) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id;",
    "SELECT document_id  FROM paragraphs  GROUP BY document_id  ORDER BY COUNT(paragraph_id) ASC  LIMIT 1;",
    "SELECT document_id FROM documents WHERE document_id IN (   SELECT document_id   FROM paragraphs   GROUP BY document_id   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM paragraphs       GROUP BY document_id     ) AS counts   ) );",
    "SELECT document_id  FROM documents  WHERE document_id IN (     SELECT document_id      FROM paragraphs      GROUP BY document_id      HAVING COUNT(DISTINCT paragraph_id) BETWEEN 1 AND 2 )",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_id) BETWEEN 1 AND 2;",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN (     SELECT document_id     FROM paragraphs     WHERE paragraph_text = 'Ireland' )",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM teacher;",
    "SELECT COUNT(DISTINCT teacher_id) AS total_teachers FROM course_arrange",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT hometown  FROM teacher  WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT teacher.hometown, COUNT(*) as num_teachers FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.hometown",
    "SELECT teacher.hometown, COUNT(DISTINCT course_arrange.teacher_id) AS num_teachers FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;",
    "SELECT teacher.hometown FROM teacher INNER JOIN course_arrange AS ca1 ON teacher.teacher_id = ca1.teacher_id INNER JOIN course_arrange AS ca2 ON teacher.teacher_id = ca2.teacher_id AND ca1.course_id <> ca2.course_id GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2;",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;",
    "SELECT teacher.name FROM course_teach  JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  JOIN course ON course_teach.course_id = course.course_id  WHERE course.course = 'math'",
    "SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  JOIN course ON course_arrange.course_id = course.course_id  WHERE course.course = 'math'",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;",
    "SELECT teacher.name  FROM teacher  INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;",
    "SELECT teacher.name  FROM teacher  INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT DISTINCT teacher.name  FROM teacher  LEFT JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id  LEFT JOIN course_arrange ON course_teach.course_id = course_arrange.course_id AND course_teach.teacher_id = course_arrange.teacher_id  WHERE course_arrange.course_id IS NULL",
    "SELECT COUNT(*) FROM visitor WHERE age < 30;",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC",
    "SELECT museum_id, name FROM museum_visit WHERE num_of_staff = (SELECT MAX(num_of_staff) FROM museum_visit)",
    "SELECT AVG(num_of_staff)  FROM museum_visit  WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name  FROM museum_visit  WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum_visit WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT(DISTINCT visit.museum_id) > 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT museum.museum_id, museum.name FROM museum_visit JOIN museum ON museum_visit.museum_id = museum.museum_id GROUP BY museum_visit.museum_id, museum.name ORDER BY SUM(museum_visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;",
    "SELECT SUM(total_spent) AS total_ticket_expense FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT v.name FROM visitor v JOIN visit v1 ON v.id = v1.visitor_id JOIN visit v2 ON v.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011;",
    "SELECT COUNT(DISTINCT visitor_id)  FROM visit  WHERE visitor_id NOT IN      (SELECT visitor_id       FROM visit       JOIN museum ON visit.museum_id = museum.museum_id       WHERE museum.open_year > 2010)",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;",
    "SELECT COUNT(player_id) FROM players;",
    "SELECT COUNT(*) FROM players;",
    "SELECT COUNT(*) FROM matches;",
    "SELECT COUNT(*) FROM matches;",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players;",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name  FROM wta_1.matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;",
    "SELECT tourney_name  FROM wta_1.matches  GROUP BY tourney_name  HAVING COUNT(*) > 10",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "```sql SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ```",
    "SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date;",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC",
    "SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;",
    "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, MAX(winner_rank_points) AS rank_points FROM matches WHERE winner_rank_points IN (     SELECT MAX(winner_rank_points)     FROM matches ) GROUP BY winner_name",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1;",
    "SELECT winner_name  FROM wta_1.matches  WHERE tourney_name = 'Australian Open'  AND winner_rank_points = (SELECT MAX(winner_rank_points)                            FROM wta_1.matches                            WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner.first_name AS winner_first_name, winner.last_name AS winner_last_name, loser.first_name AS loser_first_name, loser.last_name AS loser_last_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT first_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code;",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;",
    "SELECT country_code FROM wta_1.players GROUP BY country_code HAVING COUNT(player_id) > 50;",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_level = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM wta_1.players p JOIN wta_1.matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (     SELECT winner_id     FROM matches     WHERE winner_rank_points = (         SELECT MAX(winner_rank_points)         FROM matches     )     LIMIT 1 )",
    "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1;",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;",
    "SELECT hand, COUNT(player_id) AS num_players FROM players GROUP BY hand;",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle;",
    "SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death;",
    "SELECT AVG(injured) FROM death",
    "SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'",
    "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' AND battle.id NOT IN (   SELECT DISTINCT battle.id   FROM battle   INNER JOIN ship ON battle.id = ship.lost_in_battle   WHERE ship.ship_type != 'Brig' )",
    "SELECT battle.id, battle.name FROM battle JOIN battle_death ON battle.id = battle_death.battle_id GROUP BY battle.id, battle.name HAVING SUM(battle_death.killed) > 10;",
    "SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1;",
    "SELECT DISTINCT name FROM battle_death WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT result) FROM battle;",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (     SELECT * FROM ship s     WHERE s.lost_in_battle = b.id AND s.tonnage = 225 )",
    "SELECT battle.name, battle.date FROM battle INNER JOIN ship AS s1 ON battle.id = s1.lost_in_battle INNER JOIN ship AS s2 ON battle.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.lost_in_battle IS NULL AND battle.location = 'English Channel'",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses;",
    "SELECT COUNT(*) FROM courses;",
    "SELECT COUNT(*) FROM courses;",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%';",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(DISTINCT student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs;",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;",
    "SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2);",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2);",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT semesters.semester_name, student_enrolment.degree_program_id, COUNT(student_enrolment.student_id) AS num_students FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_name, student_enrolment.degree_program_id HAVING COUNT(student_enrolment.student_id) = (     SELECT MAX(num_students)     FROM (         SELECT semesters.semester_name, student_enrolment.degree_program_id, COUNT(student_enrolment.student_id) AS num_students         FROM student_enrolment         JOIN semesters ON student_enrolment.semester_id = semesters.semester_id         GROUP BY semesters.semester_name, student_enrolment.degree_program_id     ) AS temp     WHERE temp.semester_name = semesters.semester_name     AND temp.degree_program_id = student_enrolment.degree_program_id )",
    "SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment_courses.course_id IN (     SELECT course_id     FROM degree_programs     JOIN courses ON degree_programs.department_id = courses.department_id     WHERE degree_programs.degree_program_id IN (         SELECT degree_program_id         FROM student_enrolment         GROUP BY degree_program_id         HAVING COUNT(DISTINCT semester_id) = 1         AND COUNT(*) = 2     ) ) GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;",
    "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor';",
    "SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_programs.degree_summary_name, degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name, degree_programs.degree_summary_description ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM student_enrolment se JOIN students s ON se.student_id = s.student_id GROUP BY se.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1;",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name  FROM semesters  WHERE semester_id NOT IN      (SELECT semester_id       FROM student_enrolment)",
    "SELECT DISTINCT courses.course_name  FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
    "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)",
    "SELECT course_name  FROM courses  WHERE course_id = (     SELECT course_id      FROM student_enrolment_courses      GROUP BY course_id      ORDER BY COUNT(student_course_id) DESC      LIMIT 1 )",
    "SELECT course_name  FROM courses  WHERE course_id = (     SELECT course_id      FROM student_enrolment_courses      GROUP BY course_id      ORDER BY COUNT(student_course_id) DESC      LIMIT 1 )",
    "SELECT last_name  FROM students  WHERE current_address_id IN      (SELECT address_id       FROM addresses       WHERE state_province_county = 'North Carolina')  AND student_id NOT IN      (SELECT student_id       FROM student_enrolment)",
    "SELECT last_name  FROM students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_date, transcript_id  FROM transcripts  WHERE transcript_id IN      (SELECT transcript_id       FROM transcript_contents       GROUP BY transcript_id       HAVING COUNT(DISTINCT student_course_id) >= 2);",
    "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN      (SELECT transcript_id       FROM transcript_contents       GROUP BY transcript_id       HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT cell_mobile_number FROM students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name  FROM students  ORDER BY date_first_registered  LIMIT 1;",
    "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT MIN(student_id) FROM student_enrolment)",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id FROM student_enrolment WHERE semester_id = (SELECT MIN(semester_id) FROM semesters))  LIMIT 1;",
    "SELECT first_name FROM students  WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id LIMIT 1;",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1;",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT COUNT(transcript_id) FROM transcripts;",
    "SELECT COUNT(transcript_id) FROM transcripts;",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT COUNT(DISTINCT transcript_id) AS max_enrollment_count, student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY max_enrollment_count DESC LIMIT 1;",
    "SELECT MAX(course_count), student_course_id FROM (     SELECT COUNT(*) AS course_count, student_course_id     FROM student_enrolment_courses     GROUP BY course_id ) AS course_counts;",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     ORDER BY COUNT(student_course_id) ASC     LIMIT 1 )",
    "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM transcript_contents      GROUP BY transcript_id      ORDER BY COUNT(student_course_id) ASC      LIMIT 1 )",
    "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id WHERE degree_programs.degree_summary_name = 'Master' AND semesters.semester_id IN (     SELECT semesters.semester_id     FROM semesters     INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id     INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id     INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_en",
    "SELECT semester_id  FROM student_enrolment  WHERE degree_program_id IN (     SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Masters'     INTERSECT     SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Bachelors' )  GROUP BY semester_id  HAVING COUNT(DISTINCT degree_program_id) = 2;",
    "SELECT COUNT(DISTINCT current_address_id) FROM students",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'  ORDER BY date_first_registered ASC  LIMIT 1;",
    "SELECT first_name FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC;",
    "SELECT title, directed_by FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id ORDER BY air_date ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(tv_channel) AS num_channels FROM tvshow GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(tv_channel.id) AS num_channels FROM tvshow GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;",
    "SELECT content FROM tv_channel WHERE series_name = \"Sky Radio\"",
    "SELECT content FROM tvshow WHERE series_name = 'Sky Radio';",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio';",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING num_channels = (   SELECT MIN(channel_count)   FROM (     SELECT COUNT(*) AS channel_count     FROM tv_channel     GROUP BY language   ) AS channel_counts )",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language;",
    "SELECT language, COUNT(DISTINCT tv_channel.id) AS num_channels FROM tv_channel GROUP BY language;",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\";",
    "SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.title = \"The Rise of the Blue Beetle\"",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series ON cartoon.channel = tv_series.channel  INNER JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon  INNER JOIN tv_series ON cartoon.id = tv_series.id  INNER JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE series_name = \"Sky Radio\" AND content = \"cartoon\"",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating FROM tvshow JOIN tv_series ON tvshow.id = tv_series.id ORDER BY tv_series.rating DESC LIMIT 3;",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;",
    "SELECT MIN(share), MAX(share) FROM tv_series;",
    "SELECT MAX(share), MIN(share) FROM tv_series;",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\";",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT series_name  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.id  WHERE episode = \"A Love of a Lifetime\"",
    "SELECT episode  FROM tv_series  WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel  FROM cartoon  WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel  FROM cartoon  WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = true;",
    "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = true;",
    "SELECT DISTINCT country  FROM tv_channel  WHERE id IN (     SELECT channel      FROM cartoon      WHERE written_by = 'Todd Casey' )",
    "SELECT DISTINCT country  FROM tvshow  WHERE content = 'cartoon' AND id IN      (SELECT channel       FROM cartoon       WHERE written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT country  FROM tvshow  WHERE country NOT IN (     SELECT country      FROM tvshow      JOIN cartoon ON tvshow.id = cartoon.channel      WHERE written_by = 'Todd Casey' )",
    "SELECT tvshow.series_name, tvshow.country, tvshow.tv_channel FROM tvshow JOIN tv_series ON tvshow.id = tv_series.id JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel INNER JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%cartoon%';",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English'",
    "SELECT tv_channel.id  FROM tvshow.tv_channel  WHERE tv_channel.country IN      (SELECT tv_channel.country       FROM tvshow.tv_channel       GROUP BY tv_channel.country       HAVING COUNT(tv_channel.id) > 2)",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2;",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.directed_by = 'Ben Jones' WHERE cartoon.id IS NULL;",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones' AND title LIKE '%cartoon%')",
    "SELECT DISTINCT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT DISTINCT channel       FROM cartoon       WHERE directed_by = 'Ben Jones')",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player;",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT final_table_made, best_finish FROM poker_player;",
    "SELECT final_table_made, best_finish FROM poker_player;",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player;",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE poker_player.earnings > 300000;",
    "SELECT p.name  FROM poker_player AS pp  JOIN people AS p ON pp.people_id = p.people_id  WHERE pp.earnings > 300000;",
    "SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY poker_player.final_table_made ASC",
    "SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings = (SELECT MIN(earnings) FROM poker_player)",
    "SELECT birth_date  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY earnings  LIMIT 1;",
    "SELECT money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE height = (SELECT MAX(height) FROM people)",
    "SELECT money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY height DESC  LIMIT 1;",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;",
    "SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY poker_player.earnings DESC",
    "SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY poker_player.earnings DESC",
    "SELECT nationality, COUNT(*) as num_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2;",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT p.name  FROM people p  WHERE p.people_id NOT IN (SELECT pp.people_id FROM poker_player pp)",
    "SELECT COUNT(DISTINCT nationality) FROM people;",
    "SELECT COUNT(DISTINCT nationality) FROM people;",
    "SELECT COUNT(DISTINCT state) FROM area_code_state;",
    "SELECT contestant_number, contestant_name  FROM contestants  ORDER BY contestant_name DESC;",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT contestant_name  FROM contestants  WHERE contestant_name != 'Jessie Alloway'",
    "SELECT DISTINCT state, created FROM votes;",
    "SELECT contestants.contestant_number, contestants.contestant_name FROM contestants INNER JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name HAVING COUNT(votes.vote_id) >= 2;",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT COUNT(*) FROM votes WHERE state='NY' OR state='CA'",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);",
    "SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.area_code ORDER BY COUNT(votes.vote_id) DESC LIMIT 1;",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling');",
    "SELECT DISTINCT area_code_state.area_code FROM votes AS v1 JOIN votes AS v2 ON v1.phone_number = v2.phone_number AND v1.state = v2.state JOIN contestants AS c1 ON v1.contestant_number = c1.contestant_number AND c1.contestant_name = 'Tabatha Gehling' JOIN contestants AS c2 ON v2.contestant_number = c2.contestant_number AND c2.contestant_name = 'Kelly Clauss' JOIN area_code_state ON v1.state = area_code_state.state WHERE v1.contestant_number = c1.contestant_number AND v2.contestant_number = c2.contestant_number;",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT name FROM country WHERE indepyear > 1950;",
    "SELECT name FROM country WHERE indepyear > 1950;",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = 'AIA'",
    "SELECT continent FROM country WHERE code = 'AIA'",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE name = 'Aruba' )  ORDER BY percentage DESC  LIMIT 1;",
    "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia'",
    "SELECT COUNT(*) AS population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';",
    "SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(population)  FROM country  WHERE governmentform LIKE '%US territory%'",
    "SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population  FROM country  WHERE continent = 'North America' AND region = 'Caribbean' AND code IN  (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode='AFG' AND isofficial='T'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';",
    "SELECT country.name  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  GROUP BY countrycode  ORDER BY COUNT(language) DESC  LIMIT 1;",
    "SELECT name  FROM country  WHERE code = (     SELECT countrycode      FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'English' AND countrycode IN      (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT c1.code)  FROM countrylanguage cl1  JOIN country c1 ON cl1.countrycode = c1.code  JOIN countrylanguage cl2 ON cl1.language = cl2.language AND cl2.isofficial = 'T'  JOIN country c2 ON cl2.countrycode = c2.code  WHERE c1.code != c2.code AND c1.name = 'Netherlands' AND c2.name = 'United Kingdom'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French' AND cl1.isofficial = 1 AND cl2.isofficial = 1",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode  JOIN country c2 ON c1.name = c2.name  JOIN countrylanguage cl2 ON c2.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French' AND c1.code != c2.code;",
    "SELECT name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode AND cl1.language = 'English' AND cl2.language = 'French' JOIN country c ON cl1.countrycode = c.code;",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT country.continent)  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));",
    "SELECT DISTINCT country.region  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 'T'  AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'  AND countrylanguage.isofficial = 'T'",
    "SELECT language  FROM countrylanguage  WHERE percentage = (SELECT MAX(percentage)                      FROM countrylanguage                      WHERE language IN (SELECT language                                         FROM countrylanguage                                         WHERE countrycode IN (SELECT code                                                               FROM country                                                               WHERE continent = 'Asia')))",
    "SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE continent = 'Asia'      ORDER BY population DESC      LIMIT 1 )  AND isofficial = 'T'",
    "SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(*) = 1 )",
    "SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(*) = 1 )  GROUP BY language  HAVING COUNT(*) = 1",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1;",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1;",
    "SELECT c.name, c.population, c.lifeexpectancy FROM country c WHERE c.continent = 'Asia' ORDER BY c.surfacearea DESC LIMIT 1;",
    "SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1;",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT SUM(population)  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'T' )",
    "SELECT COUNT(DISTINCT city.population)  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT code FROM country WHERE continent = 'Europe' OR continent = 'North America' OR continent = 'Australia/Oceania' OR continent = 'English Speaking Caribbean' OR continent = 'British West Indies' OR continent = 'US Territory')",
    "SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')",
    "SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode = (     SELECT code      FROM country      WHERE headofstate = 'Beatrix' )",
    "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE indepyear < 1930 ) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (   SELECT code   FROM country   WHERE indepyear < 1930 ) AND isofficial = 'T'",
    "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name  FROM country  WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "```sql SELECT name  FROM country  WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia') ```",
    "SELECT name  FROM country  WHERE continent = 'Asia' AND population > ALL (SELECT population FROM country WHERE continent = 'Africa')",
    "SELECT name  FROM country  WHERE continent = 'Asia' AND population > ALL (SELECT population FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT DISTINCT country.code FROM country WHERE country.code NOT IN (     SELECT countrylanguage.countrycode     FROM countrylanguage     WHERE countrylanguage.language = 'English' )",
    "SELECT DISTINCT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'",
    "SELECT DISTINCT country.code  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'",
    "SELECT code  FROM country  WHERE governmentform <> 'Republic'  AND code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      AND isofficial = 'T' )",
    "SELECT code FROM country WHERE code NOT IN (     SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND governmentform NOT LIKE '%Republic%';",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English'  AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT population, name, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT name, population, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING COUNT(countrylanguage.language) >= 3;",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2;",
    "SELECT district, COUNT(city)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "```sql SELECT district, COUNT(name)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district; ```",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT continent, AVG(lifeexpectancy), SUM(population) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;",
    "SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3;",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3;",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;",
    "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area  FROM country  WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
    "SELECT language  FROM countrylanguage  GROUP BY language  ORDER BY COUNT(DISTINCT countrycode) DESC  LIMIT 1;",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_percentage_table ON country.code = max_percentage_table.countrycode AND countrylanguage.language = max_percentage_table.language AND countrylanguage.percentage = max_percentage_table.max_percentage;",
    "SELECT c.code AS country_code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (   SELECT MAX(cl2.percentage)   FROM countrylanguage cl2   WHERE cl2.countrycode = c.code ) ORDER BY c.code ASC, cl.language ASC",
    "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50;",
    "SELECT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(countrylanguage.percentage) DESC  LIMIT 1;",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50);",
    "SELECT COUNT(*) FROM conductor;",
    "SELECT COUNT(conductor_id) FROM conductor;",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor;",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1;",
    "SELECT c.name  FROM conductor c  ORDER BY (SELECT COUNT(*) FROM performance p WHERE p.conductor_id = c.conductor_id) DESC  LIMIT 1;",
    "SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;",
    "SELECT DISTINCT c.name  FROM conductor c  WHERE c.conductor_id IN (     SELECT conductor_id      FROM orchestra      GROUP BY conductor_id      HAVING COUNT(DISTINCT orchestra_id) > 1 )",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;",
    "SELECT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  WHERE o.year_of_founded > 2008;",
    "SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  WHERE o.year_of_founded > 2008",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_of_orchestras FROM orchestra GROUP BY record_company;",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras_managed FROM orchestra GROUP BY record_company",
    "SELECT orchestra, COUNT(*) AS count FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.orchestra_id ORDER BY count ASC;",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.name  FROM orchestra  LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.performance_id IS NULL;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003;",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003;",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (   SELECT orchestra_id   FROM performance   GROUP BY orchestra_id   HAVING COUNT(DISTINCT performance_id) > 1 )",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);",
    "SELECT COUNT(*) FROM highschooler;",
    "SELECT COUNT(*) FROM highschooler;",
    "SELECT name, grade FROM highschooler;",
    "SELECT name, grade FROM highschooler;",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler;",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN ('9', '10')",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(DISTINCT id) >= 4;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
    "SELECT friend.student_id, COUNT(friend.friend_id) AS number_of_friends FROM friend GROUP BY friend.student_id ORDER BY friend.student_id ASC;",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id ORDER BY highschooler.id;",
    "SELECT h.name, COUNT(f.friend_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING h.grade = 'HS';",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id ORDER BY highschooler.name ASC;",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      HAVING COUNT(f.friend_id) = (         SELECT MAX(cnt)          FROM (             SELECT COUNT(friend_id) AS cnt              FROM friend              GROUP BY student_id         ) AS counts     ) )",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(f.friend_id) DESC LIMIT 1;",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3;",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.friend_id WHERE f.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.friend_id WHERE f.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*)  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.name = 'Kyle'",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h.id FROM highschooler h WHERE NOT EXISTS (   SELECT 1   FROM friend f   WHERE f.student_id = h.id OR f.friend_id = h.id )",
    "SELECT id FROM highschooler WHERE grade = 'HS' AND id NOT IN (SELECT student_id FROM friend);",
    "SELECT h.name FROM highschooler h WHERE h.grade = 'HS' AND h.id NOT IN (   SELECT f.student_id   FROM friend f )",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.friend_id = l.liked_id AND f.student_id = l.student_id WHERE f.student_id IN (   SELECT student_id   FROM friend ) AND f.student_id IN (   SELECT student_id   FROM likes ) AND f.student_id IN (   SELECT id   FROM highschooler )",
    "SELECT DISTINCT f1.student_id FROM friend f1 INNER JOIN friend f2 ON f1.friend_id = f2.student_id AND f1.student_id = f2.friend_id INNER JOIN likes l ON f1.student_id = l.student_id AND f1.friend_id = l.liked_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE f.friend_id IS NOT NULL AND l.liked_id != h.id;",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT likes.student_id, COUNT(*) AS num_likes FROM likes GROUP BY likes.student_id;",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id;",
    "SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING num_likes > 0;",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0;",
    "SELECT highschooler.name  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.id  ORDER BY COUNT(likes.liked_id) DESC  LIMIT 1;",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;",
    "SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.student_id WHERE h.grade > 5 GROUP BY h.id HAVING COUNT(DISTINCT f.friend_id) >= 2;",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE h.grade > 5 GROUP BY h.id HAVING COUNT(DISTINCT f.friend_id) >= 2;",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)",
    "SELECT AVG(h.grade)  FROM highschooler h  WHERE h.id IN (SELECT f.student_id FROM friend f)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend);",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals)",
    "```sql SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state ```",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM treatments  GROUP BY professional_id  HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM treatments  GROUP BY professional_id  HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
    "SELECT dogs.name  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.cost_of_treatment <= 1000",
    "SELECT DISTINCT first_name  FROM owners o  JOIN professionals p ON o.first_name = p.first_name  WHERE p.role_code = 'owner' OR p.role_code = 'professional'  AND first_name NOT IN (SELECT name FROM dogs)",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE professionals.role_code = 'owner' OR professionals.role_code = 'professional' AND professionals.first_name NOT IN (     SELECT dogs.name     FROM dogs )",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code IN (         SELECT treatment_types.treatment_type_code         FROM treatment_types         WHERE treatment_types.treatment_type_description LIKE '%operate%'         AND treatment_types.treatment_type_description LIKE '%dog%'     ) )",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     WHERE dogs.abandoned_yn = 'N' AND dogs.date_departed IS NULL )",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (     SELECT dogs.owner_id     FROM dogs     GROUP BY dogs.owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 );",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2;",
    "SELECT professional_id, role_code, first_name  FROM professionals  WHERE professional_id IN (     SELECT professional_id      FROM treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_id) >= 2 )",
    "SELECT breed_name  FROM breeds  WHERE breed_code = (     SELECT breed_code      FROM dogs      GROUP BY breed_code      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN (     SELECT owner_id, SUM(charge_amount) AS total_paid     FROM dogs     JOIN charges ON dogs.size_code = charges.charge_type     GROUP BY owner_id     ORDER BY total_paid DESC     LIMIT 1 ) AS max_paid ON dogs.owner_id = max_paid.owner_id;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (   SELECT professional_id   FROM treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT professionals.professional_id, professionals.cell_number FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;",
    "SELECT first_name, last_name  FROM professionals  WHERE professional_id IN (     SELECT professional_id      FROM treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)          FROM treatments     ) )",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SQL query:   SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description AS dog_size FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment;",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = 'rarest' ORDER BY dogs.name, treatments.date_of_treatment;",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'  ORDER BY owners.first_name ASC",
    "SELECT date_arrived AS arriving_date, date_departed AS departing_date FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'treatment') GROUP BY dogs.dog_id;",
    "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code IS NOT NULL;",
    "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     WHERE age = (         SELECT MIN(age)         FROM dogs     )     ORDER BY date_of_birth DESC     LIMIT 1 )",
    "SELECT email_address FROM professionals WHERE state='Hawaii' OR state='Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments;",
    "SELECT COUNT(DISTINCT dogs.dog_id)  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'dog treatment')",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address  FROM owners  WHERE state LIKE '%North%'",
    "SQL query:   SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM treatments)",
    "SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_departed IS NULL)",
    "SELECT COUNT(DISTINCT owners.owner_id)  FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE dogs.dog_id IS NULL;",
    "SELECT COUNT(professionals.professional_id)  FROM professionals  WHERE professionals.professional_id NOT IN      (SELECT treatments.professional_id       FROM treatments       WHERE treatments.treatment_type_code IN           (SELECT treatment_types.treatment_type_code            FROM treatment_types            WHERE treatment_types.treatment_type_description = 'operate')       AND treatments.dog_id IN           (SELECT dogs.dog_id            FROM dogs            WHERE dogs.abandoned_yn = 'N'            AND dogs.date_departed IS NULL))",
    "SELECT COUNT(DISTINCT professionals.professional_id)  FROM professionals  LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE treatments.treatment_id IS NULL OR treatments.dog_id IS NULL;",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes, dogs WHERE breeds.breed_code = dogs.breed_code AND sizes.size_code = dogs.size_code;",
    "SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs;",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id;",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer;",
    "SELECT name FROM singer WHERE citizenship != 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship;",
    "SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000);",
    "SELECT name FROM singer  WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);",
    "SELECT DISTINCT s.name  FROM singer s  JOIN song so ON s.singer_id = so.singer_id  GROUP BY s.singer_id  HAVING COUNT(so.song_id) > 1;",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955 GROUP BY citizenship HAVING COUNT(DISTINCT singer_id) > 1;",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship HAVING COUNT(DISTINCT singer_id) > 1;",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT feature_type_name  FROM ref_feature_types  WHERE feature_type_code = (SELECT feature_type_code                             FROM other_available_features                             WHERE feature_name = 'AirCon')",
    "SELECT ref_property_types.property_type_description  FROM properties  JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code  WHERE properties.property_id = [code];",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]