[
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'Frane'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concert WHERE year = 2013 OR year = 2015",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id AND c.year = 2021",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_singer.concert_id) AS number_of_concerts FROM singer JOIN concert_singer ON singer.singer_id = concert_singer.singer_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Heyy%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hy%'",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 OR concert.year = 2015;",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 1.0",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) AS max_weight, MAX(pettype) AS pet_type FROM pets GROUP BY pettype",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 21",
    "SELECT COUNT(*) FROM pets_1 p1 JOIN has_pet hp ON p1.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid JOIN student s ON p1.stuid = s.stuid WHERE s.sex = 'F' AND p.pettype = 'dog'",
    "SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dogg' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT s.fname FROM student s, has_pet hp1, has_pet hp2, pets p1, pets p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND p1.pettype = 'car' AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) ORDER BY stuid ASC LIMIT 1",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid",
    "SELECT DISTINCT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smth'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 0",
    "SELECT student.fname, student.sex FROM student  WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet                          GROUP BY has_pet.stuid                          HAVING COUNT(has_pet.petid) > 1)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(DISTINCT countryname) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_car_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)'",
    "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid AND car_names.model = 'hornet sportabout (sw)'",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'france'",
    "I'm sorry, but I cannot answer your question as the schema you provided does not contain any table related to \"marks of care\". Could you please provide the correct schema?",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker JOIN car_names ON car_makers.id = car_names.makeid;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 151",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'europ' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Eurpean' AND       (SELECT COUNT(*) FROM car_makers WHERE car_makers.country = countries.countryid) >= 3",
    "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY car_makers.maker",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 3",
    "SELECT model_list.maker, model_list.model, cars_data.mpg  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE model = 'volvo')",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.model = car_makers.fullname WHERE car_makers.maker = 'volvso'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT MAX(accelerate) FROM cars_data",
    "SELECT model, COUNT(makeid) AS num_makes FROM car_names GROUP BY model ORDER BY num_makes DESC LIMIT 1;",
    "SELECT maker, model, COUNT(DISTINCT make) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY maker, model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 3",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE year LIKE '198%'",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Compnay'",
    "SELECT car_makers.id, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(DISTINCT model_list.modelid) > 3",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT maker FROM car_makers WHERE fullname = 'General Motors') OR weight > 3500",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 ORDER BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND year IN (SELECT year FROM cars_data WHERE weight > 3000)",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT cylinders FROM cars_data WHERE model = 'volov' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model = 'volvo')",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT makeid, maker FROM car_names WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data WHERE cylinders > 3) AND makeid NOT IN (SELECT makeid FROM cars_data WHERE cylinders > 3)",
    "SELECT makeid, maker FROM car_names WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor Companyy'",
    "SELECT model FROM model_list  WHERE maker NOT LIKE 'Ford%' AND weight < 3500",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT maker FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT makeid) > 3)",
    "SELECT makeid, maker FROM car_names  WHERE maker IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2)  AND makeid IN (SELECT id FROM cars_data GROUP BY id HAVING COUNT(*) > 3)",
    "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.maker = 'fiat' OR countries.countryid IN (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) > 3 )",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fita')",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'Jetblu Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE countryabbrev = 'UAS'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthny'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthnoy'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKP'",
    "SELECT airportname FROM airports WHERE airportcode = 'AK'",
    "SELECT airportname FROM airports WHERE city = 'Aberden'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'AOG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'AGP'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode WHERE a.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Abberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Abredeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeon' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'Untied Airlines' AND ap.airportname = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airline' AND ap.airportcode = 'ASY' AND f.sourceairport != 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airline' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode JOIN airlines al ON f.airline = al.uid WHERE al.airline = 'United Airlines' AND a.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdenn'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Unite Airlines' AND destairport = 'Aberdeen'",
    "SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM flights WHERE destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG' AND EXISTS (     SELECT 1     FROM flights AS f2     WHERE f2.airline = flights.airline     AND f2.sourceairport = 'CVO' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'CVO'  AND airlines.airline NOT IN (     SELECT DISTINCT airlines.airline      FROM flights      JOIN airlines ON flights.airline = airlines.uid      WHERE flights.sourceairport = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND flights.airline NOT IN (     SELECT DISTINCT flights.airline     FROM flights     JOIN airports ON flights.destairport = airports.airportcode     WHERE airports.city = 'APG' )",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airline'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeem'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Abberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Abberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberden', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT location, COUNT(*) AS number_of_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  GROUP BY employee.employee_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  ORDER BY evaluation.bonus DESC  LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
    "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id LEFT JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT s1.district FROM shop s1, shop s2 WHERE s1.number_products < 3000 AND s2.number_products > 10000 AND s1.district = s2.district",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_description LIKE '%q%'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CVV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CVV'",
    "SELECT COUNT(DISTINCT template_type_code) FROM templates",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT template_id, COUNT(*) as usage_count FROM documents GROUP BY template_id",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_id, template_type_code FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code = 'P' OR template_type_code = 'PPT'",
    "SELECT template_id FROM templates WHERE template_type_code IN ('P', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 4",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT template_type_code, MIN(version_number) AS lowest_version_number FROM templates GROUP BY template_type_code",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data bse'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data bse'",
    "SELECT document_name FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       WHERE template_id IN           (SELECT template_id            FROM documents))",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  WHERE ref_template_types.template_type_code NOT IN      (SELECT templates.template_type_code       FROM templates       WHERE templates.template_type_code = ref_template_types.template_type_code)",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'A'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Bok'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT template_type_description FROM ref_template_types t JOIN templates tm ON t.template_type_code = tm.template_type_code JOIN documents d ON tm.template_id = d.template_id",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea .'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Koreaa%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcom to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcom to NY'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Custommer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customere reviews'",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_name, COUNT(*) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY num_paragraphs DESC LIMIT 1;",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM documents WHERE (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id = documents.document_id) BETWEEN 1 AND 2",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT document_id  FROM paragraphs  WHERE paragraph_text LIKE '%Brazul%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazl%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(*) FROM teacher",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Litle Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Litle Lever Urban District'",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT teacher.hometown, COUNT(DISTINCT teacher.teacher_id) AS num_teachers FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.hometown",
    "SELECT teacher.hometown, COUNT(DISTINCT course_arrange.teacher_id) AS num_teachers FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown",
    "SELECT hometown, COUNT(*) AS count_hometown FROM teacher GROUP BY hometown ORDER BY count_hometown DESC LIMIT 1;",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1",
    "SELECT DISTINCT t1.hometown FROM teacher t1 JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id JOIN course_arrange ca1 ON t1.teacher_id = ca1.teacher_id JOIN course_arrange ca2 ON t2.teacher_id = ca2.teacher_id AND ca1.course_id = ca2.course_id",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name FROM course_teach  JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  JOIN course ON course_teach.course_id = course.course_id  WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(DISTINCT visit.museum_id) > 1",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visitor.id, visitor.name, visitor.level_of_membership  ORDER BY SUM(visit.total_spent) DESC  LIMIT 1",
    "SELECT museum.museum_id, museum.name  FROM museum  ORDER BY (SELECT COUNT(*) FROM visit WHERE visit.museum_id = museum.museum_id) DESC  LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT v.name  FROM visitor v  JOIN visit v1 ON v.id = v1.visitor_id  JOIN visit v2 ON v.id = v2.visitor_id  JOIN museum m1 ON v1.museum_id = m1.museum_id  JOIN museum m2 ON v2.museum_id = m2.museum_id  WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010))",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "select count(*) from players",
    "SELECT COUNT(*) FROM players",
    "select count(*) from matches",
    "I'm sorry, but your question is incomplete. Please provide a complete question.",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'US'",
    "SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches",
    "SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2015",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2019",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date ASC",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_level = 'G' ORDER BY matches.tours DESC LIMIT 1",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "select year from matches group by year order by count(*) desc limit 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT year, COUNT(*) FROM matches GROUP BY year",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_level = 'WTA Championships'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championshps'",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings) LIMIT 1",
    "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Capturedd'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT name, result FROM battle_death WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN battle_death ON battle.id = battle_death.id  INNER JOIN ship ON battle_death.caused_by_ship_id = ship.id  WHERE ship.ship_type = 'Brg' AND ship.lost_in_battle = 1",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
    "SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalnta')",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NULL;",
    "SELECT note FROM death WHERE note LIKE '%Eats%'",
    "I'm sorry, but the serialized schema you provided is incomplete. It seems to be missing some tables that are referenced in the schema. Could you please provide the complete schema?",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsa'",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT s.semester_id, s.semester_name, se.degree_program_id, COUNT(*) AS num_students FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.semester_id, s.semester_name, se.degree_program_id HAVING COUNT(*) = (   SELECT MAX(num_students)   FROM (     SELECT s.semester_id, se.degree_program_id, COUNT(*) AS num_students     FROM semesters s     JOIN student_enrolment se ON s.semester_id = se.semester_id     JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id     GROUP BY s.semester_id, se.degree_program_id   ) AS temp   WHERE temp.semester_id = s.semester_id AND temp.degree_program_id = se.degree",
    "SELECT department_description FROM departments WHERE department_name LIKE '%the computr%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computr%'",
    "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (     SELECT degree_program_id     FROM student_enrolment     GROUP BY degree_program_id, semester_id     HAVING COUNT(DISTINCT semester_id) = 1     AND COUNT(*) >= 2 )",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_program_id, degree_summary_name  ORDER BY COUNT(student_id) DESC  LIMIT 1",
    "SELECT student_id, first_name, middle_name, last_name, COUNT(*) AS num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) as num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT courses.course_name  FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  GROUP BY courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT last_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Wrd'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Warrd'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id LIMIT 1",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  GROUP BY current_address_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY addresses.address_id ORDER BY COUNT(DISTINCT student_enrolment.student_id) DESC LIMIT 1",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT student_course_id, COUNT(DISTINCT transcript_id) AS max_enrollment_count FROM transcript_contents GROUP BY student_course_id ORDER BY max_enrollment_count DESC LIMIT 1;",
    "SELECT MAX(course_count), course_id FROM (SELECT COUNT(DISTINCT student_course_id) AS course_count, course_id FROM student_enrolment_courses GROUP BY course_id) AS course_counts",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Master' OR degree_summary_name = 'Bachelor'     )      GROUP BY semester_id      HAVING COUNT(DISTINCT degree_program_id) = 2 )",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachlors') ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT COUNT(DISTINCT current_address_id) FROM students",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM addresses  WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT * FROM students ORDER BY last_name DESC, first_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "I'm sorry, but the question you provided is not clear. Could you please provide more information or clarify the question?",
    "SELECT section_description FROM sections WHERE section_name = 'j'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haitii') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Josph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Branon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel",
    "SELECT COUNT(DISTINCT series_name, content) FROM tv_channel",
    "SELECT content FROM tv_channel WHERE series_name = 'Sjy Radio'",
    "I'm sorry, but the provided schema does not contain any table related to radio or radio series. Could you please provide the correct schema?",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radiio'",
    "SELECT package_option FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.series_name = 'Sky Rado'",
    "SELECT COUNT(*) FROM tv_series WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM tv_channel GROUP BY language) AS channel_counts)",
    "SELECT language, COUNT(*) FROM tv_series WHERE channel LIKE '%ti%' GROUP BY language",
    "SELECT language, COUNT(DISTINCT tv_channel.id)  FROM tv_channel  GROUP BY language",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetl!'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetel'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Raduo'",
    "SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating  FROM tv_series  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE episode = \"A Lve of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Lofe of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Lve of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Lve of a Lifetime\"",
    "SELECT tv_channel.series_name, tv_series.channel  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT series_name FROM tv_series WHERE episode = \"A Lve of a Lifetime\"",
    "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Rado')",
    "I'm sorry, but the provided schema does not have a table that contains the information about the episodes of a TV series. Can you please provide a schema that includes this information?",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Cassey' OR cartoon.written_by IS NULL",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jnes', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michal Chang'",
    "SELECT pixel_aspect_ratio_par, natio FROM tv_channel WHERE language != 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel  WHERE language != 'English'",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jonez' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones')  AND package_option = 'optin'",
    "SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Joness')",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY height DESC LIMIT 1",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Rusia'",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT MAX(area_code) AS maximum_value, MIN(area_code) AS minimum_value FROM area_code_state",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jesse Alloway'",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)",
    "SELECT area_code FROM (     SELECT state, area_code, COUNT(*) AS num_votes     FROM votes     JOIN area_code_state ON votes.state = area_code_state.state     GROUP BY state, area_code     ORDER BY num_votes DESC     LIMIT 1 ) AS max_votes;",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehlingg')",
    "SELECT DISTINCT area_code FROM voter_1 WHERE phone_number IN (     SELECT phone_number FROM votes     WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')     INTERSECT     SELECT phone_number FROM votes     WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauuss') )",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Aal%'",
    "SELECT name FROM country WHERE indepyear > 9150",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = 'AIA'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Angiulla')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazi'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Braazil'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.region, city.population  FROM city  JOIN country ON city.countrycode = country.code  WHERE city.name = 'Angla'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US territory'",
    "SELECT country.gnp, country.population FROM country WHERE country.code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR') AND country.governmentform LIKE '%territory%' AND countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 50",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'Arba'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(*) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch'",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT DISTINCT c.region FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch')",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')",
    "SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' GROUP BY code HAVING COUNT(*) = 1) GROUP BY language HAVING COUNT(*) = 1",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(DISTINCT code) = 1 )",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatriz' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatriz' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language != 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English'",
    "SELECT code FROM country WHERE governmentform <> 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'F'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1",
    "SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = true GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT country.continent, SUM(country.population) AS total_population, AVG(country.lifeexpectancy) AS avg_life_expectancy FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72;",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(c.population), AVG(c.surfacearea)  FROM country c  WHERE c.continent = 'North America' AND c.surfacearea > 3000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language_percentage.language = countrylanguage.language AND max_language_percentage.max_percentage = countrylanguage.percentage",
    "SELECT c.code, cl.language FROM country c JOIN (     SELECT countrycode, language, percentage,          ROW_NUMBER() OVER (PARTITION BY countrycode ORDER BY percentage DESC) AS rn     FROM countrylanguage ) cl ON c.code = cl.countrycode WHERE cl.rn = 1 ORDER BY c.code ASC",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50.0",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(percentage) DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T')",
    "SELECT COUNT(*) FROM conductor",
    "SELECT COUNT(*) FROM conductor",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC WHERE orchestra = 'orchestra'",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live fina'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT orchestra, major_record_format, COUNT(*) as count FROM orchestra GROUP BY orchestra, major_record_format ORDER BY count ASC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra  FROM orchestra  WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)",
    "SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded < 2004 AND orchestra_id IN (SELECT orchestra_id FROM orchestra WHERE year_of_founded > 2003)",
    "SELECT DISTINCT o1.record_company  FROM orchestra o1, orchestra o2  WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003 AND o1.record_company = o2.record_company",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CDD' OR major_record_format = 'DVD'",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVE')",
    "SELECT DISTINCT year_of_work FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1)",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler WHERE name = 'Klye'",
    "SELECT grade FROM highschooler WHERE name = 'Klye'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Klye'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT friend.student_id, friend.friend_id FROM friend",
    "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name, COUNT(f.friend_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY num_friends DESC, h.name ASC",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f GROUP BY f.student_id HAVING COUNT(*) >= 3)",
    "SELECT h2.name FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id",
    "SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Klye'",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyl')",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT h.name  FROM highschooler h  WHERE h.id NOT IN (SELECT f.student_id FROM friend f)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT DISTINCT f1.student_id FROM friend f1, friend f2, likes l WHERE f1.student_id = l.student_id AND f2.student_id = l.liked_id AND f1.friend_id = f2.friend_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE f.friend_id IS NOT NULL AND l.liked_id <> h.id;",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (SELECT f.student_id FROM friend f WHERE f.friend_id IN (SELECT l.liked_id FROM likes l)) AND h.id IN (SELECT l.student_id FROM likes l)",
    "SELECT student_id, COUNT(*) FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) FROM likes GROUP BY student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1",
    "SELECT highschooler.name FROM highschooler WHERE highschooler.id = (     SELECT likes.liked_id     FROM likes     GROUP BY likes.liked_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT h.name  FROM highschooler h  WHERE h.grade > 5 AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id OR f.friend_id = h.id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyl')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT owners.state FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN professionals ON dogs.dog_id = professionals.professional_id WHERE owners.state = professionals.state",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'treatmets'",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indianna' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.treatment_type_code = charges.charge_type WHERE charge_amount > 1000)",
    "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.dog_id NOT IN (SELECT t.dog_id FROM treatments t WHERE t.cost_of_treatment > 1000)",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE professionals.first_name NOT IN (     SELECT DISTINCT dogs.name FROM dogs     WHERE dogs.name IS NOT NULL ) AND professionals.first_name IN (     SELECT DISTINCT owners.first_name FROM owners     WHERE owners.first_name IS NOT NULL )",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs) AND role_code IN (SELECT DISTINCT charge_type FROM charges WHERE charge_type LIKE '%owner%' OR charge_type LIKE '%professional%')",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code = 'dog' )",
    "SELECT id, role, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments )",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'boarding') * DATEDIFF(day, date_arrived, date_departed)) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT SUM(charge_amount) FROM charges WHERE charges.charge_id = treatments.treatment_id)) DESC LIMIT 1",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2",
    "SELECT first_name, last_name FROM professionals  WHERE professional_id IN (     SELECT professional_id FROM treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) )",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, dogs.weight FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "select owners.first_name, owners.last_name, dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment;",
    "SELECT o.first_name, d.name  FROM dogs d  JOIN owners o ON d.owner_id = o.owner_id  WHERE o.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "select date_arrived, date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id where treatment_type_code = 'treatmnt'",
    "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code IS NOT NULL",
    "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'treated dogs')",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%Wst%'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%Noth%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%Nort%'",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) AND owner_id IN (SELECT owner_id FROM charges WHERE charge_type = 'temporary')",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'NULL' OR treatment_type_code IS NULL)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments)",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "select max(age) from dogs",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT DISTINCT breed_code, size_code FROM dogs",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 30000",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000",
    "SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.singer_id HAVING COUNT(so.song_id) > 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955",
    "SELECT COUNT(*) FROM other_available_features WHERE feature_type_code = 'totl'",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = 'AirCn'",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code IN (SELECT property_type_code FROM properties WHERE property_id = 'that cod')",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]