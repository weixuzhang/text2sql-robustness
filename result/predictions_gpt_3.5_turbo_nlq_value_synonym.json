[
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity >= 5000 AND capacity <= 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age > 20",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3 ORDER BY petid DESC LIMIT 1)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.year LIKE '70%';",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.countryname = 'United States'",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id JOIN countries c ON cm.country = c.countryid WHERE c.continent = 'US'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.countryname = 'United States'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'U.S.'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = 'U.S.'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT model, mpg FROM car_names  INNER JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.id) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT countryname FROM countries WHERE continent = 'Europe' AND countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3)",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT MAX(horsepower), maker FROM cars_data  INNER JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(horsepower), make FROM cars_data WHERE cylinders = 3 GROUP BY make",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN model_list ON cars_data.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinders = 3",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN car_makers ON car_names.model = car_makers.maker  WHERE car_makers.maker = 'American Motor Corporation'",
    "SELECT model FROM model_list WHERE maker = 'American Motors Corporation'",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = 'American Motors'",
    "SELECT COUNT(DISTINCT makeid) FROM car_names JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'American Motors'",
    "SELECT maker FROM car_makers WHERE id IN (     SELECT maker FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT modelid) > 3 )",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(DISTINCT car_names.model) > 3",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'General Motors' AND cars_data.weight > 3500;",
    "SELECT * FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT model  FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.maker  INNER JOIN cars_data ON model_list.modelid = cars_data.id  WHERE car_makers.maker = 'GM' OR weight > 3500",
    "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight >= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid)  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryid  HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE cylinders > 6)",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 5",
    "SELECT model, horsepower FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1 OFFSET 0",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT maker, model FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.modelid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cylinders <= 3",
    "SELECT makeid, maker, fullname  FROM car_makers  WHERE id IN (     SELECT makeid      FROM cars_data      WHERE horsepower > (         SELECT MIN(horsepower)          FROM cars_data     )     AND cylinders <= 3 )",
    "SELECT makeid, maker FROM car_names WHERE cylinders < 4 AND makeid NOT IN (     SELECT makeid FROM cars_data     WHERE horsepower = (         SELECT MIN(horsepower) FROM cars_data     ) )",
    "SELECT mpg FROM cars_data WHERE year <= 1980 AND cylinders = 8",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders >= 8 AND year < 1980",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.maker WHERE weight < 3500 AND car_makers.fullname != 'Ford Corporation'",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  INNER JOIN car_makers ON car_names.makeid = car_makers.id  WHERE weight < 3500 AND maker != 'Ford'",
    "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford'",
    "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) >= 3",
    "SELECT makeid, maker FROM car_makers WHERE id IN (     SELECT maker FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT modelid) >= 2 ) AND id IN (     SELECT makeid FROM car_names     GROUP BY makeid     HAVING COUNT(DISTINCT model) > 3 )",
    "SELECT makeid, maker FROM car_names  WHERE makeid IN (     SELECT maker FROM model_list      GROUP BY maker      HAVING COUNT(DISTINCT modelid) >= 2 ) AND makeid IN (     SELECT maker FROM cars_data      GROUP BY maker      HAVING COUNT(DISTINCT id) >= 3 )",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (     SELECT country FROM car_makers     WHERE maker = 'Fiat' ) OR countryid IN (     SELECT country FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) > 3 )",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'Fiat')",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airlines'",
    "SELECT country FROM airlines WHERE airline = 'jetblue'",
    "SELECT DISTINCT country FROM airlines WHERE airline = 'JetBlue'",
    "SELECT DISTINCT country FROM airlines WHERE airline = 'JetBlue Airlines'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jet Blue'",
    "select abbreviation from airlines where airline = 'JetBLueAirways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States of America'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'US'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States of America'",
    "SELECT abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT abbreviation FROM airlines WHERE country = 'US'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States of America'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States of America'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'US'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'US'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta Airport'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'jet blue airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jet blue'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'Air United' AND f.sourceairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'UA' AND destairport = 'Aberdeen'",
    "SELECT * FROM flights f JOIN airlines a ON f.airline = a.abbreviation JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airline' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United' AND ap.city = 'Aberdeen'",
    "SELECT * FROM flights WHERE airline = 'United' AND destairport = 'Aberdeen'",
    "SELECT COUNT(DISTINCT airline) FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airline HAVING COUNT(*) BETWEEN 0 AND 200",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'",
    "SELECT city, COUNT(DISTINCT employee_id) as num_employees FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) >= 2",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 10000 AND number_products > 100000",
    "SELECT COUNT(DISTINCT district) FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = 'RobbinCV'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PowerPoint')",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number >= 5",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to New York.'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Welcome to New York'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome To New York')",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to New York'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to New York'",
    "SELECT paragraph_text FROM paragraphs",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'customer review'",
    "SELECT DISTINCT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) > 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever'",
    "SELECT name FROM teacher WHERE age >= 32 AND age <= 33",
    "SELECT name FROM teacher WHERE age BETWEEN 32 AND 33.",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IN (SELECT course_id FROM course WHERE course = 'mathematics')",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_teach WHERE course = 'mathematics')",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'US'",
    "SELECT first_name, last_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT winner_name, winner_ranking FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_level = 'WTA Championships'",
    "SELECT battle.id, battle.name FROM battle  JOIN battle_death ON battle.id = battle_death.id  GROUP BY battle.id, battle.name  HAVING SUM(battle_death.killed) + SUM(battle_death.injured) > 10",
    "I'm sorry, but the serialized schema you provided does not contain any tables that are related to the course description. Could you please provide the correct schema or more information about the tables that are related to the course description?",
    "SELECT classifications  FROM courses  JOIN sections ON courses.course_id = sections.course_id  JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.department_id = 'mathematics'",
    "SELECT zip_postcode FROM addresses WHERE city = 'PortChelsea'",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON sec.student_course_id = t.student_course_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id AND se1.semester_id = se2.semester_id AND se1.student_enrolment_id <> se2.student_enrolment_id JOIN student_enrolment_courses sec1 ON se1.student_enrolment_id = sec1.student_enrolment_id JOIN student_enrolment_courses sec2 ON se2.student_enrolment_id = sec2.student_enrolment_id AND sec1.course_id <> sec2.course_id",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM transcript_contents      GROUP BY transcript_id      HAVING COUNT(DISTINCT course_id) >= 2 )",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT first_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti' AND line_1 IS NOT NULL) OR cell_mobile_number = '09700166582' LIMIT 1",
    "I'm sorry, but the serialized schema you provided does not have a table named \"radio program Sky\". Could you please provide the correct schema?",
    "I'm sorry, but the serialized schema you provided does not have a table named \"radio\". Could you please provide the correct schema?",
    "SELECT series_name, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT tv_series.episode, tv_series.rating  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.id  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT rating, episode FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT tv_series.series_name, tv_series.episode, tv_series.rating  FROM tvshow.tv_series  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 30000",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality != 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "I'm assuming you want to retrieve the population and life expectancy of Brazil. Here's the SQL query:  SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central African'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE name = 'Central African Republic'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT country.name FROM country WHERE continent = 'Asia' AND lifeexpectancy < (SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(population) AS asian_population, MAX(gnp) AS max_gnp FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT AVG(gnp), SUM(population)  FROM country  WHERE governmentform LIKE '%Territory%' AND governmentform LIKE '%United States%'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'United States' territory'",
    "SELECT AVG(gnp), AVG(population) FROM country WHERE continent = 'North America' AND name NOT LIKE '%United States%'",
    "SELECT AVG(country.gnp) AS avg_gnp, SUM(country.population) AS total_population FROM country WHERE country.region = 'United States'",
    "SELECT AVG(gnp) AS avg_gnp, SUM(population) AS total_population FROM country WHERE code2 = 'US'",
    "SELECT AVG(gnp) AS average_income, SUM(population) AS total_population FROM country WHERE continent = 'North America' AND governmentform = 'Nonmetropolitan Territory of the US'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR')",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT DISTINCT language FROM countrylanguage WHERE isofficial = 'T' AND percentage = 100 AND countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%') AND countrycode IN (SELECT code FROM country GROUP BY code HAVING COUNT(DISTINCT name) = 1)",
    "SELECT DISTINCT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.governmentform = 'Republic' AND cl.language NOT IN (     SELECT cl2.language     FROM countrylanguage cl2     JOIN country c2 ON cl2.countrycode = c2.code     WHERE c2.governmentform <> 'Republic' )  GROUP BY cl.language HAVING COUNT(DISTINCT cl.countrycode) = 1",
    "SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform LIKE '%Republic%'     GROUP BY code     HAVING COUNT(DISTINCT code) = 1 )",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT COUNT(*) FROM country WHERE surfacearea > (SELECT SUM(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Africa' AND c1.population < (SELECT SUM(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Asia' AND c1.population > ALL (SELECT c2.population FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Asia' AND c1.population > ALL (SELECT c2.population FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT DISTINCT c1.name FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > ALL (SELECT c2.population FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT c1.name AS asian_country, c1.population AS asian_population FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Africa' )",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Africa' )",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > ALL (SELECT population FROM country WHERE continent = 'Africa')",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT c1.name  FROM country c1, country c2  WHERE c1.continent = 'Asia' AND c2.continent = 'Africa' AND c1.population > c2.population",
    "SELECT DISTINCT city.name, country.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'Chinese' AND country.continent = 'Asia' AND countrylanguage.isofficial = 'T'",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 2",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage > 0.0 GROUP BY country.name HAVING COUNT(countrylanguage.language) > 1",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 2",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 2",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY surfacearea DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3;",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(DISTINCT country.name) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(c.population), AVG(c.surfacearea) FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'United States'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT * FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler WHERE grade IN ('9', '10') GROUP BY grade",
    "SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade, COUNT(*) as num_grades FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(DISTINCT f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT DISTINCT l1.student_id FROM likes l1 JOIN likes l2 ON l1.student_id = l2.student_id AND l1.liked_id <> l2.liked_id WHERE l1.student_id = l2.student_id GROUP BY l1.student_id HAVING COUNT(DISTINCT l1.liked_id) >= 2;",
    "SELECT DISTINCT l1.student_id FROM likes l1 JOIN likes l2 ON l1.student_id = l2.student_id AND l1.liked_id <> l2.liked_id AND l1.liked_id < l2.liked_id ORDER BY l1.student_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY f.student_id HAVING COUNT(f.friend_id) > 2",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.friend_id  JOIN likes l ON h.id = l.student_id  GROUP BY h.id  HAVING COUNT(DISTINCT l.liked_id) > 5 AND COUNT(DISTINCT f1.friend_id) >= 2 AND COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT DISTINCT h1.name FROM highschooler h1, highschooler h2, highschooler h3, friend f1, friend f2, likes l WHERE h1.id = f1.student_id AND h2.id = f1.friend_id AND h2.id = f2.student_id AND h3.id = f2.friend_id AND h1.id = l.student_id AND h3.id = l.liked_id AND h1.grade > 5 AND h2.grade > 5 AND h3.grade > 5 AND h1.id <> h3.id AND h1.id < h3.id;",
    "SELECT h.name FROM highschooler h WHERE h.grade > 5 AND        (SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  WHERE h.grade > 5 AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE l.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2) AND id IN (SELECT student_id FROM likes WHERE liked_id IN (SELECT id FROM highschooler WHERE grade > 5))",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) > 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.student_id AND f.friend_id <> f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'Indiana' AND professional_id IN (     SELECT professional_id      FROM treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) > 2 )",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) > 2) OR professional_id IN (SELECT professional_id FROM treatments WHERE professional_id = professionals.professional_id)",
    "SELECT owners.owner_id, owners.last_name, owners.home_phone  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE owners.state = 'Indiana' OR        (SELECT COUNT(DISTINCT treatment_type_code)         FROM treatments         WHERE treatments.dog_id = dogs.dog_id) = 2",
    "SELECT DISTINCT last_name, cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Indiana' AND treatments.treatment_type_code > 2",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs  WHERE dog_id IN (     SELECT dog_id FROM treatments      WHERE cost_of_treatment <= 1000 )",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
    "SELECT name FROM dogs WHERE owner_id IN (SELECT owner_id FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owner_id HAVING SUM(cost_of_treatment) <= 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.treatment_type_code = charges.charge_type WHERE charge_amount > 1000)",
    "SELECT name FROM dogs WHERE owner_id IN (SELECT owner_id FROM owners WHERE owner_id = dogs.owner_id AND (SELECT SUM(charge_amount) FROM charges WHERE charge_id = dogs.dog_id) <= 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'VA'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'VA'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT birth_year FROM singer WHERE birth_year IN ('48', '49')",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "select feature_type_name from ref_feature_types where feature_type_name like '%Air Conditioner%'",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'air condition')",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'Air Conditioning')",
    "SELECT property_name FROM properties WHERE (apt_feature_1 = 'more than one room' OR apt_feature_2 = 'more than one room' OR apt_feature_3 = 'more than one room') AND property_type_code = 'APT' UNION SELECT property_name FROM properties WHERE (hse_feature_1 = 'more than one room' OR hse_feature_2 = 'more than one room' OR hse_feature_3 = 'more than one room') AND property_type_code = 'HSE'",
    "SELECT property_name FROM properties WHERE (property_type_code = 'hse' OR property_type_code = 'apt') AND room_count > 1"
]