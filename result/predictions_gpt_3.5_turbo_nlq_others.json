[
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, COUNT(concert.concert_id) * stadium.highest AS concert_amount FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name",
    "SELECT COUNT(*) FROM singer_in_concert WHERE concert_id = [concert_id]",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, age, country FROM singer ORDER BY age DESC",
    "SELECT name, age, country FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT MIN(age), AVG(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT singer.country, COUNT(*) AS num_singers FROM singer GROUP BY singer.country",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT singer.name, singer.song_name  FROM singer  WHERE singer.age > (SELECT AVG(age) FROM singer)",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id)  FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium  WHERE stadium_id = (SELECT stadium_id FROM concert                      WHERE year > 2013                      GROUP BY stadium_id                      ORDER BY COUNT(*) DESC                      LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id HAVING year > 2013 ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country  FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c  WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id, singer.name, concert.theme",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.singer_id) AS number FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name, concert.theme",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT DISTINCT singer.name, singer.country  FROM singer  WHERE singer.song_name LIKE '%Hey%'",
    "SELECT DISTINCT singer.name, singer.country  FROM singer  WHERE singer.song_name LIKE '%Hey%'",
    "SELECT stadium.name, stadium.location  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year = 2014 AND stadium.stadium_id IN  (SELECT stadium_id FROM concert WHERE year = 2015)",
    "SELECT DISTINCT stadium.name, stadium.location  FROM concert  JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE concert.year = 2014 AND concert.stadium_id IN  (SELECT stadium_id FROM concert WHERE year = 2015)",
    "SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year IN (2014, 2015))",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT stadium.name, stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year IN (2014, 2015))",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' OR pets.pettype = 'cat'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('dog', 'cat')",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' OR pets.pettype = 'cat'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('dog', 'cat')",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' OR pets.pettype = 'cat'",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT MIN(weight) FROM pets WHERE pettype = 'dog'",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT petid) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20)",
    "SELECT COUNT(DISTINCT student.stuid) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20",
    "SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pettype = 'dog' AND sex = 'F'",
    "SELECT COUNT(pets.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'F' AND pets.pettype = 'dog'",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' OR pettype = 'dog')",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' OR pets.pettype = 'cat'",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat' JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog')",
    "SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid INNER JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'dog' INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid INNER JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'cat'",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat' JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog'",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'dog' JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'cat'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT s1.fname FROM student s1 JOIN has_pet hp1 ON s1.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid JOIN has_pet hp2 ON p1.petid = hp2.petid JOIN pets p2 ON hp2.petid = p2.petid JOIN student s2 ON hp2.stuid = s2.stuid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog' AND s1.fname = s2.fname",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT student.stuid FROM student WHERE NOT EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pets.pettype = 'cat'))",
    "SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL",
    "SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IS NULL OR pets.pettype <> 'cat'",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (     SELECT has_pet.stuid     FROM has_pet JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' )",
    "SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.stuid IS NULL OR has_pet.stuid NOT IN (     SELECT stuid     FROM has_pet )",
    "SELECT DISTINCT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))",
    "SELECT DISTINCT s.fname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = 'dog' AND s.stuid NOT IN (SELECT s.stuid FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = 'cat')",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) ORDER BY fname LIMIT 1000;",
    "SELECT DISTINCT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog' AND student.stuid NOT IN  (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT pet_age, petid, weight FROM pets WHERE pet_age > 1",
    "SELECT AVG(pets.pet_age) AS average_age, MAX(pets.pet_age) AS maximum_age, pets.pettype FROM pets GROUP BY pets.pettype",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT AVG(pet_age), MAX(pet_age) FROM pets WHERE pettype IS NOT NULL",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT age, fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT DISTINCT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    "SELECT pets.pet_age, student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    "SELECT petid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'smith'",
    "SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname LIKE 'Smith%'",
    "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith' ORDER BY has_pet.petid",
    "SELECT has_pet.stuid, pets.petid, COUNT(*) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid, pets.petid;",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 0;",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 0;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT DISTINCT s.fname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1;",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_age = 3 AND pettype = 'Cat')",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3 ORDER BY petid DESC LIMIT 1)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3 ORDER BY petid DESC LIMIT 1)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT COUNT(*) FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT model, COUNT(makeid) AS make_count FROM car_names GROUP BY model ORDER BY make_count DESC LIMIT 1;",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 UNION SELECT DISTINCT year FROM cars_data WHERE weight > 3000",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "I'm sorry, but the provided schema does not contain any table related to continents. Could you please provide the correct schema?",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "I'm sorry, but I cannot understand the question. Could you please rephrase it or provide more context?",
    "SELECT continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.continent",
    "SELECT countries.countryname, continents.contid, COUNT(*) as num_countries FROM countries JOIN continents ON countries.continent = continents.continent GROUP BY countries.countryname, continents.contid",
    "SELECT c.continent, COUNT(DISTINCT co.countryid) AS num_countries FROM continents c JOIN countries co ON c.contid = co.continent GROUP BY c.continent ORDER BY c.continent ASC;",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.continent = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(DISTINCT countryname) FROM countries",
    "SELECT COUNT(DISTINCT countryid) FROM countries",
    "The question is not related to the given schema. The schema is about car data, continents, countries, car makers, models, and car names. It does not contain any information about counties.",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(cars_data.id) AS num_cars_produced FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(cars_data.id) AS num_produced FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM model_list WHERE modelid IN (     SELECT makeid FROM cars_data     WHERE horsepower = (         SELECT MIN(horsepower) FROM cars_data     ) )",
    "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model_list.maker, model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model_list.maker, model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM car_names  WHERE weight < (SELECT AVG(weight) FROM cars_data)  LIMIT 1;",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT * FROM car_makers cm JOIN cars_data cd ON cm.id = cd.id WHERE cd.year = 1970 AND cm.maker = 'particular_maker';",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT make FROM car_names  JOIN car_makers ON car_names.makeid = car_makers.id  JOIN cars_data ON car_names.model = cars_data.id  WHERE year = 1970",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker, car_names.model, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  INNER JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT maker, production_time FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.model WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT year, maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  ORDER BY year ASC LIMIT 1",
    "SELECT model, maker, year FROM cars_data ORDER BY year LIMIT 1",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)",
    "SELECT MIN(year) FROM cars_data",
    "SELECT maker, MIN(year) FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id GROUP BY maker",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE year > 1980)",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT c.continent, cm.maker, COUNT(DISTINCT cm.id) AS count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent, cm.maker",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.country) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent HAVING COUNT(DISTINCT car_makers.country) = (number)",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makes_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent ORDER BY count DESC LIMIT 10",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(DISTINCT car_makers.maker) DESC LIMIT 1;",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1",
    "SELECT car_makers.fullname AS brand_name, COUNT(DISTINCT model_list.model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY model_count DESC, car_makers.fullname ASC",
    "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid AND car_names.model = 'hornet sportabout (sw)' AND car_names.maker = 'amc'",
    "SELECT COUNT(*) FROM car_makers WHERE country = 'France' AND maker LIKE '%care%'",
    "SELECT COUNT(*) FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'France' AND cm.maker LIKE '%care%'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France' AND car_makers.maker = 'care'",
    "SELECT SUM(cars_data.id) FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'USA'",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'USA'",
    "SELECT car_makers.maker, SUM(cars_data.id) AS num_cars_produced FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'USA' GROUP BY car_makers.maker",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'USA' JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN car_makers cm ON cn.makeid = cm.id JOIN countries c ON cm.country = c.countryid JOIN continents co ON c.continent = co.contid WHERE co.continent = 'USA'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname, countries.countryid",
    "SELECT DISTINCT car_makers.id, car_makers.maker FROM car_makers JOIN countries ON car_makers.country = countries.countryid",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT countries.countryid, countries.countryname, car_makers.id, car_makers.maker, car_makers.fullname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryid IN (     SELECT DISTINCT car_makers.country     FROM car_makers )",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname ASC",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150.",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT model, AVG(weight) AS avg_weight FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model",
    "SELECT year, AVG(weight) FROM cars_data GROUP BY year",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT DISTINCT countryname FROM countries  WHERE continent = 'Europe' AND  countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3)",
    "SELECT MAX(horsepower), make FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE cylinders = 3  GROUP BY make",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 3",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.make = 'Volvo'",
    "SELECT AVG(edispl) FROM cars_data WHERE id IN (SELECT id FROM car_names WHERE model = 'volvo')",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'Volvo' GROUP BY model HAVING AVG(edispl)",
    "SELECT model, AVG(edispl) FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'Volvo'  GROUP BY model",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT model FROM model_list WHERE maker = 'Volvo' ORDER BY edispl LIMIT 1",
    "SELECT AVG(edispl) FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.make = 'volvo'",
    "SELECT AVG(edispl) FROM cars_data WHERE makeid IN (SELECT id FROM car_makers WHERE maker = 'Volvo')",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT model, COUNT(DISTINCT maker) AS distinct_makers FROM model_list GROUP BY model ORDER BY distinct_makers DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id WHERE cm.maker = 'American Motor Company'",
    "SELECT COUNT(DISTINCT model_list.modelid)  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  WHERE car_makers.maker = 'American Motor Company'",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id WHERE cm.country = 'United States' AND cm.maker = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3)",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 ORDER BY year",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT accelerate FROM cars_data WHERE model = 'Volvo' AND cylinders = (SELECT MIN(cylinders) FROM cars_data WHERE model = 'Volvo')",
    "SELECT * FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT makeid, model FROM car_names  WHERE cylinders < 4 AND horsepower < (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders > 8 OR year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE weight < 3500 AND car_makers.maker != 'Ford Motor Company'",
    "SELECT model FROM model_list  WHERE maker <> 'Ford Motor Company' AND weight < 3500",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.maker WHERE weight < 3500 AND car_makers.country != 'USA'",
    "SELECT model_list.maker, car_names.model  FROM model_list  JOIN car_names ON model_list.modelid = car_names.modelid  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE cars_data.weight < 3500 AND car_makers.fullname NOT LIKE '%Ford%'",
    "SELECT model  FROM car_names  WHERE makeid NOT IN (     SELECT id      FROM car_makers      WHERE maker = 'Ford Motor Company' ) AND weight < 3500",
    "SELECT DISTINCT model FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.id JOIN model_list ml ON cn.model = ml.model JOIN car_makers cm ON ml.maker = cm.maker JOIN countries c ON cm.country = c.countryid WHERE weight < 3500 AND c.countryname != 'Ford Motor Company'",
    "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryid WHERE weight < 3500 AND countries.maker != 'Ford Motor Company'",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers) LIMIT 1",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.maker = 'Fiat' OR car_names.model = 'Fiat' GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE f.destairport = 'Aberdeen' AND a.airline = 'United Airlines'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT COUNT(DISTINCT airportcode) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT flightno FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO' INTERSECT SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND flights.destairport = 'APG'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE cvo_airport.city = 'CVO' AND apg_airport.city = 'APG'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode  JOIN airlines ON flights.airline = airlines.airline  WHERE apg_airport.airportname = 'APG' AND cvo_airport.airportname = 'CVO'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportname, city, airportcode FROM airports WHERE city = 'Anthony'",
    "SELECT airportname, city, airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights WHERE airline = (SELECT uid FROM airlines WHERE abbreviation = 'Anthony')) OR airportcode IN (SELECT destairport FROM flights WHERE airline = (SELECT uid FROM airlines WHERE abbreviation = 'Anthony'))",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights WHERE destairport = 'Anthony' UNION SELECT destairport FROM flights WHERE sourceairport = 'Anthony')",
    "SELECT airportname, airportcode FROM airports WHERE city = 'Anthony'",
    "SELECT airportname, airportcode FROM airports WHERE city = 'Anthony'",
    "SELECT city, airportcode, airportname FROM airports WHERE airportname = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT abbreviation FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airports.airportname, airports.city, airports.country FROM airports WHERE airports.airportname = 'Alton'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportcode = 'Alton';",
    "SELECT city, country FROM airports WHERE airportname = 'Alton'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen' ORDER BY airportname",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportcode FROM airports WHERE airportname = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'ATO')",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport != 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley' AND destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley')",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE a.airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid WHERE f.sourceairport = 'ASY' AND a.airline = 'United airlines'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode JOIN airlines al ON f.airline = al.uid WHERE a.airportname = 'ASY' AND al.airline = 'United Airlines'",
    "SELECT flights.airline, flights.flightno, COUNT(*) AS num_united_flights FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE flights.sourceairport = 'ASY' AND airlines.airline = 'United Airlines' GROUP BY flights.airline, flights.flightno",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports s ON f.sourceairport = s.airportcode WHERE a.airline = 'United Airlines' AND s.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports s ON f.sourceairport = s.airportcode WHERE a.airline = 'United Airlines' AND s.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports s ON f.sourceairport = s.airportcode WHERE a.airline = 'United Airlines' AND s.airportname = 'AHD Airport'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportname = 'Aberdeen Airport'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT sourceairport, COUNT(*) AS num_arrivals FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY sourceairport ORDER BY num_arrivals DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_arrivals FROM flights GROUP BY sourceairport ORDER BY num_arrivals DESC LIMIT 1",
    "SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS city, destairport AS frequent_destination_airport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport, destairport ORDER BY frequency DESC LIMIT 1;",
    "SELECT airports.city  FROM airports  JOIN flights ON airports.airportcode = flights.sourceairport  GROUP BY airports.city  ORDER BY COUNT(DISTINCT flights.destairport) DESC  LIMIT 1;",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport AS city, COUNT(*) AS frequency  FROM flights  GROUP BY sourceairport  ORDER BY frequency DESC  LIMIT 1;   SELECT destairport AS city, COUNT(*) AS frequency  FROM flights  GROUP BY destairport  ORDER BY frequency DESC  LIMIT 1;   The city with most frequent origin airport is the one returned by the first query, and the city with most frequent destination airport is the one returned by the second query.",
    "SELECT airports.city  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  GROUP BY airports.city  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT city FROM airports WHERE airportcode = (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT destairport, COUNT(*) AS num_flights FROM flights GROUP BY destairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT abbreviation, country FROM airlines  WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline) as counts))",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.airportcode = 'AHD'",
    "SELECT airline FROM flights WHERE sourceairport = 'AHD' AND destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.airportname LIKE '%AHD%'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.airportcode = 'AHD' OR flights.sourceairport = 'AHD'",
    "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO'  INTERSECT  SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'CVO' AND flights.destairport = 'APG'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS a1 ON flights.sourceairport = a1.airportcode  JOIN airports AS a2 ON flights.destairport = a2.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE a1.airportcode = 'APG' AND a2.airportcode = 'CVO'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport IN ('APG', 'CVO') AND flights.destairport IN ('APG', 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG' AND EXISTS (     SELECT 1     FROM flights AS f2     WHERE f2.airline = flights.airline     AND f2.sourceairport = 'CVO' )",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND flights.destairport != 'APG'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND airlines.airline NOT IN (     SELECT DISTINCT airlines.airline     FROM flights     JOIN airlines ON flights.airline = airlines.uid     WHERE flights.sourceairport = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS source_airport ON flights.sourceairport = source_airport.airportcode JOIN airports AS dest_airport ON flights.destairport = dest_airport.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE source_airport.airportname = 'CVO' AND dest_airport.airportname != 'APG'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.destairport = apg_airport.airportcode AND apg_airport.airportcode = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportcode = 'CVO' JOIN airlines ON flights.airline = airlines.uid WHERE apg_airport.airportcode IS NULL",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND airlines.airline NOT IN (     SELECT DISTINCT airlines.airline      FROM airlines      JOIN flights ON airlines.uid = flights.airline      WHERE flights.sourceairport = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.city = 'CVO' AND airports.airportcode NOT IN (     SELECT sourceairport     FROM flights     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.countryabbrev = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND flights.airline NOT IN (     SELECT DISTINCT flights.airline     FROM flights     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.countryabbrev = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport != 'APG' AND flights.sourceairport IS NOT NULL AND flights.destairport = 'CVO' AND flights.destairport IS NOT NULL AND airlines.airline NOT IN (     SELECT DISTINCT airlines.airline     FROM airlines     INNER JOIN flights ON airlines.uid = flights.airline     WHERE flights.sourceairport = 'APG' AND flights.sourceairport IS NOT NULL     AND flights.destairport IS NOT NULL )",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode  JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode  JOIN airlines ON flights.airline = airlines.airline  WHERE cvo_airport.city = 'CVO' AND apg_airport.city != 'APG'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airlines ON flights.airline = airlines.uid WHERE flights.airline NOT IN (     SELECT DISTINCT flights.airline     FROM flights     JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG' )",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) < 200",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT flights.airline, flights.flightno FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno, airline FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG' UNION SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG' OR destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG' OR destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG Airport'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeenshire'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1",
    "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name, age FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT employee_id, city FROM employee",
    "SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city",
    "SELECT city, GROUP_CONCAT(employee_id) FROM employee GROUP BY city",
    "SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city",
    "SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city",
    "SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city",
    "SELECT city, COUNT(*) FROM employee GROUP BY city",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(shop_id) FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(shop_id) AS number_of_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT shop.name, MIN(shop.number_products) AS min_products_sold, MAX(shop.number_products) AS max_products_sold FROM shop GROUP BY shop.name;",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT shop.name, MIN(shop.number_products) AS min_products_sold, MAX(shop.number_products) AS max_products_sold FROM shop GROUP BY shop.shop_id",
    "For how many products does each shop have the minimum number of products?  SELECT COUNT(*) FROM shop s1 WHERE s1.number_products = (SELECT MIN(s2.number_products) FROM shop s2 WHERE s1.shop_id = s2.shop_id)  For how many products does each shop have the maximum number of products?  SELECT COUNT(*) FROM shop s1 WHERE s1.number_products = (SELECT MAX(s2.number_products) FROM shop s2 WHERE s1.shop_id = s2.shop_id)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT shop.name, MIN(shop.number_products), MAX(shop.number_products) FROM shop GROUP BY shop.name",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN (SELECT employee_id, COUNT(*) as num_awards FROM evaluation GROUP BY employee_id ORDER BY num_awards DESC LIMIT 1) as max_awards ON employee.employee_id = max_awards.employee_id",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
    "SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1);",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS number_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT name, COUNT(employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT year_awarded, AVG(bonus) FROM evaluation GROUP BY year_awarded",
    "SELECT evaluation.*, SUM(evaluation.bonus) as total_bonus FROM evaluation GROUP BY evaluation.employee_id, evaluation.year_awarded, evaluation.bonus",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT DISTINCT district FROM shop WHERE shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000) AND shop_id IN (SELECT shop_id FROM shop WHERE number_products < 3000)",
    "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT district FROM shop WHERE number_products > 10000 AND district IN (SELECT district FROM shop WHERE number_products < 3000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT district FROM shop WHERE number_products > 10000 UNION SELECT district FROM shop WHERE number_products < 3000",
    "SELECT DISTINCT s.district FROM shop s WHERE s.number_products < 3000 AND s.district IN (     SELECT s2.district     FROM shop s2     WHERE s2.number_products > 10000 )",
    "SELECT DISTINCT district FROM shop WHERE shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000) AND shop_id IN (SELECT shop_id FROM shop WHERE number_products < 3000)",
    "SELECT DISTINCT district FROM shop WHERE shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000) AND district IN (SELECT district FROM shop WHERE shop_id IN (SELECT shop_id FROM shop WHERE number_products < 3000))",
    "SELECT DISTINCT s1.district FROM shop s1, shop s2 WHERE s1.district = s2.district AND s1.number_products < 3000 AND s2.number_products > 10000",
    "SELECT DISTINCT location FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(*) FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(DISTINCT shop_id) FROM shop",
    "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')",
    "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Brazil%') AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Ireland%')",
    "SELECT document_id  FROM paragraphs  WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_id IS NULL",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  WHERE ref_template_types.template_type_code NOT IN      (SELECT templates.template_type_code       FROM templates       INNER JOIN documents ON templates.template_id = documents.template_id)",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_name, document_id, document_description FROM documents",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id  FROM documents  WHERE documents.document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT templates.template_id, documents.document_id, documents.document_description  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(DISTINCT template_id) FROM templates WHERE template_id IN (SELECT template_id FROM documents)",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(DISTINCT template_id) FROM templates",
    "SELECT COUNT(DISTINCT template_id) FROM templates",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT templates.template_id, documents.document_number FROM templates JOIN documents ON templates.template_id = documents.template_id;",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT template_id, COUNT(*) AS usage_count FROM documents GROUP BY template_id",
    "SELECT templates.template_id, COUNT(documents.document_id) AS usage_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_id, template_type_code FROM templates WHERE template_id = (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT template_id, template_type_code FROM templates WHERE template_id = (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM templates WHERE template_id IN (SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1)",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT template_type_code, template_id, version_number FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates",
    "SELECT template_type_code, template_id, version_number FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT templates.template_id, templates.version_number, templates.template_type_code, ref_template_types.template_type_code, ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "SELECT template_type_code FROM ref_template_types",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT template_id FROM templates WHERE template_type_code LIKE '%PP%' OR template_type_code LIKE '%PPT%'",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT template_type_code, version_number FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT template_type_code, template_type_description, COUNT(*) AS number_of_templates  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY template_type_code, template_type_description",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_of_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code = (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code = (SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code  FROM templates  GROUP BY template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code = (SELECT template_type_code FROM templates  GROUP BY template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN (     SELECT template_type_code FROM templates      GROUP BY template_type_code      HAVING COUNT(*) < 3 )",
    "SELECT DISTINCT template_type_code  FROM templates  WHERE template_type_code IN (     SELECT template_type_code      FROM templates      GROUP BY template_type_code      HAVING COUNT(template_id) < 3 )",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT template_type_code, MIN(version_number) FROM templates GROUP BY template_type_code",
    "SELECT version_number FROM templates ORDER BY template_type_code ASC LIMIT 1",
    "SELECT MIN(version_number), template_type_code FROM templates",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code",
    "SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE document_name = 'Data Base'",
    "SELECT template_type_code FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'data base')",
    "SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'Data base' AND document_description = ' ')",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT document_name FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code LIKE 'BK%'",
    "SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code, COUNT(*) AS count FROM templates GROUP BY template_type_code ORDER BY count DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_description, ref_template_types.template_type_code, COUNT(*) AS num_documents FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_description, ref_template_types.template_type_code ORDER BY num_documents DESC LIMIT 1;",
    "SELECT template_type_code, COUNT(*) AS count FROM templates GROUP BY template_type_code ORDER BY count DESC LIMIT 1;   This query will return the template type code with the highest count in the templates table, which corresponds to the most common template type.",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code = (     SELECT template_type_code      FROM templates      GROUP BY template_type_code      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates)",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       WHERE template_id IN           (SELECT template_id            FROM documents))",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       WHERE template_id IN           (SELECT template_id            FROM documents))",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       WHERE template_id IN           (SELECT template_id            FROM documents))",
    "SELECT template_type_code FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code LIKE 'AD%'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book' AND template_type_code IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'book'))",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code",
    "SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;",
    "SELECT DISTINCT template_type_description FROM ref_template_types",
    "SELECT DISTINCT template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'presentation')",
    "SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_id FROM templates WHERE template_type_code = 'presentations'",
    "SELECT template_id FROM templates",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(DISTINCT document_id) FROM documents WHERE document_name = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_name = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'summer show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT paragraph_text, other_details FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_description = 'Korea'",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE p.paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'this document') AND paragraph_text LIKE '%customer reviews%'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer Reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'customer reviews')",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id, document_name, COUNT(paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT documents.document_id, documents.document_name FROM documents JOIN (     SELECT document_id, COUNT(*) AS num_paragraphs     FROM paragraphs     GROUP BY document_id     ORDER BY num_paragraphs DESC     LIMIT 1 ) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id",
    "SELECT documents.document_id, documents.document_name FROM documents JOIN (     SELECT document_id, COUNT(*) AS num_paragraphs     FROM paragraphs     GROUP BY document_id     ORDER BY num_paragraphs DESC     LIMIT 1 ) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(*) <= ALL (SELECT COUNT(*) FROM paragraphs GROUP BY document_id)",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) BETWEEN 1 AND 2",
    "SELECT document_id FROM documents  WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs AS p1 ON documents.document_id = p1.document_id AND p1.paragraph_text LIKE '%Brazil%' JOIN paragraphs AS p2 ON documents.document_id = p2.document_id AND p2.paragraph_text LIKE '%Ireland%'",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.name HAVING COUNT(*) >= 2",
    "SELECT hometown, COUNT(*) as num_teachers FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "I'm sorry, but I'm not sure I understand the question. Could you please rephrase it or provide more information about what you are looking for?",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(*) FROM teacher",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC, name ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District' AND teacher_id IN (SELECT teacher_id FROM course_teach)",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age >= 32 AND age <= 33",
    "SELECT name FROM teacher WHERE age >= 32 AND age <= 33",
    "SELECT name FROM teacher WHERE age BETWEEN 32 AND 33 LIMIT 2",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name, hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT teacher.name, COUNT(DISTINCT teacher.hometown) AS num_hometowns FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.teacher_id",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 10;",
    "SELECT hometown, COUNT(*) AS frequency FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;",
    "SELECT DISTINCT t1.hometown  FROM teacher t1  JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id",
    "SELECT DISTINCT teacher.hometown FROM teacher LIMIT 2;",
    "SELECT DISTINCT teacher.hometown FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.hometown HAVING COUNT(*) >= 2",
    "SELECT DISTINCT t1.hometown  FROM teacher t1  JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC, course.course ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC, course.course ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC, course.course ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_teach WHERE course = 'math')",
    "SELECT teacher.name FROM course_teach  JOIN course_arrange ON course_teach.course_id = course_arrange.course_id  JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id  WHERE course_teach.course = 'math'",
    "SELECT name FROM teacher WHERE teacher_id = (SELECT teacher_id FROM course_arrange WHERE course_id = (SELECT course_id FROM course WHERE course = 'math'))",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010)",
    "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE visitor_id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010)",
    "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010)",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010))",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership < 4",
    "SELECT museum.name, visitor.id FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id WHERE museum.num_of_staff = (SELECT MAX(num_of_staff) FROM museum)",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'plaza museum'",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT num_of_staff FROM museum WHERE name = 'Plaza Museum' AND open_year = (SELECT MIN(open_year) FROM museum WHERE name = 'Plaza Museum')",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM museum WHERE open_year > 2010 AND num_of_staff > (SELECT MIN(num_of_staff) FROM museum)",
    "SELECT name FROM museum WHERE open_year > 2010 AND num_of_staff > (SELECT MIN(num_of_staff) FROM museum)",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM museum WHERE open_year > 2010 AND num_of_staff > (SELECT MIN(num_of_staff) FROM museum)",
    "SELECT visitor.id, visitor.name, visitor.age  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  WHERE visit.museum_id IN      (SELECT museum_id       FROM visit       GROUP BY museum_id       HAVING COUNT(DISTINCT visitor_id) > 1)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.museum_id IN (     SELECT visit.museum_id     FROM visit     GROUP BY visit.museum_id     HAVING COUNT(DISTINCT visit.visitor_id) > 1 )",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket > 1 GROUP BY visitor.id, visitor.name, visitor.age",
    "SELECT museum.name, museum.museum_id FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.name, museum.museum_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT museum.name, museum.museum_id FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.name, museum.museum_id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT museum.name, museum.museum_id AS id FROM museum_visit JOIN museum ON museum_visit.museum_id = museum.museum_id GROUP BY museum.name, museum.museum_id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT AVG(num_of_ticket) AS avg_tickets, MAX(num_of_ticket) AS max_tickets FROM visit",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "To answer the first question, we can use the following SQL query:  SELECT AVG(num_of_ticket) FROM visit  To answer the second question, we can use the following SQL query:  SELECT MAX(num_of_ticket) FROM visit",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT visitor.name FROM visitor JOIN visit v1 ON visitor.id = v1.visitor_id JOIN visit v2 ON visitor.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT DISTINCT v.name  FROM visitor v  JOIN visit v1 ON v.id = v1.visitor_id  JOIN visit v2 ON v.id = v2.visitor_id  JOIN museum m1 ON v1.museum_id = m1.museum_id  JOIN museum m2 ON v2.museum_id = m2.museum_id  WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT DISTINCT visitor.name FROM visitor JOIN visit v1 ON visitor.id = v1.visitor_id JOIN visit v2 ON visitor.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT DISTINCT visitor.name FROM museum_visit JOIN visit ON museum_visit.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum_visit.open_year < 2009 OR museum_visit.open_year > 2011",
    "SELECT DISTINCT v.name FROM visitor v JOIN visit v1 ON v.id = v1.visitor_id JOIN visit v2 ON v.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT first_name, last_name, birth_date FROM players WHERE country_code = 'USA'",
    "select count(*) from players",
    "SELECT COUNT(*) FROM players",
    "select count(*) from players",
    "I'm sorry, but your question is too vague. Can you please provide more details about what you want to see in the output?",
    "SELECT COUNT(*) FROM matches",
    "I'm sorry, but the question you provided is incomplete. Please provide a complete question.",
    "select count(*) from matches",
    "SELECT COUNT(*) FROM matches",
    "SELECT COUNT(*) FROM matches",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age) FROM matches UNION SELECT AVG(winner_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age), match_num FROM matches GROUP BY match_num",
    "SELECT AVG(winner_age) FROM matches WHERE winner_id IN (SELECT player_id FROM rankings WHERE ranking = 1) AND loser_id IN (SELECT player_id FROM rankings WHERE ranking > 1) OR winner_id IN (SELECT player_id FROM rankings WHERE ranking > 1) AND loser_id IN (SELECT player_id FROM rankings WHERE ranking = 1)",
    "SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches",
    "select avg(winner_age), avg(loser_age) from matches",
    "SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(winner_age - loser_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "select avg(winner_rank) from matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "select avg(winner_rank) from matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT matches.match_num, MAX(matches.loser_rank) AS highest_loser_rank FROM matches GROUP BY matches.match_num",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches WHERE winner_rank < loser_rank",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players WHERE player_id = [player_id]",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "I'm sorry, but I cannot find any column named \"loser names\" in the given schema. Could you please provide me with more information or clarify your question?",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "select count(distinct loser_name) from matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016)",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id  JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013 AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id  JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013 AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
    "SELECT COUNT(*) FROM matches WHERE year BETWEEN 2013 AND 2016",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
    "SELECT COUNT(*) FROM matches WHERE year BETWEEN 2013 AND 2016",
    "SELECT DISTINCT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'Australian Open' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'WTA Championships'",
    "SELECT DISTINCT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code, players.country_code, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND EXISTS (     SELECT *     FROM matches AS m2     WHERE m2.tourney_name = 'Australian Open' AND m2.winner_id = matches.winner_id )",
    "SELECT country_code, first_name FROM players WHERE player_id IN (     SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'     INTERSECT     SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' )",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches AS m2 ON players.player_id = m2.loser_id WHERE matches.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'",
    "SELECT DISTINCT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT players.first_name, players.country_code FROM players JOIN matches m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players ORDER BY birth_date ASC",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC, players.first_name ASC LIMIT 10",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)",
    "SELECT country_code, first_name FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1",
    "select year from matches group by year order by count(*) desc limit 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "select year, count(*) as num_matches from matches group by year order by num_matches desc limit 1",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT players.first_name, players.last_name, rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT winner_name, MAX(ranking_points) as rank_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE ranking = 1 GROUP BY winner_name ORDER BY rank_points DESC LIMIT 1;",
    "SELECT winner_name, MAX(matches_won) as matches_won, MAX(rankings.ranking_points) as ranking_points FROM (     SELECT winner_id, COUNT(*) as matches_won     FROM matches     GROUP BY winner_id ) as matches_won_table JOIN players ON players.player_id = matches_won_table.winner_id JOIN rankings ON rankings.player_id = matches_won_table.winner_id GROUP BY winner_id ORDER BY matches_won DESC LIMIT 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT AVG(rankings.ranking), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT AVG(rankings.ranking), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY average_ranking DESC",
    "SELECT first_name, AVG(ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT LEFT(first_name, 1), SUM(ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY LEFT(first_name, 1)",
    "SELECT first_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id",
    "SELECT first_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking ASC",
    "SELECT first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT first_name, last_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY first_name ASC",
    "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
    "SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) as total_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 10;",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date",
    "SELECT SUM(tours) FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT COUNT(*) AS total_tours, tourney_date, ranking_date, tourney_name, ranking FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY tourney_date, ranking_date, tourney_name, ranking",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "select year, count(*) as num_matches from matches group by year",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT COUNT(*) FROM matches WHERE year IN (following years)",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
    "SELECT players.first_name, players.last_name  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  AND players.hand = 'L'  AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.loser_id AND m2.tourney_name = 'WTA Championships' WHERE p.hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id AND p.hand = 'L' WHERE m.tourney_level = 'WTA' AND m.tourney_name LIKE '%Championships%' AND m.loser_id IS NOT NULL AND m.winner_id IS NOT NULL",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT COUNT(*) FROM players WHERE hand = 'L' AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')",
    "SELECT players.first_name, players.birth_date, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    "I'm sorry, but I need more information to understand the question. What do you mean by \"hand type\"? Is it the player's dominant hand (left or right)?",
    "SELECT COUNT(*) FROM players",
    "I'm sorry, but I need more information to answer your question. What do you mean by \"hand type\"? Is it the player's dominant hand (left or right)? Or is it something else?",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT note FROM death WHERE note LIKE 'East%'",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'captured'",
    "SELECT COUNT(*) FROM ship WHERE lost_in_battle = true",
    "SELECT COUNT(DISTINCT ship.id) FROM ship WHERE ship.disposition_of_ship = 'captured'",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'captured'",
    "SELECT COUNT(*) FROM ship WHERE lost_in_battle = 'captured' AND location = 'under review period'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle",
    "SELECT name, date, result FROM battle",
    "SELECT name, date, result FROM battle",
    "SELECT MAX(killed + injured) AS max_deaths, MIN(killed + injured) AS min_deaths FROM death",
    "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death GROUP BY caused_by_ship_id",
    "To calculate the maximum and minimum death amounts caused every time, you can use the following SQL query:  SELECT MAX(killed + injured) AS max_death_amount, MIN(killed + injured) AS min_death_amount FROM death",
    "SELECT COUNT(*) FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE lost_in_battle = 'maximum' OR lost_in_battle = 'minimum' GROUP BY id HAVING COUNT(*) = 2) AND killed > 0",
    "SELECT AVG(injured) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT SUM(death.killed), SUM(death.injured) FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "SELECT death.caused_by_ship_id, SUM(death.killed) AS total_killed, SUM(death.injured) AS total_injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' GROUP BY death.caused_by_ship_id",
    "SELECT SUM(killed), SUM(injured) FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'",
    "SELECT name, result FROM battle WHERE bulgarian_commander = 'not Boril'",
    "SELECT DISTINCT battle.id, battle.name, ship.id FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' AND battle.id NOT IN (     SELECT DISTINCT lost_in_battle     FROM ship     WHERE ship_type != 'Brig' )",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'",
    "SELECT DISTINCT battle.id, battle.name FROM battle  JOIN battle_death ON battle.id = battle_death.id  JOIN ship ON battle_death.caused_by_ship_id = ship.id  WHERE ship.ship_type = 'brig' AND ship.lost_in_battle = 1",
    "SELECT DISTINCT battle.id, battle.name FROM battle  JOIN battle_death ON battle.id = battle_death.battle_id  JOIN ship ON battle_death.caused_by_ship_id = ship.id  WHERE ship.ship_type = 'Brig' AND ship.lost_in_battle = 1",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN battle_death ON battle.id = battle_death.battle_id  INNER JOIN ship ON battle_death.caused_by_ship_id = ship.id  WHERE ship.ship_type = 'Brig' AND ship.lost_in_battle = 1",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) + SUM(injured) > 10)",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
    "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1",
    "SELECT ship.name, ship.id FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM(death.injured) DESC LIMIT 1;",
    "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT result, COUNT(*) FROM battle GROUP BY result",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NULL",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT * FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')) GROUP BY semester_id",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(DISTINCT degree_program_id) > 1) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'))",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'))",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, student_enrolment.degree_program_id, student_enrolment_courses.course_id, semesters.semester_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE COUNT(student_enrolment_courses.course_id) = 2;",
    "SELECT line_1, line_2 FROM addresses",
    "I'm sorry, but the schema you provided does not have a table that directly stores the complete address of a student. Can you please provide the schema again or specify which table(s) contain the address information?",
    "SELECT line_2, line_3, line_1 FROM addresses ORDER BY address_id DESC LIMIT 1 OFFSET 1",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses LIMIT 1 OFFSET 0;   SELECT line_1, line_2 FROM addresses LIMIT 1 OFFSET 1;",
    "SELECT line_1, line_2 FROM addresses LIMIT 2",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT SUBSTRING(line_1, 1, CHARINDEX(CHAR(13), line_1)-1) AS first_line, SUBSTRING(line_2, 1, CHARINDEX(CHAR(13), line_2)-1) AS second_line FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT * FROM courses WHERE course_name = 'math'",
    "I'm sorry, but the serialized schema you provided is incomplete. It seems to be missing some important tables such as \"math_class\" or \"class_schedule\". Can you please provide the complete schema so that I can help you with your question?",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT * FROM courses WHERE course_name LIKE '%math%' OR course_description LIKE '%math%'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%maths%'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT EXISTS(SELECT * FROM addresses WHERE city = 'Port Chelsea' AND zip_postcode IS NOT NULL)",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT degree_programs.department_id FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.department_id ORDER BY COUNT(student_enrolment.degree_program_id) DESC LIMIT 1)",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_programs.department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "I'm sorry, but I cannot see any table that contains the information about the numbers offered for each degree. Can you please provide me with more information about the schema or the specific table that contains this information?",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs dp JOIN departments d ON dp.department_id = d.department_id WHERE dp.department_id = 'engineering' AND dp.degree_summary_name LIKE '%engineering%'",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering')",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections WHERE section_name IS NOT NULL AND section_description IS NOT NULL",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_name, semesters.semester_id, COUNT(DISTINCT student_enrolment.student_id) AS num_students_registered FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY num_students_registered DESC LIMIT 1;",
    "SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT semester_id, COUNT(*) AS num_registrations FROM student_enrolment GROUP BY semester_id ORDER BY num_registrations DESC LIMIT 1",
    "SELECT semester_id, semester_name FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT s.semester_name, s.semester_id, se.student_id, COUNT(*) AS num_students_registered FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name, s.semester_id, se.student_id HAVING COUNT(*) = (     SELECT MAX(num_students_registered)     FROM (         SELECT s.semester_name, s.semester_id, se.student_id, COUNT(*) AS num_students_registered         FROM semesters s         JOIN student_enrolment se ON s.semester_id = se.semester_id         GROUP BY s.semester_name, s.semester_id, se.student_id     ) AS temp     WHERE temp.semester_id = s.semester_id ) ORDER BY s.semester_id, num_students_registered DESC, se.student_id ASC",
    "SELECT semester_name, group_concat(students.first_name, ' ', students.last_name) as names, count(*) as num_students FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN students ON student_enrolment.student_id = students.student_id GROUP BY semester_name HAVING num_students = (SELECT count(*) as max_students                       FROM student_enrolment                       JOIN semesters ON student_enrolment.semester_id = semesters.semester_id                       GROUP BY semester_name                       ORDER BY max_students DESC                       LIMIT 1)",
    "SELECT * FROM departments WHERE department_name LIKE '%the computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE 'the computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'bachelor'",
    "SELECT first_name, middle_name, last_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  JOIN courses ON student_enrolment_courses.course_id = courses.course_id  WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name LIKE '%bachelor%')",
    "SELECT CONCAT(first_name, ' ', middle_name, ' ', last_name) AS full_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE 'bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelor'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1)",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT courses.course_id, courses.course_name, COUNT(student_enrolment.student_id) AS num_students_enrolled FROM courses JOIN sections ON courses.course_id = sections.course_id JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY courses.course_id, courses.course_name ORDER BY num_students_enrolled DESC LIMIT 1",
    "SELECT degree_program_id, degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment GROUP BY degree_program_id, degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1;",
    "SELECT student_id, first_name, middle_name, last_name, COUNT(*) AS num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) as num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT se.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM student_enrolment se JOIN students s ON se.student_id = s.student_id GROUP BY se.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, se.student_enrolment_id, COUNT(*) as num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, se.degree_program_id HAVING COUNT(*) = (SELECT MAX(num_enrollments) FROM (SELECT COUNT(*) as num_enrollments FROM student_enrolment GROUP BY student_id, degree_program_id) as temp)",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, se.student_enrolment_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id = (     SELECT degree_program_id     FROM student_enrolment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) ORDER BY s.student_id ASC",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT courses.course_name, students.first_name, students.middle_name, students.last_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN students ON student_enrolment.student_id = students.student_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE state_province_county = 'NorthCarolina')))",
    "SELECT last_name FROM students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     HAVING COUNT(DISTINCT course_id) >= 2 )",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT student_id FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON t.transcript_id = sec.transcript_id ORDER BY t.transcript_date ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT s.first_name FROM students s JOIN addresses a1 ON s.current_address_id = a1.address_id JOIN addresses a2 ON s.permanent_address_id = a2.address_id WHERE a1.line_1 <> a2.line_1 OR a1.line_2 <> a2.line_2 OR a1.line_3 <> a2.line_3 OR a1.city <> a2.city OR a1.zip_postcode <> a2.zip_postcode OR a1.state_province_county <> a2.state_province_county OR a1.country <> a2.country OR a1.other_address_details <> a2.other_address_details",
    "SELECT current_address_id, line_1, line_2, line_3 FROM students WHERE current_address_id IN (     SELECT current_address_id FROM students     GROUP BY current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT a.address_id, a.line_1, a.line_2 FROM addresses a JOIN students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(DISTINCT s.student_id) DESC LIMIT 1;",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_print_frequency) FROM (     SELECT COUNT(*) AS transcript_print_frequency     FROM transcripts     GROUP BY transcript_id ) AS transcript_frequencies",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date FROM transcripts;  SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_date ASC LIMIT 1;",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT transcript_date, * FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT MIN(transcript_date) FROM transcripts;   SELECT * FROM transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM transcripts);",
    "SELECT MIN(transcript_date), other_details FROM transcripts",
    "SELECT MIN(transcript_date) FROM transcripts;   SELECT * FROM transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM transcripts);",
    "SELECT MIN(transcript_date) FROM transcripts;   SELECT COUNT(*) FROM transcripts;   SELECT COUNT(*) FROM transcript_contents;   SELECT COUNT(DISTINCT student_id) FROM student_enrolment;   SELECT COUNT(DISTINCT course_id) FROM courses;   SELECT COUNT(DISTINCT department_id) FROM departments;   SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;   SELECT COUNT(DISTINCT section_id) FROM sections;   SELECT COUNT(DISTINCT semester_id) FROM semesters;   SELECT COUNT(DISTINCT student_id) FROM students;",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT COUNT(DISTINCT transcript_id), student_course_id FROM transcript_contents GROUP BY student_course_id HAVING COUNT(DISTINCT transcript_id) = (SELECT MAX(counts) FROM (SELECT COUNT(DISTINCT transcript_id) AS counts FROM transcript_contents GROUP BY student_course_id) AS temp)",
    "SELECT COUNT(student_course_id), student_course_id FROM student_enrolment_courses GROUP BY student_course_id HAVING COUNT(student_course_id) >= 2",
    "SELECT COUNT(*) AS max_enrollment_result_number FROM student_enrolment_courses GROUP BY student_enrolment_id ORDER BY max_enrollment_result_number DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT transcript_id), student_course_id FROM transcript_contents GROUP BY student_course_id HAVING COUNT(DISTINCT transcript_id) <= 1",
    "SELECT MAX(course_count), student_course_id FROM (     SELECT COUNT(*) AS course_count, student_course_id     FROM student_enrolment_courses     GROUP BY course_id ) AS course_counts;",
    "SELECT MAX(course_count), student_course_id FROM (     SELECT COUNT(*) AS course_count, student_course_id     FROM student_enrolment_courses     GROUP BY course_id, student_enrolment_id ) AS course_counts;",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date, COUNT(*) as num_results FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY num_results ASC LIMIT 1",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts ORDER BY (SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents.transcript_id = transcripts.transcript_id) ASC LIMIT 1",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "I'm sorry, but the serialized schema you provided is incomplete. It seems to be missing some important information about the relationships between the tables. Can you please provide me with the complete schema?",
    "SELECT semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor'))",
    "SELECT semester_name FROM semesters WHERE semester_id IN (     SELECT se.semester_id     FROM student_enrolment se     JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id     WHERE dp.degree_summary_name = 'Master'     INTERSECT     SELECT se.semester_id     FROM student_enrolment se     JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id     WHERE dp.degree_summary_name = 'Bachelor' )",
    "SELECT semester_name FROM semesters WHERE semester_id IN (     SELECT semester_id     FROM student_enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM degree_programs         WHERE degree_summary_name = 'Bachelor'     )     AND student_id IN (         SELECT student_id         FROM student_enrolment         WHERE degree_program_id IN (             SELECT degree_program_id             FROM degree_programs             WHERE degree_summary_name = 'Master'         )     )     GROUP BY semester_id     HAVING COUNT(DISTINCT degree_program_id) = 2 )",
    "SELECT students.first_name, students.last_name, semesters.semester_id, COUNT(DISTINCT student_enrolment.student_id) as enrolled_students FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE degree_programs.degree_summary_name IN ('Master\\'s', 'Bachelor\\'s') GROUP BY students.first_name, students.last_name, semesters.semester_id",
    "SELECT * FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors'))",
    "SELECT COUNT(DISTINCT current_address_id) + COUNT(DISTINCT permanent_address_id) AS total_addresses FROM students",
    "SELECT COUNT(current_address_id) FROM students",
    "SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses JOIN students ON addresses.address_id = students.current_address_id OR addresses.address_id = students.permanent_address_id ORDER BY addresses.address_id",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  JOIN sections ON student_enrolment_courses.course_id = sections.course_id  WHERE sections.section_id = transcript_contents.student_course_id",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT * FROM students ORDER BY last_name DESC, first_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students  WHERE cell_mobile_number = '09700166582'  AND permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')  LIMIT 1",
    "SELECT first_name FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')  AND cell_mobile_number = '09700166582'  LIMIT 1;",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1;",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by != 'Todd Casey' OR cartoon.written_by IS NULL",
    "SELECT DISTINCT country  FROM tv_channel  WHERE country NOT IN      (SELECT DISTINCT country       FROM tv_channel       JOIN tv_series ON tv_channel.id = tv_series.channel       JOIN cartoon ON tv_series.id = cartoon.channel       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.id IS NULL OR cartoon.written_by != 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey' OR cartoon.written_by IS NULL",
    "SELECT tv_channel.series_name, tv_channel.package_option FROM tv_channel WHERE tv_channel.hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT language, COUNT(DISTINCT tv_channel.id) AS num_channels FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(channel) FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) FROM tv_series GROUP BY language",
    "SELECT language, COUNT(tv_channel.id) AS num_channels FROM tv_channel GROUP BY language",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "I'm sorry, but the provided schema does not contain any information about episodes of TV series. Could you please provide a schema that includes this information?",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT channel FROM cartoon WHERE written_by = 'Joseph Kuhr' GROUP BY channel ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date;",
    "SELECT title, directed_by, original_air_date FROM cartoon ORDER BY original_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Brandon Vietti' OR directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT series_name, COUNT(DISTINCT content) FROM tv_channel GROUP BY series_name",
    "SELECT COUNT(series_name), COUNT(content) FROM tv_channel;",
    "SELECT COUNT(series_name), COUNT(content) FROM tv_channel;",
    "SELECT series_name, content FROM tv_channel",
    "SELECT series_name, COUNT(DISTINCT content) FROM tv_channel GROUP BY series_name",
    "SELECT COUNT(DISTINCT series_name) + COUNT(DISTINCT content) AS total_series_and_contents FROM tv_channel;",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "I'm sorry, but the serialized schema you provided does not contain any information about the content of TV channels. Could you please provide a schema that includes information about TV channel content?",
    "I'm sorry, but the serialized schema you provided does not contain a table for TV channels. Can you please provide the correct schema?",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "I'm sorry, but the serialized schema you provided does not contain a table for radio shows. It only contains tables for TV shows and cartoons. Can you please provide the correct schema or more information about the 'Sky Radio' radio series?",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "I'm sorry, but the serialized schema you provided does not contain any information about the 'Sky radio' series. Could you please provide the correct schema or more information about the 'Sky radio' series?",
    "I'm sorry, but the provided schema does not seem to have a table related to radio series or radio channels. Could you please provide the correct schema or a different question related to the provided schema?",
    "SELECT package_option FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT COUNT(*) FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE language = 'English')",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(DISTINCT channel) FROM tv_series WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(DISTINCT tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "I'm sorry, but the provided schema does not have a table that contains information about the number of languages used by TV channels. Could you please provide a schema that includes this information?",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM tv_channel GROUP BY language) AS channel_counts)",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM tv_channel GROUP BY language) AS channel_counts)",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) FROM tv_channel GROUP BY language",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\"",
    "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle')",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cartoon.title, tv_series.series_name FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.series_name LIKE '%Sky Radio%'",
    "SELECT cartoon.title FROM tvshow JOIN tv_channel ON tvshow.tv_channel_id = tv_channel.id JOIN tv_series ON tvshow.tv_series_id = tv_series.id JOIN cartoon ON tv_series.id = cartoon.channel_id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cartoon.title FROM tvshow JOIN tv_channel ON tvshow.tv_channel_id = tv_channel.id JOIN tv_series ON tvshow.tv_series_id = tv_series.id JOIN cartoon ON tv_series.id = cartoon.channel_id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon  INNER JOIN tv_series ON cartoon.channel = tv_series.id  INNER JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cartoon.series_name, cartoon.title FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cartoon.title FROM tvshow JOIN cartoon ON tvshow.tv_channel = cartoon.channel WHERE tvshow.series_name = 'Sky Radio'",
    "SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3",
    "SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT series_name, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MIN(share) AS min_share, MAX(share) AS max_share FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime' AND air_date >= DATEADD(day, -7, GETDATE()) ORDER BY air_date DESC",
    "SELECT weekly_rank FROM tv_series WHERE series_name = 'Episode A Love Of A Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = 'A love of a lifetime'",
    "SELECT tv_channel.series_name, tv_series.channel FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'",
    "SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE episode = 'A Love of a Lifetime'",
    "SELECT tv_series.id, tv_channel.series_name  FROM tv_series  JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_series.episode = 'A Love of a Lifetime'",
    "SELECT DISTINCT series_name FROM tv_series WHERE episode = 'A Love Of A Lifetime'",
    "SELECT series_name FROM tv_series WHERE episode = 'A love of a lifetime'",
    "SELECT series_name FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, GROUP_CONCAT(series_name) AS tv_shows FROM tv_channel JOIN tvshow ON tv_channel.id = tvshow.tv_channel_id WHERE hight_definition_tv = true GROUP BY package_option",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_series.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'Yes' AND tv_channel.package_option IS NOT NULL",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country, tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey' AND tv_channel.content = 'cartoons'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey' AND tv_channel.content = 'cartoons'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.id  JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tvshow JOIN tv_series ON tvshow.id = tv_series.id JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tvshow JOIN tv_series ON tvshow.id = tv_series.id JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country, tv_channel.series_name  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey' OR cartoon.written_by IS NULL",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN (     SELECT cartoon.channel      FROM cartoon      WHERE cartoon.written_by = 'Todd Casey' )",
    "SELECT DISTINCT tv_channel.country FROM tv_channel  WHERE tv_channel.id NOT IN  (SELECT tv_series.channel FROM tv_series  INNER JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT country FROM tv_channel WHERE country NOT IN (SELECT DISTINCT country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT tv_series.series_name, tv_channel.country  FROM tv_series  JOIN cartoon ON tv_series.id = cartoon.channel  JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.country, tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Michael Chang', 'Ben Jones')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_series.series_name, tv_series.country, cartoon.title FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT country, pixel_aspect_ratio_par FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.country HAVING COUNT(*) > 2",
    "SELECT id, country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id FROM tv_channel  WHERE tv_channel.country IN  (SELECT tv_channel.country FROM tv_channel  GROUP BY tv_channel.country HAVING COUNT(*) > 2)",
    "SELECT id FROM tv_channel WHERE id > 2 GROUP BY channel HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.directed_by = 'Ben Jones'  WHERE cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT cartoon.channel   FROM cartoon   WHERE cartoon.directed_by = 'Ben Jones' )",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel AND cartoon.directed_by = 'Ben Jones' WHERE cartoon.id IS NULL",
    "SELECT DISTINCT channel.id FROM tv_channel AS channel LEFT JOIN tv_series AS series ON channel.id = series.channel LEFT JOIN cartoon ON series.id = cartoon.channel AND cartoon.directed_by = 'Ben Jones' WHERE cartoon.id IS NULL",
    "SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.channel IS NOT NULL)",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') AND content != 'cartoon'",
    "SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Ben Jones'     AND cartoon.title LIKE '%cartoon%' )",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones')  AND content NOT LIKE '%cartoon%'",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN (     SELECT channel      FROM cartoon      WHERE directed_by = 'Ben Jones' )",
    "SELECT package_option FROM tv_channel  WHERE id IN (     SELECT channel FROM tv_series      WHERE id NOT IN (         SELECT id FROM cartoon          WHERE directed_by = 'Ben Jones' AND title LIKE '%cartoon%'     ) )",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones' AND channel IS NOT NULL)",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT COUNT(DISTINCT tv_channel.package_option)  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.directed_by = 'Ben Jones')  GROUP BY tv_channel.package_option",
    "SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT cartoon.channel   FROM cartoon   WHERE cartoon.directed_by = 'Ben Jones' )",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT name FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT DISTINCT p1.nationality  FROM people p1  JOIN people p2 ON p1.nationality = p2.nationality AND p1.people_id <> p2.people_id",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT poker_player.poker_player_id, poker_player.final_table_made, MAX(poker_player.best_finish) as best_finish FROM poker_player GROUP BY poker_player.poker_player_id, poker_player.final_table_made",
    "SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT poker_player_id, MAX(best_finish), MAX(final_table_made) FROM poker_player GROUP BY poker_player_id",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT poker_player_id, final_table_made, best_finish FROM poker_player",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT best_finish, final_table_made FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT poker_player.people_id, AVG(poker_player.earnings)  FROM poker_player  GROUP BY poker_player.people_id",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT name FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT name FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.final_table_made DESC, p.name ASC",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.0",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.0",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT nationality, COUNT(DISTINCT people_id) AS num_people FROM people GROUP BY nationality ORDER BY nationality ASC",
    "SELECT nationality, name, COUNT(*) as num_people FROM people GROUP BY nationality, name",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM people) AS proportion FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) as total_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;  SELECT * FROM people WHERE nationality = 'most_popular_nationality';",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'russia'",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT p.name FROM people p LEFT JOIN poker_player pp ON p.people_id = pp.people_id WHERE pp.people_id IS NULL",
    "SELECT DISTINCT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT DISTINCT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people WHERE people_id IN (SELECT people_id FROM poker_player)",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT area_code_state.area_code  FROM votes AS v1  JOIN votes AS v2 ON v1.phone_number = v2.phone_number AND v1.contestant_number = 'Tabatha Gehling' AND v2.contestant_number = 'Kelly Clauss'  JOIN area_code_state ON v1.phone_number = area_code_state.phone_number",
    "SELECT DISTINCT area_code_state.area_code FROM area_code_state JOIN voter_1 ON area_code_state.state = voter_1.state JOIN votes ON voter_1.phone_number = votes.phone_number JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')",
    "SELECT DISTINCT area_code FROM area_code_state JOIN voter_1 ON area_code_state.state = voter_1.state JOIN votes ON votes.phone_number = voter_1.phone_number JOIN contestants ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA.'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC, contestant_number ASC",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT phone_number, vote_id, state FROM votes",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT votes.vote_id, votes.phone_number, area_code_state.state FROM votes JOIN area_code_state ON votes.phone_number LIKE CONCAT(area_code_state.area_code, '%')",
    "To find the maximum and minimum values of the area codes, we can use the following SQL query:  SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state",
    "SELECT MAX(area_code), MIN(area_code) FROM area_code_state",
    "SELECT MIN(area_code), MAX(area_code) FROM area_code_state",
    "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name NOT LIKE '%Jessie Alloway%'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT * FROM votes WHERE created IS NOT NULL AND state IS NOT NULL",
    "SELECT DISTINCT created, state FROM votes",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, contestant_name  FROM contestants  WHERE contestant_number IN      (SELECT contestant_number       FROM votes       GROUP BY contestant_number       HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (     SELECT contestant_number     FROM votes     WHERE contestant_number IS NOT NULL AND phone_number IS NOT NULL     GROUP BY contestant_number     HAVING COUNT(*) > 0     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT contestants.contestant_number, contestants.contestant_name FROM contestants WHERE contestants.contestant_number = (     SELECT votes.contestant_number     FROM votes     GROUP BY votes.contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) LIMIT 1)",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM contestants) AS percentage FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes) AND contestant_name LIKE '%voted%'",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)",
    "SELECT area_code FROM (     SELECT state, area_code, COUNT(*) AS num_votes     FROM votes JOIN area_code_state ON votes.state = area_code_state.state     GROUP BY state, area_code ) AS vote_counts WHERE num_votes = (     SELECT MAX(num_votes)     FROM (         SELECT state, area_code, COUNT(*) AS num_votes         FROM votes JOIN area_code_state ON votes.state = area_code_state.state         GROUP BY state, area_code     ) AS vote_counts ) LIMIT 1;",
    "SELECT area_code FROM area_code_state JOIN (     SELECT LEFT(phone_number, 3) AS area_code, COUNT(*) AS num_voters     FROM votes     GROUP BY area_code     ORDER BY num_voters DESC     LIMIT 1 ) AS max_voters ON area_code_state.area_code = max_voters.area_code",
    "SELECT area_code FROM (     SELECT state, COUNT(*) AS num_votes     FROM votes     GROUP BY state     ORDER BY num_votes DESC     LIMIT 1 ) AS state_votes JOIN area_code_state ON state_votes.state = area_code_state.state;",
    "SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling'",
    "SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling'",
    "SELECT created, state, phone_number FROM votes  WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')",
    "SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling'",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name, indepyear FROM country WHERE indepyear > 1950 ORDER BY indepyear ASC",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true  The above query will give us the official language of Aruba. If we want to know the percentage of people speaking that language, we can modify the query as follows:  SELECT language, percentage FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = true  This query will retrieve the official language of Aruba. If there are multiple official languages, it will return all of them.",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT language FROM countrylanguage  WHERE countrycode IN (     SELECT code FROM country WHERE continent = 'Asia'      ORDER BY population DESC LIMIT 1 )  GROUP BY language  HAVING COUNT(*) = (     SELECT MAX(lang_count) FROM (         SELECT COUNT(*) AS lang_count FROM countrylanguage          WHERE countrycode IN (             SELECT code FROM country WHERE continent = 'Asia'              ORDER BY population DESC LIMIT 1         )          GROUP BY language     ) )",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.code IN (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   HAVING COUNT(DISTINCT language) >= 3 ) GROUP BY country.name",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 3",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'  GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 3",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE language = 'English' ORDER BY population DESC LIMIT 1",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT name, population FROM city ORDER BY population DESC LIMIT 10;",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT COUNT(DISTINCT cl.countrycode)  FROM countrylanguage cl  WHERE cl.language = 'English' AND cl.countrycode IN      (SELECT cl2.countrycode       FROM countrylanguage cl2       WHERE cl2.language = 'Dutch')",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(*) AS num_people, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT COUNT(*) FROM country WHERE name = 'Anguilla' AND continent IS NOT NULL",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE name = 'Anguilla'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil'",
    "SELECT country.population, AVG(country.lifeexpectancy) FROM country WHERE country.name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT DISTINCT city.district, city.population FROM city JOIN country ON city.countrycode = country.code WHERE country.name = 'Angola'",
    "SELECT region FROM country WHERE name = 'Angola';  SELECT population FROM country WHERE name = 'Angola';",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.name, country.population FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Portuguese' AND country.region = (SELECT region FROM country WHERE code = 'AGO')",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT c.region, SUM(ci.population) as population FROM country c JOIN city ci ON c.code = ci.countrycode WHERE c.name = 'Angola' GROUP BY c.region",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT country.region, SUM(country.population) AS countrywide_population FROM country WHERE country.name = 'Angola'",
    "SELECT lifeexpectancy FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'",
    "SELECT country.name, AVG(country.lifeexpectancy)  FROM country  WHERE country.continent = 'Africa' AND country.governmentform = 'Republic'  GROUP BY country.name",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT population FROM city WHERE district = 'Gelderland District'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT gnp, population FROM country WHERE continent = 'Oceania' ORDER BY gnp DESC",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE code2 = 'US'",
    "SELECT country.name, AVG(country.gnp) as mean_gnp, SUM(country.population) as total_population FROM country WHERE country.code IN (SELECT countrycode FROM city WHERE name = 'Washington') GROUP BY country.name",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE percentage > 0",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AF' AND isofficial = 'T'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode = 'AF' AND isofficial = 1.",
    "SELECT language FROM countrylanguage WHERE countrycode = 'AF' AND isofficial = true",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT country.name FROM country  JOIN (SELECT countrycode, COUNT(*) as num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) as lang_count  ON country.code = lang_count.countrycode",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1",
    "SELECT COUNT(DISTINCT cl1.countrycode)  FROM countrylanguage cl1  JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'Dutch'",
    "SELECT DISTINCT c1.name  FROM countrylanguage cl1  JOIN country c1 ON cl1.countrycode = c1.code  JOIN countrylanguage cl2 ON cl1.language = cl2.language  JOIN country c2 ON cl2.countrycode = c2.code  WHERE cl1.language = 'English' AND cl2.language = 'Dutch' AND c1.name != c2.name",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'Dutch' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English'  JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'Dutch'",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2",
    "SELECT DISTINCT c1.name FROM countrylanguage cl1 JOIN country c1 ON cl1.countrycode = c1.code JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode AND cl2.language = 'French' WHERE cl1.language = 'English'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode  JOIN country c2 ON c1.name = c2.name  JOIN countrylanguage cl2 ON c2.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French' AND c1.name = c2.name",
    "SELECT c1.name AS country1, c2.name AS country2, cl1.language AS language1, cl2.language AS language2 FROM country c1 JOIN country c2 ON c1.code < c2.code JOIN countrylanguage cl1 ON c1.code = cl1.countrycode JOIN countrylanguage cl2 ON c2.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode  JOIN countrylanguage cl2 ON c1.code = cl2.countrycode  JOIN country c2 ON cl2.countrycode = c2.code  WHERE cl1.language = 'English' AND cl2.language = 'French' AND c1.name != c2.name",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN country c2 ON c1.code = c2.code AND c2.code = cl1.countrycode JOIN countrylanguage cl2 ON c2.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN country c2 ON c1.code <> c2.code AND c1.name = c2.name  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c2.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T') ORDER BY name",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT name, language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'French') AND cl.isofficial = 'T' ORDER BY name",
    "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'French' AND cl1.isofficial = 'T' AND cl2.language = 'English' AND cl2.isofficial = 'T'",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Dutch' OR countrylanguage.language = 'English'",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Dutch' OR countrylanguage.language = 'English'",
    "SELECT DISTINCT region FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'Dutch' OR cl.language = 'English'",
    "SELECT DISTINCT name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch') AND cl.isofficial = 'T'",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT c1.name, c2.name  FROM countrylanguage cl1  JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode AND cl1.language = 'English' AND cl2.language = 'Dutch'  JOIN country c1 ON cl1.countrycode = c1.code  JOIN country c2 ON cl2.countrycode = c2.code  WHERE c1.name != c2.name",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch') ORDER BY name ASC;",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English')",
    "select name from country where continent = 'Asia' and gnp = (select max(gnp) from country where continent = 'Asia')",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = true",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%' )  AND countrycode NOT IN (     SELECT code      FROM country      WHERE governmentform NOT LIKE '%Republic%' )",
    "SELECT language FROM countrylanguage  WHERE countrycode IN (     SELECT code FROM country      WHERE governmentform LIKE '%Republic%' AND code IN (         SELECT countrycode FROM countrylanguage          GROUP BY countrycode HAVING COUNT(*) = 1     ) )",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT c.name, c.population, c.lifeexpectancy  FROM country c  WHERE c.continent = 'Asia'  ORDER BY c.surfacearea DESC  LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT COUNT(DISTINCT city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.code NOT IN (     SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' );  SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.code NOT IN (     SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' );",
    "SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT COUNT(DISTINCT city.population) FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT SUM(population) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country c JOIN city ct ON c.code = ct.countrycode WHERE c.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT name, language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE headofstate = 'Beatrix' AND isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = true",
    "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Beatrix' AND country.headofstate = countrylanguage.language",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 GROUP BY country.name",
    "SELECT name, COUNT(language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 GROUP BY name",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T' GROUP BY country.name",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name, surfacearea  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English' OR countrylanguage.language IS NULL",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.name, country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language != 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'",
    "SELECT code FROM country WHERE governmentform <> 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT code, name FROM country WHERE governmentform NOT LIKE '%Republic%' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT city.name, country.name, country.continent, countrylanguage.language  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language != 'English'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language != 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T'",
    "SELECT city.name FROM city WHERE city.name LIKE '%China%' AND city.countrycode IN (SELECT country.code FROM country WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese')",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1.   This query will return the name, population, and head of state of the country with the largest surface area.",
    "SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT c.name, c.population, c.headofstate  FROM country c  WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT c.name, c.population, c.headofstate  FROM country c  WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT country.name, country.population, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT country.name, country.population FROM country JOIN (     SELECT countrycode, AVG(lifeexpectancy) AS avg_life_expectancy     FROM country     GROUP BY countrycode     HAVING avg_life_expectancy > 72 ) AS avg_life ON country.code = avg_life.countrycode WHERE country.governmentform IS NOT NULL",
    "SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT AVG(lifeexpectancy), SUM(population)  FROM country  WHERE continent IN (     SELECT continent      FROM country      GROUP BY continent      HAVING AVG(lifeexpectancy) < 72 )",
    "SELECT continent, AVG(lifeexpectancy), SUM(population)  FROM country  GROUP BY continent  HAVING AVG(lifeexpectancy) < 72",
    "SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72",
    "SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72",
    "SELECT AVG(lifeexpectancy), SUM(population)  FROM country  WHERE continent IN (     SELECT continent      FROM country      GROUP BY continent      HAVING AVG(lifeexpectancy) < 72 )",
    "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy FROM country WHERE avg_life_expectancy < 72 GROUP BY continent",
    "SELECT continent, COUNT(population), AVG(lifeexpectancy) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000.",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language, COUNT(DISTINCT countrycode) AS num_countries FROM countrylanguage GROUP BY language ORDER BY num_countries DESC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_countries FROM countrylanguage WHERE isofficial = 'T' GROUP BY language ORDER BY num_countries DESC LIMIT 1;",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode AND countrylanguage.language = max_language_percentage.language AND countrylanguage.percentage = max_language_percentage.max_percentage",
    "SELECT country.code, country.name, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrylanguage.countrycode = country.code )",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T'",
    "SELECT MAX(num_countries) FROM (SELECT COUNT(*) AS num_countries FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' GROUP BY language) AS subquery",
    "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;",
    "SELECT country.code, countrylanguage.percentage  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50.0;",
    "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 10;",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50)",
    "SELECT MAX(COUNT(countrycode)) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' GROUP BY language",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1)",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "I'm assuming you want to retrieve the list of conductor names and the orchestras they have conducted. Here's the SQL query for that:  SELECT c.name, o.orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT COUNT(*) FROM conductor",
    "SELECT conductor_id, name FROM conductor",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age ASC, name DESC",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live Final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final'",
    "SELECT performance_id, MAX(share), MIN(share) FROM performance WHERE type != 'Live final' GROUP BY performance_id",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT DISTINCT orchestra.orchestra, conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT orchestra.orchestra, conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 2",
    "SELECT conductor.name FROM conductor  WHERE conductor.conductor_id IN (     SELECT conductor_id FROM orchestra      GROUP BY conductor_id      HAVING COUNT(DISTINCT orchestra_id) > 1 )",
    "SELECT conductor.name FROM conductor  WHERE conductor.conductor_id IN (     SELECT conductor_id FROM orchestra      GROUP BY conductor_id      HAVING COUNT(DISTINCT orchestra_id) > 1 )",
    "SELECT COUNT(DISTINCT conductor.name), conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008 AND orchestra.orchestra = 'conducting'",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT DISTINCT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT DISTINCT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008",
    "SELECT record_company, COUNT(orchestra_id)  FROM orchestra  GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras_managed FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE record_company IS NOT NULL",
    "SELECT major_record_format, COUNT(*) AS count FROM orchestra GROUP BY major_record_format ORDER BY count ASC",
    "SELECT major_record_format, COUNT(*) as count FROM orchestra GROUP BY major_record_format ORDER BY count ASC",
    "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT DISTINCT orchestra.record_company  FROM orchestra  JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.date < '2003-01-01' OR performance.date > '2003-12-31'",
    "SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < (year)2003 AND year_of_founded > (year) AND record_company IS NOT NULL",
    "SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003",
    "SELECT DISTINCT record_company FROM orchestra WHERE orchestra_id IN (   SELECT orchestra_id FROM orchestra WHERE year_of_founded < 2003   INTERSECT   SELECT orchestra_id FROM orchestra WHERE year_of_founded >= 2003 )",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT orchestra_id FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT orchestra_id, orchestra FROM orchestra WHERE major_record_format IN ('CD', 'DVD') ORDER BY orchestra_id",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT orchestra_id, year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1)",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT h.name FROM highschooler h WHERE h.id = (     SELECT f.student_id     FROM friend f     GROUP BY f.student_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT grade, name FROM highschooler",
    "SELECT student_id, GROUP_CONCAT(liked_id SEPARATOR ', ') AS like_numbers FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "I'm sorry, but the schema you provided does not contain any information about Kyle's grade. Could you please provide more information or clarify the schema?",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "I'm sorry, but the serialized schema you provided is incomplete. It only includes the tables \"highschooler\", \"friend\", and \"likes\", but it doesn't specify the columns of each table. Please provide the complete schema so I can help you with your question.",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT id FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "I'm sorry, but the given schema does not contain any information about the number of students in the high school class. Could you please provide the schema with the required information?",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT * FROM highschooler",
    "SELECT name, grade FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE friend_id = [id1] OR friend_id = [id2] OR friend_id = [id3])",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10 ORDER BY name",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(id) AS highschooler_numbers FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name, COUNT(f.friend_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3 AND h.grade = '9'",
    "SELECT h.name, COUNT(f.friend_id) as num_friends FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING num_friends >= 3",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle' AND h1.grade = '9th'",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle'",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle'",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f  WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle'",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle'",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(friend_id) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(friend.friend_id) AS num_friends, friend.friend_id AS friend_number FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle' GROUP BY friend.friend_id",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT * FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT id, name, grade FROM highschooler WHERE id NOT IN (     SELECT student_id     FROM friend )",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) ORDER BY name",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (     SELECT friend.student_id     FROM friend ) ORDER BY highschooler.name",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT h.id FROM highschooler h WHERE h.id IN (     SELECT f.student_id     FROM friend f     WHERE f.friend_id IN (         SELECT l.liked_id         FROM likes l     ) )",
    "SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes WHERE liked_id <> student_id)",
    "SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes)",
    "SELECT DISTINCT l.student_id FROM likes l JOIN friend f1 ON l.student_id = f1.student_id JOIN friend f2 ON l.student_id = f2.friend_id AND f1.friend_id = f2.student_id",
    "SELECT DISTINCT l.student_id FROM likes l INNER JOIN friend f1 ON l.student_id = f1.student_id INNER JOIN friend f2 ON l.student_id = f2.friend_id",
    "SELECT DISTINCT h1.id, h1.name FROM highschooler h1, friend f1, likes l1 WHERE h1.id = f1.student_id AND h1.id = l1.student_id",
    "SELECT DISTINCT l.student_id FROM likes l JOIN friend f1 ON l.student_id = f1.student_id AND l.liked_id = f1.friend_id JOIN friend f2 ON l.student_id = f2.friend_id AND l.liked_id = f2.student_id",
    "SELECT DISTINCT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT DISTINCT h1.name FROM highschooler h1, friend f1, likes l1, highschooler h2 WHERE h1.id = f1.student_id AND f1.friend_id = l1.liked_id AND l1.student_id = h2.id AND h2.id <> h1.id AND h2.id IN (SELECT friend_id FROM friend WHERE student_id = h1.id)",
    "SELECT DISTINCT h1.name FROM highschooler h1, highschooler h2, friend f, likes l WHERE h1.id = f.student_id AND h2.id = f.friend_id AND h1.id = l.liked_id AND h2.id = l.student_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE EXISTS (     SELECT 1     FROM friend f2     WHERE f2.student_id = h.id )",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE EXISTS (     SELECT 1     FROM friend f2     WHERE f2.student_id = h.id ) AND h.id <> l.liked_id;",
    "SELECT h1.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN likes l ON h1.id = l.student_id  JOIN highschooler h2 ON f.friend_id = h2.id AND l.liked_id = h2.id",
    "SELECT h.name FROM highschooler h  INNER JOIN friend f ON h.id = f.student_id  INNER JOIN likes l ON h.id = l.student_id  WHERE l.liked_id = f.friend_id",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      WHERE f.friend_id IN (         SELECT l.liked_id          FROM likes l          WHERE l.student_id = f.student_id     ) )",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (SELECT f.student_id FROM friend f WHERE f.friend_id IN (SELECT l.liked_id FROM likes l))",
    "SELECT COUNT(*) FROM likes WHERE student_id = [student_id];",
    "SELECT student_id, COUNT(liked_id) AS num_likes FROM likes GROUP BY student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id, highschooler.name",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id, highschooler.name",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT h.name, COUNT(l.liked_id) AS number_of_likes FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id, highschooler.name",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT DISTINCT h1.name FROM highschooler h1, likes l1, likes l2 WHERE h1.id = l1.student_id AND h1.id = l2.student_id AND l1.liked_id <> l2.liked_id AND l1.liked_id < l2.liked_id",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(DISTINCT liked_id) >= 2)",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend WHERE friend.friend_id IN (SELECT likes.liked_id FROM likes WHERE likes.student_id = <your_student_id>))",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "SELECT COUNT(DISTINCT f.student_id), AVG(h.grade) FROM friend f JOIN highschooler h ON f.student_id = h.id GROUP BY f.student_id ORDER BY AVG(h.grade) DESC",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'dog treatment')",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'treated dogs')",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description LIKE '%treat%dogs%')",
    "SELECT dogs.owner_id, owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     WHERE dogs.owner_id = owners.owner_id )",
    "SELECT dog.owner_id FROM dogs AS dog JOIN treatments AS tr ON dog.dog_id = tr.dog_id GROUP BY dog.owner_id ORDER BY SUM(tr.cost_of_treatment) DESC LIMIT 1;",
    "SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%north%'",
    "SELECT DISTINCT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) >= 2)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'dog')",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'dog')",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE dogs.breed_code = 'dog')",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE abandoned_yn = 'N' OR abandoned_yn IS NULL)",
    "SELECT COUNT(*) FROM owners o WHERE NOT EXISTS (SELECT * FROM dogs d WHERE d.owner_id = o.owner_id) AND EXISTS (SELECT * FROM dog_kennels dk WHERE dk.owner_id = o.owner_id AND dk.temporary_ownership = 'Y')",
    "SELECT DISTINCT d1.ownership_id FROM dog_ownerships d1 WHERE NOT EXISTS (     SELECT *     FROM dog_ownerships d2     WHERE d1.ownership_id = d2.ownership_id AND d2.owner_id IN (         SELECT o.owner_id         FROM owners o         WHERE NOT EXISTS (             SELECT *             FROM dogs d             WHERE d.owner_id = o.owner_id         )     ) )",
    "I'm sorry, but I cannot answer your question as the schema you provided does not have any information about whether a dog is temporary or not. Please provide a valid schema or a different question.",
    "SELECT DISTINCT owners.state FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN professionals ON dogs.dog_id = professionals.dog_id WHERE owners.state = professionals.state AND owners.state IS NOT NULL AND professionals.state IS NOT NULL AND owners.owner_id IS NOT NULL AND professionals.professional_id IS NOT NULL",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT state) > 1",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT role_code) = 2",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT DISTINCT state FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs) AND owner_id IN (SELECT owner_id FROM professionals)",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) AND state IN (SELECT state FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs)) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 1",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'N'",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     WHERE professional_id = professionals.professional_id     AND state = 'Indiana'     GROUP BY professional_id     HAVING COUNT(DISTINCT dog_id) > 2 )",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN dogs ON treatments.dog_id = dogs.dog_id  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE owners.state = 'Indiana' AND        treatments.treatment_id > 2",
    "SELECT last_name, COUNT(*), cell_number FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  WHERE state = 'Indiana' AND COUNT(*) > 2  GROUP BY last_name, cell_number  ORDER BY last_name DESC",
    "SELECT dog_id, name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000) ORDER BY dog_id",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
    "SELECT DISTINCT professionals.first_name  FROM professionals  WHERE professionals.first_name NOT IN      (SELECT dogs.name FROM dogs)      AND professionals.first_name NOT IN      (SELECT owners.first_name FROM owners WHERE owners.first_name IS NOT NULL AND owners.first_name != '')",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE professionals.first_name NOT IN (SELECT dogs.name FROM dogs) AND professionals.role_code = 'owner' OR professionals.role_code = 'professional'",
    "SELECT DISTINCT first_name FROM owners o WHERE (o.first_name IN (SELECT first_name FROM professionals) OR o.first_name IN (SELECT last_name FROM professionals)) AND o.first_name NOT IN (SELECT name FROM dogs)",
    "SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) AND first_name IN (SELECT first_name FROM professionals WHERE role_code = 'owner')",
    "SELECT DISTINCT owners.first_name FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  LEFT JOIN dog_kennels.professionals ON professionals.first_name = owners.first_name  WHERE dogs.name IS NULL AND professionals.first_name IS NOT NULL",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs WHERE name IS NOT NULL) AND first_name IN (SELECT first_name FROM owners)",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT DISTINCT treatments.professional_id     FROM treatments     JOIN dogs ON dogs.dog_id = treatments.dog_id     JOIN breeds ON breeds.breed_code = dogs.breed_code     WHERE breeds.breed_name = 'dog' )",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'none' AND dog_id IN (SELECT dog_id FROM dogs))",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code IN (         SELECT treatment_types.treatment_type_code         FROM treatment_types         WHERE treatment_types.treatment_type_description LIKE '%operate%'         AND treatment_types.treatment_type_description LIKE '%dogs%'     ) ) ",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT o.first_name, o.last_name, o.owner_id, COUNT(d.dog_id) AS num_dogs FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY num_dogs DESC LIMIT 1",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1",
    "SELECT owners.first_name, owners.last_name, owners.owner_id FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.dog_id) >= 2",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC;",
    "SELECT breed_name FROM breeds ORDER BY breed_name LIMIT 1;   SELECT breed_name, COUNT(*) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC LIMIT 10;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM treatments) ",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM treatments)",
    "SELECT owners.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) AS total_spent FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY total_spent DESC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description, SUM(treatments.cost_of_treatment) AS total_cost FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY total_cost ASC LIMIT 1",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1",
    "SELECT owner_id, zip_code  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    WHERE dog_id = (SELECT dog_id                                    FROM treatments                                    GROUP BY dog_id                                    ORDER BY SUM(cost_of_treatment) DESC                                    LIMIT 1))",
    "SELECT dogs.owner_id, owners.zip_code, SUM(treatments.cost_of_treatment) AS total_expenditure FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY total_expenditure DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.zip_code  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN charges ON dogs.size_code = charges.charge_type  GROUP BY owners.owner_id  ORDER BY SUM(charges.charge_amount) DESC  LIMIT 1",
    "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'dog' GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT COUNT(professional_id), cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) GROUP BY professional_id, cell_number",
    "SELECT COUNT(DISTINCT professional_id), cell_number FROM treatments INNER JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2",
    "SELECT COUNT(professional_id), cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) GROUP BY professional_id, cell_number",
    "SELECT COUNT(professional_id), professional_id, cell_number FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2",
    "SELECT first_name, last_name FROM professionals  WHERE professional_id IN (     SELECT professional_id FROM treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) ) ORDER BY professional_id LIMIT 1;",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT dogs.name, owners.first_name, owners.last_name, sizes.size_description  FROM dogs  JOIN owners ON dogs.owner_id = owners.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT breeds.breed_name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (     SELECT breed_code     FROM dogs     GROUP BY breed_code     HAVING COUNT(*) = (         SELECT MIN(breed_count)         FROM (             SELECT COUNT(*) AS breed_count             FROM dogs             GROUP BY breed_code         ) AS breed_counts     ) ) ORDER BY treatments.date_of_treatment ASC",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (     SELECT breeds.breed_code FROM breeds     JOIN dogs ON breeds.breed_code = dogs.breed_code     GROUP BY breeds.breed_code     HAVING COUNT(*) = 1 )",
    "SELECT breed_name, date_of_treatment FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breed_code IN (SELECT breed_code FROM dogs GROUP BY breed_code HAVING COUNT(*) = 1)",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC",
    "SELECT d.breed_name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (     SELECT breed_code     FROM dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 ) ORDER BY t.date_of_treatment ASC, d.name ASC",
    "SELECT breed_name, date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id ORDER BY date_of_treatment ASC LIMIT 1;  SELECT breed_name, date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id ORDER BY date_of_treatment DESC LIMIT 1;",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY breeds.breed_name ORDER BY COUNT(DISTINCT dogs.dog_id) ASC LIMIT 1",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs WHERE treatment_id IS NOT NULL",
    "SELECT date_arrived, date_departed FROM dogs WHERE treatment_id IS NOT NULL",
    "SELECT date_arrived as departure_date, date_departed as arrival_date FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code IS NOT NULL",
    "SELECT d.name, o.last_name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs) LIMIT 1;",
    "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs))",
    "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.size_code = (SELECT size_code FROM sizes ORDER BY size_description LIMIT 1) ORDER BY d.weight ASC LIMIT 1",
    "SELECT first_name, last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT first_name, last_name, email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT dog_id, date_arrived, date_departed FROM dogs",
    "I'm sorry, but the question cannot be answered with the given schema. There is no table or attribute that indicates the arrival or departure of all dogs. Can you please provide more information or a different schema?",
    "SELECT date_arrived, date_departed FROM dogs",
    "I need some clarification on the question. Can you please provide some sample dates for which you want to know the arrival and departure of dogs?",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT * FROM dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM treatments",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM treatments WHERE treatment_type_code = 'dog'",
    "SELECT COUNT(*) FROM dogs WHERE date_of_treatment IS NOT NULL",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code = 'dog'",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT role, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT MAX(cost_of_treatment) FROM treatments",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE date_of_treatment != %date% OR date_of_treatment IS NULL",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE abandoned_yn = 'N' AND dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) AND owner_id IS NOT NULL",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'dog')",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'operating')",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments) AND role_code = 'OPERATOR' AND professional_id IN (SELECT professional_id FROM professionals WHERE role_code = 'OPERATOR')",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments) AND role_code = 'VET'",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'dog_treatment')",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT breed_code, AVG(age) FROM dogs GROUP BY breed_code",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT charge_type, SUM(charge_amount)  FROM charges  WHERE charge_id IN (SELECT charge_id FROM charges WHERE charge_type = 'A')  AND charge_id IN (SELECT charge_id FROM charges WHERE charge_type = 'B')  GROUP BY charge_type",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "I'm sorry, but the question is not clear. Can you please provide more information or context?",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges)",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges)",
    "SELECT charge_type, charge_amount FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges)",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT home_phone, cell_number, email_address FROM professionals",
    "SELECT cell_number, email_address, home_phone FROM professionals",
    "I'm sorry, but the question is not clear. Can you please provide more information about which tables you want to retrieve the information from?",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT home_phone, cell_number, email_address FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT * FROM professionals WHERE home_phone = '<number>'",
    "SELECT home_phone, cell_number, email_address FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT DISTINCT sizes.size_description, breeds.breed_name FROM dogs JOIN sizes ON dogs.size_code = sizes.size_code JOIN breeds ON dogs.breed_code = breeds.breed_code",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE professionals.role_code = 'doctor' OR professionals.role_code = 'healthcare provider'",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, singer_id FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC, name ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT citizenship, birth_year FROM singer",
    "SELECT citizenship, birth_year FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year IN (1948, 1949)",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) as total_number FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, GROUP_CONCAT(name) AS singers FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 10",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT MAX(net_worth_millions) FROM singer",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1",
    "SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955 GROUP BY citizenship HAVING COUNT(*) > 1",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship HAVING COUNT(DISTINCT singer_id) > 1",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code IN (SELECT property_type_code FROM properties WHERE code = 'that code')",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]