[
    "SELECT name, nation, age FROM singer ORDER BY age DESC",
    "SELECT name, nation, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE nation = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE nation = 'French'",
    "SELECT name, tune_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT name, tune_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT nation FROM singer WHERE age > 20",
    "SELECT DISTINCT nation FROM singer WHERE age > 20",
    "SELECT singer.nation, COUNT(singer.singer_id) AS num_singers FROM singer GROUP BY singer.nation",
    "SELECT nation, COUNT(*) FROM singer GROUP BY nation",
    "SELECT tune_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT tune_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT position, name FROM stadium WHERE max_carrying_number BETWEEN 5000 AND 10000.",
    "SELECT name, position FROM stadium WHERE max_carrying_number BETWEEN 5000 AND 10000",
    "SELECT MAX(max_carrying_number), AVG(max_carrying_number) FROM stadium",
    "SELECT AVG(max_carrying_number), MAX(max_carrying_number) FROM stadium",
    "SELECT name, max_carrying_number FROM stadium WHERE mean = (SELECT MAX(mean) FROM stadium)",
    "SELECT name, max_carrying_number FROM stadium WHERE mean = (SELECT MAX(mean) FROM stadium)",
    "SELECT name, max_carrying_number FROM stadium WHERE stadium_id IN (     SELECT stadium_id     FROM concert     WHERE year >= 2014     GROUP BY stadium_id     HAVING COUNT(*) = (         SELECT MAX(concert_count)         FROM (             SELECT COUNT(*) AS concert_count             FROM concert             WHERE year >= 2014             GROUP BY stadium_id         ) AS counts     ) )",
    "SELECT name, max_carrying_number FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT DISTINCT s1.nation FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id",
    "SELECT concert.concert_name, concert.style, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.style, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.style",
    "SELECT name, nation FROM singer WHERE tune_name LIKE '%Hey%'",
    "SELECT singer.name, singer.nation  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE tune_name LIKE '%Hey%'",
    "SELECT DISTINCT stadium.name, stadium.position FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND EXISTS (     SELECT *     FROM concert AS c2     WHERE c2.year = 2015 AND c2.stadium_id = concert.stadium_id )",
    "SELECT DISTINCT stadium.name, stadium.position FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id     WHERE concert.year = 2015 )",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY max_carrying_number DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY max_carrying_number DESC LIMIT 1)",
    "SELECT name, nation as country, age FROM singer ORDER BY age DESC",
    "SELECT name, nation, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE nation = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE nation = 'French'",
    "SELECT DISTINCT nation FROM singer WHERE age > 20",
    "SELECT DISTINCT nation FROM singer WHERE age > 20",
    "SELECT singer.nation AS country, COUNT(*) AS num_singers FROM singer GROUP BY singer.nation",
    "SELECT nation, COUNT(*) FROM singer GROUP BY nation",
    "SELECT location, name FROM stadium WHERE max_carrying_number BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE max_carrying_number BETWEEN 5000 AND 10000",
    "SELECT MAX(max_carrying_number), AVG(average) FROM stadium",
    "SELECT AVG(max_carrying_number), MAX(max_carrying_number) FROM stadium",
    "SELECT name, max_carrying_number FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, max_carrying_number FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, max_carrying_number  FROM stadium  WHERE stadium_id = (     SELECT stadium_id      FROM concert      WHERE year >= 2014      GROUP BY stadium_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT name, max_carrying_number FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT DISTINCT s1.nation FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id",
    "SELECT concert.theme, concert.event_name, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.event_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.event_name, concert.theme",
    "SELECT name, nation FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT name, nation FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY max_carrying_number DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY max_carrying_number DESC LIMIT 1)",
    "SELECT singer.name, singer.publish_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, publish_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT singer.name, concert.year FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer)",
    "SELECT whereabouts, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT whereabouts, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE mean = (SELECT MAX(mean) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE mean = (SELECT MAX(mean) FROM stadium)",
    "SELECT concert.concert_name, concert.category, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.category, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.category",
    "SELECT DISTINCT stadium.name, stadium.whereabouts  FROM concert  JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE concert.year = 2014 AND EXISTS  (SELECT * FROM concert WHERE concert.year = 2015 AND concert.stadium_id = stadium.stadium_id)",
    "SELECT name, whereabouts FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014 INTERSECT SELECT stadium_id FROM concert WHERE year = 2015)",
    "SELECT s.name, c.year FROM singer s JOIN singer_in_concert sc ON s.singer_id = sc.singer_id JOIN concert c ON sc.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer)",
    "SELECT tune_name, year FROM singer_in_concert  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  JOIN singer ON singer_in_concert.singer_id = singer.singer_id  WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT tune_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT tune_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE stadium_capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE stadium_capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(stadium_capacity), AVG(stadium_capacity) FROM stadium",
    "SELECT AVG(stadium_capacity), MAX(stadium_capacity) FROM stadium",
    "SELECT name, stadium_capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, stadium_capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, stadium_capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, stadium_capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT concert.show, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.show, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.show, concert.theme",
    "SELECT name, country FROM singer WHERE tune_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE theme LIKE '%Hey%' ))",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY stadium_capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY stadium_capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE mass > 10",
    "SELECT COUNT(*) FROM pets WHERE mass > 10",
    "SELECT mass FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT MIN(mass) FROM pets",
    "SELECT pet_class, MAX(mass) AS max_weight FROM pets GROUP BY pet_class",
    "SELECT pet_class, MAX(mass) AS max_weight FROM pets GROUP BY pet_class",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT petid) FROM has_pet WHERE stuid IN (SELECT information FROM student WHERE age > 20)",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pet_class = 'dog' AND s.sexuality = 'F'",
    "SELECT COUNT(*) FROM has_pet hp JOIN pets p ON hp.petid = p.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pet_class = 'dog' AND s.sexuality = 'female'",
    "SELECT COUNT(DISTINCT pet_class) FROM pets",
    "SELECT COUNT(DISTINCT pet_class) FROM pets",
    "SELECT student.forename FROM student JOIN has_pet ON student.information = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat' OR pets.pet_class = 'dog'",
    "SELECT DISTINCT forename FROM student JOIN has_pet ON student.information = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat' OR pets.pet_class = 'dog'",
    "SELECT DISTINCT s.forename FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pet_class = 'cat' JOIN pets p2 ON hp2.petid = p2.petid AND p2.pet_class = 'dog'",
    "SELECT DISTINCT student.forename FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pet_class = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'dog')",
    "SELECT program, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_class = 'cat')",
    "SELECT program, age FROM student WHERE information NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_class = 'cat')",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat')",
    "SELECT DISTINCT student.information FROM student WHERE student.information NOT IN (     SELECT has_pet.stuid     FROM has_pet     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pet_class = 'cat' )",
    "SELECT forename, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT forename FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'cat'))) ORDER BY stuid ASC LIMIT 1",
    "SELECT pet_class, mass FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pet_class, mass FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, mass FROM pets WHERE pet_age > 1",
    "SELECT petid, mass FROM pets WHERE pet_age > 1",
    "SELECT pet_class, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(mass) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(mass) FROM pets GROUP BY pet_class",
    "SELECT forename, age FROM student WHERE information IN (SELECT stuid FROM has_pet)",
    "SELECT DISTINCT forename, age FROM student JOIN has_pet ON student.information = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.information JOIN pets ON has_pet.petid = pets.petid WHERE student.ending_name = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.information JOIN pets ON has_pet.petid = pets.petid WHERE student.ending_name = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid",
    "SELECT student.forename, student.sexuality FROM student  INNER JOIN has_pet ON student.information = has_pet.stuid  GROUP BY has_pet.stuid  HAVING COUNT(has_pet.petid) > 1",
    "SELECT forename, sexuality FROM student WHERE information IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT s.ending_name FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pet_class = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT ending_name FROM student  WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_class = 'cat' AND pet_age = 3)  ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT weight FROM pets ORDER BY how_old ASC LIMIT 1",
    "SELECT MIN(weight) FROM pets",
    "SELECT COUNT(*) FROM pets WHERE pettype = 'dog' AND petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE gender = 'F'))",
    "SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.gender = 'female'",
    "SELECT pettype, weight FROM pets WHERE how_old = (SELECT MIN(how_old) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE how_old = (SELECT MIN(how_old) FROM pets)",
    "SELECT petid, weight FROM pets WHERE how_old > 1",
    "SELECT petid, weight FROM pets WHERE how_old > 1",
    "SELECT pettype, AVG(how_old) AS avg_age, MAX(how_old) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(how_old) AS avg_age, MAX(how_old) AS max_age FROM pets GROUP BY pettype",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE ending_name = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.ending_name = 'Smith'",
    "SELECT fname, gender FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT fname, gender FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT ending_name FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND how_old = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT ending_name FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND how_old = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT type_of_animal, MAX(weight) AS max_weight FROM pets GROUP BY type_of_animal",
    "SELECT type_of_animal, MAX(weight) FROM pets GROUP BY type_of_animal",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.type_of_animal = 'dog' AND s.sex = 'F'",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.type_of_animal = 'dog' AND s.sex = 'female'",
    "SELECT COUNT(DISTINCT type_of_animal) FROM pets",
    "SELECT COUNT(DISTINCT type_of_animal) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.type_of_animal = 'cat' OR pets.type_of_animal = 'dog'",
    "SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE type_of_animal = 'cat' OR type_of_animal = 'dog')",
    "SELECT DISTINCT s.fname FROM student s, has_pet hp1, has_pet hp2, pets p1, pets p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND p1.type_of_animal = 'cat' AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.type_of_animal = 'dog' AND s.fname IS NOT NULL;",
    "SELECT DISTINCT s.fname FROM student s  INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid  INNER JOIN pets p1 ON hp1.petid = p1.petid AND p1.type_of_animal = 'cat' INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid  INNER JOIN pets p2 ON hp2.petid = p2.petid AND p2.type_of_animal = 'dog'",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE type_of_animal = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE type_of_animal = 'cat')",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE type_of_animal = 'cat')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.type_of_animal = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE type_of_animal = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE type_of_animal = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE type_of_animal = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE type_of_animal = 'cat')) ORDER BY stuid ASC LIMIT 1",
    "SELECT type_of_animal, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT type_of_animal, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT type_of_animal, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY type_of_animal",
    "SELECT type_of_animal, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY type_of_animal",
    "SELECT type_of_animal, AVG(weight) FROM pets GROUP BY type_of_animal",
    "SELECT type_of_animal, AVG(weight) FROM pets GROUP BY type_of_animal",
    "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.type_of_animal = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE type_of_animal = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT COUNT(*) FROM pets WHERE heaviness > 10",
    "SELECT COUNT(*) FROM pets WHERE heaviness > 10",
    "SELECT MIN(heaviness) FROM pets",
    "SELECT MIN(heaviness) FROM pets",
    "SELECT pet_class, MAX(heaviness) AS max_weight FROM pets GROUP BY pet_class",
    "SELECT pet_class, MAX(heaviness) FROM pets GROUP BY pet_class",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.information  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.information = has_pet.stuid WHERE student.age > 20",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.information WHERE p.pet_class = 'dog' AND s.sex = 'F'",
    "SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.information  WHERE pets.pet_class = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pet_class) FROM pets",
    "SELECT COUNT(DISTINCT pet_class) FROM pets",
    "SELECT student.forename FROM student JOIN has_pet ON student.information = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat' OR pets.pet_class = 'dog'",
    "SELECT DISTINCT forename FROM student JOIN has_pet ON student.information = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class IN ('cat', 'dog')",
    "SELECT DISTINCT student.forename FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pet_class = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'dog')",
    "SELECT DISTINCT student.forename FROM student  INNER JOIN has_pet ON student.information = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pet_class = 'cat' AND student.forename IN  (SELECT student.forename FROM student  INNER JOIN has_pet ON student.information = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pet_class = 'dog')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_class = 'cat')",
    "SELECT major, age FROM student WHERE information NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'cat'))",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat')",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_class = 'cat')",
    "SELECT forename, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT forename FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_class = 'cat'))) ORDER BY stuid ASC LIMIT 1",
    "SELECT pet_class, heaviness FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pet_class, heaviness FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, heaviness FROM pets WHERE pet_age > 1",
    "SELECT petid, heaviness FROM pets WHERE pet_age > 1",
    "SELECT pet_class, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(heaviness) FROM pets GROUP BY pet_class",
    "SELECT pet_class, AVG(heaviness) FROM pets GROUP BY pet_class",
    "SELECT student.forename, student.age FROM student INNER JOIN has_pet ON student.information = has_pet.stuid",
    "SELECT DISTINCT forename, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.information JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'",
    "SELECT petid FROM has_pet WHERE stuid IN (SELECT information FROM student WHERE lname = 'Smith')",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 0",
    "SELECT forename, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT forename, sex FROM student WHERE information IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pet_class = 'cat' AND p.pet_age = 3 ORDER BY hp.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_class = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT MIN(weight) FROM pets WHERE animal_category = 'dog' AND how_old = (SELECT MIN(how_old) FROM pets WHERE animal_category = 'dog')",
    "SELECT MIN(weight) FROM pets",
    "SELECT animal_category, MAX(weight) AS max_weight FROM pets GROUP BY animal_category",
    "SELECT animal_category, MAX(weight) FROM pets GROUP BY animal_category",
    "SELECT COUNT(*) FROM pets WHERE animal_category = 'dog' AND petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'F'))",
    "SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.animal_category = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT animal_category) FROM pets",
    "SELECT COUNT(DISTINCT animal_category) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.animal_category IN ('cat', 'dog')",
    "SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat' OR animal_category = 'dog')",
    "SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid INNER JOIN pets p1 ON hp1.petid = p1.petid INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.animal_category = 'cat' AND p2.animal_category = 'dog'",
    "SELECT DISTINCT s.fname FROM student s  INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid  INNER JOIN pets p1 ON hp1.petid = p1.petid AND p1.animal_category = 'cat' INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid  INNER JOIN pets p2 ON hp2.petid = p2.petid AND p2.animal_category = 'dog'",
    "SELECT program, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat')",
    "SELECT student.program, student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.animal_category = 'cat')",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat')",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE animal_category = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE animal_category = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE animal_category = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE animal_category = 'cat'))) ORDER BY stuid ASC LIMIT 1",
    "SELECT animal_category, weight FROM pets WHERE how_old = (SELECT MIN(how_old) FROM pets)",
    "SELECT animal_category, weight FROM pets WHERE how_old = (SELECT MIN(how_old) FROM pets)",
    "SELECT petid, weight FROM pets WHERE how_old > 1",
    "SELECT petid, weight FROM pets WHERE how_old > 1",
    "SELECT animal_category, AVG(how_old) AS avg_age, MAX(how_old) AS max_age FROM pets GROUP BY animal_category",
    "SELECT animal_category, AVG(how_old) AS avg_age, MAX(how_old) AS max_age FROM pets GROUP BY animal_category",
    "SELECT animal_category, AVG(weight) FROM pets GROUP BY animal_category",
    "SELECT animal_category, AVG(weight) FROM pets GROUP BY animal_category",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.surname = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.surname = 'Smith'",
    "SELECT surname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat' AND how_old = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT surname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE animal_category = 'cat' AND how_old = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.mainland GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.mainland GROUP BY continents.contid, continents.continent",
    "SELECT car_makers.full_appellation, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.producer GROUP BY car_makers.full_appellation, car_makers.id",
    "SELECT car_makers.id, car_makers.full_appellation, COUNT(model_list.modelid) AS num_models_produced FROM car_makers JOIN model_list ON car_makers.id = model_list.producer GROUP BY car_makers.id, car_makers.full_appellation",
    "SELECT mode FROM cars_data WHERE hp = (SELECT MIN(hp) FROM cars_data)",
    "SELECT mode FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE hp = (SELECT MIN(hp) FROM cars_data)",
    "SELECT model_list.version FROM model_list WHERE model_list.version IN (     SELECT car_names.mode     FROM car_names     JOIN cars_data ON car_names.makeid = cars_data.id     WHERE cars_data.heaviness < (         SELECT AVG(cars_data.heaviness)         FROM cars_data     ) )",
    "SELECT model_list.version FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.heaviness < (SELECT AVG(heaviness) FROM cars_data)",
    "SELECT DISTINCT producer FROM car_makers WHERE id IN (SELECT id FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE mode = 'car' AND manufacture = 1970))",
    "SELECT DISTINCT producer FROM car_makers WHERE id IN (SELECT producer FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE year = 1970))",
    "SELECT makeid, year FROM cars_data WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.producer, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY car_makers.producer  ORDER BY MIN(cars_data.year) LIMIT 1",
    "SELECT DISTINCT mode FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT mode FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.producer) AS count FROM continents JOIN countries ON continents.contid = countries.mainland JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id)  FROM continents  JOIN countries ON continents.contid = countries.mainland  JOIN car_makers ON countries.countryid = car_makers.nation  GROUP BY continents.continent",
    "SELECT countries.nation_designation AS country_name FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.nation_designation ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.nation_designation FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.nation_designation ORDER BY COUNT(DISTINCT car_makers.producer) DESC LIMIT 1",
    "SELECT car_makers.full_appellation, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.producer GROUP BY car_makers.full_appellation",
    "SELECT car_makers.id, car_makers.full_appellation, COUNT(DISTINCT model_list.modelid) AS num_car_models FROM car_makers JOIN model_list ON car_makers.id = model_list.producer GROUP BY car_makers.id, car_makers.full_appellation",
    "SELECT speed_up FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.mode = 'amc hornet sportabout (sw)'",
    "SELECT speed_up FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.mode = 'amc hornet sportabout (sw)'",
    "SELECT COUNT(*) FROM car_makers WHERE nation = 'france'",
    "SELECT COUNT(DISTINCT id) FROM car_makers WHERE producer = 'care' AND nation = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.producer = car_makers.id JOIN countries ON car_makers.nation = countries.countryid WHERE countries.mainland = 'usa'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.producer = car_makers.id JOIN countries ON car_makers.nation = countries.countryid JOIN continents ON countries.mainland = continents.contid WHERE continents.continent = 'United States'",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE cylinder_number = 4",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE cylinder_number = 4",
    "SELECT MIN(heaviness) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT MIN(heaviness) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT producer, version FROM model_list",
    "SELECT producer, version FROM model_list",
    "SELECT DISTINCT countries.countryid, countries.nation_designation FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.nation;",
    "SELECT DISTINCT countries.countryid, countries.nation_designation  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.nation",
    "SELECT COUNT(*) FROM cars_data WHERE hp > 150",
    "SELECT COUNT(*) FROM cars_data WHERE hp > 150",
    "SELECT AVG(heaviness) FROM cars_data GROUP BY year",
    "SELECT year, AVG(heaviness) AS avg_weight, AVG(year) AS avg_year FROM cars_data GROUP BY year",
    "SELECT countries.nation_designation  FROM countries  JOIN car_makers ON countries.countryid = car_makers.nation  WHERE continents.continent = 'europe'  GROUP BY countries.nation_designation  HAVING COUNT(DISTINCT car_makers.producer) >= 3",
    "SELECT DISTINCT c.nation_designation FROM countries c JOIN car_makers cm ON c.countryid = cm.nation WHERE c.mainland = 'Europe' GROUP BY c.nation_designation HAVING COUNT(DISTINCT cm.producer) >= 3",
    "SELECT MAX(hp), make FROM cars_data  JOIN car_names ON cars_data.id = car_names.mode  WHERE cars_data.cylinder_number = 3  GROUP BY make",
    "SELECT MAX(hp), producer FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.producer = car_makers.id  WHERE cylinder_number = 3 GROUP BY producer",
    "SELECT model_list.version  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.miles_per_gallon = (SELECT MAX(miles_per_gallon) FROM cars_data)",
    "SELECT mode FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY miles_per_gallon DESC LIMIT 1",
    "SELECT AVG(hp) FROM cars_data WHERE year < 1980",
    "SELECT AVG(hp) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.mode = model_list.modelid  JOIN car_makers ON model_list.producer = car_makers.id  WHERE car_makers.producer = 'volvo'",
    "SELECT AVG(edispl) FROM cars_data WHERE makeid IN (SELECT modelid FROM car_names WHERE mode = 'volvo')",
    "SELECT cylinder_number, MAX(speed_up) FROM cars_data GROUP BY cylinder_number",
    "SELECT MAX(speed_up) FROM cars_data",
    "SELECT model_list.producer, model_list.version, COUNT(*) AS num_cars FROM model_list JOIN car_names ON model_list.modelid = car_names.mode GROUP BY model_list.producer, model_list.version ORDER BY num_cars DESC LIMIT 1;",
    "SELECT producer, modelid, COUNT(DISTINCT version) AS num_versions FROM model_list GROUP BY producer, modelid ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.producer = car_makers.id WHERE car_makers.full_appellation = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE producer = 'American Motor Company'",
    "SELECT car_makers.id, car_makers.full_appellation  FROM car_makers  JOIN model_list ON car_makers.id = model_list.producer  GROUP BY car_makers.id, car_makers.full_appellation  HAVING COUNT(DISTINCT model_list.modelid) > 3",
    "SELECT id, producer FROM car_makers WHERE id IN (SELECT producer FROM model_list GROUP BY producer HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model_list.version  FROM model_list  JOIN car_makers ON model_list.producer = car_makers.producer  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE (car_makers.full_appellation = 'General Motors' OR cars_data.heaviness > 3500)",
    "SELECT DISTINCT model_list.version  FROM model_list  JOIN car_makers ON model_list.producer = car_makers.producer  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE (car_makers.producer = 'General Motors' OR cars_data.heaviness > 3500)",
    "SELECT DISTINCT year FROM cars_data WHERE heaviness BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE heaviness < 4000 AND heaviness > 3000",
    "SELECT hp FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT hp FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE modelid = 'volvo' ORDER BY speed_up ASC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE id IN (SELECT id FROM model_list WHERE producer = 'volvo' ORDER BY speed_up ASC LIMIT 1)",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE hp = (SELECT MAX(hp) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE hp = (SELECT MAX(hp) FROM cars_data))",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.producer) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.producer) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT mode FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinder_number = 4  ORDER BY hp DESC  LIMIT 1",
    "SELECT model_list.version  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinder_number = 4  ORDER BY cars_data.hp DESC  LIMIT 1",
    "SELECT makeid, producer FROM car_names WHERE hp > (SELECT MIN(hp) FROM cars_data) AND cylinder_number <= 3",
    "SELECT makeid, producer FROM car_names  WHERE cylinder_number < 4 AND hp > (SELECT MIN(hp) FROM cars_data)",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE cylinder_number = 8 AND year < 1980",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE cylinder_number = 8 OR year < 1980",
    "SELECT model_list.version  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  JOIN car_makers ON model_list.producer = car_makers.producer  WHERE cars_data.heaviness < 3500 AND car_makers.nation != 'Ford Motor Company'",
    "SELECT mode FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  JOIN model_list ON car_names.mode = model_list.modelid  JOIN car_makers ON model_list.producer = car_makers.id  WHERE heaviness < 3500 AND car_makers.producer != 'Ford Motor Company'",
    "SELECT DISTINCT countries.nation_designation  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.nation  WHERE car_makers.id IS NULL",
    "SELECT countries.nation_designation  FROM countries  WHERE NOT EXISTS      (SELECT *       FROM car_makers       WHERE car_makers.nation = countries.nation_designation)",
    "SELECT id, producer FROM car_makers WHERE id IN (SELECT producer FROM model_list GROUP BY producer HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT producer FROM model_list GROUP BY producer HAVING COUNT(DISTINCT producer) > 3)",
    "SELECT id, producer FROM car_makers WHERE id IN (SELECT producer FROM model_list GROUP BY producer HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT producer FROM car_names GROUP BY producer HAVING COUNT(*) > 3)",
    "SELECT DISTINCT countries.countryid, countries.nation_designation FROM countries JOIN car_makers ON countries.countryid = car_makers.nation JOIN car_names ON car_makers.id = car_names.makeid WHERE car_names.mode = 'fiat' OR countries.countryid IN (   SELECT car_makers.nation   FROM car_makers   GROUP BY car_makers.nation   HAVING COUNT(DISTINCT car_makers.id) > 3 )",
    "SELECT countryid, nation_designation FROM countries WHERE countryid IN (SELECT nation FROM car_makers GROUP BY nation HAVING COUNT(DISTINCT producer) > 3) OR countryid IN (SELECT nation FROM car_makers WHERE producer = 'fiat')",
    "SELECT countries.nation AS country_name FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.nation ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.nation FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.nation ORDER BY COUNT(DISTINCT car_makers.maker) DESC LIMIT 1",
    "I'm sorry, but the schema you provided does not contain any information about the acceleration of cars. Could you please provide a schema that includes this information?",
    "SELECT speed_up FROM cars_data WHERE makeid = (SELECT makeid FROM car_names WHERE model = 'hornet sportabout (sw)' AND maker = 'amc')",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'france'",
    "SELECT COUNT(*) FROM car_makers WHERE maker = 'care' AND country = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.nation = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.nation WHERE countries.nation = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinder_number = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinder_number = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT DISTINCT countries.countryid, countries.nation FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT countries.countryid, countries.nation FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT c.nation FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'europe' GROUP BY c.nation HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.nation FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.nation HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT MAX(horsepower), make FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  WHERE cylinder_number = 3 GROUP BY make",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN model_list ON cars_data.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinder_number = 3 GROUP BY maker",
    "SELECT cylinder_number, MAX(speed_up) FROM cars_data GROUP BY cylinder_number",
    "SELECT MAX(speed_up) FROM cars_data",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT horsepower FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE model = 'volvo' ORDER BY speed_up ASC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE model = 'volvo' ORDER BY speed_up ASC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT model FROM model_list  WHERE modelid IN (SELECT makeid FROM car_names WHERE cylinder_number = 4)  ORDER BY horsepower DESC LIMIT 1",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinder_number = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT DISTINCT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cylinder_number <= 3",
    "SELECT makeid, maker FROM car_names  WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cylinder_number < 4",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinder_number = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinder_number = 8 OR year < 1980",
    "SELECT DISTINCT countries.nation FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.nation FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT countries.countryid, countries.nation  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  JOIN car_names ON car_makers.id = car_names.makeid  WHERE car_makers.maker = 'fiat' OR countries.countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT countryid, nation FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.mainland GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.mainland GROUP BY continents.contid, continents.continent",
    "SELECT car_makers.complete_name, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model_name = model_list.mode GROUP BY car_makers.complete_name, car_makers.id",
    "SELECT car_makers.id, car_makers.complete_name, COUNT(model_list.modelid) AS num_models_produced FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by GROUP BY car_makers.id, car_makers.complete_name",
    "SELECT model_list.mode FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.engine = (SELECT MIN(engine) FROM cars_data)",
    "SELECT model_list.mode FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.engine ASC LIMIT 1",
    "SELECT model_name FROM car_names  WHERE id IN (     SELECT id FROM (         SELECT id, mass, AVG(mass) OVER() as avg_mass FROM cars_data     ) as subquery     WHERE mass < avg_mass )",
    "SELECT model_list.mode FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.mass < (SELECT AVG(mass) FROM cars_data)",
    "SELECT DISTINCT car_makers.complete_name FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.complete_name  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT makeid, year FROM cars_data WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.creator, MIN(cars_data.year) FROM car_makers  JOIN model_list ON car_makers.id = model_list.produced_by  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model_name = cars_data.id  GROUP BY car_makers.creator  ORDER BY MIN(cars_data.year)  LIMIT 1",
    "SELECT DISTINCT model_name FROM car_names  JOIN model_list ON car_names.makeid = model_list.produced_by  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE year > 1980",
    "SELECT DISTINCT model_name FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS car_makers_count FROM continents JOIN countries ON continents.contid = countries.mainland JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id)  FROM continents  JOIN countries ON continents.contid = countries.mainland  JOIN car_makers ON countries.countryid = car_makers.nation  GROUP BY continents.continent",
    "SELECT countries.state AS country_name FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.state ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.state FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.state ORDER BY COUNT(car_makers.id) DESC LIMIT 1",
    "SELECT car_makers.complete_name, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by GROUP BY car_makers.complete_name",
    "SELECT car_makers.id, car_makers.complete_name, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by GROUP BY car_makers.id, car_makers.complete_name",
    "SELECT speed_up FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model_name = 'hornet sportabout (sw)' AND car_names.manufacture = 'amc'",
    "SELECT speed_up FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid AND cars_data.model = car_names.model_name WHERE car_names.model_name = 'amc hornet sportabout (sw)'",
    "SELECT COUNT(*) FROM car_makers WHERE nation = 'france'",
    "SELECT COUNT(DISTINCT id) FROM car_makers WHERE creator = 'care' AND nation = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON produced_by = id JOIN countries ON nation = countryid WHERE state = 'usa'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON produced_by = id JOIN countries ON nation = countryid JOIN continents ON countries.mainland = continents.contid WHERE continent = 'United States'",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE number_cylinder = 4",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE number_cylinder = 4",
    "SELECT MIN(mass) FROM cars_data WHERE number_cylinder = 8 AND year = 1974",
    "SELECT MIN(mass) FROM cars_data WHERE number_cylinder = 8 AND year = 1974",
    "SELECT creator, mode FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by",
    "SELECT creator, mode FROM car_makers JOIN model_list ON car_makers.id = model_list.produced_by",
    "SELECT DISTINCT countries.countryid, countries.state FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.nation",
    "SELECT countries.countryid, countries.state FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) >= 1",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(mass) FROM cars_data GROUP BY year",
    "SELECT year, AVG(mass) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year",
    "SELECT countries.state FROM countries  JOIN car_makers ON countries.countryid = car_makers.nation  WHERE continents.continent = 'europe'  GROUP BY countries.state  HAVING COUNT(DISTINCT car_makers.creator) >= 3",
    "SELECT DISTINCT countries.state FROM countries JOIN car_makers ON countries.countryid = car_makers.nation WHERE countries.mainland = 'Europe' GROUP BY countries.state HAVING COUNT(DISTINCT car_makers.creator) >= 3",
    "SELECT MAX(cars_data.engine), car_makers.complete_name  FROM cars_data  JOIN model_list ON cars_data.produced_by = model_list.modelid  JOIN car_names ON model_list.mode = car_names.makeid  JOIN car_makers ON car_names.manufacture = car_makers.id  WHERE cars_data.number_cylinder = 3",
    "SELECT MAX(engine) AS largest_horsepower, creator AS make FROM cars_data JOIN model_list ON cars_data.id = model_list.mode JOIN car_makers ON model_list.produced_by = car_makers.id WHERE number_cylinder = 3",
    "SELECT model_list.mode  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.miles_per_gallon = (SELECT MAX(miles_per_gallon) FROM cars_data)",
    "SELECT model_name FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE miles_per_gallon = (SELECT MAX(miles_per_gallon) FROM cars_data)",
    "SELECT AVG(engine) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  JOIN model_list ON cars_data.produced_by = model_list.modelid  JOIN car_names ON model_list.mode = car_names.makeid  WHERE car_names.model_name = 'volvo'",
    "SELECT AVG(edispl) FROM cars_data WHERE produced_by IN (SELECT makeid FROM car_names WHERE manufacture = 'Volvo')",
    "SELECT number_cylinder, MAX(speed_up) FROM cars_data GROUP BY number_cylinder",
    "SELECT MAX(speed_up) FROM cars_data",
    "SELECT model_list.produced_by, COUNT(car_names.makeid) AS num_cars FROM model_list JOIN car_names ON model_list.modelid = car_names.model_name GROUP BY model_list.produced_by ORDER BY num_cars DESC LIMIT 1;",
    "SELECT model_name, COUNT(DISTINCT mode) AS num_versions FROM car_names JOIN model_list ON car_names.modelid = model_list.modelid GROUP BY model_name ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE number_cylinder > 4",
    "SELECT COUNT(*) FROM cars_data WHERE number_cylinder > 4",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON produced_by = id WHERE complete_name = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON produced_by = id WHERE creator = 'American Motor Company'",
    "SELECT id, complete_name FROM car_makers WHERE id IN (SELECT produced_by FROM model_list GROUP BY produced_by HAVING COUNT(*) > 3)",
    "SELECT id, complete_name FROM car_makers WHERE id IN (SELECT produced_by FROM model_list GROUP BY produced_by HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model_name FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model_name = model_list.mode  JOIN car_makers ON model_list.produced_by = car_makers.id  WHERE (car_makers.complete_name = 'General Motors' OR cars_data.mass > 3500)",
    "SELECT DISTINCT model_name  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE (cars_data.mass > 3500) OR (car_names.makeid IN (SELECT id FROM car_makers WHERE creator = 'General Motors'))",
    "SELECT DISTINCT year FROM cars_data WHERE mass BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE mass < 4000 AND mass > 3000",
    "SELECT horsepower FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY speed_up DESC LIMIT 1",
    "SELECT number_cylinder FROM cars_data WHERE produced_by = (SELECT modelid FROM model_list WHERE mode = 'volvo') ORDER BY speed_up ASC LIMIT 1",
    "SELECT number_cylinder FROM cars_data WHERE produced_by = (SELECT modelid FROM model_list WHERE mode = 'volvo') ORDER BY speed_up ASC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE engine = (SELECT MAX(engine) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE engine = (SELECT MAX(engine) FROM cars_data))",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.nation GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.creator) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE number_cylinder > 6",
    "SELECT COUNT(*) FROM cars_data WHERE number_cylinder > 6",
    "SELECT model_name FROM cars_data WHERE number_cylinder = 4 ORDER BY engine DESC LIMIT 1",
    "SELECT model_name FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.number_cylinder = 4  ORDER BY cars_data.engine DESC  LIMIT 1",
    "SELECT DISTINCT makeid, complete_name FROM car_makers WHERE id IN (   SELECT produced_by   FROM model_list   WHERE id IN (     SELECT produced_by     FROM cars_data     WHERE number_cylinder <= 3     AND number_cylinder > (       SELECT MIN(number_cylinder)       FROM cars_data       WHERE produced_by = model_list.produced_by     )   ) )",
    "SELECT makeid, complete_name FROM car_makers WHERE id IN (   SELECT produced_by FROM model_list   WHERE modelid IN (     SELECT id FROM cars_data     WHERE number_cylinder < 4 AND number_cylinder != (       SELECT MIN(number_cylinder) FROM cars_data     )   ) )",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE number_cylinder = 8 AND year < 1980",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE number_cylinder = 8 OR year < 1980",
    "SELECT model_name FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.modelid = model_list.modelid  JOIN car_makers ON model_list.produced_by = car_makers.id  WHERE mass < 3500 AND creator != 'Ford Motor Company'",
    "SELECT model_name  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model_name = model_list.mode  JOIN car_makers ON model_list.produced_by = car_makers.id  WHERE mass < 3500 AND creator != 'Ford Motor Company'",
    "SELECT DISTINCT countries.state FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.nation WHERE car_makers.id IS NULL",
    "SELECT countries.state FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.nation WHERE car_makers.id IS NULL",
    "SELECT id, complete_name FROM car_makers WHERE id IN (SELECT produced_by FROM model_list GROUP BY produced_by HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT produced_by FROM model_list GROUP BY produced_by HAVING COUNT(DISTINCT produced_by) > 3)",
    "SELECT makeid, id FROM car_makers WHERE id IN (     SELECT produced_by FROM model_list     GROUP BY produced_by     HAVING COUNT(DISTINCT modelid) >= 2 ) AND id IN (     SELECT produced_by FROM model_list     GROUP BY produced_by     HAVING COUNT(*) > 3 )",
    "SELECT countries.countryid, countries.state FROM countries JOIN car_makers ON countries.countryid = car_makers.nation JOIN model_list ON car_makers.id = model_list.produced_by JOIN car_names ON model_list.modelid = car_names.makeid WHERE car_makers.creator = 'fiat' OR countries.countryid IN (   SELECT countries.countryid   FROM countries   JOIN car_makers ON countries.countryid = car_makers.nation   GROUP BY countries.countryid   HAVING COUNT(DISTINCT car_makers.id) > 3 )",
    "SELECT countryid, state FROM countries WHERE countryid IN (SELECT DISTINCT nation FROM car_makers GROUP BY nation HAVING COUNT(DISTINCT creator) > 3) OR countryid IN (SELECT DISTINCT produced_by FROM model_list WHERE model_name = 'fiat')",
    "SELECT model_name FROM model_list  WHERE maker IN (SELECT maker FROM car_names                  JOIN cars_data ON car_names.makeid = cars_data.id                  WHERE engine = (SELECT MIN(engine) FROM cars_data))  ORDER BY engine LIMIT 1",
    "SELECT model_name FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.engine = (SELECT MIN(engine) FROM cars_data)",
    "SELECT model_name FROM model_list WHERE mass < (SELECT AVG(mass) FROM cars_data)",
    "SELECT model_name FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE mass < (SELECT AVG(mass) FROM cars_data))",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT model_name FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model_name FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinder_number = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinder_number = 4",
    "SELECT MIN(mass) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT MIN(mass) FROM cars_data WHERE cylinder_number = 8 AND year = 1974",
    "SELECT maker, model_name FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
    "SELECT maker, model_name FROM car_makers JOIN model_list ON car_makers.id = model_list.maker_id",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(mass) FROM cars_data GROUP BY year",
    "SELECT year, AVG(mass) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year",
    "SELECT MAX(cars_data.engine) AS maximum_horsepower, car_makers.maker AS make FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.cylinder_number = 3",
    "SELECT MAX(engine) AS largest_horsepower, car_makers.maker AS make FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinder_number = 3",
    "SELECT AVG(engine) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT cylinder_number, MAX(accelerate) FROM cars_data GROUP BY cylinder_number",
    "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinder_number",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 4",
    "SELECT DISTINCT model_name FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE (car_makers.fullname = 'General Motors' OR cars_data.mass > 3500)",
    "SELECT DISTINCT model_name FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.maker = 'General Motors' OR mass > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE mass >= 3000 AND mass <= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE mass < 4000 AND mass > 3000",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE model = 'volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinder_number FROM cars_data WHERE model = 'volvo' ORDER BY accelerate LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinder_number > 6",
    "SELECT model_name FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cylinder_number = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model_name FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE cylinder_number = 4 AND edispl = (SELECT MAX(edispl) FROM cars_data WHERE cylinder_number = 4))",
    "SELECT DISTINCT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.cylinder_number <= 3  AND cars_data.edispl > (SELECT MIN(edispl) FROM cars_data)",
    "SELECT makeid, maker FROM car_names  WHERE cylinder_number < 4 AND makeid NOT IN  (SELECT makeid FROM cars_data WHERE cylinder_number =  (SELECT MIN(cylinder_number) FROM cars_data))",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinder_number = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinder_number = 8 OR year < 1980",
    "SELECT model_name FROM model_list  WHERE maker NOT LIKE 'Ford Motor Company' AND mass < 3500",
    "SELECT model_name FROM model_list  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN cars_data ON car_makers.id = cars_data.id  WHERE mass < 3500 AND car_makers.country != 'USA'",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model_name) >= 2) AND id IN (SELECT maker FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT makeid) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model_name) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT countries.countryid, countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  LEFT JOIN car_names ON car_makers.id = car_names.makeid  WHERE car_makers.maker = 'fiat' OR countries.countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT car_makers.fullname, car_makers.id, COUNT(DISTINCT model_list.modelid) AS number_of_models FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.builder GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM car_names JOIN cars_data ON car_names.id = cars_data.id WHERE heaviness < (SELECT AVG(heaviness) FROM cars_data)",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE heaviness < (         SELECT AVG(heaviness) FROM cars_data     ) )",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.model AND car_names.manufacture = cars_data.id WHERE cars_data.year = 1970",
    "SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  ORDER BY cars_data.year ASC LIMIT 1",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.builder GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS num_models FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.builder GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'hornet sportabout (sw)' AND car_names.manufacture = 'amc'",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'hornet sportabout (sw)' AND car_names.manufacture = 'amc'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.builder = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM car_names cn JOIN car_makers cm ON cn.makeid = cm.id JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'United States'",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(miles_per_gallon) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(heaviness) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(heaviness) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.builder JOIN car_names ON car_names.makeid = car_makers.id ORDER BY maker, model",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.builder JOIN car_names ON car_names.makeid = car_makers.id AND car_names.model = model_list.model",
    "SELECT AVG(heaviness) FROM cars_data GROUP BY year",
    "SELECT year, AVG(heaviness) AS avg_weight, AVG(year) AS avg_year FROM cars_data GROUP BY year",
    "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.builder = car_makers.id  WHERE cars_data.cylinders = 3",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.builder = car_makers.id  WHERE cars_data.cylinders = 3",
    "SELECT model_list.builder, model_list.model, cars_data.miles_per_gallon  FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  ORDER BY cars_data.miles_per_gallon DESC  LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY miles_per_gallon DESC LIMIT 1",
    "SELECT COUNT(DISTINCT model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.builder WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT COUNT(DISTINCT model_list.modelid) FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.builder WHERE car_makers.maker = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT builder FROM model_list GROUP BY builder HAVING COUNT(DISTINCT modelid) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.builder = car_makers.id JOIN cars_data ON model_list.modelid = cars_data.id WHERE (car_makers.fullname = 'General Motors' OR cars_data.heaviness > 3500)",
    "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.builder = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'General Motors' OR heaviness > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE heaviness >= 3000 AND heaviness <= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE heaviness < 4000 AND heaviness > 3000",
    "SELECT car_makers.id AS makeid, car_makers.maker AS make_name FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3",
    "SELECT makeid, maker FROM car_makers WHERE id IN (SELECT makeid FROM cars_data WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data))",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(miles_per_gallon) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON car_makers.id = car_names.makeid WHERE heaviness < 3500 AND car_makers.maker != 'Ford Motor Company'",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON car_makers.id = car_names.makeid JOIN countries ON car_makers.country = countries.countryid WHERE heaviness < 3500 AND countries.countryname != 'Ford Motor Company'",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT builder) > 3)",
    "SELECT makeid, id, maker FROM car_makers WHERE id IN (SELECT builder FROM model_list GROUP BY builder HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT countries.countryid, countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  JOIN car_names ON car_makers.id = car_names.makeid  WHERE car_makers.maker = 'fiat' OR countries.countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT nation FROM airlines WHERE air_service = 'JetBlue Airways'",
    "SELECT nation FROM airlines WHERE air_service = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE air_service = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE air_service = 'Jetblue Airways'",
    "SELECT air_service, abbreviation FROM airlines WHERE nation = 'USA'",
    "SELECT air_service, abbreviation FROM airlines WHERE nation = 'USA'",
    "SELECT airportcode, airport_designation FROM airports WHERE capital = 'Anthony'",
    "SELECT airportcode, airport_designation FROM airports WHERE capital = 'Anthony'",
    "SELECT air_service FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT air_service FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE nation = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE nation = 'USA'",
    "SELECT airports.capital, airports.country FROM airports JOIN flights ON airports.airportcode = flights.destairport WHERE flights.flight_from = 'Alton airport'",
    "SELECT airports.capital, airports.country FROM airports WHERE airports.airport_designation = 'Alton airport'",
    "SELECT name FROM airports WHERE airportcode = 'AKO'",
    "SELECT name FROM airports WHERE airportcode = 'AKO'",
    "SELECT airport_designation FROM airports WHERE capital = 'Aberdeen'",
    "SELECT airports.airport_designation FROM airports WHERE airports.capital = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE flight_from = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE flight_from = 'APG'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.flight_from = airports.airportcode WHERE airports.airport_designation = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE flight_from = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airport_designation = 'Aberdeen city'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.flight_from = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.airport_designation = 'Aberdeen' AND a2.airport_designation = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE flight_from = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights JOIN airlines ON flights.aircraft_company = airlines.uid WHERE airlines.air_service = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE aircraft_company = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid WHERE a.air_service = 'United Airlines' AND f.destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid WHERE a.air_service = 'United Airlines' AND f.destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid JOIN airports ap ON f.flight_from = ap.airportcode WHERE a.air_service = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid JOIN airports ap ON f.flight_from = ap.airportcode WHERE a.air_service = 'United Airlines' AND f.flight_from = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.air_service = 'United Airlines' AND ap.airport_designation = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.aircraft_company = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.air_service = 'United Airlines' AND ap.airport_designation = 'Aberdeen'",
    "SELECT flights.destairport AS city, COUNT(*) AS num_arrivals FROM flights GROUP BY flights.destairport ORDER BY num_arrivals DESC LIMIT 1;",
    "SELECT flights.flight_from AS city, COUNT(*) AS frequency FROM flights GROUP BY flights.flight_from ORDER BY frequency DESC LIMIT 1;",
    "SELECT flight_from AS city, COUNT(*) AS num_departing_flights FROM flights GROUP BY flight_from ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT flight_from FROM flights GROUP BY flight_from ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT air_service FROM airlines  WHERE uid = (SELECT aircraft_company FROM flights               GROUP BY aircraft_company               ORDER BY COUNT(*) DESC               LIMIT 1)",
    "SELECT air_service FROM airlines  WHERE uid = (SELECT aircraft_company FROM flights               GROUP BY aircraft_company               ORDER BY COUNT(*) DESC               LIMIT 1)",
    "SELECT abbreviation, nation FROM airlines WHERE uid = (SELECT aircraft_company FROM flights GROUP BY aircraft_company ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, nation FROM airlines WHERE uid = (SELECT aircraft_company FROM flights GROUP BY aircraft_company ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.air_service  FROM airlines  INNER JOIN flights ON airlines.uid = flights.aircraft_company  WHERE flights.flight_from = 'AHD'",
    "SELECT DISTINCT airlines.air_service  FROM flights  JOIN airlines ON flights.aircraft_company = airlines.uid  WHERE flights.flight_from = 'AHD'",
    "SELECT DISTINCT airlines.air_service  FROM airlines  JOIN flights ON airlines.uid = flights.aircraft_company  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.air_service  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.aircraft_company = airlines.uid  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.air_service  FROM flights  JOIN airlines ON flights.aircraft_company = airlines.uid  WHERE flights.flight_from = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.flight_from = 'CVO' AND flights.aircraft_company = airlines.uid)",
    "SELECT DISTINCT airlines.air_service  FROM flights  JOIN airports AS apg_airport ON flights.flight_from = apg_airport.airportcode  JOIN airports AS cvo_airport ON flights.flight_from = cvo_airport.airportcode  JOIN airlines ON flights.aircraft_company = airlines.uid  WHERE apg_airport.airportcode = 'APG' AND cvo_airport.airportcode = 'CVO'",
    "SELECT DISTINCT airlines.air_service  FROM airlines  JOIN flights ON airlines.uid = flights.aircraft_company  WHERE flights.flight_from = 'CVO'  AND airlines.air_service NOT IN  (SELECT DISTINCT airlines.air_service  FROM airlines  JOIN flights ON airlines.uid = flights.aircraft_company  WHERE flights.flight_from = 'APG')",
    "SELECT DISTINCT airlines.air_service  FROM flights  JOIN airports AS apg_airports ON flights.destairport = apg_airports.airportcode AND apg_airports.airport_designation = 'APG'  JOIN airports AS cvo_airports ON flights.flight_from = cvo_airports.airportcode AND cvo_airports.airport_designation = 'CVO'  JOIN airlines ON flights.aircraft_company = airlines.uid  WHERE apg_airports.airportcode IS NULL",
    "SELECT air_service FROM airlines INNER JOIN flights ON airlines.uid = flights.aircraft_company GROUP BY air_service HAVING COUNT(*) >= 10",
    "SELECT airlines.air_service FROM airlines JOIN flights ON airlines.uid = flights.aircraft_company GROUP BY airlines.air_service HAVING COUNT(*) >= 10",
    "SELECT air_service FROM airlines WHERE uid IN (SELECT aircraft_company FROM flights GROUP BY aircraft_company HAVING COUNT(*) < 200)",
    "SELECT air_service FROM airlines WHERE uid IN (SELECT aircraft_company FROM flights GROUP BY aircraft_company HAVING COUNT(*) < 200)",
    "SELECT flights.plane_digits FROM flights JOIN airlines ON flights.aircraft_company = airlines.uid WHERE airlines.air_service = 'United Airlines'",
    "SELECT plane_digits FROM flights WHERE aircraft_company = 'United Airlines'",
    "SELECT flights.plane_digits FROM flights WHERE flights.flight_from = 'APG'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.flight_from = airports.airportcode WHERE airports.airport_designation = 'APG'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airport_designation = 'APG'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airport_designation = 'APG'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.flight_from = airports.airportcode WHERE airports.airport_designation = 'Aberdeen'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.flight_from = airports.airportcode WHERE airports.airport_designation = 'Aberdeen'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airport_designation = 'Aberdeen'",
    "SELECT flights.plane_digits FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airport_designation = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.airport_designation = 'Aberdeen' OR a.airport_designation = 'Abilene'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airports.name FROM airports LEFT JOIN flights ON airports.airportcode = flights.flight_from OR airports.airportcode = flights.destairport WHERE flights.flight_from IS NULL AND flights.destairport IS NULL",
    "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT flight_from FROM flights UNION SELECT destairport FROM flights)",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT COUNT(*) FROM flights WHERE flying_to = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE flying_to = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE flying_to = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.flying_to = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND flying_to = 'Ashley'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.flying_to = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND f.flying_to = 'ASY Airport'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.flying_to = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.flying_to = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT sourceairport AS city, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT sourceairport AS city, flying_to AS destination, COUNT(*) AS frequency FROM flights GROUP BY sourceairport, flying_to HAVING COUNT(*) = (     SELECT MAX(frequency)     FROM (         SELECT sourceairport, flying_to, COUNT(*) AS frequency         FROM flights         GROUP BY sourceairport, flying_to     ) AS freq_table )",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.flying_to = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.flying_to = 'AHD'",
    "SELECT flights.flight_number FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT flights.airline, flights.flight_number  FROM flights  JOIN airlines ON flights.airline = airlines.abbreviation  WHERE airlines.airline = 'United Airlines'",
    "SELECT flights.flight_number FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flights.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flights.flight_number FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flights.aircraft_code FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flights.flight_number FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flights.aircraft_code FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flights.flight_number FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flights.aircraft_code FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.flying_to = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'",
    "SELECT COUNT(*) FROM flights WHERE flying_to IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT flying_to FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT flying_to FROM flights)",
    "SELECT COUNT(*) FROM flights JOIN airlines ON flights.air_way = airlines.uid WHERE airlines.airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportname = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY' AND f.sourceairport != 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND f.sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_way = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT airline FROM airlines  WHERE uid = (SELECT air_way FROM flights               GROUP BY air_way               ORDER BY COUNT(*) DESC               LIMIT 1)",
    "SELECT airline FROM airlines  WHERE uid = (SELECT air_way FROM flights               GROUP BY air_way               ORDER BY COUNT(*) DESC               LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT air_way FROM flights GROUP BY air_way ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT air_way FROM flights GROUP BY air_way ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.air_way  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airlines ON flights.air_way = airlines.uid WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.air_way = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.air_way WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.air_way = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.destairport = 'CVO' AND flights.air_way = airlines.uid)",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG'  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO'  JOIN airlines ON flights.air_way = airlines.uid",
    "SELECT DISTINCT airline FROM airlines JOIN flights ON airlines.uid = flights.air_way WHERE flights.sourceairport = 'CVO' AND airline NOT IN (     SELECT DISTINCT airline     FROM airlines     JOIN flights ON airlines.uid = flights.air_way     WHERE flights.sourceairport = 'APG' )",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS cvo ON flights.sourceairport = cvo.airportcode AND cvo.airportname = 'CVO'  JOIN airports AS apg ON flights.sourceairport = apg.airportcode AND apg.airportname = 'APG'  JOIN airlines ON flights.air_way = airlines.uid  WHERE apg.airportcode IS NULL",
    "SELECT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.air_way GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.air_way GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines WHERE uid IN (SELECT air_way FROM flights GROUP BY air_way HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT air_way FROM flights GROUP BY air_way HAVING COUNT(*) < 200)",
    "SELECT flightno FROM flights JOIN airlines ON flights.air_way = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT flightno FROM flights JOIN airlines ON flights.air_way = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT country FROM airlines WHERE air_company_name = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE air_company_name = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE air_company_name = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE air_company_name = 'Jetblue Airways'",
    "SELECT air_company_name, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT air_company_name, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airdrome FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airdrome FROM airports WHERE city = 'Anthony'",
    "SELECT air_company_name FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT air_company_name FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT city, country FROM airports WHERE airportcode = 'Alton'",
    "SELECT city, countryabbrev FROM airports WHERE airportcode = 'Alton'",
    "SELECT airdrome FROM airports WHERE airportcode = 'AKO'",
    "SELECT name FROM airports WHERE airportcode = 'AKO'",
    "SELECT airdrome FROM airports WHERE city = 'Aberdeen'",
    "SELECT airdrome FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.air_company_name = 'United Airlines' AND f.destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.air_company_name = 'United Airlines' AND f.sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.air_company_name = 'United Airlines' AND f.sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.air_company_name = 'United Airlines' AND f.destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.air_company_name = 'United Airlines' AND f.destairport = 'Aberdeen'",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.air_company_name  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.air_company_name  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.air_company_name  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO' INTERSECT SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'CVO' AND flights.destairport = 'APG'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportcode = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportcode = 'CVO' JOIN airlines ON flights.airline = airlines.airline;",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'CVO' AND airlines.airline NOT IN (     SELECT DISTINCT flights.airline     FROM flights     JOIN airports ON flights.destairport = airports.airportcode     WHERE airports.airportcode = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG' JOIN airlines ON flights.airline = airlines.airline WHERE apg_airport.airportcode IS NULL",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT airports.airdrome FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport WHERE flights.flightno IS NULL",
    "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT nation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT nation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE nation = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE nation = 'USA'",
    "SELECT airportcode, name FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airfield_designation FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines WHERE nation = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE nation = 'USA'",
    "SELECT city, country FROM airports WHERE airportcode = 'Alton'",
    "SELECT city, country FROM airports WHERE airportcode = 'Alton'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT name FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportcode FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportcode FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE source_airfield = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE source_airfield = 'APG'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.source_airfield = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE source_airfield = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.source_airfield = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE source_airfield = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights JOIN airlines ON flights.air_service = airlines.uid WHERE airlines.airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE air_service = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airfield_designation = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airfield_designation = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.source_airfield = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.source_airfield = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airfield_designation = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.air_service = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT source_airfield AS city, COUNT(*) AS num_departing_flights FROM flights GROUP BY source_airfield ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT source_airfield AS city, COUNT(*) AS frequency FROM flights GROUP BY source_airfield ORDER BY frequency DESC LIMIT 1",
    "SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.air_service GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline FROM airlines  WHERE uid = (SELECT air_service FROM flights               GROUP BY air_service               ORDER BY COUNT(*) DESC               LIMIT 1)",
    "SELECT abbreviation, nation FROM airlines WHERE uid = (SELECT air_service FROM flights GROUP BY air_service ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, nation FROM airlines WHERE uid = (SELECT air_service FROM flights GROUP BY air_service ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.air_service  WHERE flights.source_airfield = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.air_service = airlines.uid  WHERE flights.source_airfield = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.air_service  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.air_service WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.air_service = airlines.uid  WHERE flights.source_airfield = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.air_service = airlines.uid AND flights.source_airfield = 'CVO')",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS apg_airport ON flights.source_airfield = apg_airport.airportcode  JOIN airports AS cvo_airport ON flights.source_airfield = cvo_airport.airportcode  JOIN airlines ON flights.air_service = airlines.uid  WHERE apg_airport.airportcode = 'APG' AND cvo_airport.airportcode = 'CVO'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.air_service = airlines.uid  WHERE flights.source_airfield = 'CVO'  AND airlines.airline NOT IN (     SELECT DISTINCT airlines.airline      FROM flights      JOIN airlines ON flights.air_service = airlines.uid      WHERE flights.source_airfield = 'APG' )",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS apg ON flights.destairport = apg.airportcode  JOIN airports AS cvo ON flights.source_airfield = cvo.airportcode  JOIN airlines ON flights.air_service = airlines.uid  WHERE cvo.airportcode = 'CVO' AND apg.airportcode != 'APG'",
    "SELECT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.air_service GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.air_service GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines WHERE uid IN (SELECT air_service FROM flights GROUP BY air_service HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT air_service FROM flights GROUP BY air_service HAVING COUNT(*) < 200)",
    "SELECT flightno FROM flights JOIN airlines ON flights.air_service = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT flightno FROM flights JOIN airlines ON flights.air_service = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE source_airfield = 'APG'",
    "SELECT flightno FROM flights WHERE source_airfield = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.source_airfield = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.source_airfield = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT airports.name FROM airports LEFT JOIN flights ON airports.airportcode = flights.source_airfield OR airports.airportcode = flights.destairport WHERE flights.air_service IS NULL",
    "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT source_airfield FROM flights UNION SELECT destairport FROM flights)",
    "SELECT metropolis, COUNT(*) FROM employee GROUP BY metropolis",
    "SELECT metropolis, COUNT(*) AS num_employees FROM employee GROUP BY metropolis",
    "SELECT metropolis FROM employee WHERE age < 30 GROUP BY metropolis HAVING COUNT(DISTINCT employee_id) > 1",
    "SELECT metropolis FROM employee WHERE age < 30 GROUP BY metropolis HAVING COUNT(*) > 1",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT s.head, s.district FROM shop s WHERE s.commodity_quantity = (SELECT MAX(s2.commodity_quantity) FROM shop s2)",
    "SELECT s.head, s.district FROM shop s WHERE s.commodity_quantity = (SELECT MAX(commodity_quantity) FROM shop)",
    "SELECT MIN(commodity_quantity), MAX(commodity_quantity) FROM shop",
    "SELECT MIN(commodity_quantity), MAX(commodity_quantity) FROM shop",
    "SELECT name, whereabouts, area FROM shop ORDER BY commodity_quantity DESC",
    "SELECT name, whereabouts, area FROM shop ORDER BY commodity_quantity DESC",
    "SELECT name FROM shop WHERE commodity_quantity > (SELECT AVG(commodity_quantity) FROM shop)",
    "SELECT shop.name  FROM shop  WHERE shop.commodity_quantity > (SELECT AVG(commodity_quantity) FROM shop)",
    "SELECT DISTINCT s.whereabouts FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN evaluation e ON h.employee_id = e.employee_id WHERE s.commodity_quantity < 3000 AND s.shop_id IN (     SELECT s.shop_id     FROM shop s     JOIN hiring h ON s.shop_id = h.shop_id     WHERE s.commodity_quantity > 10000 )",
    "SELECT DISTINCT s1.area  FROM shop s1  JOIN shop s2 ON s1.area = s2.area  WHERE s1.commodity_quantity < 3000 AND s2.commodity_quantity > 10000",
    "SELECT COUNT(DISTINCT whereabouts) FROM shop",
    "SELECT COUNT(DISTINCT whereabouts) FROM shop",
    "SELECT manager_name, district FROM shop ORDER BY products_number DESC LIMIT 1",
    "SELECT manager_name, district FROM shop WHERE products_number = (SELECT MAX(products_number) FROM shop)",
    "SELECT MIN(products_number), MAX(products_number) FROM shop",
    "SELECT MIN(products_number), MAX(products_number) FROM shop",
    "SELECT name, location, district FROM shop ORDER BY products_number DESC",
    "SELECT name, location, district FROM shop ORDER BY products_number DESC",
    "SELECT name FROM shop WHERE products_number > (SELECT AVG(products_number) FROM shop)",
    "SELECT name FROM shop WHERE products_number > (SELECT AVG(products_number) FROM shop)",
    "SELECT DISTINCT district FROM shop WHERE products_number < 3000 AND district IN (SELECT district FROM shop WHERE products_number > 10000)",
    "SELECT DISTINCT district FROM shop WHERE products_number < 3000 AND district IN (SELECT district FROM shop WHERE products_number > 10000)",
    "SELECT metropolis, COUNT(*) AS num_employees FROM employee GROUP BY metropolis",
    "SELECT metropolis, COUNT(*) AS num_employees FROM employee GROUP BY metropolis",
    "SELECT metropolis FROM employee WHERE age < 30 GROUP BY metropolis HAVING COUNT(DISTINCT employee_id) > 1",
    "SELECT metropolis FROM employee WHERE age < 30 GROUP BY metropolis HAVING COUNT(*) > 1",
    "SELECT district, COUNT(shop_id) AS num_shops FROM shop GROUP BY district;",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT name, position AS location, district, number_products FROM shop ORDER BY number_products DESC",
    "SELECT name, position, district FROM shop ORDER BY number_products DESC",
    "SELECT COUNT(DISTINCT shop_id) FROM shop",
    "SELECT COUNT(DISTINCT shop.metropolis) FROM shop",
    "SELECT whereabouts, COUNT(*) AS num_shops FROM shop GROUP BY whereabouts",
    "SELECT whereabouts, COUNT(*) AS num_shops FROM shop GROUP BY whereabouts",
    "SELECT manager_name, whereabouts FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, whereabouts FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT name, whereabouts, region FROM shop ORDER BY number_products DESC",
    "SELECT name, whereabouts, region FROM shop ORDER BY number_products DESC",
    "SELECT DISTINCT s1.whereabouts FROM shop s1, shop s2 WHERE s1.whereabouts = s2.whereabouts AND s1.number_products < 3000 AND s2.number_products > 10000",
    "SELECT DISTINCT s1.whereabouts FROM shop s1, shop s2 WHERE s1.whereabouts = s2.whereabouts AND s1.number_products < 3000 AND s2.number_products > 10000",
    "SELECT COUNT(DISTINCT whereabouts) FROM shop",
    "SELECT COUNT(DISTINCT whereabouts) FROM shop",
    "SELECT document_id, document_designation, explanation FROM documents",
    "SELECT document_id, templates.template_details, documents.explanation FROM documents JOIN templates ON documents.template_id = templates.template_id",
    "SELECT documents.document_designation, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.tempalte_class_cipher = ref_template_types.category_code WHERE documents.explanation LIKE '%w%'",
    "SELECT templates.template_id, templates.template_details FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.explanation LIKE '%w%'",
    "SELECT document_id, template_id, explanation FROM documents WHERE document_designation = 'Robbin CV'",
    "SELECT documents.document_id, documents.template_id, documents.explanation FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_designation = 'Robbin CV'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE tempalte_class_cipher = 'PPT')",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE tempalte_class_cipher = 'PPT')",
    "SELECT template_id, template_class_cipher FROM templates WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_id, template_class_cipher  FROM templates  WHERE template_id = (     SELECT template_id      FROM documents      GROUP BY template_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT templates.template_id, templates.version_number, templates.tempalte_class_cipher FROM templates",
    "SELECT template_id, version_number, tempalte_class_cipher FROM templates",
    "SELECT DISTINCT category_code FROM ref_template_types",
    "SELECT category_code FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_class_cipher IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_class_cipher IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_class_cipher = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_class_cipher = 'CV'",
    "SELECT version_number, tempalte_class_cipher FROM templates WHERE version_number > 5",
    "SELECT version_number, tempalte_class_cipher FROM templates WHERE version_number > 5",
    "SELECT category_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.category_code = templates.tempalte_class_cipher GROUP BY category_code",
    "SELECT category_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.category_code = templates.tempalte_class_cipher GROUP BY category_code",
    "SELECT category_code FROM ref_template_types  WHERE category_code = (SELECT template_class_cipher FROM templates                         GROUP BY template_class_cipher                         ORDER BY COUNT(*) DESC                         LIMIT 1)",
    "SELECT category_code  FROM ref_template_types  WHERE category_code = (     SELECT template_class_cipher      FROM templates      GROUP BY template_class_cipher      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT category_code FROM ref_template_types  WHERE category_code IN (SELECT template_class_cipher FROM templates                          GROUP BY template_class_cipher                          HAVING COUNT(*) < 3)",
    "SELECT category_code FROM ref_template_types WHERE category_code IN (SELECT template_class_cipher FROM templates GROUP BY template_class_cipher HAVING COUNT(*) < 3)",
    "SELECT templates.version_number, templates.tempalte_class_cipher FROM templates ORDER BY templates.version_number ASC LIMIT 1",
    "SELECT templates.version_number, templates.tempalte_class_cipher FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT ref_template_types.category_code  FROM ref_template_types  JOIN templates ON ref_template_types.category_code = templates.tempalte_class_cipher  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_designation = 'Data base'",
    "SELECT templates.template_class_cipher  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_designation = 'Data base'",
    "SELECT documents.document_designation  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE templates.template_class_cipher = 'BK'",
    "SELECT documents.document_designation  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE templates.tempalte_class_cipher LIKE '%BK%'",
    "SELECT category_code, COUNT(*) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.category_code = templates.tempalte_class_cipher JOIN documents ON templates.template_id = documents.template_id GROUP BY category_code",
    "SELECT category_code, COUNT(*) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.category_code = templates.tempalte_class_cipher JOIN documents ON templates.template_id = documents.template_id GROUP BY category_code",
    "SELECT category_code FROM ref_template_types  WHERE category_code = (SELECT template_class_cipher FROM templates                         GROUP BY template_class_cipher                         ORDER BY COUNT(*) DESC                         LIMIT 1)",
    "SELECT category_code FROM ref_template_types WHERE category_code = (     SELECT template_class_cipher     FROM templates     GROUP BY template_class_cipher     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT category_code FROM ref_template_types WHERE category_code NOT IN (SELECT tempalte_class_cipher FROM templates)",
    "SELECT category_code FROM ref_template_types WHERE category_code NOT IN (SELECT tempalte_class_cipher FROM templates)",
    "SELECT category_code, description FROM ref_template_types",
    "SELECT category_code, description FROM ref_template_types",
    "SELECT description FROM ref_template_types WHERE category_code = 'AD'",
    "SELECT description FROM ref_template_types WHERE category_code = 'AD'",
    "SELECT category_code FROM ref_template_types WHERE description = 'Book'",
    "SELECT category_code FROM ref_template_types WHERE description = 'Book'",
    "SELECT DISTINCT description FROM ref_template_types WHERE category_code IN (SELECT DISTINCT tempalte_class_cipher FROM templates INNER JOIN documents ON templates.template_id = documents.template_id)",
    "SELECT DISTINCT ref_template_types.description  FROM templates  JOIN documents ON templates.template_id = documents.template_id  JOIN ref_template_types ON templates.tempalte_class_cipher = ref_template_types.category_code",
    "SELECT template_id FROM templates JOIN ref_template_types ON templates.tempalte_class_cipher = ref_template_types.category_code WHERE ref_template_types.description = 'Presentation'",
    "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE t.description = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_designation = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT paragraph_id, content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Welcome to NY'",
    "SELECT paragraph_id, content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Welcome to NY'",
    "SELECT content FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_designation = 'Customer reviews')",
    "SELECT content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_designation = 'Customer reviews'",
    "SELECT documents.document_id, documents.document_designation, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_designation",
    "SELECT documents.document_id, documents.document_designation, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_designation",
    "SELECT document_id, name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id, document_designation  FROM documents  WHERE document_id = (SELECT document_id                       FROM paragraphs                       GROUP BY document_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT document_id  FROM paragraphs  WHERE content LIKE '%Brazil%' AND content LIKE '%Ireland%'",
    "SELECT DISTINCT document_id FROM paragraphs WHERE content LIKE '%Brazil%' AND document_id IN (SELECT document_id FROM paragraphs WHERE content LIKE '%Ireland%')",
    "SELECT document_id, filename, document_description FROM documents",
    "SELECT document_id, templates.template_id, templates.template_details, documents.document_description  FROM documents  JOIN templates ON documents.template_id = templates.template_id",
    "SELECT documents.filename, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT document_id, template_id, document_description FROM documents WHERE filename = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents  WHERE filename = 'Robbin CV'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_description = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.filename = 'Data base'",
    "SELECT documents.filename FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT documents.filename FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE t.template_details = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE filename = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Welcome to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_details = 'Welcome to NY'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_description = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Customer reviews'",
    "SELECT documents.document_id, documents.filename, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.filename",
    "SELECT documents.document_id, documents.filename, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.filename",
    "SELECT document_id, filename FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT documents.document_id, documents.document_description FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;",
    "SELECT document_id, file_designation, file_elaboration FROM documents",
    "SELECT document_id, templates.template_details, ref_template_types.description  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_kind_codification = ref_template_types.category_cipher",
    "SELECT documents.file_designation, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.file_elaboration LIKE '%w%'",
    "SELECT templates.template_id, templates.template_details FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.file_elaboration LIKE '%w%'",
    "SELECT documents.document_id, documents.template_id, templates.template_details  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.file_designation = 'Robbin CV'",
    "SELECT documents.document_id, documents.template_id, templates.template_details  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.file_designation = 'Robbin CV'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_kind_codification = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_kind_codification = 'PPT'",
    "SELECT template_id, template_kind_codification FROM templates WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_id, template_kind_codification  FROM templates  WHERE template_id = (SELECT template_id                       FROM documents                       GROUP BY template_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT template_id, version_number, template_kind_codification FROM templates",
    "SELECT template_id, version_number, template_kind_codification FROM templates",
    "SELECT DISTINCT template_kind_codification FROM templates",
    "SELECT category_cipher FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_kind_codification IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_kind_codification IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_kind_codification = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_kind_codification = 'CV'",
    "SELECT version_number, template_kind_codification FROM templates WHERE version_number > 5",
    "SELECT version_number, template_kind_codification FROM templates WHERE version_number > 5",
    "SELECT template_kind_codification, COUNT(*) AS num_templates FROM templates GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*)  FROM templates  GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*) AS num_templates FROM templates GROUP BY template_kind_codification ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_kind_codification FROM templates GROUP BY template_kind_codification ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_kind_codification FROM templates GROUP BY template_kind_codification HAVING COUNT(*) < 3",
    "SELECT template_kind_codification FROM templates  GROUP BY template_kind_codification  HAVING COUNT(template_id) < 3",
    "SELECT templates.version_number, templates.template_kind_codification FROM templates ORDER BY templates.version_number ASC LIMIT 1",
    "SELECT templates.version_number, templates.template_kind_codification FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT template_kind_codification FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.file_designation = 'Data base'",
    "SELECT templates.template_kind_codification  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.file_designation = 'Data base'",
    "SELECT documents.file_designation  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE templates.template_kind_codification = 'BK'",
    "SELECT documents.file_designation  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE templates.template_kind_codification = 'BK'",
    "SELECT template_kind_codification, COUNT(*) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*) AS num_docs FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_kind_codification ORDER BY num_docs DESC LIMIT 1;",
    "SELECT template_kind_codification FROM templates GROUP BY template_kind_codification ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT category_cipher  FROM ref_template_types  WHERE category_cipher NOT IN (SELECT template_kind_codification FROM templates)",
    "SELECT category_cipher FROM ref_template_types WHERE category_cipher NOT IN (SELECT template_kind_codification FROM templates)",
    "SELECT category_cipher, description FROM ref_template_types",
    "SELECT category_cipher, description FROM ref_template_types",
    "SELECT description FROM ref_template_types WHERE category_cipher = 'AD'",
    "SELECT description FROM ref_template_types WHERE category_cipher = 'AD'",
    "SELECT category_cipher FROM ref_template_types WHERE description = 'Book'",
    "SELECT category_cipher FROM ref_template_types WHERE description = 'Book'",
    "SELECT DISTINCT description FROM ref_template_types WHERE category_cipher IN (SELECT DISTINCT template_kind_codification FROM templates WHERE template_id IN (SELECT DISTINCT template_id FROM documents))",
    "SELECT DISTINCT ref_template_types.description  FROM templates  JOIN documents ON templates.template_id = documents.template_id  JOIN ref_template_types ON templates.template_kind_codification = ref_template_types.category_cipher",
    "SELECT template_id FROM templates WHERE template_kind_codification = 'Presentation'",
    "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE t.template_details = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE file_designation = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT paragraph_id, content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Welcome to NY'",
    "SELECT paragraph_id, content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Welcome to NY'",
    "SELECT content FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE file_designation = 'Customer reviews')",
    "SELECT content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_details = 'Customer reviews'",
    "SELECT documents.document_id, documents.file_designation, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.file_designation",
    "SELECT documents.document_id, documents.file_designation, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.file_designation",
    "SELECT document_id, name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT documents.document_id, documents.file_designation FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;",
    "SELECT document_id  FROM paragraphs  WHERE content LIKE '%Brazil%' AND content LIKE '%Ireland%'",
    "SELECT DISTINCT document_id FROM paragraphs WHERE content LIKE '%Brazil%' AND content LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_kind_codification = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_kind_codification = 'PPT'",
    "SELECT template_id, template_kind_codification  FROM templates  WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_id, template_kind_codification  FROM templates  WHERE template_id = (     SELECT template_id      FROM documents      GROUP BY template_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT templates.template_id, templates.version_number, templates.template_kind_codification FROM templates",
    "SELECT template_id, version_number, template_kind_codification FROM templates",
    "SELECT DISTINCT template_kind_codification FROM templates",
    "SELECT template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_kind_codification IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_kind_codification IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_kind_codification = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_kind_codification = 'CV'",
    "SELECT version_number, template_kind_codification FROM templates WHERE version_number > 5",
    "SELECT version_number, template_kind_codification FROM templates WHERE version_number > 5",
    "SELECT template_kind_codification, COUNT(*) AS num_templates FROM templates GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*)  FROM templates  GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*) AS num_templates FROM templates GROUP BY template_kind_codification ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_kind_codification AS type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_kind_codification ORDER BY num_templates DESC LIMIT 1;",
    "SELECT category_cipher FROM ref_template_types  WHERE category_cipher IN (     SELECT template_kind_codification FROM templates      GROUP BY template_kind_codification      HAVING COUNT(*) < 3 )",
    "SELECT template_kind_codification FROM templates  GROUP BY template_kind_codification  HAVING COUNT(DISTINCT template_id) < 3",
    "SELECT version_number, template_kind_codification FROM templates ORDER BY version_number ASC LIMIT 1",
    "SELECT template_kind_codification, MIN(version_number) FROM templates GROUP BY template_kind_codification",
    "SELECT template_kind_codification FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_kind_codification  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT document_name FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_kind_codification = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_kind_codification LIKE '%BK%'",
    "SELECT t.template_kind_codification, COUNT(d.document_id) AS num_documents FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_kind_codification",
    "SELECT template_kind_codification, COUNT(*)  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY template_kind_codification",
    "SELECT template_kind_codification, COUNT(*) AS num_docs FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_kind_codification ORDER BY num_docs DESC LIMIT 1;",
    "SELECT template_kind_codification FROM templates GROUP BY template_kind_codification ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT category_cipher  FROM ref_template_types  WHERE category_cipher NOT IN      (SELECT template_kind_codification       FROM templates       WHERE template_id NOT IN           (SELECT template_id            FROM documents))",
    "SELECT category_cipher  FROM ref_template_types  WHERE category_cipher NOT IN      (SELECT template_kind_codification       FROM templates)",
    "SELECT category_cipher, template_type_description FROM ref_template_types",
    "SELECT category_cipher, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE category_cipher = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE category_cipher = 'AD'",
    "SELECT category_cipher FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT category_cipher FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT template_type_description FROM ref_template_types WHERE category_cipher IN (SELECT DISTINCT template_kind_codification FROM templates WHERE template_id IN (SELECT DISTINCT template_id FROM documents))",
    "SELECT DISTINCT template_type_description FROM ref_template_types WHERE category_cipher IN (SELECT template_kind_codification FROM templates WHERE template_id IN (SELECT template_id FROM documents))",
    "SELECT template_id FROM templates  INNER JOIN ref_template_types ON templates.template_kind_codification = ref_template_types.category_cipher  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
    "SELECT document_id, document_name, detailing FROM documents",
    "SELECT document_id, document_name, detailing FROM documents",
    "SELECT document_name, template_id FROM documents WHERE detailing LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.detailing LIKE '%w%'",
    "SELECT document_id, template_id, detailing FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, detailing FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE content LIKE '%Korea%'",
    "SELECT paragraph_id, content FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_id, content FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Welcome to NY'",
    "SELECT content FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT content FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT document_id  FROM paragraphs  WHERE content LIKE '%Brazil%' AND content LIKE '%Ireland%'",
    "SELECT DISTINCT document_id FROM paragraphs WHERE content LIKE '%Brazil%' AND document_id IN (SELECT document_id FROM paragraphs WHERE content LIKE '%Ireland%')",
    "SELECT name FROM visitor WHERE type_of_membership > 4 ORDER BY type_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE type_of_membership <= 4",
    "SELECT name, type_of_membership FROM visitor WHERE type_of_membership > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY staff_num DESC LIMIT 1",
    "SELECT AVG(staff_num) FROM museum WHERE accessible_from < '2009-01-01'",
    "SELECT accessible_from, staff_num FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE staff_num > (SELECT MIN(staff_num) FROM museum WHERE accessible_from > '2010-01-01')",
    "SELECT visitor.id, visitor.name, visitor.type_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.type_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id WHERE vi.coupon_quantity = (SELECT MAX(coupon_quantity) FROM visit)",
    "SELECT AVG(visit.coupon_quantity), MAX(visit.coupon_quantity) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE type_of_membership = 1)",
    "SELECT DISTINCT v.name FROM visitor v JOIN visit v1 ON v.id = v1.visitor_id JOIN visit v2 ON v.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.accessible_from < '2009-01-01' AND m2.accessible_from > '2011-12-31'",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE accessible_from > '2010-01-01')",
    "SELECT COUNT(*) FROM museum WHERE accessible_from > '2013-01-01' OR accessible_from < '2008-01-01'",
    "SELECT museum_id, name FROM museum ORDER BY staff_num DESC LIMIT 1;",
    "SELECT AVG(staff_num) FROM museum WHERE open_year < 2009",
    "SELECT open_year, staff_num FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE staff_num > (SELECT MIN(staff_num) FROM museum WHERE open_year > 2010)",
    "SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id WHERE vi.coupon_quantity = (SELECT MAX(coupon_quantity) FROM visit)",
    "SELECT AVG(coupon_quantity), MAX(coupon_quantity) FROM visit",
    "SELECT AVG(num_of_staff) FROM museum WHERE airing_year < 2009",
    "SELECT airing_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE airing_year > 2010)",
    "SELECT DISTINCT v.name  FROM visitor v  JOIN visit v1 ON v.id = v1.visitor_id  JOIN visit v2 ON v.id = v2.visitor_id  JOIN museum m1 ON v1.museum_id = m1.museum_id  JOIN museum m2 ON v2.museum_id = m2.museum_id  WHERE m1.airing_year < 2009 AND m2.airing_year > 2011",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE airing_year > 2010))",
    "SELECT COUNT(*) FROM museum WHERE airing_year > 2013 OR airing_year < 2008",
    "SELECT museum_id, name FROM museum ORDER BY how_many_workers DESC LIMIT 1;",
    "SELECT AVG(how_many_workers) FROM museum WHERE open_year < 2009",
    "SELECT open_year, how_many_workers FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE how_many_workers > (SELECT MIN(how_many_workers) FROM museum WHERE open_year > 2010)",
    "SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id WHERE vi.coupon_quantity = (SELECT MAX(coupon_quantity) FROM visit)",
    "SELECT AVG(coupon_quantity), MAX(coupon_quantity) FROM visit",
    "SELECT name FROM visitor WHERE fellowship_classification > 4 ORDER BY fellowship_classification DESC",
    "SELECT AVG(age) FROM visitor WHERE fellowship_classification <= 4",
    "SELECT name, fellowship_classification FROM visitor WHERE fellowship_classification > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY staff_num DESC LIMIT 1;",
    "SELECT AVG(staff_num) FROM museum WHERE open_year < 2009",
    "SELECT open_year, staff_num FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE staff_num > (SELECT MIN(staff_num) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.fellowship_classification FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.fellowship_classification ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE fellowship_classification = 1)",
    "SELECT given_name, birthday FROM players WHERE state_code = 'USA'",
    "SELECT given_name, birthday FROM players WHERE state_code = 'USA'",
    "SELECT AVG(winner_how_old) as avg_winner_age, AVG(loser_how_old) as avg_loser_age FROM matches",
    "SELECT AVG(victor_how_old) as avg_winner_age, AVG(total_loss - victor_how_old) as avg_loser_age FROM matches",
    "SELECT AVG(achiever_ranking) FROM matches",
    "SELECT AVG(achiever_ranking) FROM matches",
    "SELECT COUNT(DISTINCT players.state_code) FROM players",
    "SELECT COUNT(DISTINCT state_code) FROM players",
    "SELECT COUNT(DISTINCT final_name) FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
    "SELECT COUNT(DISTINCT final_name) FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT event_name FROM matches GROUP BY event_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p.final_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.given_name, p.final_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT players.state_code, players.given_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_id = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_id = 'Australian Open'",
    "SELECT given_name, players.state_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE tourney_id = 'WTA Championships' AND EXISTS (     SELECT 1 FROM matches AS m2     WHERE m2.tourney_id = 'Australian Open' AND m2.winner_id = players.player_id )",
    "SELECT given_name, state_code FROM players WHERE birthday = (SELECT MIN(birthday) FROM players)",
    "SELECT given_name, state_code FROM players WHERE birthday = (SELECT MAX(birthday) FROM players)",
    "SELECT given_name, final_name FROM players ORDER BY birthday",
    "SELECT CONCAT(given_name, ' ', final_name) AS full_name FROM players ORDER BY birthday",
    "SELECT given_name, final_name FROM players WHERE hand = 'L' ORDER BY birthday",
    "SELECT given_name || ' ' || final_name AS full_name FROM players WHERE hand = 'L' ORDER BY birthday ASC",
    "SELECT players.given_name, players.state_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.given_name, players.state_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings) LIMIT 1",
    "SELECT victor_name, winner_rank_points FROM matches WHERE victor_name IN (SELECT victor_name FROM matches GROUP BY victor_name HAVING COUNT(*) = (SELECT MAX(wins) FROM (SELECT COUNT(*) AS wins FROM matches GROUP BY victor_name) AS win_counts)) ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT victor_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT victor_name FROM matches WHERE tourney_id = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_id = 'Australian Open')",
    "SELECT p.final_name FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.event_name = 'Australian Open' AND r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1;",
    "SELECT loser.final_name, winner.final_name FROM matches JOIN players AS loser ON matches.loser_id = loser.player_id JOIN players AS winner ON matches.winner_id = winner.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner.final_name, loser.final_name FROM matches  JOIN players AS winner ON matches.winner_id = winner.player_id  JOIN players AS loser ON matches.loser_id = loser.player_id  WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT AVG(rankings.position), players.given_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT given_name, AVG(ranking_points) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT state_code, COUNT(*) AS num_players FROM players GROUP BY state_code",
    "SELECT state_code, COUNT(*) FROM players GROUP BY state_code",
    "SELECT state_code FROM players GROUP BY state_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT state_code FROM players GROUP BY state_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT state_code FROM players GROUP BY state_code HAVING COUNT(*) > 50",
    "SELECT state_code FROM players GROUP BY state_code HAVING COUNT(*) > 50",
    "SELECT tourney_date, COUNT(*) as total_tours FROM rankings GROUP BY tourney_date",
    "SELECT ranking_time, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_time",
    "SELECT victor_name, achiever_ranking FROM matches JOIN players ON matches.winner_id = players.player_id WHERE victor_how_old = (SELECT MIN(victor_how_old) FROM matches) ORDER BY achiever_ranking LIMIT 3",
    "SELECT given_name, final_name, achiever_ranking FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY birthday DESC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE event_name = 'WTA Championships' AND loser_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.event_name = 'WTA Championships'",
    "SELECT players.given_name, players.state_code, players.birthday FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT p.given_name, p.state_code, p.birthday FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT given_name, born_date FROM players WHERE country_code = 'USA'",
    "SELECT given_name, born_date FROM players WHERE country_code = 'USA'",
    "SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL",
    "SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL",
    "SELECT DISTINCT p.given_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.given_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT players.country_code, players.given_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.given_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.champ_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT given_name, country_code FROM players WHERE born_date = (SELECT MIN(born_date) FROM players)",
    "SELECT given_name, country_code FROM players WHERE born_date = (SELECT MAX(born_date) FROM players)",
    "SELECT given_name, last_name FROM players ORDER BY born_date",
    "SELECT CONCAT(given_name, ' ', last_name) AS full_name FROM players ORDER BY born_date",
    "SELECT given_name, last_name FROM players WHERE hand = 'L' ORDER BY born_date",
    "SELECT given_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY born_date ASC",
    "SELECT players.given_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.given_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.given_name, players.last_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT players.given_name, players.last_name, MAX(rankings.ranking_points) as rank_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY rank_points DESC LIMIT 1",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(rankings.ranking_points) FROM rankings JOIN matches ON rankings.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open')",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE tourney_name = 'Australian Open')",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT players.given_name, AVG(rankings.position) as avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT given_name, AVG(ranking_points) as average_rankings FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT given_name, last_name, winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY winner_age LIMIT 3",
    "SELECT given_name, last_name, winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE champ_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.given_name, players.country_code, players.born_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT p.given_name, p.country_code, p.born_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT AVG(champion_ranking) FROM matches",
    "SELECT AVG(champion_ranking) FROM matches",
    "SELECT winner_name, champion_ranking FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_name, MAX(ranking_points) FROM (SELECT winner_name, SUM(ranking_points) AS ranking_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_name) AS winner_ranking_points",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND champion_ranking = (SELECT MAX(champion_ranking) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name, champion_ranking FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, champion_ranking FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.champion_ranking = (SELECT MAX(champion_ranking) FROM matches)",
    "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.person_won_rank_scores = (SELECT MAX(person_won_rank_scores) FROM matches) LIMIT 1",
    "SELECT given_name, birth_date FROM players WHERE nation_code = 'USA'",
    "SELECT given_name, birth_date FROM players WHERE nation_code = 'USA'",
    "SELECT AVG(winner_age) FROM matches",
    "SELECT AVG(winner_age) as avg_winner_age, AVG(loser_age) as avg_loser_age FROM matches",
    "SELECT AVG(rankings.ranking) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id",
    "SELECT AVG(rankings.ranking) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id",
    "SELECT MAX(loser_rank_points) FROM matches",
    "SELECT MAX(loser_rank_points) FROM matches",
    "SELECT COUNT(DISTINCT nation_code) FROM players",
    "SELECT COUNT(DISTINCT nation_code) FROM players",
    "SELECT DISTINCT p.given_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.given_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT players.nation_code, players.given_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.given_name, players.nation_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT given_name, nation_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT given_name, nation_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT given_name, last_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(given_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT given_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT given_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.given_name, players.nation_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.given_name, players.nation_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1",
    "SELECT players.given_name, players.last_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT players.given_name, players.last_name, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(matches.winner_rank_points) FROM matches WHERE matches.tourney_name = 'Australian Open')",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT AVG(rankings.ranking) AS avg_ranking, players.given_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT given_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT nation_code, COUNT(*) AS num_players FROM players GROUP BY nation_code",
    "SELECT nation_code, COUNT(*) FROM players GROUP BY nation_code",
    "SELECT nation_code FROM players GROUP BY nation_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT nation_code FROM players GROUP BY nation_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT nation_code FROM players GROUP BY nation_code HAVING COUNT(*) > 50",
    "SELECT nation_code FROM players GROUP BY nation_code HAVING COUNT(*) > 50",
    "SELECT tourney_date, COUNT(*) as total_tours FROM matches GROUP BY tourney_date",
    "SELECT ranking_time, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_time",
    "SELECT players.given_name, players.last_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age ASC LIMIT 3",
    "SELECT given_name, last_name, ranking FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id ORDER BY birth_date ASC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE champ_position = 'W' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.given_name, players.nation_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT p.given_name, p.nation_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT given_name, birth_date FROM players WHERE nation_code = 'USA'",
    "SELECT given_name, birth_date FROM players WHERE nation_code = 'USA'",
    "SELECT AVG(loser_age) FROM matches UNION SELECT AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(champ_age) AS avg_winner_age FROM matches",
    "SELECT COUNT(DISTINCT nation_code) FROM players",
    "SELECT COUNT(DISTINCT nation_code) FROM players",
    "SELECT COUNT(DISTINCT players.last_name) FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.failure = 'L'",
    "SELECT COUNT(DISTINCT last_name) FROM players WHERE player_id IN (SELECT loser_id FROM matches)",
    "SELECT DISTINCT p.given_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.given_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT players.nation_code, players.given_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.given_name, players.nation_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT given_name, nation_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT given_name, nation_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT given_name, last_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(given_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT given_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT given_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.given_name, players.nation_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT players.given_name, players.nation_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1",
    "SELECT players.given_name, players.last_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT players.given_name, players.last_name, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(rankings.ranking_points) FROM rankings JOIN matches ON rankings.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open')",
    "SELECT players.given_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE tourney_name = 'Australian Open')",
    "SELECT loser.given_name AS loser_given_name, loser.last_name AS loser_last_name, winner.given_name AS winner_given_name, winner.last_name AS winner_last_name FROM matches JOIN players AS loser ON matches.loser_id = loser.player_id JOIN players AS winner ON matches.winner_id = winner.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner.given_name, winner.last_name, loser.given_name, loser.last_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT players.given_name, AVG(rankings.rank) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT players.given_name, AVG(rankings.rank)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id",
    "SELECT players.given_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.given_name",
    "SELECT players.given_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.given_name",
    "SELECT nation_code, COUNT(*) AS num_players FROM players GROUP BY nation_code",
    "SELECT nation_code, COUNT(*) FROM players GROUP BY nation_code",
    "SELECT nation_code FROM players GROUP BY nation_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT nation_code FROM players GROUP BY nation_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT nation_code FROM players GROUP BY nation_code HAVING COUNT(*) > 50",
    "SELECT nation_code FROM players GROUP BY nation_code HAVING COUNT(*) > 50",
    "SELECT players.given_name, players.last_name, matches.champ_name, matches.champ_age FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.champ_age ASC LIMIT 3",
    "SELECT given_name, last_name, winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY birth_date ASC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE champ_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.given_name, players.nation_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT p.given_name, p.nation_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT death.mark, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "SELECT name, ending FROM battle_death_0.battle WHERE bulgarian_head <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  INNER JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.craft_classification = 'Brig' AND battle.id NOT IN  (SELECT DISTINCT battle.id FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  INNER JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.craft_classification != 'Brig')",
    "SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_head = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT ending) FROM battle",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.missed_in_warfare = b.id AND s.tonnage = 225 AND s.disposition_of_ship = 'lost')",
    "SELECT battle.name, battle.date FROM battle JOIN ship AS s1 ON battle.id = s1.missed_in_warfare JOIN ship AS s2 ON battle.id = s2.missed_in_warfare WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta' AND s1.disposition_of_ship = 'lost' AND s2.disposition_of_ship = 'lost'",
    "SELECT battle.name, battle.ending, battle.bulgarian_head FROM battle LEFT JOIN ship ON battle.id = ship.missed_in_warfare WHERE ship.missed_in_warfare IS NULL AND battle.ending = 'no ships lost' AND battle.spot = 'English Channel'",
    "SELECT notes FROM death WHERE notes LIKE '%East%'",
    "SELECT COUNT(*) FROM ship WHERE vessel_disposition = 'Captured'",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (     SELECT DISTINCT ship.lost_in_battle     FROM ship     WHERE ship.site = 'English Channel' AND ship.lost_in_battle IS NOT NULL )",
    "SELECT notice FROM death WHERE notice LIKE '%East%'",
    "SELECT name, heaviness FROM ship ORDER BY name DESC",
    "SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.heaviness = 't'",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.lost_in_battle = b.id AND s.heaviness = 225)",
    "SELECT COUNT(*) FROM ship WHERE lost_in_battle = 'Captured'",
    "SELECT name, consequence FROM battle_death_3 WHERE bulgarian_head <> 'Boril'",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_head = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT consequence) FROM battle",
    "SELECT battle.name, battle.consequence, battle.bulgarian_head FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE battle.consequence = 'no ships lost' AND battle.position = 'English Channel'",
    "SELECT COUNT(*) FROM ship WHERE how_ship_disposed = 'Captured'",
    "SELECT name, effect FROM battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  INNER JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.ship_type = 'Brig' AND battle.id NOT IN  (SELECT DISTINCT battle.id FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  INNER JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.ship_type != 'Brig')",
    "SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10",
    "SELECT COUNT(DISTINCT effect) FROM battle",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.tonnage = '225' AND s.forfeited_in_combat = b.id)",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.forfeited_in_combat WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
    "SELECT battle.name, battle.effect, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.forfeited_in_combat WHERE ship.forfeited_in_combat IS NULL AND battle.effect LIKE '%no ships lost%' AND battle.effect LIKE '%English Channel%'",
    "SELECT info FROM death WHERE info LIKE '%East%'",
    "SELECT path_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT course_description FROM courses WHERE lesson_name = 'math'",
    "SELECT course_description FROM courses WHERE lesson_name LIKE '%math%'",
    "SELECT zip_postal_code FROM addresses WHERE capital_area = 'Port Chelsea'",
    "SELECT zip_postal_code FROM addresses WHERE path_1 = 'Port Chelsea'",
    "SELECT COUNT(DISTINCT degree_synopsis) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, lesson_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, lesson_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT students.forename, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2;",
    "SELECT s.student_id, s.forename, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.semester_id = se2.semester_id AND se1.degree_program_id <> se2.degree_program_id GROUP BY s.student_id, s.forename, s.middle_name, s.last_name HAVING COUNT(DISTINCT se1.degree_program_id) = 2",
    "SELECT forename, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_synopsis LIKE '%Bachelor%'",
    "SELECT forename, middle_name, last_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_synopsis = 'Bachelors'",
    "SELECT degree_synopsis, COUNT(*) AS num_students_enrolled FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_synopsis ORDER BY num_students_enrolled DESC LIMIT 1",
    "SELECT degree_synopsis FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_synopsis ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_description ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_program_id, degree_synopsis FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT se.student_id, s.forename, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM student_enrolment se JOIN students s ON se.student_id = s.student_id GROUP BY se.student_id, s.forename, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.forename, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT DISTINCT courses.lesson_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT courses.lesson_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT courses.lesson_name  FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  GROUP BY courses.lesson_name  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT courses.lesson_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT phone_number FROM students WHERE forename = 'Timmothy' AND last_name = 'Ward'",
    "SELECT phone_number FROM students WHERE forename = 'Timmothy' AND last_name = 'Ward'",
    "SELECT forename, middle_name, last_name FROM students ORDER BY initially_enrolled_at LIMIT 1",
    "SELECT forename, middle_name, last_name FROM students ORDER BY initially_enrolled_at LIMIT 1",
    "SELECT forename, middle_name, last_name FROM students ORDER BY initially_enrolled_at ASC LIMIT 1",
    "SELECT forename, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  INNER JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id  ORDER BY record_time ASC LIMIT 1",
    "SELECT forename FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT forename FROM students WHERE current_address_id <> permanent_address_id LIMIT 1",
    "SELECT current_address_id AS address_id, path_1, line_2, line_3  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  GROUP BY current_address_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT addresses.address_id, addresses.path_1, addresses.line_2  FROM addresses  JOIN students ON students.current_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1",
    "SELECT AVG(record_time) FROM transcripts",
    "SELECT AVG(record_time) FROM transcripts",
    "SELECT record_time, other_details FROM transcripts ORDER BY record_time LIMIT 1",
    "SELECT MIN(record_time), * FROM transcripts",
    "SELECT MAX(record_time) FROM transcripts",
    "SELECT MAX(record_time) FROM transcripts",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_synopsis = 'Master'     )      INTERSECT      SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_synopsis = 'Bachelor'     ) )",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_synopsis = 'Masters') AND degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_synopsis = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT * FROM students ORDER BY last_name DESC, first_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM sections WHERE section_designation = 'h'",
    "SELECT section_description FROM sections WHERE section_designation = 'h'",
    "SELECT forename FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE nation = 'Haiti') OR phone_number = '09700166582' LIMIT 1",
    "SELECT forename FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE nation = 'Haiti') OR phone_number = '09700166582'",
    "SELECT courses.number_of_course, courses.course_name FROM courses WHERE courses.number_of_course IN (     SELECT sections.course_id     FROM sections     GROUP BY sections.course_id     HAVING COUNT(*) <= 2 )",
    "SELECT course_id, course_name FROM courses WHERE number_of_course < 2",
    "SELECT department_description FROM departments WHERE department_name LIKE '%the computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT s.first_name, s.middle_name, s.ending_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1",
    "SELECT s.student_id, s.first_name, s.middle_name, s.ending_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id",
    "SELECT first_name, middle_name, ending_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, ending_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'",
    "SELECT s.student_id, s.first_name, s.middle_name, s.ending_name, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.ending_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT DISTINCT course_name FROM courses WHERE number_of_course IN (SELECT course_id FROM student_enrolment_courses)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.number_of_course = student_enrolment_courses.course_id",
    "SELECT course_name FROM courses WHERE number_of_course = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT course_name FROM courses WHERE number_of_course = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT ending_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT ending_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND ending_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND ending_name = 'Ward'",
    "SELECT first_name, middle_name, ending_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, ending_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, ending_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, ending_name FROM students  WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT * FROM students ORDER BY first_name DESC, middle_name DESC, ending_name DESC",
    "SELECT * FROM students ORDER BY ending_name DESC",
    "SELECT course_details FROM courses WHERE course_name = 'math'",
    "SELECT course_details FROM courses WHERE course_name LIKE '%math%'",
    "SELECT transcript_date, transcript_contents FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT course_description FROM courses WHERE course_designation = 'math'",
    "SELECT course_description FROM courses WHERE course_designation LIKE 'MATH%'",
    "SELECT COUNT(DISTINCT degree_digest_designation) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT section_name, detailing FROM sections",
    "SELECT section_name, detailing FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_designation FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT students.first_name, students.middle_name, students.surname, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2;",
    "SELECT student_id, first_name, middle_name, surname FROM students WHERE student_id IN (     SELECT student_id     FROM student_enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM student_enrolment         GROUP BY student_id, semester_id, degree_program_id         HAVING COUNT(*) = 2     )     GROUP BY student_id     HAVING COUNT(DISTINCT semester_id) = 1 )",
    "SELECT first_name, middle_name, surname FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_digest_designation LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, surname FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_digest_designation = 'Bachelors'",
    "SELECT degree_programs.degree_digest_designation, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_digest_designation ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_description FROM degree_programs  WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment                             GROUP BY degree_program_id                             ORDER BY COUNT(student_id) DESC                             LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_description ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_program_id, degree_summary_description  FROM student_enrolment  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1",
    "SELECT student.student_id, student.first_name, student.middle_name, student.surname, COUNT(student_enrolment.student_enrolment_id) AS num_enrollments FROM student JOIN student_enrolment ON student.student_id = student_enrolment.student_id GROUP BY student.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.surname, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrollment_courses ON courses.course_id = student_enrollment_courses.course_id",
    "SELECT DISTINCT courses.course_designation  FROM courses  JOIN sections ON courses.prerequisite = sections.course_id  JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.course_id",
    "SELECT courses.course_name FROM courses JOIN student_enrollment_courses ON courses.course_id = student_enrollment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT courses.course_name FROM courses JOIN student_enrollment_courses ON courses.course_id = student_enrollment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT surname FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT surname FROM students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_id, when_record FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, when_record FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND surname = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND surname = 'Ward'",
    "SELECT first_name, middle_name, surname FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, surname FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, surname FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, surname FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  INNER JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id  INNER JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  ORDER BY when_record ASC LIMIT 1",
    "SELECT current_address_id AS address_id, line_1, path_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT AVG(when_record) FROM transcripts",
    "SELECT AVG(when_record) FROM transcripts",
    "SELECT when_record, other_details FROM transcripts ORDER BY when_record ASC LIMIT 1",
    "SELECT MIN(when_record), other_details FROM transcripts",
    "SELECT MAX(when_record) FROM transcripts",
    "SELECT MAX(when_record) FROM transcripts",
    "SELECT transcript_id, when_record FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, when_record FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT DISTINCT e.semester_id      FROM student_enrolment e      JOIN degree_programs d ON e.degree_program_id = d.degree_program_id      WHERE d.degree_digest_designation = 'Master'      AND e.semester_id IN (         SELECT DISTINCT e.semester_id          FROM student_enrolment e          JOIN degree_programs d ON e.degree_program_id = d.degree_program_id          WHERE d.degree_digest_designation = 'Bachelor'     ) )",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_digest_designation = 'Masters') AND degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_digest_designation = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT * FROM students ORDER BY surname DESC, first_name DESC, middle_name DESC",
    "SELECT * FROM students ORDER BY surname DESC",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT COUNT(DISTINCT summary_appellation) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT name, section_description FROM sections",
    "SELECT name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_id, semesters.semester_designation, COUNT(student_enrolment.student_id) AS num_students_registered FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_designation ORDER BY num_students_registered DESC LIMIT 1;",
    "SELECT semesters.semester_id, semesters.semester_designation, sections.course_id, COUNT(*) AS num_students FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN sections ON student_enrolment_courses.course_id = sections.course_id GROUP BY semesters.semester_id, sections.course_id HAVING COUNT(*) = (     SELECT MAX(num_students)     FROM (         SELECT semesters.semester_id, sections.course_id, COUNT(*) AS num_students         FROM student_enrolment         JOIN semesters ON student_enrolment.semester_id = semesters.semester_id         JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id         JOIN sections ON student_enrolment_courses",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_description LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_description = 'Bachelors'",
    "SELECT degree_programs.summary_appellation FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.summary_appellation ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment                             GROUP BY degree_program_id                             ORDER BY COUNT(*) DESC                             LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.summary_appellation FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.summary_appellation ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT degree_program_id, summary_appellation FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_program_id, summary_appellation ORDER BY COUNT(student_id) DESC LIMIT 1",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.prerequisite = student_enrolment_courses.course_id",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT courses.course_name  FROM courses  JOIN sections ON courses.prerequisite = sections.section_id  JOIN student_enrolment_courses ON sections.course_id = student_enrolment_courses.course_id  GROUP BY courses.course_name  ORDER BY COUNT(DISTINCT student_enrolment_courses.student_enrolment_id) DESC  LIMIT 1",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY day_initally_itemized LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY day_initally_itemized LIMIT 1",
    "SELECT current_address_id AS address_id, line_1, path_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT a.address_id, a.line_1, a.line_2  FROM addresses a  JOIN students s ON a.address_id = s.current_address_id  JOIN student_enrolment se ON s.student_id = se.student_id  GROUP BY a.address_id  ORDER BY COUNT(DISTINCT se.student_enrolment_id) DESC  LIMIT 1",
    "SELECT AVG(record_time) FROM transcripts",
    "SELECT AVG(record_time) FROM transcripts",
    "SELECT record_time, particularities FROM transcripts ORDER BY record_time LIMIT 1",
    "SELECT MIN(record_time), particularities FROM transcripts",
    "SELECT MAX(record_time) FROM transcripts",
    "SELECT MAX(record_time) FROM transcripts",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, record_time FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester.semester_designation  FROM semesters semester  INNER JOIN student_enrolment enrolment ON semester.semester_id = enrolment.semester_id  INNER JOIN degree_programs degree ON enrolment.degree_program_id = degree.degree_program_id  WHERE degree.summary_appellation = 'Master'  AND semester.semester_id IN (SELECT enrolment.semester_id FROM student_enrolment enrolment                               INNER JOIN degree_programs degree ON enrolment.degree_program_id = degree.degree_program_id                               WHERE degree.summary_appellation = 'Bachelor')",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE summary_appellation = 'Masters') AND degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE summary_appellation = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT * FROM sections WHERE section_description = 'h'",
    "SELECT section_description FROM sections WHERE section_id = 'h'",
    "SELECT cover_title FROM cartoon ORDER BY cover_title ASC",
    "SELECT cover_title FROM cartoon ORDER BY cover_title ASC",
    "SELECT cover_title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT cover_title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT cartoon.cover_title, cartoon.directed_by FROM cartoon ORDER BY cartoon.earliest_air_date ASC",
    "SELECT cover_title, directed_by FROM cartoon ORDER BY earliest_air_date",
    "SELECT cover_title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT cover_title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT substance) FROM tv_channel",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT substance) FROM tv_channel",
    "SELECT substance FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT series_name FROM tv_channel WHERE id = 'Sky Radio'",
    "SELECT COUNT(*) FROM tv_channel WHERE dialect = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE dialect = 'English'",
    "SELECT dialect, COUNT(*) AS num_channels FROM tv_channel GROUP BY dialect ORDER BY num_channels ASC LIMIT 1;",
    "I'm sorry, but the provided schema doesn't seem to have any table that contains information about the languages used by TV channels. Could you please provide the correct schema?",
    "SELECT dialect, COUNT(*) FROM tv_channel GROUP BY dialect",
    "SELECT dialect, COUNT(*) FROM tv_channel GROUP BY dialect",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_station JOIN cartoon ON tv_series.id = cartoon.medium WHERE cartoon.cover_title = \"The Rise of the Blue Beetle!\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_station JOIN cartoon ON tv_series.id = cartoon.medium WHERE cartoon.cover_title = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.cover_title  FROM tvshow_0.cartoon  JOIN tvshow_0.tv_series ON cartoon.id = tv_series.id  JOIN tvshow_0.tv_channel ON tv_series.tv_station = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cover_title FROM cartoon  JOIN tv_series ON cartoon.id = tv_series.id  JOIN tv_channel ON tv_series.tv_station = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT id, chapter, grades, release_day FROM tv_series ORDER BY grades DESC",
    "SELECT * FROM tv_series ORDER BY grades DESC",
    "SELECT series_name, chapter, grades FROM tv_series ORDER BY grades DESC LIMIT 3",
    "SELECT series_name, grades FROM tv_series ORDER BY grades DESC LIMIT 3",
    "SELECT MIN(18_49_rating_share), MAX(18_49_rating_share) FROM tv_series",
    "SELECT MAX(18_49_rating_share), MIN(18_49_rating_share) FROM tv_series",
    "SELECT earliest_air_date FROM cartoon WHERE cover_title = 'A Love of a Lifetime'",
    "SELECT release_day FROM tv_series WHERE cover_title = 'A Love of a Lifetime'",
    "SELECT every_week_ranking FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT every_week_ranking FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_station WHERE tv_series.chapter = \"A Love of a Lifetime\"",
    "SELECT series_name FROM tv_channel WHERE id IN (SELECT tv_channel FROM tv_series WHERE id IN (SELECT id FROM cartoon WHERE cover_title = 'A Love of a Lifetime'))",
    "SELECT tv_series.chapter  FROM tv_channel  JOIN tv_series ON tv_channel.series_name = tv_series.tv_station  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT chapter FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT manufacture_codification, tv_channel FROM cartoon WHERE earliest_air_date = (SELECT MAX(earliest_air_date) FROM cartoon)",
    "SELECT manufacture_codification, tv_channel  FROM cartoon  JOIN tv_series ON cartoon.id = tv_series.id  ORDER BY release_day DESC  LIMIT 1",
    "SELECT DISTINCT tv_channel.country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.tv_station  JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tvshow_0.tv_channel  JOIN tvshow_0.tv_series ON tv_channel.id = tv_series.tv_station  JOIN tvshow_0.cartoon ON tv_series.id = cartoon.medium  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.id       FROM cartoon       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel_id JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_station JOIN cartoon ON tv_series.id = cartoon.medium WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT series_name, country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.tv_station  JOIN cartoon ON tv_series.id = cartoon.medium  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'",
    "SELECT pixel_aspect_percentage_par, country FROM tv_channel WHERE dialect != 'English'",
    "SELECT pixel_aspect_percentage_par, country FROM tv_channel WHERE dialect <> 'English'",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.tv_station LEFT JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.tv_station  LEFT JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.id IS NULL OR cartoon.directed_by <> 'Ben Jones'",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT tv_station       FROM tv_series       JOIN cartoon ON tv_series.id = cartoon.id       WHERE directed_by = 'Ben Jones')",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT tv_station FROM tv_series JOIN cartoon ON tv_series.id = cartoon.id WHERE directed_by = 'Ben Jones')",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.initial_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY initial_air_date",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.chapter, tv_series.rating FROM tvshow_1.tv_series ORDER BY tv_series.rating DESC LIMIT 3",
    "SELECT chapter, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT air_date FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT air_date FROM tv_series WHERE title = 'A Love of a Lifetime'",
    "SELECT every_week_ranking FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT every_week_ranking FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel WHERE tv_series.id = (SELECT id FROM tv_series WHERE tv_series.chapter = \"A Love of a Lifetime\")",
    "SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel WHERE tv_series.chapter = \"A Love of a Lifetime\"",
    "SELECT tv_series.chapter, tv_series.air_date  FROM tv_series  JOIN tv_channel ON tv_series.tv_channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT chapter FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT manufacture_codification, channel FROM cartoon WHERE initial_air_date = (SELECT MAX(initial_air_date) FROM cartoon)",
    "SELECT manufacture_codification, channel FROM cartoon WHERE initial_air_date = (SELECT MAX(initial_air_date) FROM cartoon)",
    "SELECT title FROM cartoon WHERE director = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE director = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE scripted_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE scripted_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.director FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date ASC",
    "SELECT title, director FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id ORDER BY air_date",
    "SELECT title FROM cartoon WHERE director = 'Ben Jones' OR director = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE director = 'Ben Jones' OR director = 'Brandon Vietti'",
    "SELECT director, COUNT(*) AS num_cartoons FROM cartoon GROUP BY director",
    "SELECT director, COUNT(*) FROM cartoon GROUP BY director",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.scripted_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.scripted_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.scripted_by = 'Todd Casey')",
    "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE scripted_by = 'Todd Casey')",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.director IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.director = 'Ben Jones' AND cartoon.director = 'Michael Chang'",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.director = 'Ben Jones' WHERE cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.director = 'Ben Jones'  WHERE cartoon.id IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE director = 'Ben Jones')",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE director = 'Ben Jones')",
    "SELECT cover_name FROM cartoon ORDER BY cover_name ASC",
    "SELECT cover_name FROM cartoon ORDER BY cover_name ASC",
    "SELECT cover_name FROM cartoon WHERE conductor = 'Ben Jones'",
    "SELECT cover_name FROM cartoon WHERE conductor = 'Ben Jones'",
    "SELECT cartoon.cover_name, cartoon.conductor FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.first_show ASC",
    "SELECT cover_name, conductor FROM cartoon ORDER BY initial_air_date",
    "SELECT cover_name FROM cartoon WHERE conductor = 'Ben Jones' OR conductor = 'Brandon Vietti'",
    "SELECT cover_name FROM cartoon WHERE conductor = 'Ben Jones' OR conductor = 'Brandon Vietti'",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT substance) FROM tv_channel",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT substance) FROM tv_channel",
    "SELECT substance FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT series_name FROM tv_channel WHERE id = 'Sky Radio'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.cover_name = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.cover_name = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.cover_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT cover_name FROM cartoon  JOIN tv_series ON cartoon.id = tv_series.id  JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT MIN(portion), MAX(portion) FROM tv_series",
    "SELECT MAX(portion), MIN(portion) FROM tv_series",
    "SELECT first_show FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT first_show FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT conductor, COUNT(*) AS num_cartoons FROM cartoon GROUP BY conductor",
    "SELECT conductor, COUNT(*) FROM cartoon GROUP BY conductor",
    "SELECT manufacture_codification, channel FROM cartoon WHERE initial_air_date = (SELECT MAX(initial_air_date) FROM cartoon)",
    "SELECT manufacture_codification, channel FROM cartoon WHERE initial_air_date = (SELECT MAX(initial_air_date) FROM cartoon)",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.conductor IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.conductor = 'Ben Jones' AND cartoon.conductor = 'Michael Chang'",
    "SELECT pixel_aspect_percentage_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_percentage_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.conductor = 'Ben Jones' WHERE cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.conductor = 'Ben Jones'  WHERE cartoon.id IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE conductor = 'Ben Jones')",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE conductor = 'Ben Jones')",
    "SELECT title FROM cartoon WHERE conductor = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE conductor = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE writer = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE writer = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.conductor FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date",
    "SELECT cartoon.title, cartoon.conductor FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date",
    "SELECT title FROM cartoon WHERE conductor = 'Ben Jones' OR conductor = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE conductor = 'Ben Jones' OR conductor = 'Brandon Vietti'",
    "SELECT COUNT(DISTINCT series_designation), COUNT(DISTINCT content) FROM tv_channel;",
    "SELECT COUNT(DISTINCT series_designation, content) FROM tv_channel",
    "SELECT content FROM tv_channel WHERE series_designation = 'Sky Radio'",
    "SELECT content FROM tv_channel WHERE series_designation = 'Sky Radio'",
    "SELECT pack_possible_choices FROM tv_channel WHERE series_designation = 'Sky Radio'",
    "SELECT pack_possible_choices FROM tv_channel WHERE series_designation = 'Sky Radio'",
    "SELECT tv_channel.series_designation FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\"",
    "SELECT tv_channel.series_designation FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.tv_channel = tv_channel.id WHERE tv_channel.series_designation = 'Sky Radio'",
    "SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_designation = 'Sky Radio')",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM cartoon ORDER BY rating DESC",
    "SELECT tv_series.chapter, tv_series.rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT chapter, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(portion), MAX(portion) FROM tv_series",
    "SELECT MAX(18_49_rating_share), MIN(18_49_rating_share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE chapter = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE title = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE series_designation = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE title = 'A Love of a Lifetime'",
    "SELECT tv_channel.series_designation FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel WHERE tv_series.chapter = \"A Love of a Lifetime\"",
    "SELECT title FROM cartoon WHERE id IN (SELECT id FROM tv_series WHERE chapter = 'A Love of a Lifetime')",
    "SELECT tv_series.chapter, tv_series.air_date, tv_series.rating, tv_series.portion FROM tv_series JOIN tv_channel ON tv_series.tv_channel = tv_channel.id WHERE tv_channel.series_designation = 'Sky Radio'",
    "I'm sorry, but the serialized schema you provided does not contain a table for episodes or any information about the episodes of a TV series. Can you please provide a schema that includes information about the episodes of a TV series?",
    "SELECT conductor, COUNT(*) AS num_cartoons FROM cartoon GROUP BY conductor",
    "SELECT conductor, COUNT(*) AS num_cartoons_created FROM cartoon GROUP BY conductor",
    "SELECT pack_possible_choices, series_designation FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT pack_possible_choices, series_designation FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.writer = 'Todd Casey'",
    "SELECT DISTINCT country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.tv_channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.writer = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.writer = 'Todd Casey')",
    "SELECT DISTINCT country FROM tv_channel WHERE country NOT IN (SELECT country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel JOIN cartoon ON tv_series.id = cartoon.id WHERE writer = 'Todd Casey')",
    "SELECT tv_channel.series_designation, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.tv_channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.conductor IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_designation, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.tv_channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.conductor = 'Ben Jones' AND cartoon.conductor = 'Michael Chang'",
    "SELECT pixel_aspect_relative_amount_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT pixel_aspect_relative_amount_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.tv_channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel AND cartoon.conductor = 'Ben Jones' WHERE cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.tv_channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.id IS NULL OR cartoon.conductor != 'Ben Jones'",
    "SELECT pack_possible_choices  FROM tv_channel  WHERE id NOT IN      (SELECT tv_channel       FROM tv_series       JOIN cartoon ON tv_series.id = cartoon.channel       WHERE cartoon.conductor = 'Ben Jones')",
    "SELECT pack_possible_choices FROM tv_channel WHERE id NOT IN (SELECT tv_channel FROM tv_series JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.conductor = 'Ben Jones')",
    "SELECT last_table_made, highest_terminate FROM poker_player WHERE highest_terminate IS NOT NULL",
    "SELECT poker_player.last_table_made, poker_player.highest_terminate FROM poker_player",
    "SELECT money_tier FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_tier FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(last_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(last_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.last_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.last_table_made ASC",
    "SELECT time_of_born FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT people.time_of_born FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings ASC LIMIT 1",
    "SELECT money_tier FROM poker_player WHERE height = (SELECT MAX(height) FROM poker_player)",
    "SELECT money_tier FROM poker_player WHERE highest_terminate = (SELECT MAX(height) FROM people)",
    "SELECT name, time_of_born FROM people ORDER BY name ASC",
    "SELECT name, time_of_born FROM people ORDER BY name ASC",
    "SELECT income FROM poker_player ORDER BY income DESC",
    "SELECT income FROM poker_player ORDER BY income DESC",
    "SELECT AVG(income) FROM poker_player",
    "SELECT AVG(income) FROM poker_player",
    "SELECT currency_standing FROM poker_player ORDER BY income DESC LIMIT 1",
    "SELECT income, DENSE_RANK() OVER (ORDER BY income DESC) as money_rank FROM poker_player ORDER BY income DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE income < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE income < 200000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.income > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.income > 300000",
    "SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY income ASC LIMIT 1",
    "SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY income ASC LIMIT 1",
    "SELECT currency_standing FROM poker_player WHERE height = (SELECT MAX(height) FROM people JOIN poker_player ON people.people_id = poker_player.people_id)",
    "SELECT currency_standing FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT AVG(income) FROM poker_player WHERE height > 200",
    "SELECT AVG(income) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT p.name  FROM poker_player AS pp  JOIN people AS p ON pp.people_id = p.people_id  ORDER BY pp.income DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.income DESC",
    "SELECT money_tier FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_tier FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_tier FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE height = (SELECT MAX(height) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id))",
    "SELECT money_tier FROM poker_player WHERE poker_player_id = (SELECT poker_player_id FROM poker_player_2 JOIN people ON poker_player_2.people_id = people.people_id ORDER BY height DESC LIMIT 1)",
    "SELECT last_table_made, best_finish FROM poker_player",
    "SELECT poker_player.last_table_made, poker_player.best_finish FROM poker_player",
    "SELECT currency_standing FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT currency_standing FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(last_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(last_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.last_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.last_table_made ASC",
    "SELECT currency_standing FROM poker_player WHERE height = (SELECT MAX(height) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id)",
    "SELECT currency_standing FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT revenue FROM poker_player ORDER BY revenue DESC",
    "SELECT revenue FROM poker_player ORDER BY revenue DESC",
    "SELECT AVG(revenue) FROM poker_player",
    "SELECT AVG(revenue) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY revenue DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY revenue DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE revenue < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE revenue < 200000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.revenue > 300000",
    "SELECT p.name  FROM poker_player AS pp  JOIN people AS p ON pp.people_id = p.people_id  WHERE pp.revenue > 300000",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY revenue ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY revenue ASC LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY tallness DESC LIMIT 1",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY tallness DESC LIMIT 1",
    "SELECT AVG(revenue) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE tallness > 200",
    "SELECT AVG(revenue) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE tallness > 200.",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.revenue DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.revenue DESC",
    "SELECT competitor_digits, participant FROM contestants ORDER BY participant DESC",
    "SELECT MAX(region_digits) AS max_area_code, MIN(region_digits) AS min_area_code FROM area_code_state",
    "SELECT participant FROM contestants WHERE participant != 'Jessie Alloway'",
    "SELECT competitor_digits, participant FROM contestants WHERE competitor_digits IN (SELECT competitor_digits FROM votes GROUP BY competitor_digits HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, name FROM contestants WHERE contestant_number = (SELECT competitor_digits FROM votes GROUP BY competitor_digits ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT COUNT(*) FROM contestants WHERE competitor_digits NOT IN (SELECT competitor_digits FROM votes)",
    "SELECT area_code_state.region_digits  FROM area_code_state  JOIN votes ON area_code_state.state = votes.state  GROUP BY area_code_state.region_digits  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT created, state, phone_number FROM votes WHERE competitor_digits = (SELECT competitor_digits FROM contestants WHERE participant = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code_state.region_digits FROM voter_1_0.area_code_state JOIN voter_1_0.votes AS v1 ON area_code_state.state = v1.state AND v1.competitor_digits = 'Tabatha Gehling' JOIN voter_1_0.votes AS v2 ON v1.phone_number = v2.phone_number AND v2.competitor_digits = 'Kelly Clauss'",
    "SELECT participant FROM contestants WHERE participant LIKE '%Al%'",
    "SELECT contestant_number, competitor_cognomen FROM contestants ORDER BY competitor_cognomen DESC",
    "SELECT vote_id, ring_up, area_code_state.state FROM votes JOIN area_code_state ON votes.state = area_code_state.state",
    "SELECT competitor_cognomen FROM contestants WHERE competitor_cognomen <> 'Jessie Alloway'",
    "SELECT contestant_number, competitor_cognomen FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, competitor_cognomen FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT created, state, ring_up FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE competitor_cognomen = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code FROM voter_1_1 WHERE area_code IN (     SELECT v1.area_code FROM votes v1     JOIN votes v2 ON v1.area_code = v2.area_code AND v1.contestant_number = 'Tabatha Gehling' AND v2.contestant_number = 'Kelly Clauss'     WHERE v1.area_code = v2.area_code )",
    "SELECT competitor_cognomen FROM contestants WHERE competitor_cognomen LIKE '%Al%'",
    "SELECT contestant_number, participant FROM contestants ORDER BY participant DESC",
    "SELECT participant FROM contestants WHERE participant != 'Jessie Alloway'",
    "SELECT contestant_number, participant FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, participant FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT created, state, phone_number FROM votes  WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE participant = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code FROM voter_1_2 WHERE area_code IN (     SELECT area_code_state.area_code FROM area_code_state     JOIN votes ON area_code_state.state = votes.state     JOIN contestants ON votes.contestant_number = contestants.contestant_number     WHERE contestants.participant = 'Tabatha Gehling' ) AND area_code IN (     SELECT area_code_state.area_code FROM area_code_state     JOIN votes ON area_code_state.state = votes.state     JOIN contestants ON votes.contestant_number = contestants.contestant_number     WHERE contestants.participant = 'Kelly Clauss' )",
    "SELECT participant FROM contestants WHERE participant LIKE '%Al%'",
    "SELECT contestant_number, competitor_cognomen FROM contestants ORDER BY competitor_cognomen DESC",
    "SELECT MAX(region_digits), MIN(region_digits) FROM area_code_state",
    "SELECT competitor_cognomen FROM contestants WHERE competitor_cognomen <> 'Jessie Alloway'",
    "SELECT contestant_number, competitor_cognomen FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, competitor_cognomen FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT area_code_state.region_digits  FROM area_code_state  JOIN votes ON area_code_state.state = votes.state  GROUP BY area_code_state.region_digits  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE competitor_cognomen = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code_state.region_digits FROM voter_1_3.area_code_state JOIN voter_1_3.votes AS v1 ON area_code_state.state = v1.state AND v1.contestant_number = 'Tabatha Gehling' JOIN voter_1_3.votes AS v2 ON v1.phone_number = v2.phone_number AND v2.contestant_number = 'Kelly Clauss'",
    "SELECT competitor_cognomen FROM contestants WHERE competitor_cognomen LIKE '%Al%'",
    "SELECT vote_id, call_up, area_code_state.state FROM votes JOIN area_code_state ON votes.state = area_code_state.state",
    "SELECT MAX(made) FROM votes WHERE state = 'CA'",
    "SELECT DISTINCT state, made FROM votes",
    "SELECT votes.creation, area_code_state.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.area_code = area_code_state.area_code WHERE contestants.contestant_name = 'Tabatha Gehling'",
    "SELECT COUNT(*) FROM country WHERE political_form = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE political_form = 'Republic'",
    "SELECT SUM(surface_area) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(place) FROM country WHERE region = 'Caribbean'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT region FROM city WHERE name = 'Kabul'",
    "SELECT region FROM city WHERE name = 'Kabul'",
    "SELECT official_language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY share DESC LIMIT 1",
    "SELECT official_language FROM countrylanguage WHERE countrycode = 'ABW' AND is_formal = true",
    "SELECT people_number, life_expectation FROM country WHERE name = 'Brazil'",
    "SELECT people_number, life_expectation FROM country WHERE name = 'Brazil'",
    "SELECT region, people_number FROM country WHERE name = 'Angola'",
    "SELECT region, people_number FROM country WHERE name = 'Angola'",
    "SELECT AVG(life_expectation) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(life_expectation) FROM country WHERE region = 'Central Africa'",
    "SELECT name FROM country WHERE life_expectation = (SELECT MIN(life_expectation) FROM country WHERE place = 'Asia')",
    "SELECT name FROM country WHERE mainland = 'Asia' ORDER BY life_expectation ASC LIMIT 1",
    "SELECT SUM(c.people_number), MAX(c.gnp) FROM country c WHERE c.continent = 'Asia'",
    "SELECT SUM(people_number) AS population_in_asia, MAX(gnp) AS largest_gnp_in_asia FROM country WHERE mainland = 'Asia'",
    "SELECT AVG(life_expectation) FROM country WHERE political_form = 'Republic' AND mainland = 'Africa'",
    "SELECT AVG(life_expectation) FROM country WHERE political_form = 'Republic' AND mainland = 'Africa'",
    "SELECT SUM(surface_area) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surface_area) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(people_number) FROM country WHERE district = 'Gelderland'",
    "SELECT SUM(people_number) FROM country WHERE name = 'Gelderland'",
    "SELECT AVG(net_national_product), SUM(people_number) FROM country WHERE political_form LIKE '%US territory%'",
    "SELECT AVG(net_national_product), SUM(people_number) FROM country WHERE code2 = 'US'",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT political_form) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT political_form) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND is_formal = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND is_formal = true",
    "SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY COUNT(DISTINCT countrylanguage.official_language) DESC LIMIT 1;",
    "SELECT country.continent, COUNT(DISTINCT countrylanguage.official_language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE official_language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT official_language) = 2",
    "SELECT COUNT(DISTINCT country.code) FROM countrylanguage AS lang1 JOIN countrylanguage AS lang2 ON lang1.countrycode = lang2.countrycode JOIN country ON lang1.countrycode = country.code WHERE lang1.official_language = 'English' AND lang2.official_language = 'Dutch'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.official_language = 'English'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.official_language = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.official_language = 'English'  JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.official_language = 'French'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.official_language = 'English' AND cl1.is_formal = 1  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.official_language = 'French' AND cl2.is_formal = 1",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English' AND is_formal = 1) AND code IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'French' AND is_formal = 1)",
    "SELECT COUNT(DISTINCT continent) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.official_language = 'Chinese'",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.official_language = 'Chinese'",
    "SELECT DISTINCT region FROM city WHERE countrycode IN (SELECT code FROM country WHERE name IN ('England', 'Netherlands')) AND (official_language = 'English' OR official_language = 'Dutch')",
    "SELECT DISTINCT region FROM city WHERE id IN (SELECT countrycode FROM countrylanguage WHERE official_language IN ('Dutch', 'English'))",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.official_language = 'English' OR countrylanguage.official_language = 'Dutch'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English' OR official_language = 'Dutch')",
    "SELECT official_language FROM countrylanguage WHERE share = (SELECT MAX(share) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')) AND countrycode IN (SELECT code FROM country WHERE continent = 'Asia') AND is_formal = 'T'",
    "SELECT official_language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY people_number DESC LIMIT 1) ORDER BY share DESC LIMIT 1",
    "SELECT DISTINCT cl.official_language  FROM countrylanguage cl  WHERE cl.countrycode IN (     SELECT c.code      FROM country c      WHERE c.political_form LIKE '%Republic%'      GROUP BY c.code      HAVING COUNT(*) = 1 )",
    "SELECT DISTINCT cl.official_language  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE c.political_form = 'Republic'  AND NOT EXISTS (     SELECT 1      FROM countrylanguage cl2      WHERE cl2.official_language = cl.official_language      AND cl2.countrycode <> cl.countrycode )",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.official_language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.official_language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name, people_number, life_expectation FROM country WHERE mainland = 'Asia' ORDER BY landscape DESC LIMIT 1",
    "SELECT name, people_number, life_expectation FROM country WHERE mainland = 'Asia' ORDER BY people_number DESC LIMIT 1",
    "SELECT AVG(life_expectation) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT AVG(life_expectation) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT SUM(people_number) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT SUM(people_number) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT official_language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.is_formal = 'T' AND cl.share = 1.0",
    "SELECT official_language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') AND is_formal = 'T'",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT official_language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE area > (SELECT MAX(area) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE mainland = 'Africa' AND people_number < (SELECT MIN(people_number) FROM country WHERE mainland = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND people_number < (SELECT MIN(people_number) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE mainland = 'Asia' AND people_number > (SELECT MAX(people_number) FROM country WHERE mainland = 'Africa')",
    "SELECT name FROM country WHERE mainland = 'Asia' AND people_number > (SELECT MAX(people_number) FROM country WHERE mainland = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.official_language <> 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.official_language <> 'English'",
    "SELECT code FROM country WHERE political_form != 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT code FROM country WHERE political_form NOT LIKE '%Republic%' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'English')",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.mainland = 'Europe' AND countrylanguage.official_language != 'English'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.official_language <> 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.official_language = 'Chinese'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.official_language = 'Chinese'",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY people_number ASC LIMIT 1",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY people_number ASC LIMIT 1",
    "SELECT people_number, name, headofstate FROM country WHERE landscape = (SELECT MAX(landscape) FROM country)",
    "SELECT name, people_number, headofstate FROM country ORDER BY landscape DESC LIMIT 1",
    "SELECT country.name, COUNT(countrylanguage.official_language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.is_formal = 'T'  GROUP BY country.name HAVING COUNT(countrylanguage.official_language) >= 3",
    "SELECT country.name, COUNT(countrylanguage.official_language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2",
    "SELECT district, COUNT(city)  FROM (     SELECT district, city      FROM city      WHERE population > (         SELECT AVG(population)          FROM city          WHERE district = city.district     ) ) AS cities_above_avg  GROUP BY district",
    "SELECT district, COUNT(city)  FROM (     SELECT city.district, city.name, city.population, AVG(city.population) OVER (PARTITION BY city.district) AS avg_population     FROM city ) AS subquery WHERE subquery.population > subquery.avg_population GROUP BY district",
    "SELECT political_form, SUM(people_number) as total_population FROM country WHERE life_expectation > 72 GROUP BY political_form",
    "SELECT political_form, SUM(people_number) as total_population FROM country WHERE life_expectation > 72 GROUP BY political_form",
    "SELECT AVG(life_expectation), SUM(people_number), continent FROM country GROUP BY continent HAVING AVG(life_expectation) < 72;",
    "SELECT country.continent, SUM(country.people_number) AS total_population, AVG(country.life_expectation) AS average_life_expectation FROM country GROUP BY country.continent HAVING AVG(country.life_expectation) < 72;",
    "SELECT name, area FROM country ORDER BY area DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY people_number DESC LIMIT 3",
    "SELECT name FROM country ORDER BY people_number DESC LIMIT 3",
    "SELECT name FROM country ORDER BY people_number ASC LIMIT 3",
    "SELECT name FROM country ORDER BY people_number ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE mainland = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE mainland = 'Asia'",
    "SELECT name FROM country WHERE mainland = 'Europe' AND people_number = 80000",
    "SELECT name FROM country WHERE mainland = 'Europe' AND people_number = 80000",
    "SELECT SUM(people_number) AS total_population, AVG(area) AS average_area  FROM country  WHERE continent = 'North America' AND area > 3000",
    "SELECT SUM(c.people_number) AS total_population, AVG(c.surface_area) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surface_area > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT official_language FROM countrylanguage GROUP BY official_language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT official_language FROM countrylanguage GROUP BY official_language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT country.name, countrylanguage.official_language FROM country JOIN (     SELECT countrycode, official_language, MAX(share) AS max_share     FROM countrylanguage     GROUP BY countrycode ) AS max_language ON country.code = max_language.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language.official_language = countrylanguage.official_language AND max_language.max_share = countrylanguage.share",
    "SELECT c.code, cl.official_language FROM country c JOIN (     SELECT countrycode, official_language     FROM countrylanguage     WHERE share = (         SELECT MAX(share)         FROM countrylanguage         WHERE countrycode = cl.countrycode     ) ) cl ON c.code = cl.countrycode;",
    "SELECT COUNT(DISTINCT country.code)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.official_language = 'Spanish'  GROUP BY countrylanguage.official_language  HAVING MAX(countrylanguage.share) = (SELECT MAX(share)                                       FROM countrylanguage                                       WHERE official_language = 'Spanish')",
    "SELECT COUNT(*) FROM countrylanguage WHERE official_language = 'Spanish' AND share > 50",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.official_language = 'Spanish'  ORDER BY countrylanguage.share DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE official_language = 'Spanish' AND share > 50)",
    "SELECT country.continent FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Anguilla'",
    "SELECT country.continent FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Anguilla'",
    "SELECT dialect FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT dialect FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW')",
    "SELECT population, life_expectation FROM country WHERE name = 'Brazil'",
    "SELECT population, life_expectation FROM country WHERE name = 'Brazil'",
    "SELECT AVG(life_expectation) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(life_expectation) FROM country WHERE name = 'Central Africa'",
    "SELECT name FROM country WHERE region = 'Asia' ORDER BY life_expectation ASC LIMIT 1",
    "SELECT name FROM country WHERE mainland = 'Asia' ORDER BY life_expectation ASC LIMIT 1",
    "SELECT SUM(country.population), MAX(country.gross_national_product) FROM country WHERE country.region = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gross_national_product) AS largest_gnp  FROM country  WHERE mainland = 'Asia'",
    "SELECT AVG(life_expectation) FROM country WHERE region = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(life_expectation) FROM country WHERE region = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE name IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE region IN ('Asia', 'Europe')",
    "SELECT AVG(gross_national_product), SUM(population) FROM country WHERE governmentform LIKE '%US territory%'",
    "SELECT AVG(gross_national_product), SUM(population) FROM country WHERE code IN ('ASM', 'GUM', 'MNP', 'PRI', 'UMI', 'VIR')",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND is_formal = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND is_formal = true",
    "SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY COUNT(DISTINCT countrylanguage.dialect) DESC LIMIT 1;",
    "SELECT country.continent, COUNT(DISTINCT countrylanguage.dialect) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT dialect) = 2",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect IN ('English', 'Dutch')",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.dialect = 'English'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.dialect = 'French'",
    "SELECT DISTINCT c1.name  FROM countrylanguage cl1  JOIN country c1 ON cl1.countrycode = c1.code  JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode AND cl2.dialect = 'French'  WHERE cl1.dialect = 'English'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.dialect = 'English' AND cl1.is_formal = 1  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.dialect = 'French' AND cl2.is_formal = 1",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'French')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect = 'Chinese'",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect IN ('English', 'Dutch'))",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.dialect IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.is_formal = 'T' AND (countrylanguage.dialect = 'English' OR countrylanguage.dialect = 'Dutch')",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English' OR dialect = 'Dutch')",
    "SELECT dialect FROM countrylanguage WHERE percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE continent = 'Asia') AND is_formal = 'T'",
    "select dialect from countrylanguage where countrycode in (select code from country where region = 'Asia' order by population desc limit 1) order by percentage desc limit 1",
    "SELECT DISTINCT cl.dialect  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE c.governmentform LIKE '%Republic%'  GROUP BY cl.dialect  HAVING COUNT(DISTINCT c.code) = 1",
    "SELECT DISTINCT cl.dialect  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE c.governmentform = 'Republic'  AND NOT EXISTS (     SELECT 1      FROM countrylanguage cl2      WHERE cl2.dialect = cl.dialect      AND cl2.countrycode != cl.countrycode )",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.dialect = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name, population, life_expectation  FROM country  WHERE mainland = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1",
    "SELECT name, population, life_expectation FROM country WHERE mainland = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(life_expectation) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English' AND is_formal = 'T')",
    "SELECT AVG(life_expectation) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English' AND is_formal = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT dialect FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.is_formal = 1",
    "SELECT countrylanguage.dialect FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.is_formal = 'T'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe')",
    "SELECT name FROM country WHERE mainland = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE mainland = 'Asia')",
    "SELECT name FROM country WHERE region = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE region = 'Asia')",
    "SELECT name FROM country WHERE mainland = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE mainland = 'Africa')",
    "SELECT name FROM country WHERE mainland = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE mainland = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect != 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect != 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND governmentform != 'Republic'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.mainland = 'Europe' AND countrylanguage.is_formal = 0 AND countrylanguage.dialect = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.is_formal = 'F'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.region = 'Asia' AND countrylanguage.dialect = 'Chinese' AND countrylanguage.is_formal = 1",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.region = 'Asia' AND countrylanguage.dialect = 'Chinese' AND countrylanguage.is_formal = 1",
    "SELECT country.name, COUNT(countrylanguage.dialect) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.dialect) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2",
    "SELECT governmentform, SUM(population) as total_population FROM country WHERE life_expectation > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) as total_population FROM country WHERE life_expectation > 72 GROUP BY governmentform",
    "SELECT AVG(life_expectation), SUM(population), continent FROM country GROUP BY continent HAVING AVG(life_expectation) < 72;",
    "SELECT country.continent, SUM(country.population) AS total_population, AVG(country.life_expectation) AS average_life_expectation FROM country GROUP BY country.continent HAVING AVG(country.life_expectation) < 72;",
    "SELECT COUNT(*) FROM country WHERE region = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE region = 'Asia'",
    "SELECT name FROM country WHERE mainland = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE mainland = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE mainland = 'North America' AND surfacearea > 3000",
    "SELECT SUM(country.population), AVG(country.surfacearea)  FROM country  WHERE country.region = 'North America' AND country.surfacearea > 3000",
    "SELECT countrylanguage.dialect  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT dialect FROM countrylanguage GROUP BY dialect ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT country.name, countrylanguage.dialect FROM country JOIN (     SELECT countrycode, dialect, percentage,          ROW_NUMBER() OVER (PARTITION BY countrycode ORDER BY percentage DESC) AS rn     FROM countrylanguage ) AS countrylanguage ON country.code = countrylanguage.countrycode AND rn = 1",
    "SELECT country.code, countrylanguage.dialect FROM country JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_lang ON country.code = max_lang.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_lang.max_percentage = countrylanguage.percentage;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE dialect = 'Spanish')",
    "SELECT COUNT(*) FROM countrylanguage WHERE dialect = 'Spanish' AND percentage > 50.0",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.dialect = 'Spanish'  GROUP BY country.code  ORDER BY MAX(countrylanguage.percentage) DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'Spanish' AND percentage > 50)",
    "SELECT language FROM countrylanguage WHERE country_cipher = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE country_cipher = 'ABW' AND isofficial = true",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country_cipher = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country_cipher = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE country_cipher = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE country_cipher = 'AFG' AND isofficial = true",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country.code = countrylanguage.country_cipher) DESC LIMIT 1",
    "SELECT name FROM country WHERE code = (SELECT country_cipher FROM countrylanguage GROUP BY country_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage JOIN country ON country.code = countrylanguage.country_cipher GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT country.code) FROM countrylanguage AS lang1 JOIN countrylanguage AS lang2 ON lang1.country_cipher = lang2.country_cipher AND lang1.language <> lang2.language JOIN country ON country.code = lang1.country_cipher WHERE lang1.language = 'English' AND lang2.language = 'Dutch'",
    "SELECT COUNT(DISTINCT country.code) FROM countrylanguage AS lang1 JOIN countrylanguage AS lang2 ON lang1.country_cipher = lang2.country_cipher JOIN country ON lang1.country_cipher = country.code WHERE lang1.language = 'English' AND lang2.language = 'Dutch'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c1.code = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT country_cipher FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'Chinese')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.country_cipher WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language IN ('English', 'Dutch'))",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.country_cipher  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT name FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT name FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT language FROM countrylanguage WHERE country_cipher IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE country_cipher IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = 'T'",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE country_cipher IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(*) = 1 )",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE country_cipher IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(*) = 1 )",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.country_cipher WHERE language = 'English' ORDER BY population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.country_cipher WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country c JOIN city ct ON c.code = ct.countrycode WHERE c.code NOT IN (SELECT code FROM country WHERE language = 'English')",
    "SELECT COUNT(DISTINCT city.population) FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT code FROM country WHERE continent = 'Europe' OR continent = 'North America' OR continent = 'Australia/Oceania' OR continent = 'Anguilla' OR continent = 'Antigua and Barbuda' OR continent = 'Bahamas' OR continent = 'Barbados' OR continent = 'Belize' OR continent = 'Bermuda' OR continent = 'British Indian Ocean Territory' OR continent = 'British Virgin Islands' OR continent = 'Canada' OR continent = 'Cayman Islands' OR continent = 'Christmas Island' OR continent = 'Cocos (Keeling) Islands' OR continent = 'Cook Islands' OR continent = 'Dominica' OR continent = 'Falkland Islands' OR continent = 'Fiji' OR continent = 'Gibraltar' OR continent = 'Grenada' OR continent =",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.code WHERE c.country_head = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.code WHERE c.country_head = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.code WHERE c.indepyear < 1930 AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.country_cipher WHERE language != 'English'",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT DISTINCT country_cipher FROM countrylanguage WHERE language = 'English')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.country_cipher  WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'f' AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.country_cipher  WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.country_cipher  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.country_cipher  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT population, name, country_head  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT c.name, c.population, c.country_head  FROM country c  WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.country_cipher GROUP BY country.name HAVING num_languages >= 3",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.country_cipher GROUP BY country.name HAVING num_languages > 2",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT country_cipher, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY country_cipher ) AS max_countrylanguage ON country.code = max_countrylanguage.country_cipher JOIN countrylanguage ON country.code = countrylanguage.country_cipher AND max_countrylanguage.max_percentage = countrylanguage.percentage",
    "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.country_cipher WHERE cl.percentage = (     SELECT MAX(cl2.percentage)     FROM countrylanguage cl2     WHERE cl2.country_cipher = c.code ) ORDER BY c.code ASC",
    "SELECT COUNT(DISTINCT country.code)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.country_cipher  WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50",
    "SELECT code FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'))",
    "SELECT code FROM country WHERE code IN (SELECT country_cipher FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50)",
    "SELECT COUNT(*) FROM country WHERE political_form = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE political_form = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT country.continent FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "SELECT country.continent FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "SELECT dialect FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT dialect FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW')",
    "SELECT how_many_people, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT how_many_people, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT continent, how_many_people FROM country WHERE name = 'Angola'",
    "SELECT continent, how_many_people FROM country WHERE name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT SUM(how_many_people), MAX(gnp) FROM country WHERE continent = 'Asia'",
    "SELECT SUM(how_many_people) AS population_in_asia, MAX(gnp) AS largest_gnp_in_asia FROM country WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND political_form = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND political_form = 'Republic'",
    "SELECT SUM(total_citizens) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(total_citizens) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(how_many_people) FROM country WHERE political_form = 'US territory'",
    "SELECT AVG(gnp), SUM(how_many_people) FROM country WHERE code2 = 'US'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage",
    "SELECT COUNT(DISTINCT political_form) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT political_form) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND formal = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND formal = 'T'",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT dialect) = 2",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect IN ('English', 'Dutch')",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.dialect = 'English'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.dialect = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.dialect = 'English'  JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.dialect = 'French'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.dialect = 'English' AND cl1.formal = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.dialect = 'French' AND cl2.formal = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'French')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'Chinese')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect = 'Chinese'",
    "SELECT DISTINCT country.continent  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.dialect IN ('English', 'Dutch')",
    "SELECT DISTINCT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.dialect IN ('English', 'Dutch') AND countrylanguage.formal = 'T'",
    "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect IN ('English', 'Dutch') AND countrylanguage.formal = 'T'",
    "SELECT dialect FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT dialect FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY how_many_people DESC LIMIT 1) ORDER BY percentage DESC LIMIT 1",
    "SELECT dialect FROM countrylanguage WHERE percentage = 100 AND countrycode IN (SELECT code FROM country WHERE political_form LIKE '%Republic%' AND code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(*) = 1))",
    "SELECT DISTINCT cl.dialect  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  WHERE c.political_form = 'Republic'  AND NOT EXISTS (     SELECT 1      FROM countrylanguage cl2      JOIN country c2 ON cl2.countrycode = c2.code      WHERE cl2.dialect = cl.dialect      AND c2.political_form != 'Republic'      AND c2.code != c.code )",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.dialect = 'English' ORDER BY city.total_citizens DESC LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.dialect = 'English' ORDER BY city.total_citizens DESC LIMIT 1",
    "SELECT name, how_many_people, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, how_many_people, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English' AND formal = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English' AND formal = 'T')",
    "SELECT SUM(total_citizens) FROM city WHERE countrycode IN (SELECT code FROM country WHERE name NOT LIKE '%United States%' AND name NOT LIKE '%United Kingdom%' AND name NOT LIKE '%Australia%' AND name NOT LIKE '%Canada%' AND name NOT LIKE '%New Zealand%' AND name NOT LIKE '%Ireland%' AND name NOT LIKE '%South Africa%' AND name NOT LIKE '%India%' AND name NOT LIKE '%Pakistan%' AND name NOT LIKE '%Nigeria%' AND name NOT LIKE '%Philippines%' AND name NOT LIKE '%Singapore%' AND name NOT LIKE '%Malaysia%' AND name NOT LIKE '%Ghana%' AND name NOT LIKE '%Kenya%' AND name NOT LIKE '%Uganda%' AND name NOT LIKE '%Zimbabwe%' AND name NOT LIKE '%Jamaica%' AND name NOT LIKE '%Trinidad and Tobago%' AND name NOT LIKE '%Barbados%' AND name NOT LIKE '%Bahamas%' AND name NOT LIKE '%Grenada%' AND name NOT LIKE",
    "SELECT SUM(total_citizens) FROM city WHERE countrycode NOT IN (SELECT code FROM country WHERE name = 'United States' OR name = 'United Kingdom' OR name = 'Australia' OR name = 'Canada' OR name = 'New Zealand' OR name = 'Ireland')",
    "SELECT dialect FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.nation_president = 'Beatrix' AND cl.formal = 'T'",
    "SELECT countrylanguage.dialect FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.nation_president = 'Beatrix' AND countrylanguage.formal = 'T'",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT dialect) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT name FROM country WHERE continent = 'Africa' AND how_many_people < (SELECT MIN(how_many_people) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND how_many_people < (SELECT MIN(how_many_people) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND how_many_people > (SELECT MAX(how_many_people) FROM country WHERE continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND how_many_people > (SELECT MAX(how_many_people) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect <> 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.dialect != 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND political_form != 'Republic'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'English') AND political_form NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.dialect <> 'English'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.dialect != 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.dialect = 'Chinese'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.dialect = 'Chinese' AND countrylanguage.formal = 'T'",
    "SELECT name, indepyear, surfacearea FROM country WHERE how_many_people = (SELECT MIN(how_many_people) FROM country)",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY how_many_people ASC LIMIT 1",
    "SELECT how_many_people, name, nation_president FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT c.name, c.how_many_people, c.nation_president FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, COUNT(countrylanguage.dialect) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.dialect) >= 3",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.dialect) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2",
    "SELECT district, COUNT(*)  FROM city  WHERE total_citizens > (SELECT AVG(total_citizens) FROM city)  GROUP BY district",
    "SELECT district, COUNT(city.name)  FROM city  JOIN (SELECT district, AVG(total_citizens) as avg_pop        FROM city        GROUP BY district) as sub  ON city.district = sub.district  WHERE city.total_citizens > sub.avg_pop  GROUP BY district",
    "SELECT political_form, SUM(how_many_people) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY political_form",
    "SELECT political_form, SUM(how_many_people) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY political_form",
    "SELECT AVG(lifeexpectancy), SUM(how_many_people), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT continent, SUM(how_many_people) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT name FROM country ORDER BY how_many_people DESC LIMIT 3",
    "SELECT name FROM country ORDER BY how_many_people DESC LIMIT 3",
    "SELECT name FROM country ORDER BY how_many_people ASC LIMIT 3",
    "SELECT name FROM country ORDER BY how_many_people ASC LIMIT 3",
    "SELECT name FROM country WHERE continent = 'Europe' AND how_many_people = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND how_many_people = 80000",
    "SELECT SUM(how_many_people) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT SUM(how_many_people), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT name FROM city WHERE total_citizens BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE total_citizens BETWEEN 160000 AND 900000",
    "SELECT countrylanguage.dialect FROM countrylanguage GROUP BY countrylanguage.dialect ORDER BY SUM(CASE WHEN countrylanguage.percentage > 0 THEN 1 ELSE 0 END) DESC LIMIT 1",
    "SELECT countrylanguage.dialect FROM countrylanguage GROUP BY countrylanguage.dialect ORDER BY COUNT(DISTINCT countrylanguage.countrycode) DESC LIMIT 1;",
    "SELECT country.name, countrylanguage.dialect FROM country JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_lang ON country.code = max_lang.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_lang.max_percentage = countrylanguage.percentage",
    "SELECT c.code, cl.dialect FROM country c JOIN (     SELECT countrycode, dialect, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS cl ON c.code = cl.countrycode AND cl.percentage = cl.max_percentage",
    "SELECT COUNT(DISTINCT countrylanguage.countrycode)  FROM countrylanguage  WHERE countrylanguage.dialect = 'Spanish'  GROUP BY countrylanguage.dialect  HAVING MAX(countrylanguage.percentage) = (     SELECT MAX(countrylanguage.percentage)      FROM countrylanguage      WHERE countrylanguage.dialect = 'Spanish' )",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE dialect = 'Spanish' AND percentage > 50.0",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.dialect = 'Spanish'  GROUP BY country.code  ORDER BY MAX(countrylanguage.percentage) DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE dialect = 'Spanish' AND percentage > 50)",
    "SELECT country.continent FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Anguilla'",
    "SELECT country.continent FROM country JOIN city ON country.codification = city.country_num WHERE city.name = 'Anguilla'",
    "SELECT region FROM country WHERE code2 = (SELECT country_num FROM city WHERE name = 'Kabul')",
    "SELECT country.region FROM city JOIN country ON city.country_num = country.codification WHERE city.name = 'Kabul'",
    "SELECT language FROM countrylanguage WHERE country_cipher = (SELECT codification FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE country_cipher = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil'",
    "SELECT region, citizens FROM country WHERE name = 'Angola'",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT name FROM country WHERE region = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE region = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(country.population) AS total_population, MAX(country.net_national_product) AS max_gnp FROM country WHERE country.region = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM (     SELECT population, gnp     FROM city     JOIN country ON city.country_num = country.codification     WHERE country.mainland = 'Asia' ) AS asia_population_gnp",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE region IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Asia' OR region = 'Europe'",
    "SELECT AVG(net_national_product), SUM(population) FROM country c JOIN city ci ON c.codification = ci.country_num WHERE c.governmentform = 'US territory'",
    "SELECT AVG(net_national_product), SUM(population) FROM country JOIN city ON country.codification = city.country_num WHERE code2 = 'US'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE region = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE region = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country_cipher = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country_cipher = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE country_cipher = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE country_cipher = 'AFG' AND isofficial = true",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE country_cipher = codification) DESC LIMIT 1",
    "SELECT name FROM country WHERE codification = (SELECT country_cipher FROM countrylanguage GROUP BY country_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT country.continent FROM country JOIN countrylanguage ON countrylanguage.country_cipher = country.codification GROUP BY country.continent ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage JOIN country ON countrylanguage.country_cipher = country.codification GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT country_cipher) FROM countrylanguage WHERE language = 'English' AND country_cipher IN (SELECT country_cipher FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT country.num) FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.country_cipher = cl2.country_cipher JOIN country ON cl1.country_cipher = country.codification WHERE cl1.language = 'English' AND cl2.language = 'Dutch'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.codification = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.codification = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM countrylanguage cl1  JOIN country c1 ON cl1.country_cipher = c1.codification  JOIN countrylanguage cl2 ON cl1.country_cipher = cl2.country_cipher AND cl2.language = 'French'  JOIN country c2 ON cl2.country_cipher = c2.codification  JOIN countrylanguage cl3 ON cl1.country_cipher = cl3.country_cipher AND cl3.language = 'English'  JOIN country c3 ON cl3.country_cipher = c3.codification  WHERE c1.name != c2.name AND c1.name != c3.name AND c2.name != c3.name",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.codification = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.codification = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.codification = cl1.country_cipher AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.codification = cl2.country_cipher AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON countrylanguage.country_cipher = country.codification WHERE countrylanguage.language = 'Chinese'",
    "SELECT COUNT(DISTINCT country.mainland) FROM country JOIN countrylanguage ON countrylanguage.country_cipher = country.codification WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code2 IN ('EN', 'NL') AND region IS NOT NULL",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON countrylanguage.country_cipher = country.codification  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT name FROM country WHERE codification IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT name FROM country WHERE code2 IN ('EN', 'NL') AND isofficial = 1",
    "SELECT language FROM countrylanguage WHERE country_cipher IN (SELECT codification FROM country WHERE mainland = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE isofficial = 'T' AND country_cipher IN (SELECT codification FROM country WHERE region = 'Asia' ORDER BY surfacearea DESC LIMIT 1)",
    "SELECT language  FROM countrylanguage  GROUP BY language  HAVING COUNT(DISTINCT country_cipher) = 1  AND MAX(governmentform) LIKE '%Republic%'",
    "SELECT language  FROM countrylanguage  WHERE country_cipher IN (     SELECT codification      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY codification      HAVING COUNT(*) = 1 )",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.country_num = countrylanguage.country_cipher  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city JOIN countrylanguage ON city.country_num = countrylanguage.country_cipher WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT c.name, c.population, c.lifeexpectancy  FROM country c  WHERE c.mainland = 'Asia'  ORDER BY c.surfacearea DESC  LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE region = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English' AND isofficial = 1)",
    "SELECT SUM(population) FROM city WHERE country_num NOT IN (SELECT codification FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT city.population) FROM city JOIN country ON city.country_num = country.codification WHERE country.name NOT LIKE '%United States%' AND country.name NOT LIKE '%United Kingdom%' AND country.name NOT LIKE '%Australia%' AND country.name NOT LIKE '%Canada%' AND country.name NOT LIKE '%Ireland%' AND country.name NOT LIKE '%New Zealand%' AND country.name NOT LIKE '%South Africa%' AND country.name NOT LIKE '%India%' AND country.name NOT LIKE '%Pakistan%' AND country.name NOT LIKE '%Nigeria%' AND country.name NOT LIKE '%Philippines%' AND country.name NOT LIKE '%Singapore%' AND country.name NOT LIKE '%Malaysia%' AND country.name NOT LIKE '%Ghana%' AND country.name NOT LIKE '%Kenya%' AND country.name NOT LIKE '%Uganda%' AND country.name NOT LIKE '%Zimbabwe%' AND country.name NOT LIKE '%Zambia%' AND country.name NOT LIKE '%Tanzania%' AND country.name NOT LIKE '%Cameroon%' AND country.name",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.codification WHERE c.country_principal = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.codification WHERE c.country_principal = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.codification WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.country_cipher = c.codification WHERE c.indepyear < 1930",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE region = 'Europe')",
    "SELECT name FROM country WHERE mainland = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE mainland = 'Asia')",
    "SELECT name FROM country WHERE region = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE region = 'Asia')",
    "SELECT name FROM country WHERE region = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE region = 'Africa')",
    "SELECT name FROM country WHERE mainland = 'Asia' AND population > ALL(SELECT MAX(population) FROM country WHERE mainland = 'Africa')",
    "SELECT codification FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English')",
    "SELECT codification FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English')",
    "SELECT DISTINCT country.code2 FROM country JOIN countrylanguage ON country.code = countrylanguage.country_cipher WHERE language <> 'English'",
    "SELECT DISTINCT code FROM country WHERE codification IN (SELECT country_cipher FROM countrylanguage WHERE language <> 'English')",
    "SELECT codification FROM country WHERE governmentform != 'Republic' AND codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English')",
    "SELECT codification FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE language = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.country_num = country.code JOIN countrylanguage ON countrylanguage.country_cipher = country.codification WHERE country.region = 'Europe' AND countrylanguage.isofficial = 'f' AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.country_num = country.codification  JOIN countrylanguage ON city.country_num = countrylanguage.country_cipher  WHERE country.region = 'Europe' AND countrylanguage.isofficial = 'F' AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.country_num = country.codification  JOIN countrylanguage ON country.codification = countrylanguage.country_cipher  WHERE country.region = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.country_num = country.codification  JOIN countrylanguage ON city.country_num = countrylanguage.country_cipher  WHERE country.region = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country WHERE citizens = (SELECT MIN(citizens) FROM country)",
    "SELECT name, indepyear, surfacearea FROM country WHERE citizens = (SELECT MIN(citizens) FROM country)",
    "SELECT population, name, country_principal AS leader FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT c.name, c.citizens, c.country_principal FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON countrylanguage.country_cipher = country.codification GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON countrylanguage.country_cipher = country.codification GROUP BY country.name HAVING num_languages > 2",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT country.mainland, SUM(country.population) AS total_population, AVG(country.lifeexpectancy) AS avg_life_expectancy FROM country WHERE country.mainland IN (     SELECT country.mainland     FROM country     GROUP BY country.mainland     HAVING AVG(country.lifeexpectancy) < 72 ) GROUP BY country.mainland",
    "SELECT name FROM country ORDER BY citizens DESC LIMIT 3",
    "SELECT name FROM country ORDER BY citizens DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population LIMIT 3",
    "SELECT name FROM country ORDER BY citizens ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE region = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE region = 'Asia'",
    "SELECT name FROM country WHERE mainland = 'Europe' AND citizens = 80000",
    "SELECT name FROM country WHERE mainland = 'Europe' AND citizens = 80000",
    "SELECT SUM(citizens), AVG(surfacearea) FROM country WHERE mainland = 'North America' AND surfacearea > 3000",
    "SELECT SUM(country.citizens), AVG(country.surfacearea)  FROM country  WHERE country.mainland = 'North America' AND country.surfacearea > 3000",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT country_cipher, language, percentage     FROM countrylanguage     WHERE isofficial = 'T'     ORDER BY percentage DESC ) AS countrylanguage ON countrylanguage.country_cipher = country.codification GROUP BY country.name ORDER BY MAX(countrylanguage.percentage) DESC;",
    "SELECT c.codification AS country_code, cl.language FROM country c JOIN countrylanguage cl ON c.codification = cl.country_cipher WHERE cl.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.country_cipher = c.codification) ORDER BY c.codification ASC",
    "SELECT COUNT(DISTINCT country_cipher) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50",
    "SELECT country.codification FROM country  JOIN countrylanguage ON country.codification = countrylanguage.country_cipher  WHERE countrylanguage.language = 'Spanish'  GROUP BY country.codification  ORDER BY MAX(countrylanguage.percentage) DESC  LIMIT 1",
    "SELECT codification FROM country WHERE code2 = 'ES' AND percentage > 50.0",
    "SELECT name FROM conductor WHERE citizen_of <> 'USA'",
    "SELECT name FROM conductor WHERE citizen_of <> 'USA'",
    "SELECT record_firm FROM orchestra ORDER BY year_foundation DESC",
    "SELECT record_firm FROM orchestra WHERE main_format = 'orchestra' ORDER BY year_foundation DESC",
    "SELECT AVG(audience_number) FROM show",
    "SELECT AVG(audience_number) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE class != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE class != 'Live final'",
    "SELECT COUNT(DISTINCT citizen_of) FROM conductor",
    "SELECT COUNT(DISTINCT citizen_of) FROM conductor",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC LIMIT 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_foundation > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_foundation > 2008",
    "SELECT record_firm, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_firm",
    "SELECT record_firm, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_firm",
    "SELECT orchestra, COUNT(*) as count FROM orchestra_0 GROUP BY orchestra ORDER BY count ASC",
    "SELECT main_format, COUNT(*) as frequency FROM orchestra GROUP BY main_format ORDER BY frequency DESC",
    "SELECT record_firm FROM orchestra GROUP BY record_firm ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1",
    "SELECT record_firm FROM orchestra GROUP BY record_firm ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT DISTINCT o1.record_firm FROM orchestra o1 JOIN orchestra o2 ON o1.record_firm = o2.record_firm WHERE o1.year_foundation < 2003 AND o2.year_foundation > 2003",
    "SELECT DISTINCT o1.record_firm  FROM orchestra o1  JOIN orchestra o2 ON o1.record_firm = o2.record_firm  WHERE o1.year_foundation < 2003 AND o2.year_foundation > 2003",
    "SELECT COUNT(*) FROM orchestra WHERE record_firm IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE main_format IN ('CD', 'DVD')",
    "SELECT year_foundation FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT year_foundation FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT record_company FROM orchestra ORDER BY year_of_created DESC",
    "SELECT record_company FROM orchestra WHERE orchestra IN (SELECT orchestra FROM orchestra_1 WHERE orchestra_1.orchestra_id = orchestra.orchestra_id) ORDER BY year_of_created DESC",
    "SELECT MAX(portion), MIN(portion) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(portion), MIN(portion) FROM performance WHERE type != 'Live final'",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY how_long_worked DESC LIMIT 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_created > 2008",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_created > 2008",
    "SELECT DISTINCT o1.record_company FROM orchestra_1 o1 JOIN orchestra_1 o2 ON o1.record_company = o2.record_company WHERE o1.year_of_created < 2003 AND o2.year_of_created > 2003",
    "SELECT DISTINCT o1.record_company  FROM orchestra_1 o1  JOIN orchestra_1 o2 ON o1.record_company = o2.record_company  WHERE o1.year_of_created < 2003 AND o2.year_of_created > 2003",
    "SELECT year_of_created FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT year_of_created FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT MAX(share), MIN(share) FROM performance WHERE performance_id NOT IN (SELECT performance_id FROM show WHERE if_first_show = 'Live final')",
    "SELECT MAX(share), MIN(share) FROM performance WHERE performance_id NOT IN (SELECT performance_id FROM show WHERE result = 'Live final')",
    "SELECT name FROM conductor WHERE ethnic_group <> 'USA'",
    "SELECT name FROM conductor WHERE ethnic_group <> 'USA'",
    "SELECT recorded_by FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT orchestra.recorded_by FROM orchestra WHERE orchestra.orchestra_id IN (     SELECT orchestra_id     FROM orchestra     WHERE orchestra.orchestra LIKE '%orchestra%' ) ORDER BY orchestra.year_of_founded DESC",
    "SELECT AVG(audience_number) FROM show",
    "SELECT AVG(audience_number) FROM show JOIN performance ON show.performance_id = performance.performance_id",
    "SELECT MAX(share), MIN(share) FROM performance WHERE kind != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE kind != 'Live final'",
    "SELECT COUNT(DISTINCT ethnic_group) FROM conductor",
    "SELECT COUNT(DISTINCT ethnic_group) FROM conductor",
    "SELECT recorded_by AS record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras FROM orchestra GROUP BY recorded_by",
    "SELECT recorded_by, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY recorded_by",
    "SELECT recorded_by FROM orchestra GROUP BY recorded_by ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1",
    "SELECT recorded_by FROM orchestra GROUP BY recorded_by ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1",
    "SELECT DISTINCT recorded_by FROM orchestra WHERE year_of_founded < 2003 AND recorded_by IN (SELECT recorded_by FROM orchestra WHERE year_of_founded > 2003)",
    "SELECT DISTINCT recorded_by  FROM orchestra  WHERE orchestra_id IN (     SELECT orchestra_id      FROM orchestra      WHERE year_of_founded < 2003 ) AND orchestra_id IN (     SELECT orchestra_id      FROM orchestra      WHERE year_of_founded > 2003 )",
    "SELECT MAX(portion), MIN(portion) FROM performance WHERE sort != 'Live final'",
    "SELECT MAX(portion), MIN(portion) FROM performance WHERE performance_id NOT IN (SELECT performance_id FROM show WHERE result = 'Live final')",
    "SELECT name FROM conductor ORDER BY practition_length DESC",
    "SELECT name FROM conductor ORDER BY practition_length DESC",
    "SELECT name FROM conductor ORDER BY practition_length DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY practition_length DESC LIMIT 1",
    "SELECT orchestra, COUNT(*) as count FROM orchestra GROUP BY orchestra ORDER BY count ASC",
    "SELECT main_format, COUNT(*) AS frequency FROM orchestra GROUP BY main_format ORDER BY frequency DESC",
    "SELECT COUNT(*) FROM orchestra WHERE main_format = 'CD' OR main_format = 'DVD'",
    "SELECT COUNT(*) FROM orchestra WHERE main_format IN ('CD', 'DVD')",
    "SELECT name, school_level FROM highschooler",
    "SELECT name, school_level FROM highschooler",
    "SELECT * FROM highschooler",
    "SELECT id, school_level FROM highschooler",
    "SELECT school_level FROM highschooler WHERE name = 'Kyle'",
    "SELECT school_level FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE school_level = '10'",
    "SELECT name FROM highschooler WHERE school_level = '10th'",
    "SELECT COUNT(*) FROM highschooler WHERE school_level IN ('9', '10')",
    "SELECT COUNT(*) FROM highschooler WHERE school_level IN ('9', '10')",
    "SELECT school_level, COUNT(*) FROM highschooler GROUP BY school_level ORDER BY school_level",
    "SELECT school_level, COUNT(*) FROM highschooler GROUP BY school_level",
    "SELECT school_level, COUNT(*) AS count FROM highschooler WHERE school_level = 'high' GROUP BY school_level ORDER BY count DESC LIMIT 1;",
    "SELECT grade FROM (     SELECT school_level AS grade, COUNT(*) AS num_students     FROM highschooler     GROUP BY school_level ) AS student_counts WHERE num_students = (     SELECT MAX(num_students)     FROM (         SELECT school_level AS grade, COUNT(*) AS num_students         FROM highschooler         GROUP BY school_level     ) AS max_counts )",
    "SELECT * FROM likes GROUP BY liked_id HAVING COUNT(DISTINCT student_id) >= 4",
    "SELECT school_level FROM highschooler GROUP BY school_level HAVING COUNT(*) >= 4",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE l.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  WHERE h.school_level = 'high'  AND h.id IN (SELECT l.student_id               FROM likes l               WHERE l.liked_id = h.id               AND l.grade > 5               GROUP BY l.student_id               HAVING COUNT(*) >= 2)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(highschooler.school_level) FROM highschooler WHERE highschooler.id NOT IN (SELECT student_id FROM friend)",
    "SELECT name, level FROM highschooler",
    "SELECT name, level FROM highschooler",
    "SELECT * FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE level = 'HS')",
    "SELECT id, level FROM highschooler",
    "SELECT level FROM highschooler WHERE name = 'Kyle'",
    "SELECT level FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE level = '10'",
    "SELECT name FROM highschooler WHERE level = '10'",
    "SELECT COUNT(*) FROM highschooler WHERE level IN ('9', '10')",
    "SELECT COUNT(*) FROM highschooler WHERE level IN ('9', '10')",
    "SELECT level, COUNT(*) FROM highschooler GROUP BY level ORDER BY level",
    "SELECT level, COUNT(*) FROM highschooler GROUP BY level",
    "SELECT level, COUNT(*) AS count FROM highschooler GROUP BY level ORDER BY count DESC LIMIT 1;",
    "SELECT level AS grade, COUNT(*) AS num_highschoolers FROM highschooler WHERE level IN ('9', '10', '11', '12') GROUP BY level ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT * FROM likes GROUP BY liked_id HAVING COUNT(DISTINCT student_id) >= 4",
    "SELECT level FROM highschooler GROUP BY level HAVING COUNT(*) >= 4",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE l.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name FROM highschooler h  WHERE h.level = 'high' AND h.id IN  (SELECT f.student_id FROM friend f  WHERE f.friend_id IN  (SELECT f2.friend_id FROM friend f2  WHERE f2.student_id = h.id)  GROUP BY f.student_id HAVING COUNT(*) >= 2)  AND h.id IN  (SELECT l.student_id FROM likes l  WHERE l.liked_id = h.id AND l.grade > 5)",
    "SELECT AVG(grade) FROM (SELECT grade FROM highschooler, friend, likes WHERE highschooler.id = friend.student_id AND friend.friend_id = likes.liked_id) AS temp;",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(level) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT name, class FROM highschooler",
    "SELECT name, class FROM highschooler",
    "SELECT * FROM likes WHERE student_id IN (SELECT id FROM highschooler)",
    "SELECT id, class FROM highschooler",
    "SELECT class FROM highschooler WHERE name = 'Kyle'",
    "SELECT class FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE class = 10",
    "SELECT name FROM highschooler WHERE class = 10",
    "SELECT COUNT(*) FROM highschooler WHERE class IN ('9', '10')",
    "SELECT COUNT(*) FROM highschooler WHERE class IN (9, 10)",
    "SELECT class, COUNT(*) FROM highschooler GROUP BY class ORDER BY class",
    "SELECT class, COUNT(*) FROM highschooler GROUP BY class",
    "SELECT class, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY class ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM likes GROUP BY grade HAVING COUNT(DISTINCT student_id) >= 4",
    "SELECT class FROM highschooler GROUP BY class HAVING COUNT(*) >= 4",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE l.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name FROM highschooler h  WHERE h.id IN (SELECT f.student_id FROM friend f GROUP BY f.student_id HAVING COUNT(*) >= 2)  AND h.id IN (SELECT l.student_id FROM likes l WHERE l.liked_id = h.id AND l.grade > 5)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(highschooler.class) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend UNION SELECT friend.friend_id FROM friend)",
    "SELECT DISTINCT owners.province FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN professionals ON dogs.dog_id = treatments.dog_id AND treatments.professional_id = professionals.professional_id WHERE professionals.dwelling_calling = 'professional' AND owners.province IS NOT NULL GROUP BY owners.province HAVING COUNT(DISTINCT owners.owner_id) > 0 AND COUNT(DISTINCT professionals.professional_id) > 0",
    "SELECT DISTINCT owners.province  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN professionals ON dogs.dog_id = treatments.dog_id AND treatments.professional_id = professionals.professional_id  WHERE owners.province = professionals.region",
    "SELECT professional_id, last_name, cell_no FROM professionals WHERE region = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) > 2)",
    "SELECT professional_id, last_name, cell_no FROM professionals  WHERE region = 'Indiana' OR professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT DISTINCT forename FROM professionals WHERE forename NOT IN (SELECT name FROM dogs) AND (part_code = 'owner' OR part_code = 'professional')",
    "SELECT DISTINCT forename FROM professionals WHERE forename NOT IN (SELECT name FROM dogs) AND (part_code = 'owner' OR part_code = 'professional')",
    "SELECT professionals.professional_id, professionals.part_code, professionals.e_mail_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.care_type_encipher = 'dog' )",
    "SELECT professional_id, part_code, e_mail_address  FROM professionals  WHERE professional_id NOT IN      (SELECT professional_id       FROM treatments       JOIN dogs ON treatments.dog_id = dogs.dog_id       WHERE dogs.gender = 'male')",
    "SELECT owners.owner_id, owners.first_name, owners.family_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, first_name, family_name  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    GROUP BY owner_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)",
    "SELECT professional_id, part_code, forename FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) >= 2)",
    "SELECT professional_id, part_code, forename FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) >= 2)",
    "SELECT breed_name FROM breeds WHERE breed_cipher = (SELECT breed_cipher FROM dogs GROUP BY breed_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_cipher = (SELECT breed_cipher FROM dogs GROUP BY breed_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.family_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.family_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.family_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1",
    "SELECT treatment_types.treatment_category_description  FROM treatment_types  JOIN treatments ON treatment_types.medical_category_code = treatments.care_type_encipher  GROUP BY treatment_types.treatment_category_description  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.treatment_category_description  FROM treatment_types  JOIN treatments ON treatment_types.medical_category_code = treatments.care_type_encipher  GROUP BY treatment_types.treatment_category_description  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_number FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM(charges.cost_category) DESC LIMIT 1",
    "SELECT owners.owner_id, owners.zip_number FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_number ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT professional_id, cell_no FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT care_type_encipher) >= 2)",
    "SELECT professional_id, cell_no FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT care_type_encipher) >= 2)",
    "SELECT forename, last_name FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT professionals.first_name, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT treatments.time_of_therapeutics, professionals.forename FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.time_of_therapeutics, professionals.forename  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_category_description  FROM treatments  JOIN treatment_types ON treatments.care_type_encipher = treatment_types.medical_category_code",
    "SELECT cost_of_treatment, treatment_category_description FROM treatments JOIN treatment_types ON treatments.care_type_encipher = treatment_types.medical_category_code",
    "SELECT owners.first_name, owners.family_name, dogs.measurement_number FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.family_name, sizes.size_specifications  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.measurement_number = sizes.size_number",
    "SELECT d.name, t.time_of_therapeutics  FROM dogs d  JOIN breeds b ON d.breed_cipher = b.breed_cipher  JOIN treatments t ON d.dog_id = t.dog_id  WHERE b.breed_cipher = (SELECT breed_cipher FROM breeds ORDER BY breed_name LIMIT 1)",
    "SELECT d.name, t.time_of_therapeutics FROM dogs d JOIN breeds b ON d.breed_cipher = b.breed_cipher JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_cipher LIMIT 1)",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT dogs.date_reached, dogs.leave_time FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.care_type_encipher = 'medical'",
    "SELECT dogs.date_adopted AS arriving_date, treatments.time_of_therapeutics AS departing_date FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT o.family_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT o.family_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT e_mail_address FROM professionals WHERE region = 'Hawaii' OR region = 'Wisconsin'",
    "SELECT e_mail_address FROM professionals WHERE region = 'Hawaii' OR region = 'Wisconsin'",
    "SELECT date_adopted AS arriving_date, leave_time AS departing_date FROM dogs",
    "SELECT date_adopted AS arrival_date, leave_time AS departure_date FROM dogs",
    "SELECT part_code, avenue, metropolis, region FROM professionals WHERE metropolis LIKE '%West%'",
    "SELECT role, street, city, province FROM professionals WHERE metropolis LIKE '%West%'",
    "SELECT first_name, last_name, mail FROM owners WHERE province LIKE '%North%'",
    "SELECT first_name, family_name, mail FROM owners WHERE province LIKE '%North%'",
    "SELECT MAX(cost_of_treatment) FROM treatments",
    "SELECT cost_of_treatment FROM treatments ORDER BY time_of_therapeutics DESC LIMIT 1",
    "SELECT cost_category, charges FROM charges",
    "SELECT cost_category, charges FROM charges",
    "SELECT MAX(charges) FROM charges",
    "SELECT MAX(charges) FROM charges",
    "SELECT e_mail_address, dwelling_calling, home_phone, cell_no FROM professionals",
    "SELECT e_mail_address, dwelling_calling, home_phone, cell_no FROM professionals",
    "SELECT breeds.breed_name, sizes.size_specifications FROM breeds, sizes",
    "SELECT DISTINCT breed_cipher, size_specifications FROM dogs, sizes WHERE dogs.measurement_number = sizes.size_number",
    "SELECT professionals.forename, treatments.care_type_encipher FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.forename, treatments.care_type_encipher  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0",
    "SELECT DISTINCT state FROM owners INNER JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_included FROM treatments)",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.treatment_type_code = 'therapy_type_fine_grained_info'",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs WHERE owner_id IN (SELECT owner_id FROM treatments JOIN charges ON treatments.treatment_id = charges.charge_id WHERE charge_amount <= 1000)",
    "SELECT breeds.breed_designation FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_designation ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT breed_designation FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owner_id, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments )",
    "SELECT treatment_types.therapy_type_fine_grained_info  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.therapy_type_fine_grained_info FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_number FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'dog adoption fee') + (SELECT cost_of_treatment FROM treatments WHERE treatments.dog_included = dogs.dog_id)) DESC LIMIT 1;",
    "SELECT owner_id, zip_number FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     WHERE owner_id = owners.owner_id     GROUP BY owner_id     ORDER BY SUM(         SELECT charge_amount         FROM charges         WHERE charge_id = treatments.treatment_id     ) DESC     LIMIT 1 )",
    "SELECT treatments.cost_of_treatment, treatment_types.therapy_type_fine_grained_info  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT cost_of_treatment, therapy_type_fine_grained_info FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_included  WHERE breeds.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE breeds.breed_designation = (SELECT breed_designation FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT dogs.when_arrived AS arriving_date, dogs.date_departed AS departing_date FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.treatment_type_code = 'therapy'",
    "SELECT dogs.when_arrived AS arriving_date, dogs.date_departed AS departing_date FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.treatment_id IS NOT NULL",
    "SELECT when_arrived, date_departed FROM dogs",
    "SELECT when_arrived, date_departed FROM dogs",
    "select count(distinct dog_id) from treatments",
    "SELECT COUNT(*) FROM treatments WHERE dog_included = true",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT email_address, home_ring_up, cell_number FROM professionals",
    "SELECT email_address, home_ring_up, cell_number FROM professionals",
    "SELECT professionals.first_name, treatments.treatment_type_code  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_code  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.charge_of_curative = charges.charge_id WHERE charge_amount > 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.charge_of_curative = charges.charge_id WHERE charge_amount > 1000)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.mail  FROM professionals  WHERE professionals.professional_id NOT IN      (SELECT treatments.professional_id FROM treatments WHERE treatments.treatment_type_code = 'curative')",
    "SELECT professional_id, role_code, mail  FROM professionals  WHERE professional_id NOT IN      (SELECT professional_id       FROM treatments       WHERE treatment_type_code = 'curative' AND dog_id IN           (SELECT dog_id            FROM dogs            WHERE breed_code IN                (SELECT breed_code                 FROM breeds                 WHERE breed_name = 'dog')))",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  JOIN charges ON treatments.charge_of_curative = charges.charge_id  GROUP BY treatment_types.treatment_type_description  ORDER BY SUM(charges.charge_amount) ASC  LIMIT 1",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(charge_of_curative) ASC LIMIT 1)",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'adoption') + (SELECT SUM(charge_amount) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.charge_of_curative = charges.charge_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1;",
    "SELECT first_name, last_name FROM professionals  WHERE professional_id IN (     SELECT professional_id FROM treatments      WHERE charge_of_curative < (         SELECT AVG(charge_of_curative) FROM treatments     ) )",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE charge_of_curative < (SELECT AVG(charge_of_curative) FROM treatments))",
    "SELECT charge_amount, treatment_type_description FROM charges JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code",
    "SELECT charge_amount, treatment_type_description FROM charges, treatment_types, treatments WHERE charges.charge_id = treatments.charge_of_curative AND treatment_types.treatment_type_code = treatments.treatment_type_code",
    "SELECT date_arrived, when_left FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT date_arrived, when_left FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT mail FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT mail FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, when_left FROM dogs",
    "SELECT date_arrived, when_left FROM dogs",
    "SELECT MAX(charge_of_curative) FROM treatments",
    "SELECT charge_of_curative FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT name, age, mass FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, mass FROM dogs WHERE abandoned_yn = 1",
    "SELECT mail, home_phone, cell_number FROM professionals",
    "SELECT mail, home_phone, cell_number FROM professionals",
    "SELECT DISTINCT owners.province FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN professionals ON professionals.location = owners.province",
    "SELECT DISTINCT owners.province FROM owners JOIN professionals ON owners.province = professionals.location",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_included FROM treatments)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.treatment_type_code = 'medical_category_code'",
    "SELECT professional_id, surname, cell_number FROM professionals WHERE location = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, surname, cell_number FROM professionals WHERE location = 'Indiana' OR professional_id IN (     SELECT professional_id FROM treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT owners.owner_id, owners.first_name, owners.surname FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, first_name, surname  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    GROUP BY owner_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)",
    "SELECT breed_cognomen FROM breeds WHERE breed_code = (SELECT breed_digits FROM dogs GROUP BY breed_digits ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breeds.breed_cognomen AS breed_name, COUNT(dogs.dog_id) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_digits = breeds.breed_code GROUP BY breeds.breed_cognomen ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.surname FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_included GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.surname FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments )",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.medical_category_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.medical_category_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT cost FROM charges WHERE charge_id = 'dog')) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN (     SELECT owner_id, SUM(cost_of_treatment) AS total_cost     FROM treatments     JOIN dogs ON treatments.dog_included = dogs.dog_id     GROUP BY owner_id     ORDER BY total_cost DESC     LIMIT 1 ) AS top_owner ON owners.owner_id = top_owner.owner_id;",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT first_name, surname FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE cost_of_treatment < (SELECT AVG(cost) FROM charges)",
    "SELECT first_name, surname FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost) FROM charges))",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.medical_category_code",
    "SELECT cost, treatment_type_description FROM charges JOIN treatment_types ON charges.charge_type = treatment_types.medical_category_code",
    "SELECT owners.first_name, owners.surname, sizes.size_elaborations FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;",
    "SELECT owners.first_name, owners.surname, dogs.mass as size_of_dog FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_digits = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_included  WHERE breeds.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_digits = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE breeds.breed_cognomen = (SELECT breed_cognomen FROM breeds ORDER BY breed_cognomen LIMIT 1) ORDER BY treatments.date_of_treatment ASC",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatment_type_code IN (SELECT medical_category_code FROM treatment_types WHERE treatment_type_description = 'treatment')",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_included FROM treatments)",
    "SELECT surname FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs) ORDER BY d.date_arrived DESC LIMIT 1",
    "SELECT surname FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE location = 'Hawaii' OR location = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE location = 'Hawaii' OR location = 'Wisconsin'",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments WHERE dog_included = true",
    "SELECT COUNT(*) FROM treatments WHERE dog_included IS NOT NULL",
    "SELECT role_code, street, city, province FROM professionals WHERE city LIKE '%West%'",
    "SELECT role_code, avenue AS street, location AS city, district AS state  FROM professionals  WHERE location LIKE '%West%'",
    "SELECT first_name, surname, email_address FROM owners WHERE province LIKE '%North%'",
    "SELECT first_name, surname, email_address FROM owners WHERE province LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT name, age, mass FROM dogs WHERE is_forsaken = 1",
    "SELECT name, age, mass FROM dogs WHERE is_forsaken = 1",
    "SELECT charge_type, cost FROM charges",
    "SELECT charge_type, cost FROM charges",
    "SELECT MAX(cost) FROM charges",
    "SELECT MAX(cost) FROM charges",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT breeds.breed_cognomen, sizes.size_elaborations FROM breeds, sizes",
    "SELECT DISTINCT dogs.breed_digits, dogs.size_code FROM dogs",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.medical_category_code",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0",
    "SELECT DISTINCT state FROM owners INNER JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE treatments.category IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE category = 'treatment'",
    "SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_included WHERE t.cost_of_treatment <= 1000 OR t.cost_of_treatment IS NULL",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT DISTINCT forename FROM professionals WHERE role_cipher = 'professional' OR role_cipher = 'owner' AND forename NOT IN (SELECT name FROM dogs)",
    "SELECT DISTINCT forename FROM professionals WHERE role_cipher = 'professional' OR role_cipher = 'owner' AND forename NOT IN (SELECT name FROM dogs WHERE name IS NOT NULL)",
    "SELECT professionals.professional_id, professionals.role_cipher, professionals.e_mail_address  FROM professionals  WHERE professionals.professional_id NOT IN      (SELECT treatments.professional_id FROM treatments WHERE treatments.category = 'dog')",
    "SELECT professional_id, role_cipher, e_mail_address  FROM professionals  WHERE professional_id NOT IN      (SELECT professional_id       FROM treatments       WHERE dog_included IN           (SELECT dog_id            FROM dogs            WHERE deserted = 'NO' AND breed_cipher = 'dog'))",
    "SELECT owners.owner_id, owners.forename, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, forename, last_name  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    GROUP BY owner_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)",
    "SELECT professionals.professional_id, professionals.role_cipher, professionals.forename FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT professionals.professional_id, professionals.role_cipher, professionals.forename FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_cipher FROM dogs GROUP BY breed_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_cipher FROM dogs GROUP BY breed_cipher ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_included GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_included GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_number = (SELECT category FROM treatments GROUP BY category ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_number = (SELECT category FROM treatments GROUP BY category ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT dogs.owner_id, owners.zip_number FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'adoption') + (SELECT cost_of_treatment FROM treatments WHERE treatments.dog_included = dogs.dog_id)) DESC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_number FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_number ORDER BY SUM((SELECT SUM(charge_amount) FROM charges WHERE charges.charge_id = treatments.treatment_id)) DESC LIMIT 1;",
    "SELECT forename, last_name FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.forename, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT treatments.date_of_treatment, professionals.forename  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.date_of_treatment, professionals.forename FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.category = treatment_types.treatment_type_number",
    "SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.category = treatment_types.treatment_type_number",
    "SELECT owners.forename, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.forename, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.forename, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.forename, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_cipher = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_included  WHERE breeds.breed_code = (SELECT breed_cipher FROM dogs GROUP BY breed_cipher ORDER BY COUNT(*) LIMIT 1)",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_cipher = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment;",
    "SELECT owners.forename, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT owners.forename, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.province = 'Virginia'",
    "SELECT date_arrived, depature_day FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_included WHERE category = 'treatment'",
    "SELECT date_arrived, depature_day FROM dogs WHERE dog_id IN (SELECT dog_included FROM treatments)",
    "SELECT e_mail_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT e_mail_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, depature_day FROM dogs",
    "SELECT date_arrived, depature_day FROM dogs",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM treatments WHERE dog_included IS NOT NULL",
    "SELECT role_cipher, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT role_cipher, avenue, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT forename, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT forename, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_included FROM treatments)",
    "SELECT name, age, weight FROM dogs WHERE deserted = 1",
    "SELECT name, age, weight FROM dogs WHERE deserted = 1",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT e_mail_address, cell_number, home_phone FROM professionals",
    "SELECT breeds.breed_name, sizes.size_explanation FROM breeds, sizes",
    "SELECT DISTINCT breed_cipher, size_code FROM dogs",
    "SELECT professionals.forename, treatments.category  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.forename, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT name FROM singer ORDER BY value_estimation ASC",
    "SELECT name FROM singer ORDER BY value_estimation ASC",
    "SELECT YEAR(born_date) AS birth_year, nationality AS citizenship FROM singer",
    "SELECT born_date, nationality FROM singer",
    "SELECT name FROM singer WHERE nationality <> 'France'",
    "SELECT name FROM singer WHERE nationality <> 'French'",
    "SELECT name FROM singer WHERE born_date BETWEEN '1948-01-01' AND '1949-12-31'",
    "SELECT name FROM singer WHERE born_date BETWEEN '1948-01-01' AND '1949-12-31'",
    "SELECT name FROM singer ORDER BY value_estimation DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY value_estimation DESC LIMIT 1;",
    "SELECT nationality, COUNT(DISTINCT singer_id) AS num_singers FROM singer_0 GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM singer GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM singer_0 GROUP BY nationality ORDER BY count DESC LIMIT 1;",
    "SELECT nationality, COUNT(*) AS count FROM singer GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality, MAX(value_estimation) FROM singer GROUP BY nationality",
    "SELECT nationality, MAX(value_estimation) FROM singer GROUP BY nationality",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.selling > 300000",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE selling > 300000)",
    "SELECT singer.name, SUM(song.selling) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.selling) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT nationality FROM singer WHERE born_date < '1945-01-01' OR born_date > '1955-12-31' GROUP BY nationality HAVING COUNT(*) > 1",
    "SELECT DISTINCT nationality FROM singer WHERE born_date < '1945-01-01' AND born_date > '1955-12-31'",
    "SELECT born_yr, citizenship FROM singer",
    "SELECT born_yr, citizenship FROM singer",
    "SELECT name FROM singer WHERE born_yr = 1948 OR born_yr = 1949",
    "SELECT name FROM singer WHERE born_yr = 1948 OR born_yr = 1949",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sold > 300000",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sold > 300000)",
    "SELECT singer.name, SUM(song.sold) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sold) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT citizenship FROM singer WHERE born_yr < 1945 OR born_yr > 1955",
    "SELECT citizenship FROM singer WHERE born_yr < 1945 AND born_yr > 1955",
    "SELECT name FROM singer ORDER BY gross_value ASC",
    "SELECT name FROM singer ORDER BY gross_value ASC",
    "SELECT name FROM singer ORDER BY gross_value DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY gross_value DESC LIMIT 1",
    "SELECT citizenship, MAX(gross_value) AS max_net_worth FROM singer GROUP BY citizenship",
    "SELECT citizenship, MAX(gross_value) AS max_net_worth FROM singer GROUP BY citizenship",
    "SELECT born_yr, citizenship FROM singer",
    "SELECT born_yr, citizenship FROM singer",
    "SELECT name FROM singer WHERE born_yr = 1948 OR born_yr = 1949",
    "SELECT name FROM singer WHERE born_yr = 1948 OR born_yr = 1949",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.number_of_trading > 300000",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING SUM(number_of_trading) > 300000)",
    "SELECT singer.name, SUM(song.number_of_trading) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.number_of_trading) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT citizenship FROM singer WHERE born_yr < 1945 OR born_yr > 1955",
    "SELECT citizenship FROM singer WHERE born_yr < 1945 AND born_yr > 1955",
    "SELECT YEAR(born_date) AS birth_year, home_country AS citizenship FROM singer_4 WHERE singer_id IN (SELECT singer_id FROM song)",
    "SELECT born_date, home_country FROM singer",
    "SELECT name FROM singer WHERE home_country <> 'France'",
    "SELECT name FROM singer WHERE home_country <> 'France'",
    "SELECT name FROM singer WHERE born_date BETWEEN '1948-01-01' AND '1949-12-31'",
    "SELECT name FROM singer WHERE born_date BETWEEN '1948-01-01' AND '1949-12-31'",
    "SELECT home_country, COUNT(DISTINCT singer_id) FROM singer_4 GROUP BY home_country",
    "SELECT home_country, COUNT(*) FROM singer GROUP BY home_country",
    "SELECT home_country, COUNT(*) AS count FROM singer GROUP BY home_country ORDER BY count DESC LIMIT 1;",
    "SELECT home_country, COUNT(*) AS count FROM singer GROUP BY home_country ORDER BY count DESC LIMIT 1;",
    "SELECT home_country, MAX(net_worth_millions)  FROM singer  GROUP BY home_country",
    "SELECT home_country, MAX(net_worth_millions) FROM singer GROUP BY home_country",
    "SELECT home_country FROM singer WHERE born_date < '1945-01-01' OR born_date > '1955-12-31' GROUP BY home_country HAVING COUNT(DISTINCT singer_id) > 1",
    "SELECT DISTINCT home_country FROM singer WHERE born_date < '1945-01-01' AND born_date > '1955-12-31'",
    "SELECT characteristics_type_name FROM ref_feature_types WHERE attribute_category_number = (SELECT attribute_type_num FROM other_available_features WHERE attribute_appellation = 'AirCon')",
    "SELECT category_details FROM ref_property_types WHERE property_type_code = [code]",
    "SELECT property_name FROM properties WHERE (type_of_property = 'house' OR type_of_property = 'apartment') AND total_room > 1",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code IN (SELECT property_type_code FROM properties WHERE property_id = [code]);   Replace [code] with the specific property code.",
    "SELECT property_address FROM properties WHERE (property_type_description = 'house' OR property_type_description = 'apartment') AND number_room > 1",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT trait_type_cipher FROM other_available_features WHERE feature_name = 'AirCon')",
    "SELECT property_type_name FROM ref_feature_types WHERE attribute_category_num = 'AirCon'",
    "SELECT ref_property_types.property_type_description  FROM ref_property_types  JOIN properties ON ref_property_types.property_type_code = properties.possessions_class_num  WHERE properties.property_cognomen = 'that code'",
    "SELECT property_cognomen FROM properties WHERE (apt_feature_1 = 'house' OR apt_feature_1 = 'apartment') AND room_count > 1",
    "SELECT characteristics_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')",
    "SELECT genus_details FROM ref_property_types WHERE property_type_code = [code]",
    "SELECT property_address FROM properties WHERE (house_designation = 'house' OR apt_feature_1 = 'apartment' OR apt_feature_2 = 'apartment' OR apt_feature_3 = 'apartment') AND total_room > 1"
]