[
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, country FROM singer ORDER BY birthday ASC",
    "SELECT name, country FROM singer ORDER BY birthday DESC",
    "SELECT AVG(singer_id), MIN(singer_id), MAX(singer_id) FROM singer WHERE country = 'France'",
    "SELECT AVG(singer_id), MIN(singer_id), MAX(singer_id) FROM singer WHERE country = 'France'",
    "SELECT s.name, s.song_release_year FROM singer s WHERE s.birthday = (SELECT MIN(birthday) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE birthday = (SELECT MIN(birthday) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE YEAR(birthday) = 2001",
    "SELECT DISTINCT country FROM singer WHERE YEAR(birthday) = 2001",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT song_name FROM singer WHERE birthday < (SELECT AVG(birthday) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year >= 2014",
    "SELECT COUNT(*) FROM concert WHERE year >= 2014",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, highest FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT concert_name FROM concert ORDER BY year ASC LIMIT 1",
    "SELECT concert_name FROM concert ORDER BY year ASC LIMIT 1",
    "SELECT MAX(attendance) FROM concert WHERE concert_id NOT IN (SELECT concert_id FROM singer_in_concert)",
    "SELECT name, lowest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) ORDER BY lowest ASC",
    "SELECT DISTINCT country FROM singer WHERE (YEAR(birthday) = 1981 OR YEAR(birthday) = 1991)",
    "SELECT AVG(attendance) FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT MIN(stadium.lowest) FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert WHERE concert.year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year >= 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year <= 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE concert_name LIKE '%Hey%' AND concert_id IN (SELECT concert_id FROM singer_in_concert)))",
    "SELECT MIN(s.lowest), MAX(s.highest)  FROM stadium s  JOIN concert c ON s.stadium_id = c.stadium_id  WHERE c.year = 2014 OR c.year = 2015",
    "SELECT MIN(s.lowest), MAX(s.highest) FROM stadium s  WHERE s.stadium_id IN (     SELECT c.stadium_id FROM concert c      WHERE c.year = 2014 AND c.stadium_id IN (         SELECT c2.stadium_id FROM concert c2 WHERE c2.year = 2015     ) )",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10.",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND birthdate = (SELECT MIN(birthdate) FROM pets WHERE pettype = 'dog')",
    "SELECT MIN(weight) FROM pets WHERE pettype = 'dog'",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT COUNT(petid) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20)",
    "SELECT COUNT(DISTINCT petid) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20)",
    "SELECT COUNT(petid) FROM pets WHERE pettype = 'puppy' AND petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'F'))",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'puppy' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('kitten', 'puppy')",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('kitten', 'puppy')",
    "SELECT s.fname, s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'Kitten' AND s.stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'Puppy'))",
    "SELECT DISTINCT s.fname FROM student s  INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid  INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid  INNER JOIN pets p1 ON hp1.petid = p1.petid  INNER JOIN pets p2 ON hp2.petid = p2.petid  WHERE p1.pettype = 'kitten' AND p2.pettype = 'puppy' AND hp1.petid <> hp2.petid",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'kitten')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'kitten')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'kitten')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'puppy')))",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'puppy') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'kitten'))) ORDER BY fname LIMIT 1",
    "SELECT pettype, weight FROM pets WHERE birthdate = (SELECT MIN(birthdate) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE birthdate = (SELECT MIN(birthdate) FROM pets)",
    "SELECT petid, weight FROM pets WHERE birthdate < '2020-01-01'",
    "SELECT petid, weight FROM pets WHERE YEAR(birthdate) < 2020",
    "SELECT pettype, AVG(petid) AS avg_id, MAX(petid) AS max_id FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(petid) AS avg_id, MAX(petid) AS max_id FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(petid) AS avg_id, MAX(petid) AS max_id FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT s.fname, s.lname, s.age, p.pettype FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT student.stuid, COUNT(pets.petid) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid HAVING COUNT(pets.petid) > 0",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = 'cat' AND YEAR(p.birthdate) = 2001 ORDER BY p.birthdate DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND YEAR(birthdate) = 2001) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year >= YEAR(CURDATE()) - 2",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year >= YEAR(CURDATE()) - 2",
    "SELECT make, year FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  GROUP BY car_makers.maker  ORDER BY MIN(cars_data.year)  LIMIT 1",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year <= 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year <= 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makers_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.maker) DESC  LIMIT 1",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)'",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'hornet sportabout (sw)' AND car_names.make = 'amc'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'Japan'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'Japan'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'america'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM model_list",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.makerid JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT MAX(horsepower), make FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE cylinders = 3 GROUP BY make",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinders = 3 GROUP BY maker",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year <= 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year <= 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE model = 'tesla')",
    "SELECT AVG(edispl) FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE make = 'Tesla'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT maker, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY maker ORDER BY num_versions DESC LIMIT 1;",
    "SELECT maker, model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY maker, model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE year >= YEAR(CURRENT_DATE()) - 1",
    "SELECT COUNT(*) FROM cars_data WHERE year >= YEAR(CURRENT_DATE()) - 2",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.country = 'American Motor'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT maker FROM car_makers WHERE fullname = 'General Motors') OR model_list.modelid IN (SELECT makeid FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight > 3500)",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'tesla' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'tesla model' ORDER BY accelerate ASC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT countryid) FROM countries  WHERE (SELECT COUNT(DISTINCT maker) FROM car_makers WHERE car_makers.country = countries.countryid) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT DISTINCT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3",
    "SELECT makeid, maker FROM car_names  WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data WHERE cylinders > 4)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year <= 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year <= 1980",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor'",
    "SELECT model FROM model_list  WHERE maker NOT LIKE 'Ford Motor' AND modelid IN  (SELECT makeid FROM cars_data WHERE weight < 3500)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(*) > 3)",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'tesla')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'tesla')",
    "SELECT country FROM airlines WHERE airline = 'JetBlue'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'american'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Jackson'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Syracuse'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'America'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'America'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Jackson'",
    "SELECT airportname FROM airports WHERE city = 'Jackson'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Syracuse' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Syracuse' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue' AND destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue' AND destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue' AND sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue' AND sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen' AND f.airline = 'JetBlue'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue' AND destairport = 'Aberdeen'",
    "SELECT sourceairport, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM flights WHERE destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.airline = airlines.uid AND flights.sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline;",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'CVO' AND airline NOT IN (     SELECT DISTINCT airline     FROM flights     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.city = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG' JOIN airlines ON flights.airline = airlines.airline WHERE apg_airport.airportcode IS NULL",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'JetBlue'",
    "SELECT flightno FROM flights WHERE airline = 'JetBlue'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Jackson'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Syracuse', 'Jackson')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Syracuse', 'Jackson')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT documents.document_id, documents.document_name, documents.document_description FROM documents",
    "SELECT documents.document_name, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.document_id, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT document_description, document_id, template_id FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_description, document_id, template_id FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(DISTINCT template_id) FROM templates",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT template_id, COUNT(*) as usage_count FROM documents GROUP BY template_id ORDER BY usage_count DESC",
    "SELECT date_effective_from, date_effective_to FROM templates WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT MIN(date_effective_from), MAX(date_effective_to) FROM templates WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT date_effective_from, date_effective_to, template_type_code FROM templates",
    "SELECT templates.date_effective_from, templates.date_effective_to, ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "SELECT date_effective_from, date_effective_to FROM templates",
    "SELECT MIN(date_effective_from), MAX(date_effective_to) FROM templates",
    "SELECT date_effective_from, date_effective_to FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT MIN(date_effective_from), MAX(date_effective_to) FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT date_effective_from, date_effective_to FROM templates WHERE template_type_code = 'CV'",
    "SELECT date_effective_from, date_effective_to FROM templates WHERE template_type_code = 'CV'",
    "SELECT date_effective_from, date_effective_to, template_type_code  FROM templates  WHERE version_number > 5",
    "SELECT date_effective_from, date_effective_to, template_type_code  FROM templates  WHERE version_number > 5",
    "SELECT date_effective_from, date_effective_to, COUNT(template_id) AS num_templates FROM templates GROUP BY date_effective_from, date_effective_to",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_templates FROM templates GROUP BY date_effective_from, date_effective_to",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_templates FROM templates GROUP BY date_effective_from, date_effective_to ORDER BY num_templates DESC LIMIT 1;",
    "SELECT date_effective_from, date_effective_to  FROM templates  GROUP BY date_effective_from, date_effective_to  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT date_effective_from, date_effective_to FROM templates GROUP BY date_effective_from, date_effective_to HAVING COUNT(DISTINCT template_id) < 3",
    "SELECT date_effective_from, date_effective_to  FROM templates  GROUP BY date_effective_from, date_effective_to  HAVING COUNT(DISTINCT template_id) < 3",
    "SELECT version_number, date_effective_from FROM templates ORDER BY version_number ASC LIMIT 1",
    "SELECT version_number, date_effective_from, date_effective_to FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT date_effective_from, date_effective_to FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT date_effective_from, date_effective_to FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT documents.document_name, documents.document_id, documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code LIKE 'BK%'",
    "SELECT templates.date_effective_from, templates.date_effective_to, COUNT(documents.document_id) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.date_effective_from, templates.date_effective_to, templates.template_type_code",
    "SELECT date_effective_from, date_effective_to, COUNT(*) as num_documents FROM templates GROUP BY date_effective_from, date_effective_to",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_docs FROM templates GROUP BY date_effective_from, date_effective_to ORDER BY num_docs DESC LIMIT 1;",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS frequency FROM templates GROUP BY date_effective_from, date_effective_to ORDER BY frequency DESC LIMIT 1;",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE NOT EXISTS (     SELECT *      FROM documents      WHERE documents.template_id = templates.template_id )",
    "SELECT date_effective_from, date_effective_to FROM templates WHERE (date_effective_from, date_effective_to) NOT IN (SELECT date_effective_from, date_effective_to FROM templates JOIN documents ON templates.template_id = documents.template_id)",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT date_effective_from, date_effective_to FROM templates  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT date_effective_from, date_effective_to FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT winner_name, loser_name FROM matches",
    "SELECT winner_name, loser_name FROM matches",
    "SELECT winner_age, loser_age FROM matches",
    "SELECT winner_age, loser_age FROM matches",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(winner_rank) as avg_winner_rank, AVG(loser_rank) as avg_loser_rank FROM matches",
    "SELECT AVG(winner_rank + loser_rank) / 2 FROM matches",
    "SELECT MAX(winner_rank) FROM matches UNION SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(winner_rank) AS best_rank FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.loser_id WHERE m1.year = 2013 AND m2.year = 2013 AND EXISTS (   SELECT 1   FROM matches m3   WHERE m3.year = 2016   AND (m3.winner_id = m1.winner_id OR m3.loser_id = m1.winner_id)   AND (m3.winner_id = m2.loser_id OR m3.loser_id = m2.loser_id) )",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.loser_id WHERE m1.year = 2013 AND m2.year = 2013 AND EXISTS (   SELECT 1   FROM matches m3   WHERE m3.year = 2016   AND ((m3.winner_id = m1.winner_id AND m3.loser_id = m2.loser_id)   OR (m3.winner_id = m2.loser_id AND m3.loser_id = m1.winner_id)) )",
    "SELECT DISTINCT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE matches.year = 2013 OR matches.year = 2016",
    "SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.year IN (2013, 2016)",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date ASC",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1) LIMIT 1",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM  (SELECT winner_id, COUNT(*) AS num_wins FROM matches GROUP BY winner_id) AS win_counts  JOIN players ON win_counts.winner_id = players.player_id  JOIN rankings ON win_counts.winner_id = rankings.player_id  WHERE num_wins = (SELECT MAX(num_wins) FROM (SELECT winner_id, COUNT(*) AS num_wins FROM matches GROUP BY winner_id) AS win_counts)",
    "SELECT winner_name, loser_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner.first_name || ' ' || winner.last_name AS winner_name, loser.first_name || ' ' || loser.last_name AS loser_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name",
    "SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT year, COUNT(*) FROM matches GROUP BY year",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "SELECT p.first_name, p.last_name, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches ) LIMIT 1;",
    "SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT line_1, line_2, line_3 FROM addresses",
    "SELECT line_1, line_2, line_3 FROM addresses",
    "SELECT COUNT(*) FROM show WHERE if_first_show = true",
    "SELECT COUNT(*) FROM show WHERE if_first_show = true",
    "SELECT name FROM conductor ORDER BY birthday ASC",
    "SELECT name FROM conductor ORDER BY birthday",
    "SELECT name FROM conductor WHERE nationality = 'american'",
    "SELECT name FROM conductor WHERE nationality = 'american'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded ASC",
    "SELECT record_company FROM orchestra WHERE orchestra IN (SELECT orchestra FROM new_orchestra) ORDER BY year_of_founded ASC",
    "SELECT AVG(attendance) FROM show WHERE if_first_show = 0",
    "SELECT AVG(attendance) FROM show WHERE if_first_show = 0",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name FROM conductor ORDER BY birthday ASC",
    "SELECT name FROM conductor ORDER BY birthday ASC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT DISTINCT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id ORDER BY orchestra.year_of_founded ASC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id ORDER BY performance.date DESC LIMIT 1",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT * FROM orchestra ORDER BY year_of_founded ASC",
    "SELECT major_record_format FROM orchestra ORDER BY year_of_founded ASC",
    "SELECT record_company FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id     FROM performance     WHERE orchestra_id IN (         SELECT orchestra_id         FROM orchestra         WHERE year_of_founded = (             SELECT MIN(year_of_founded)             FROM orchestra         )     )     AND type = 'orchestra' ) ORDER BY orchestra.year_of_founded ASC LIMIT 1;",
    "SELECT record_company FROM orchestra WHERE year_of_founded = (SELECT MAX(year_of_founded) FROM orchestra)",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded <= 2003",
    "SELECT DISTINCT o1.record_company  FROM orchestra o1  JOIN orchestra o2 ON o1.record_company = o2.record_company  WHERE o1.year_of_founded >= 2003 AND o2.year_of_founded >= 2003 AND o1.orchestra_id <> o2.orchestra_id",
    "SELECT COUNT(*) FROM show s JOIN performance p ON s.performance_id = p.performance_id JOIN orchestra o ON p.orchestra_id = o.orchestra_id WHERE o.orchestra = 'Glebe Park' AND s.if_first_show = true",
    "SELECT COUNT(*) FROM show s JOIN performance p ON s.performance_id = p.performance_id JOIN orchestra o ON p.orchestra_id = o.orchestra_id WHERE o.orchestra = 'Glebe Park' AND s.if_first_show = true",
    "SELECT DISTINCT type FROM performance WHERE performance_id IN (SELECT performance_id FROM show WHERE if_first_show = 0 GROUP BY performance_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT performance.type  FROM performance  JOIN show ON performance.performance_id = show.performance_id  WHERE show.if_first_show = 'no'  GROUP BY performance.type  HAVING COUNT(DISTINCT show_id) > 1",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT first_name FROM dogs) AND first_name IN (SELECT first_name FROM owners)",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE (professionals.role_code = 'owner' OR professionals.role_code = 'professional') AND professionals.first_name NOT IN (SELECT dogs.name FROM dogs WHERE dogs.name IS NOT NULL)",
    "SELECT professionals.professional_id, professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code IN (         SELECT treatment_types.treatment_type_code         FROM treatment_types         WHERE treatment_types.treatment_type_description = 'operating'     ) )",
    "SELECT professionals.professional_id, professionals.first_name, professionals.last_name  FROM professionals  WHERE professionals.professional_id NOT IN      (SELECT treatments.professional_id FROM treatments WHERE treatments.treatment_type_code = 'dog')",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, CONCAT(first_name, ' ', last_name) AS name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT professional_id, home_phone, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) >= 2)",
    "SELECT professional_id, home_phone FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs WHERE abandoned_yn = 'Y' GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs WHERE abandoned_yn = 'Y' GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments )",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'adoption_fee') + (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charges.charge_amount FROM charges WHERE charges.charge_type = 'dog' AND charges.charge_id = dogs.size_code) + (SELECT SUM(treatments.cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1",
    "SELECT professional_id, first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT professional_id, home_phone FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT treatments.date_of_treatment, professionals.first_name, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT date_of_treatment, first_name, last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.last_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, owners.last_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'VA'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'VA'",
    "SELECT date_departed - date_arrived AS treatment_date FROM dogs",
    "SELECT DATEDIFF(date_departed, date_arrived) AS treatment_period FROM dogs WHERE dog_id = [dog_id]",
    "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'HI' OR state = 'WI'",
    "SELECT email_address FROM professionals WHERE state = 'HI' OR state = 'WI'",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'Y'",
    "select count(distinct dog_id) from treatments",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IS NOT NULL",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'treated dogs')",
    "SELECT first_name, last_name FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name || ' ' || last_name AS owner_name FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'Y') AND owner_id IN (SELECT owner_id FROM dogs) AND owner_id IN (SELECT owner_id FROM dog_kennels) AND owner_id IN (SELECT owner_id FROM treatments) AND owner_id IN (SELECT owner_id FROM professionals) AND owner_id IN (SELECT owner_id FROM charges)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE abandoned_yn = 'Y')",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'dog'))",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT email_address, first_name, last_name FROM professionals",
    "SELECT email_address, CONCAT(first_name, ' ', last_name) AS name FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT DISTINCT breed_code, size_code FROM dogs",
    "SELECT professionals.first_name, professionals.last_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, professionals.last_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer ORDER BY birth_year ASC",
    "SELECT name FROM singer ORDER BY birth_year ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year <= 1948",
    "SELECT name FROM singer WHERE birth_year <= 1948",
    "SELECT name FROM singer ORDER BY birth_year ASC LIMIT 1",
    "SELECT name FROM singer ORDER BY birth_year ASC LIMIT 1",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions) AS highest_net_worth FROM singer GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT title FROM song WHERE sales = (SELECT MAX(sales) FROM song)",
    "SELECT title FROM song WHERE sales = (SELECT MAX(sales) FROM song)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT singer.name, MAX(song.highest_position) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, MAX(song.highest_position)  FROM singer  JOIN song ON singer.singer_id = song.singer_id  GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year <= 1945",
    "SELECT DISTINCT citizenship FROM singer WHERE birth_year <= 1945"
]