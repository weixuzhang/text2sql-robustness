[
    "SELECT name, country, age FROM singer ORDER BY age ASC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE concert_name LIKE '%Hey%' AND theme = 'song'))",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10.",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT MIN(weight) FROM pets",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'female'",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'female'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT s.fname, s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))",
    "SELECT DISTINCT student.fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet WHERE has_pet.petid IN (SELECT pets.petid FROM pets WHERE pets.pettype = 'cat'))",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))) ORDER BY stuid ASC LIMIT 1",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT make, year FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  ORDER BY cars_data.year ASC LIMIT 1",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.maker) DESC  LIMIT 1",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data WHERE makeid = (SELECT id FROM car_names WHERE model = 'hornet sportabout (sw)' AND maker = 'amc')",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'france'",
    "SELECT COUNT(DISTINCT id) FROM car_makers WHERE maker = 'care' AND country = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE makeid IN  (SELECT id FROM car_makers WHERE maker = 'volvo'))",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT maker, model, COUNT(DISTINCT makeid) AS num_versions FROM car_names JOIN model_list ON car_names.model = model_list.modelid AND car_names.maker = model_list.maker JOIN car_makers ON model_list.maker = car_makers.id GROUP BY maker, model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.country = 'United States' AND car_makers.fullname = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.country = 'United States' OR cars_data.weight > 3500",
    "SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT maker FROM car_makers WHERE country = (SELECT contid FROM continents WHERE continent = 'General Motors')) OR (SELECT weight FROM cars_data WHERE id = model_list.modelid) > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 AND year IS NOT NULL",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 AND year IS NOT NULL;",
    "SELECT cylinders FROM cars_data  WHERE makeid = (SELECT id FROM car_makers WHERE maker = 'volvo')  ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE makeid = (SELECT id FROM car_names WHERE model = 'volvo') ORDER BY accelerate LIMIT 1",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE cylinders = 4) ORDER BY horsepower DESC LIMIT 1",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor Company'",
    "SELECT model FROM model_list  WHERE maker != 'Ford Motor Company' AND weight < 3500",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT country FROM airlines WHERE airline = \"JetBlue Airways\"",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = \"USA\"",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT * FROM airlines WHERE airline = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT airline FROM airlines WHERE abbreviation = 'AKO'",
    "SELECT airline FROM airlines WHERE abbreviation = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports s ON f.sourceairport = s.airportcode JOIN airports d ON f.destairport = d.airportcode WHERE a.airline = 'United Airlines' AND d.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD' OR sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.airline = airlines.uid AND flights.sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode  JOIN airlines ON flights.airline = airlines.airline  WHERE apg_airport.city = 'APG' AND cvo_airport.city = 'CVO'",
    "SELECT DISTINCT airline  FROM flights  WHERE sourceairport = 'CVO' AND airline NOT IN  (SELECT airline FROM flights WHERE sourceairport = 'APG')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airlines ON flights.airline = airlines.airline WHERE apg_airport.airportcode IS NULL",
    "SELECT flightno FROM flights WHERE airline = \"United Airlines\"",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(CASE WHEN age < 30 THEN 1 END) > 1",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT location, count(*) as num_shops FROM shop GROUP BY location",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT hometown, COUNT(*) as num_teachers FROM teacher GROUP BY hometown",
    "SELECT teacher.hometown, COUNT(*)  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.hometown",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 'lv 4' ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 'lv 4'",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket > 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  ORDER BY visit.total_spent DESC  LIMIT 1;",
    "SELECT museum_id, name FROM museum ORDER BY (SELECT COUNT(*) FROM visit WHERE visit.museum_id = museum.museum_id) DESC LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 'lv 1'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)",
    "select count(*) from matches where year = 2013 or year = 2016",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT winner_name, winner_rank_points FROM  (SELECT winner_id, COUNT(*) AS num_wins FROM matches GROUP BY winner_id) AS win_counts  JOIN players ON win_counts.winner_id = players.player_id  JOIN rankings ON win_counts.winner_id = rankings.player_id  WHERE num_wins = (SELECT MAX(num_wins) FROM (SELECT winner_id, COUNT(*) AS num_wins FROM matches GROUP BY winner_id) AS win_counts)",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
    "SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1",
    "SELECT battle.name, battle.date FROM battle, ship, death WHERE battle.id = ship.lost_in_battle AND ship.id = death.caused_by_ship_id AND ship.name = 'HMS Atalanta' AND death.note LIKE '%Lettice%'",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.lost_in_battle IS NULL AND ship.location = 'English Channel'",
    "I'm sorry, but the schema you provided does not seem to have a table related to math. Could you please provide the full schema or specify if there is any table related to math?",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  WHERE student_id = (SELECT student_id FROM student_enrolment                      WHERE student_enrolment_id = (SELECT MIN(student_enrolment_id) FROM student_enrolment))",
    "SELECT current_address_id, COUNT(*) AS num_students FROM students GROUP BY current_address_id ORDER BY num_students DESC LIMIT 1",
    "SELECT students.current_address_id, addresses.line_1, addresses.line_2 FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN sections ON student_enrolment_courses.course_id = sections.course_id GROUP BY students.current_address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(DISTINCT students.student_id) DESC LIMIT 1;",
    "SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT DISTINCT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Master' OR degree_summary_name = 'Bachelor'     )      GROUP BY semester_id      HAVING COUNT(DISTINCT degree_program_id) = 2 )",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuh'",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "I'm sorry, but the serialized schema you provided does not have a column named \"content\" in the \"tv_channel\" table. Could you please double-check the schema and provide the correct information?",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = \"Sky Radio\"",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle\"",
    "SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT title FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT air_date FROM tv_series WHERE series_name = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE series_name = 'A Love of a Lifetime'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.title = 'A Love of a Lifetime'",
    "SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.title = 'A Love of a Lifetime'",
    "SELECT episode FROM tv_series WHERE channel = 'Sky Radio'",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey' AND cartoon.title LIKE '%cartoon%'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel FROM cartoon     WHERE cartoon.written_by = 'Todd Casey' )",
    "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')",
    "SELECT tv_series.series_name, tv_channel.country FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2)",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT package_option FROM tv_channel  WHERE id NOT IN  (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')  AND content != 'cartoon'",
    "SELECT poker_player_id, earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY height DESC LIMIT 1",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT nationality, COUNT(*) as num_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code FROM voter_1 WHERE phone_number IN (SELECT phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')) AND phone_number IN (SELECT phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss'))",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code='AIA'",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM country  WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND code != 'USA'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE code IN ('ASM', 'GUM', 'MNP', 'PRI', 'UMI', 'VIR')",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name FROM country c1, country c2, countrylanguage cl1, countrylanguage cl2 WHERE c1.code = cl1.countrycode AND c2.code = cl2.countrycode AND cl1.language = 'English' AND cl2.language = 'French' AND cl1.isofficial = 1 AND cl2.isofficial = 1 AND c1.code = c2.code",
    "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' AND cl.isofficial = 'T' AND c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = true",
    "SELECT language  FROM countrylanguage  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = 1",
    "SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' AND code NOT IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(*) > 1))",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE language = 'English' ORDER BY population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT COUNT(DISTINCT city.population) FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT code FROM country WHERE continent = 'Europe' OR continent = 'North America' OR continent = 'Australia/Oceania' OR continent = 'Anguilla' OR continent = 'Antigua and Barbuda' OR continent = 'Bahamas' OR continent = 'Barbados' OR continent = 'Belize' OR continent = 'Bermuda' OR continent = 'British Indian Ocean Territory' OR continent = 'British Virgin Islands' OR continent = 'Canada' OR continent = 'Cayman Islands' OR continent = 'Christmas Island' OR continent = 'Cocos (Keeling) Islands' OR continent = 'Cook Islands' OR continent = 'Dominica' OR continent = 'Falkland Islands' OR continent = 'Fiji' OR continent = 'Gibraltar' OR continent = 'Grenada' OR continent =",
    "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != 'English'",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT code FROM country WHERE continent != 'North America' AND continent != 'South America' AND continent != 'Australia' AND governmentform NOT LIKE '%Republic%' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.isofficial = 'F'  AND countrylanguage.language != 'English'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY population/ surfacearea ASC LIMIT 1",
    "SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1",
    "SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT district, COUNT(city.id)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(city.name)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(c.population), AVG(c.population) FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;",
    "SELECT name FROM city WHERE population > 160000 AND population < 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language_percentage.language = countrylanguage.language AND max_language_percentage.max_percentage = countrylanguage.percentage",
    "SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrylanguage.countrycode = country.code ) ORDER BY country.code ASC",
    "SELECT COUNT(DISTINCT countrylanguage.countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50.0",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(percentage) DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50)",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age",
    "SELECT name FROM conductor WHERE nationality != \"USA\"",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM orchestra WHERE record_company IS NOT NULL) ORDER BY year_of_founded ASC",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id",
    "SELECT h2.name FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id;",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
    "SELECT t.professional_id, p.role_code, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id GROUP BY t.professional_id, p.role_code, p.first_name HAVING COUNT(DISTINCT t.treatment_id) >= 2",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT dogs.owner_id, owners.zip_code, SUM(treatments.cost_of_treatment) AS total_cost FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY total_cost DESC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT first_name, last_name FROM professionals  WHERE professional_id IN (     SELECT professional_id FROM treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) )",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y'",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]