[
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT singer.country, COUNT(*) AS num_singers FROM singer GROUP BY singer.country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id AND c.concert_id = sc1.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_singer.concert_id) AS num_concerts FROM singer JOIN concert_singer ON singer.singer_id = concert_singer.singer_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE concert_name LIKE '%Hey%' AND theme = 'song'))",
    "SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year = 2014 AND s.stadium_id IN (     SELECT stadium_id     FROM concert     WHERE year = 2015 )",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT MIN(weight) FROM pets",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND s.sex = 'F'",
    "SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT DISTINCT s.fname FROM student s, has_pet hp1, has_pet hp2, pets p1, pets p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND p1.pettype = 'cat' AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.pettype = 'dog' AND hp1.petid <> hp2.petid ORDER BY s.fname LIMIT 1",
    "SELECT DISTINCT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) ORDER BY stuid LIMIT 1",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))) ORDER BY stuid ASC LIMIT 1",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet) ORDER BY stuid LIMIT 1",
    "SELECT DISTINCT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 1)",
    "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3 ORDER BY p.petid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT make, year FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  ORDER BY cars_data.year ASC LIMIT 1",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makers_count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.maker) DESC  LIMIT 1",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)'",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'hornet sportabout (sw)' AND car_names.make = 'amc'",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'france'",
    "SELECT COUNT(DISTINCT id) FROM car_makers WHERE maker = 'care' AND country = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM model_list",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.makerid JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT MAX(horsepower), make FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE cylinders = 3 GROUP BY make",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN model_list ON cars_data.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinders = 3 GROUP BY maker",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE model = 'volvo')",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT maker, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY maker ORDER BY num_versions DESC LIMIT 1;",
    "SELECT maker, model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY maker, model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT maker FROM car_makers WHERE fullname = 'General Motors') OR model_list.modelid IN (SELECT makeid FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight > 3500)",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' ORDER BY accelerate LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT DISTINCT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3",
    "SELECT makeid, maker FROM car_names  WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor Company'",
    "SELECT model FROM model_list  WHERE maker NOT LIKE 'Ford%' AND weight < 3500",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT maker FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT makeid) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(*) > 3)",
    "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.maker = 'fiat' OR countries.countryid IN (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) > 3 )",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY' AND f.sourceairport != 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode JOIN airlines al ON f.airline = al.uid WHERE al.airline = 'United Airlines' AND a.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT sourceairport, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.airline = airlines.uid AND flights.sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline;",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'CVO' AND airline NOT IN (     SELECT DISTINCT airline     FROM flights     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.city = 'APG' )",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG' JOIN airlines ON flights.airline = airlines.airline WHERE apg_airport.airportcode IS NULL",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen' OR a.city = 'Abilene'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city, COUNT(*) as num_employees FROM employee GROUP BY city",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city;",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  GROUP BY employee.employee_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT employee.name FROM employee JOIN (SELECT employee_id, COUNT(*) as num_awards FROM evaluation GROUP BY employee_id ORDER BY num_awards DESC LIMIT 1) as max_awards ON employee.employee_id = max_awards.employee_id",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id LEFT JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_description LIKE '%w%'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(DISTINCT template_id) FROM templates",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT template_id, COUNT(*) as usage_count FROM documents GROUP BY template_id ORDER BY usage_count DESC",
    "SELECT template_id, template_type_code  FROM templates  WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_id, template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3)",
    "SELECT version_number, template_type_code FROM templates ORDER BY version_number ASC LIMIT 1",
    "SELECT template_type_code, MIN(version_number) AS lowest_version_number FROM templates GROUP BY template_type_code",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates)",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (     SELECT document_id      FROM paragraphs      GROUP BY document_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT document_id FROM documents  WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT document_id  FROM paragraphs  WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs AS p1 ON documents.document_id = p1.document_id  JOIN paragraphs AS p2 ON documents.document_id = p2.document_id  WHERE p1.paragraph_text = 'Brazil' AND p2.paragraph_text = 'Ireland'",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(*) FROM teacher",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT hometown, COUNT(*) as num_teachers FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS count_hometown FROM teacher GROUP BY hometown ORDER BY count_hometown DESC LIMIT 1;",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1",
    "SELECT DISTINCT t1.hometown FROM teacher t1 JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT teacher.name FROM course_teach  JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  JOIN course ON course_teach.course_id = course.course_id  WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT DISTINCT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.museum_id IN (     SELECT visit.museum_id     FROM visit     GROUP BY visit.museum_id, visit.visitor_id     HAVING COUNT(*) > 1 )",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT museum.museum_id, museum.name  FROM museum_visit  JOIN museum ON museum_visit.museum_id = museum.museum_id  GROUP BY museum.museum_id, museum.name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT v.name, v.age FROM visitor v JOIN visit vi ON v.id = vi.visitor_id WHERE vi.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT v.name  FROM visitor v  JOIN visit v1 ON v.id = v1.visitor_id  JOIN visit v2 ON v.id = v2.visitor_id  JOIN museum m1 ON v1.museum_id = m1.museum_id  JOIN museum m2 ON v2.museum_id = m2.museum_id  WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010)",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "select count(*) from players",
    "select count(*) from players",
    "select count(*) from matches",
    "SELECT COUNT(*) FROM matches",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "select count(*) from matches where year = 2013 or year = 2016",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.year = m2.year",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1) LIMIT 1",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM (     SELECT winner_name, winner_rank_points, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank     FROM matches     GROUP BY winner_name, winner_rank_points ) AS t WHERE rank = 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year",
    "SELECT year, COUNT(*) FROM matches GROUP BY year",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points) FROM rankings) LIMIT 1",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)",
    "SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle  INNER JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig' AND battle.id NOT IN  (SELECT DISTINCT battle.id FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' AND ship.disposition_of_ship != 'sunk')",
    "SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10",
    "SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.lost_in_battle IS NULL AND ship.location = 'English Channel'",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT COUNT(*) FROM courses",
    "SELECT COUNT(*) FROM courses",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT s.semester_id, s.semester_name, se.degree_program_id, COUNT(*) AS num_students FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.semester_id, s.semester_name, se.degree_program_id HAVING COUNT(*) = (     SELECT MAX(num_students)     FROM (         SELECT s.semester_id, se.degree_program_id, COUNT(*) AS num_students         FROM semesters s         JOIN student_enrolment se ON s.semester_id = se.semester_id         JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id         GROUP BY s.semester_id, se.degree_program_id     ) AS temp     WHERE temp.semester_id = s.semester_id AND temp.degree_program_id = se.degree",
    "SELECT department_description FROM departments WHERE department_name LIKE '%the computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id AND se1.semester_id = se2.semester_id AND se1.student_enrolment_id <> se2.student_enrolment_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se1.degree_program_id) = 2",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT last_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  WHERE student_id = (SELECT student_id FROM student_enrolment                      WHERE student_enrolment_id = (SELECT MIN(student_enrolment_id) FROM student_enrolment))",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id LIMIT 1",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students GROUP BY current_address_id, line_1, line_2, line_3 ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(enrollment_count), student_course_id FROM (     SELECT COUNT(*) AS enrollment_count, student_course_id      FROM student_enrolment_courses      GROUP BY student_course_id ) AS enrollment_counts;",
    "SELECT MAX(course_count), course_id FROM (SELECT COUNT(DISTINCT student_course_id) AS course_count, course_id FROM student_enrolment_courses GROUP BY course_id) AS course_counts",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT DISTINCT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Master' OR degree_summary_name = 'Bachelor'     )      GROUP BY semester_id      HAVING COUNT(DISTINCT degree_program_id) = 2 )",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT COUNT(DISTINCT current_address_id) FROM students",
    "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date ASC",
    "SELECT title, directed_by FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id ORDER BY air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT COUNT(*) FROM tv_series WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM tv_channel GROUP BY language) AS channel_counts)",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel JOIN tv_channel ON tv_series.id = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating  FROM tv_series  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT tv_series.series_name FROM tv_series WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT episode FROM tv_series WHERE channel = 'Sky Radio'",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey' OR cartoon.written_by IS NULL",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2)",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones' AND channel IS NOT NULL)",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height = (SELECT MAX(height) FROM people)",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT nationality, COUNT(*) as num_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)",
    "SELECT area_code FROM (     SELECT state, COUNT(*) AS num_votes, area_code     FROM votes JOIN area_code_state ON votes.state = area_code_state.state     GROUP BY state     ORDER BY num_votes DESC     LIMIT 1 ) AS max_votes_area_code_state",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code_state.area_code FROM votes JOIN area_code_state ON votes.phone_number LIKE CONCAT(area_code_state.area_code, '%') JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling' AND votes.phone_number IN (     SELECT votes.phone_number     FROM votes     JOIN contestants ON votes.contestant_number = contestants.contestant_number     WHERE contestants.contestant_name = 'Kelly Clauss' )",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.region, country.population FROM country WHERE country.name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM country  WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%US territory%'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE code IN ('ASM', 'GUM', 'MNP', 'PRI', 'UMI', 'VIR')",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' GROUP BY code HAVING COUNT(*) = 1) GROUP BY language HAVING COUNT(*) = 1",
    "SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' AND code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(*) = 1))",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT c.name, c.population, c.lifeexpectancy  FROM country c  WHERE c.continent = 'Asia'  ORDER BY c.surfacearea DESC  LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT COUNT(DISTINCT city.population) FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT code FROM country WHERE continent = 'Europe' OR continent = 'North America' OR continent = 'Australia/Oceania' OR continent = 'Anguilla' OR continent = 'Antigua and Barbuda' OR continent = 'Bahamas' OR continent = 'Barbados' OR continent = 'Belize' OR continent = 'Bermuda' OR continent = 'British Indian Ocean Territory' OR continent = 'British Virgin Islands' OR continent = 'Canada' OR continent = 'Cayman Islands' OR continent = 'Christmas Island' OR continent = 'Cocos (Keeling) Islands' OR continent = 'Cook Islands' OR continent = 'Dominica' OR continent = 'Falkland Islands' OR continent = 'Fiji' OR continent = 'Gibraltar' OR continent = 'Grenada' OR continent =",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language <> 'English'",
    "SELECT DISTINCT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform NOT LIKE '%Republic%'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.isofficial = 'F'  AND countrylanguage.language = 'English'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(city.name)  FROM city  JOIN (     SELECT district, AVG(population) as avg_pop      FROM city      GROUP BY district ) as subquery  ON city.district = subquery.district  WHERE city.population > subquery.avg_pop  GROUP BY district",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72",
    "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(c.population), AVG(c.surfacearea)  FROM country c  WHERE c.continent = 'North America' AND c.surfacearea > 3000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language_percentage.language = countrylanguage.language AND max_language_percentage.max_percentage = countrylanguage.percentage",
    "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (   SELECT MAX(cl2.percentage)   FROM countrylanguage cl2   WHERE cl2.countrycode = c.code ) ORDER BY c.code ASC",
    "SELECT COUNT(DISTINCT countrylanguage.countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(percentage) DESC  LIMIT 1",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50)",
    "SELECT COUNT(*) FROM conductor",
    "SELECT COUNT(*) FROM conductor",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra WHERE orchestra = 'orchestra' ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT DISTINCT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT orchestra, COUNT(*) as count FROM orchestra GROUP BY orchestra ORDER BY count ASC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT friend.student_id, COUNT(friend.friend_id) AS num_of_friends FROM friend GROUP BY friend.student_id;",
    "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name FROM highschooler h WHERE h.id IN (     SELECT f.student_id     FROM friend f     GROUP BY f.student_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f GROUP BY f.student_id HAVING COUNT(*) >= 3)",
    "SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Kyle'",
    "SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Kyle'",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT DISTINCT f1.student_id FROM friend f1 JOIN friend f2 ON f1.student_id = f2.friend_id AND f1.friend_id = f2.student_id JOIN likes l ON f1.student_id = l.student_id AND f2.friend_id = l.liked_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE EXISTS (SELECT 1 FROM friend WHERE student_id = h.id) AND EXISTS (SELECT 1 FROM likes WHERE student_id = h.id AND liked_id <> f.friend_id)",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) FROM likes GROUP BY student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (SELECT l.liked_id                FROM likes l                GROUP BY l.liked_id                ORDER BY COUNT(*) DESC                LIMIT 1)",
    "SELECT highschooler.name  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.id  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.student_id AND f.friend_id <> f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT state FROM owners WHERE state IN (SELECT state FROM professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.treatment_type_code = charges.charge_type WHERE charge_amount > 1000)",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT first_name FROM dogs) AND first_name IN (SELECT first_name FROM owners)",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE (professionals.role_code = 'owner' OR professionals.role_code = 'professional') AND professionals.first_name NOT IN (     SELECT dogs.name FROM dogs     WHERE dogs.name IS NOT NULL )",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code IN (         SELECT treatment_types.treatment_type_code         FROM treatment_types         WHERE treatment_types.treatment_type_description = 'operating'     ) )",
    "SELECT id, role, email  FROM professionals  WHERE professional_id NOT IN      (SELECT professional_id       FROM treatments       WHERE treatment_type_code = 'dog')",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    GROUP BY owner_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)",
    "SELECT DISTINCT professionals.professional_id, professionals.role_code, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT id, role, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment = (     SELECT MAX(cost_of_treatment)     FROM treatments )",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'adoption_fee') + (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charges.charge_amount FROM charges WHERE charges.charge_type = 'dog' AND charges.charge_id = dogs.size_code) + (SELECT SUM(treatments.cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT first_name, last_name FROM professionals  WHERE professional_id IN (     SELECT professional_id FROM treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) )",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "select count(distinct dog_id) from treatments",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IS NOT NULL",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'treated dogs')",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) AND owner_id IN (SELECT owner_id FROM dog_kennels.owners)",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IS NOT NULL))",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, cell_number, home_phone FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT DISTINCT breed_code, size_code FROM dogs",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties WHERE property_id = <code>)",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]