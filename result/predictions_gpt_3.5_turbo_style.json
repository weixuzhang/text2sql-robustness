[
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, country, age FROM singer ORDER BY age ASC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country;",
    "SELECT COUNT(singer_id), country FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT capacity, average FROM stadium",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium) AND stadium_id IN (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id HAVING COUNT(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) AS concert_count FROM concert WHERE year >= 2014 GROUP BY stadium_id) AS counts))",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country, s2.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2 WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014 AND theme = 'music')",
    "SELECT concert.theme, concert.concert_name, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_vocalists FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme",
    "SELECT singer.name, COUNT(concert_singer.concert_id) AS num_concerts FROM singer JOIN concert_singer ON singer.singer_id = concert_singer.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_shows FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE song_name LIKE '%Hey%'))",
    "SELECT location, name  FROM stadium  WHERE stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year = 2014      INTERSECT      SELECT stadium_id      FROM concert      WHERE year = 2015 )",
    "SELECT location, name  FROM stadium  WHERE stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year = 2014      INTERSECT      SELECT stadium_id      FROM concert      WHERE year = 2015 )",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT s.stuid) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'dog'",
    "SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog'))",
    "SELECT DISTINCT s.fname FROM student s  INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid  INNER JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'feline' INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid  INNER JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'canine'",
    "SELECT DISTINCT student.fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND student.stuid IN  (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog')",
    "SELECT age, major FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'feline')",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')",
    "SELECT DISTINCT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype != 'feline' OR pets.pettype IS NULL",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "SELECT age, fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'canine') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'feline')))",
    "SELECT pettype, weight FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid = [student_id]);   Note: Replace [student_id] with the actual student id.",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT pettype, MAX(pet_age) AS max_age, AVG(pet_age) AS avg_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS mean_age, MAX(pet_age) AS highest_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT student.age, student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT age, fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith'",
    "SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith'",
    "SELECT student.stuid, COUNT(has_pet.petid) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid",
    "SELECT has_pet.stuid, COUNT(has_pet.petid) AS num_pets FROM has_pet GROUP BY has_pet.stuid",
    "SELECT s.fname, s.sex, COUNT(*) as num_pets FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(*) > 1;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3) ORDER BY stuid DESC LIMIT 1",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(*) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(cars_data.id) AS quantity FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.maker, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.maker",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT maker, model FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT DISTINCT maker FROM model_list WHERE modelid IN (SELECT DISTINCT makeid FROM cars_data WHERE year = 1970))",
    "SELECT maker, year FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  ORDER BY cars_data.year ASC LIMIT 1",
    "SELECT DISTINCT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.maker, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker",
    "SELECT accelerate FROM cars_data WHERE make = 'AMC Hornet Sportabout (sw)'",
    "SELECT accelerate FROM cars_data WHERE make = 'amc' AND model = 'hornet sportabout (sw)'",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'France'",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'France'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'US'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'US' JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data",
    "SELECT year, AVG(weight) AS weight_average FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT countryname FROM countries  WHERE continent = 'Europe' AND countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3)",
    "SELECT car_makers.maker  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 3  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT car_makers.maker  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 3  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data WHERE makeid IN (SELECT id FROM car_makers WHERE maker = 'Volvo')",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_names.model = car_makers.maker WHERE car_makers.fullname = 'Volvo'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT cylinders, MAX(horsepower) AS top_speed FROM cars_data GROUP BY cylinders",
    "SELECT maker FROM car_makers WHERE id = (SELECT makeid FROM car_names             GROUP BY makeid             ORDER BY COUNT(model) DESC             LIMIT 1)",
    "SELECT model, COUNT(*) AS num_versions FROM model_list GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3)",
    "SELECT car_makers.id, car_makers.maker, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker, car_makers.fullname HAVING COUNT(DISTINCT model_list.modelid) > 3",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight > 3000",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT cylinders FROM cars_data WHERE model = 'Volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model = 'volvo')",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT makeid, maker FROM car_names  WHERE cylinders <= 3 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT makeid, maker FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE (year < 1980 OR cylinders = 8)",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE weight < 3500 AND car_makers.maker != 'Ford Motor Company'",
    "SELECT model FROM model_list  WHERE maker <> 'Ford' AND weight < 3500",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3",
    "SELECT makeid, maker FROM car_names  WHERE makeid IN (     SELECT maker FROM model_list      GROUP BY maker      HAVING COUNT(DISTINCT modelid) >= 2 AND COUNT(*) > 3 ) JOIN car_makers ON car_names.makeid = car_makers.id",
    "SELECT DISTINCT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  JOIN car_names ON car_makers.id = car_names.makeid  WHERE car_makers.maker = 'fiat' OR countries.countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT DISTINCT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  JOIN car_names ON car_makers.id = car_names.makeid  WHERE car_makers.maker = 'Fiat' OR        countries.countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airportname, airportcode FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airlines",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States of America'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen City'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE ap.airportname = 'AHD Airport' AND a.airline = 'United Airlines'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportname = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT city FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airport_code, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT airlines.airline, airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.destairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'APG'  AND EXISTS (SELECT * FROM flights WHERE flights.airline = airlines.uid AND flights.sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline",
    "SELECT DISTINCT airline  FROM flights  WHERE sourceairport = 'CVO' AND airline NOT IN  (SELECT airline FROM flights WHERE sourceairport = 'APG')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline NOT IN (     SELECT DISTINCT airlines.airline     FROM flights     JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG'     JOIN airlines ON flights.airline = airlines.airline )",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline HAVING num_flights >= 10",
    "I'm sorry, but I cannot provide any information on the desired writing style change as there is no question provided for me to work with. Please provide a question for me to generate the SQL query.",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT age FROM employee ORDER BY name ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city, COUNT(*) AS total_employees FROM employee GROUP BY city",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 1 AND MAX(age) < 30",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location",
    "SELECT district, COUNT(*) FROM shop GROUP BY district",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT s.district, s.manager_name FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT name, district, location FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN (SELECT employee_id, COUNT(*) as num_evaluations FROM evaluation GROUP BY employee_id ORDER BY num_evaluations DESC LIMIT 1) AS max_evaluations ON employee.employee_id = max_evaluations.employee_id",
    "SELECT employee.name FROM employee JOIN (SELECT employee_id, COUNT(*) as award_count FROM evaluation GROUP BY employee_id ORDER BY award_count DESC LIMIT 1) as award_counts ON employee.employee_id = award_counts.employee_id",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL",
    "SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees_recruited FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id)  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  JOIN employee ON hiring.employee_id = employee.employee_id  GROUP BY shop.name",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT * FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id JOIN evaluation ON employee.employee_id = evaluation.employee_id",
    "SELECT * FROM hiring",
    "SELECT DISTINCT district FROM shop WHERE shop.number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT COUNT(*) FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(DISTINCT template_id) FROM documents",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_type_code, ref_template_types.template_type_description, COUNT(*) as frequency  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY templates.template_type_code, ref_template_types.template_type_description",
    "SELECT template_type_code, template_id  FROM templates  WHERE template_id = (     SELECT template_id      FROM documents      GROUP BY template_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT DISTINCT template_type_code FROM templates",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT template_id FROM templates WHERE template_details LIKE '%PPT%' OR template_details LIKE '%PP%'",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT template_type_code, version_number FROM templates WHERE version_number > 5",
    "SELECT template_type_code, COUNT(*) AS template_count FROM templates GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*) AS count_of_templates FROM templates GROUP BY template_type_code",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code = (SELECT template_type_code FROM templates                              GROUP BY template_type_code                              ORDER BY COUNT(*) DESC                              LIMIT 1)",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(template_id) < 3)",
    "SELECT template_type_code, version_number FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates WHERE date_effective_to IS NULL) ORDER BY templates.version_number ASC LIMIT 1",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT DISTINCT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT template_type_code, COUNT(*) AS document_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code;",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS num_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_id IS NULL",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id",
    "SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id",
    "SELECT template_id FROM templates WHERE template_type_code = 'Presentation'",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to New York'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT document_description FROM documents WHERE document_name = 'Customer reviews'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer Reviews')",
    "SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC;",
    "Sure! Here's an example of a question you could perturb:   Original question: How many documents are associated with the template type code \"ABC123\"?   Perturbed question: What is the total number of documents that have the template type code \"ABC123\"?",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (SELECT document_id                       FROM paragraphs                       GROUP BY document_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (SELECT document_id                       FROM paragraphs                       GROUP BY document_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT DISTINCT document_id FROM paragraphs LIMIT 2;",
    "SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text LIKE '%Brazil%' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text LIKE '%Ireland%')",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(DISTINCT teacher_id) FROM teacher",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT hometown, age FROM teacher",
    "SELECT hometown, age FROM teacher",
    "SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;  SELECT DISTINCT hometown FROM teacher;",
    "SELECT teacher.hometown, COUNT(*) AS num_educators FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.hometown",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > (SELECT COUNT(*)/2 FROM teacher)",
    "SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT course.course, teacher.name FROM course_teach JOIN course ON course_teach.course_id = course.course_id JOIN teacher ON course_teach.teacher_id = teacher.teacher_id ORDER BY course.course ASC",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name, course.course ASC",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_teach WHERE course = 'math')",
    "SELECT DISTINCT course.course FROM course_teach JOIN course_arrange ON course_teach.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course_teach.course = 'math'",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_classes FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT DISTINCT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT(DISTINCT visit.museum_id) > 1",
    "SELECT level_of_membership, name, id  FROM visitor  WHERE id IN (     SELECT visitor_id      FROM visit      GROUP BY visitor_id      ORDER BY SUM(total_spent) DESC      LIMIT 1 )",
    "SELECT museum.name, museum.museum_id  FROM museum_visit  JOIN museum ON museum_visit.museum_id = museum.museum_id  GROUP BY museum_visit.museum_id, museum.name  ORDER BY SUM(museum_visit.num_of_ticket) DESC  LIMIT 1",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = (SELECT MAX(total_spent) FROM visit)",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT v.name  FROM visitor v  JOIN visit v1 ON v.id = v1.visitor_id  JOIN visit v2 ON v1.visitor_id = v2.visitor_id  JOIN museum m1 ON v1.museum_id = m1.museum_id  JOIN museum m2 ON v2.museum_id = m2.museum_id  WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010)",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "SELECT COUNT(*) FROM players",
    "SELECT COUNT(*) FROM players",
    "select count(*) from matches",
    "select count(*) from matches",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT birth_date, first_name FROM players WHERE country_code = 'USA'",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT AVG(loser_age) AS mean_loser_age, AVG(winner_age) AS mean_winner_age FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(*) FROM matches WHERE loser_name LIKE '%loser%'",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT DISTINCT p1.first_name, p1.last_name  FROM players p1  JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013  JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT * FROM matches WHERE year = 2013 OR year = 2016",
    "select count(*) from matches where year = 2013 or year = 2016",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT players.first_name, players.country_code FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'Australian Open' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'WTA Championships' WHERE players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' ) AND players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' )",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT country_code, first_name FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)",
    "select year, count(*) as num_matches from matches group by year order by num_matches desc limit 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_id, MAX(winner_rank_points) FROM matches GROUP BY winner_id ORDER BY MAX(winner_rank_points) DESC LIMIT 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name",
    "SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) FROM matches GROUP BY year",
    "SELECT COUNT(*) FROM matches GROUP BY year",
    "SELECT winner_name, winner_age FROM matches ORDER BY winner_age DESC LIMIT 3",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
    "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND winner_id IN (SELECT player_id FROM players) AND tourney_name = 'WTA Championships'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle",
    "SELECT battle.id, MAX(death.killed) AS max_killed, MIN(death.killed) AS min_killed FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id",
    "SELECT AVG(injured) FROM death",
    "SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
    "SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(*) AS battles_without_loss, SUM(lost_in_battle) AS ships_lost FROM ship WHERE tonnage = '225' AND id NOT IN (     SELECT caused_by_ship_id     FROM death )",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
    "SELECT name, result, bulgarian_commander FROM battle  WHERE location = 'English Channel' AND id NOT IN  (SELECT caused_by_ship_id FROM death WHERE killed > 0 OR injured > 0)",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "select count(*) from courses",
    "SELECT COUNT(*) FROM sections",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_name, course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT COUNT(*) FROM departments",
    "SELECT COUNT(DISTINCT degree_programs.degree_summary_name) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'))",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT student_enrolment_courses.course_id, courses.course_name, MAX(enrolment_count) AS max_enrolment_count FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id JOIN (     SELECT student_enrolment.course_id, student_enrolment.semester_id, COUNT(DISTINCT student_enrolment.student_id) AS enrolment_count     FROM student_enrolment     GROUP BY student_enrolment.course_id, student_enrolment.semester_id ) AS enrolment_counts ON student_enrolment_courses.course_id = enrolment_counts.course_id AND student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id AND se1.semester_id = se2.semester_id AND se1.student_enrolment_id <> se2.student_enrolment_id;",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id AND se1.semester_id = se2.semester_id AND se1.student_enrolment_id <> se2.student_enrolment_id WHERE se1.degree_program_id <> se2.degree_program_id",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = \"Bachelor's\"",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT degree_programs.degree_summary_name, degree_programs.degree_program_id FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, ssn, COUNT(*) as num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, s.student_id HAVING COUNT(*) = (   SELECT MIN(num_enrollments)   FROM (     SELECT COUNT(*) AS num_enrollments     FROM student_enrolment     GROUP BY student_id   ) AS enrollment_counts ) LIMIT 1;",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name  FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT course_name FROM courses  WHERE course_id = (SELECT course_id FROM student_enrolment_courses                     GROUP BY course_id                     ORDER BY COUNT(*) DESC                     LIMIT 1)",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT DISTINCT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT current_address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;",
    "SELECT MIN(transcript_date), MAX(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT * FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT COUNT(*) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT student_course_id, COUNT(*) AS max_appearances FROM student_enrolment_courses GROUP BY student_course_id ORDER BY max_appearances DESC LIMIT 1",
    "SELECT course_id, student_course_id  FROM student_enrolment_courses  GROUP BY course_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name FROM semesters WHERE semester_id IN  (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN  (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master')  INTERSECT  SELECT semester_id FROM student_enrolment WHERE degree_program_id IN  (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor'))",
    "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
    "SELECT COUNT(DISTINCT current_address_id) FROM students",
    "SELECT DISTINCT city, state_province_county, country FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY last_name DESC",
    "SELECT * FROM student_transcripts_tracking WHERE section_name = 'student_transcripts_tracking'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' AND content = 'animated'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE cartoon.content = 'animated' ORDER BY tv_series.air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(*) FROM tv_series WHERE channel = 'tv_channel'",
    "SELECT COUNT(*) FROM tv_channel",
    "I'm sorry, but the provided schema does not have a table that contains information about TV channels and their content. Can you please provide the correct schema or clarify the question?",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT id, language FROM tv_channel",
    "SELECT language, COUNT(*) FROM tv_series GROUP BY language",
    "SELECT tv_channel.series_name, cartoon.title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.title, tv_series.series_name FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.id  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name, tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE episode = 'A Love of a Lifetime'",
    "SELECT * FROM tv_series WHERE channel = 'TV Channel' AND series_name = 'Sky Radio'",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "To find out how many cartoons have been directed by each of the directors mentioned in the list, you can use the following SQL query:  SELECT directed_by, COUNT(*) AS num_cartoons_directed FROM cartoon WHERE directed_by IN ('director1', 'director2', 'director3') GROUP BY directed_by;   Replace 'director1', 'director2', 'director3' with the actual names of the directors you want to include in the query.",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT series_name, package_option FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT cartoon.channel       FROM cartoon       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel FROM cartoon     WHERE cartoon.written_by = 'Todd Casey' )",
    "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Michael Chang' AND cartoon.directed_by = 'Ben Jones'",
    "SELECT tv_series.series_name, tv_channel.country  FROM tv_series  JOIN cartoon ON tv_series.id = cartoon.channel  JOIN tv_channel ON tv_series.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.channel IN  (SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang')",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel  WHERE language != 'English' AND content = 'TV'",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT package_option  FROM tv_channel  WHERE id NOT IN (     SELECT DISTINCT channel      FROM cartoon      WHERE directed_by = 'Ben Jones' )",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT poker_player_id, earnings  FROM poker_player  ORDER BY earnings DESC",
    "SELECT best_finish, final_table_made FROM poker_player",
    "SELECT best_finish, final_table_made FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT DISTINCT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT final_table_made FROM poker_player ORDER BY final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.best_finish IS NOT NULL ORDER BY poker_player.best_finish ASC",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.",
    "SELECT name, earnings FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.nationality, COUNT(*) as count_individuals FROM poker_player JOIN people ON poker_player.people_id = people.people_id GROUP BY people.nationality",
    "SELECT nationality, COUNT(DISTINCT people_id) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT pp.people_id FROM poker_player pp)",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT MIN(area_code) AS lower_limit, MAX(area_code) AS upper_limit FROM area_code_state",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "SELECT contestant_name, contestant_number FROM contestants WHERE contestant_number = (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT state, COUNT(*) as vote_count FROM votes WHERE state IN ('NY', 'CA') GROUP BY state",
    "SELECT COUNT(*) FROM voter_1 WHERE phone_number NOT IN (SELECT phone_number FROM votes)",
    "SELECT area_code FROM votes GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')",
    "SELECT area_code_state.area_code  FROM area_code_state  JOIN votes ON area_code_state.state = votes.state  JOIN contestants ON votes.contestant_number = contestants.contestant_number  WHERE contestants.contestant_name = 'Tabatha Gehling' AND area_code_state.area_code IN      (SELECT area_code_state.area_code       FROM area_code_state       JOIN votes ON area_code_state.state = votes.state       JOIN contestants ON votes.contestant_number = contestants.contestant_number       WHERE contestants.contestant_name = 'Kelly Clauss')",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia' AND governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code='AIA'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT lifeexpectancy, population FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, region FROM country WHERE name = 'Angola'",
    "SELECT country.population, country.region FROM country WHERE country.name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND region = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS highest_gnp FROM country WHERE country.continent = 'Asia'",
    "SELECT COUNT(*) AS num_residents, MAX(gnp) AS highest_gnp FROM country WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(country.population), AVG(country.gnp) FROM country WHERE country.code2 IN (SELECT code2 FROM country WHERE name LIKE '%U.S.%')",
    "SELECT SUM(c.population) AS total_population, AVG(c.gnp) AS mean_gnp FROM country AS co JOIN city AS c ON co.code = c.countrycode WHERE co.continent = 'North America' AND co.region = 'US Territory'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(*) FROM country WHERE continent = 'Africa' AND governmentform IS NOT NULL",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT country.name FROM country JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS lang_count ON country.code = lang_count.countrycode",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT DISTINCT country.name  FROM countrylanguage AS cl1  JOIN countrylanguage AS cl2 ON cl1.countrycode = cl2.countrycode AND cl1.language <> cl2.language  JOIN country ON cl1.countrycode = country.code  WHERE cl1.language = 'English' AND cl2.language = 'French'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN country c2 ON c1.code <> c2.code AND c1.name < c2.name  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'French' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c2.code = cl2.countrycode AND cl2.language = 'English' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT COUNT(DISTINCT continent) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Chinese' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('Dutch', 'English'))",
    "SELECT DISTINCT city.district FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE language IN ('English', 'Dutch')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT name FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'English' OR cl.language = 'Dutch' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'))) AND isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' AND population = 1) GROUP BY language HAVING COUNT(*) = 1",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      AND governmentform NOT LIKE '%Democratic%' )  AND isofficial = 'T'",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'North America' OR continent = 'South America' OR continent = 'Europe' AND governmentform LIKE '%democratic%') AND district = 'England' ORDER BY population DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, lifeexpectancy, population FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT city.population) FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix'",
    "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language <> 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language <> 'English'",
    "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'",
    "SELECT code FROM country WHERE governmentform LIKE '%monarchy%' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code NOT IN (SELECT code FROM country WHERE governmentform NOT LIKE '%monarchy%' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English'))",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'F'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT c.name, c.population, c.headofstate FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, country.headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(DISTINCT language) >= 3 ) GROUP BY country.name",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'  GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2",
    "SELECT district, COUNT(city)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;",
    "SELECT continent, AVG(lifeexpectancy) AS mean_life_expectancy, SUM(population) AS total_populace FROM country GROUP BY continent HAVING mean_life_expectancy < 72;",
    "SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy)  FROM country  WHERE country.lifeexpectancy < 72  GROUP BY country.continent",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language     FROM countrylanguage     WHERE isofficial = 'T'     GROUP BY countrycode     HAVING MAX(percentage) ) AS official_language ON country.code = official_language.countrycode",
    "SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrylanguage.countrycode = country.code ) ORDER BY country.code ASC",
    "SELECT COUNT(DISTINCT countrylanguage.countrycode)  FROM countrylanguage  WHERE isofficial = 'T' AND language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T'",
    "SELECT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(percentage) DESC  LIMIT 1",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  ORDER BY percentage DESC  LIMIT 1",
    "SELECT COUNT(*) FROM orchestra",
    "SELECT COUNT(*) FROM conductor",
    "SELECT age FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor WHERE nationality <> 'United States'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show JOIN performance ON show.performance_id = performance.performance_id",
    "SELECT MIN(share), MAX(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT orchestra.orchestra, conductor.name  FROM orchestra  JOIN conductor ON orchestra.conductor_id = conductor.conductor_id",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1)",
    "SELECT conductor.name, COUNT(orchestra.orchestra_id) AS num_of_orchestras FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY num_of_orchestras DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company",
    "SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_symphonies_managed FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (SELECT COUNT(DISTINCT orchestra_id) FROM orchestra)",
    "SELECT orchestra, major_record_format FROM orchestra ORDER BY orchestra_id ASC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(DISTINCT orchestra_id) AS cnt         FROM orchestra         GROUP BY record_company     ) AS counts )",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003",
    "SELECT DISTINCT o1.record_company FROM orchestra o1 JOIN orchestra o2 ON o1.record_company = o2.record_company WHERE o1.year_of_founded < 2003 AND o2.year_of_founded > 2003",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler WHERE grade = 'high'",
    "SELECT name, grade FROM highschooler",
    "SELECT grade, name FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 'sophomore'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN ('9', '10')",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;",
    "SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT student_id, COUNT(friend_id) AS num_friends FROM friend GROUP BY student_id ORDER BY student_id ASC;",
    "SELECT highschooler.id, COUNT(friend.friend_id) AS num_pals FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.name",
    "SELECT highschooler.name AS moniker, COUNT(friend.friend_id) AS num_pals FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 3)",
    "SELECT h2.name FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id",
    "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(friend_id) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT h1.id FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN likes l ON h1.id = l.liked_id WHERE EXISTS (SELECT 1 FROM friend f2 WHERE f2.student_id = h1.id AND f2.friend_id <> l.student_id)",
    "SELECT DISTINCT likes.student_id FROM likes INNER JOIN friend ON likes.student_id = friend.student_id AND likes.liked_id = friend.friend_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id AND f.friend_id = l.liked_id",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      WHERE f.friend_id IN (         SELECT l.liked_id          FROM likes l          WHERE l.student_id = f.student_id     )     AND f.student_id IN (         SELECT l.liked_id          FROM likes l          WHERE l.student_id = f.friend_id     ) )",
    "SELECT student_id, COUNT(*) AS likes_received FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (SELECT l.liked_id                FROM likes l                GROUP BY l.liked_id                ORDER BY COUNT(*) DESC                LIMIT 1)",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT DISTINCT h1.name FROM highschooler h1, likes l1, likes l2 WHERE h1.id = l1.student_id AND h1.id = l2.student_id AND l1.liked_id <> l2.liked_id AND l1.liked_id < l2.liked_id",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.friend_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2 OR COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON f1.friend_id = f2.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f2.friend_id) >= 2",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle' AND grade = 'high school')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE state = 'Indiana' OR (SELECT COUNT(*) FROM treatments WHERE professional_id = professionals.professional_id) > 2",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT name FROM dogs WHERE owner_id IN (SELECT owner_id FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE cost_of_treatment <= 1000)",
    "SELECT DISTINCT CONCAT(first_name, ' ', last_name) AS name FROM professionals WHERE role_code != 'DOG' AND professional_id NOT IN (     SELECT professional_id     FROM treatments )  UNION SELECT CONCAT(first_name, ' ', last_name) AS name FROM owners WHERE owner_id NOT IN (     SELECT owner_id     FROM dogs     WHERE name IN (         SELECT name         FROM dogs         WHERE breed_code IN (             SELECT breed_code             FROM breeds         )     ) )",
    "SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT first_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.name = professionals.first_name) AND first_name NOT IN (SELECT name FROM dogs)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code = 'dog' )",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     WHERE dogs.breed_code = 'canines' )",
    "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2)",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) > 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_type_code = 'T' GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments                               GROUP BY treatment_type_code                               ORDER BY SUM(cost_of_treatment) ASC                               LIMIT 1)",
    "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatments.treatment_type_code  ORDER BY SUM(treatments.cost_of_treatment) ASC  LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'canine care') * (SELECT COUNT(*) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'dog' AND dogs.size_code = sizes.size_code AND charges.charge_id = sizes.charge_id) * (SELECT COUNT(*) FROM treatments WHERE treatments.dog_id = dogs.dog_id) ) DESC LIMIT 1",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number, COUNT(DISTINCT treatment_type_code) as num_treatments FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id FROM treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) )",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT professionals.first_name, treatments.date_of_treatment FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id ORDER BY treatments.date_of_treatment ASC LIMIT 1",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT first_name, last_name, size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment DESC",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia' AND dogs.breed_code LIKE '%canine%'",
    "SELECT owners.first_name, owners.last_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment IS NOT NULL",
    "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs WHERE breed_code IN (SELECT breed_code FROM breeds WHERE breed_name LIKE '%canine%')",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code = 'dog'",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code = 'canines') AND professional_id IN (SELECT professional_id FROM professionals WHERE role_code = 'animal_expert')",
    "SELECT position, street, city, state FROM owners WHERE city LIKE '%West%'",
    "SELECT occupation, address, town, state FROM professionals WHERE city LIKE '%West%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT email_address, first_name, last_name FROM owners WHERE state LIKE '%North%'",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs) AND breed_code IN (SELECT breed_code FROM breeds WHERE breed_name LIKE '%canine%')",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments) AND breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'canine')",
    "SELECT COUNT(*) FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM dogs WHERE abandoned_yn = 'N'))",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments) AND role_code = 'expert'",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'dog_treatment')",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs WHERE breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'canine')",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT breed_code, size_code FROM dogs GROUP BY breed_code, size_code HAVING COUNT(*) = 1",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, net_worth_millions FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT citizenship, birth_year FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year IN (1948, 1949)",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;",
    "SELECT citizenship, MAX(net_worth_millions) AS highest_net_worth FROM singer GROUP BY citizenship",
    "SELECT singer.name, song.title FROM singer JOIN song ON singer.singer_id = song.singer_id",
    "SELECT singer.name, song.title FROM singer JOIN song ON singer.singer_id = song.singer_id",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT title FROM song WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
    "SELECT SUM(sales), singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sales)  FROM singer  JOIN song ON singer.singer_id = song.singer_id  GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship HAVING COUNT(*) > 1",
    "SELECT COUNT(*) FROM other_available_features",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties WHERE property_id = <property_id>)",
    "SELECT property_name FROM properties WHERE (apt_feature_1 = 'room' OR apt_feature_2 = 'room' OR apt_feature_3 = 'room' OR hse_feature_1 = 'room' OR hse_feature_2 = 'room' OR hse_feature_3 = 'room') AND room_count > 1"
]