[
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT name, capacity FROM stadium  WHERE stadium_id = (SELECT stadium_id FROM concert                      WHERE year >= 2014                      GROUP BY stadium_id                      ORDER BY COUNT(*) DESC                      LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id HAVING COUNT(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) AS concert_count FROM concert WHERE year >= 2014 GROUP BY stadium_id) AS counts))",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id HAVING COUNT(*) ORDER BY COUNT(*) DESC LIMIT 1) AND year >= 2014;",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE theme = 'concerts' AND year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.stadium_id ORDER BY COUNT(concert.concert_id) DESC LIMIT 10",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id HAVING COUNT(*) = (SELECT COUNT(*) FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1))",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT DISTINCT country FROM singer WHERE age > 40 AND country IN (SELECT country FROM singer WHERE age < 30)",
    "SELECT DISTINCT country FROM singer WHERE age > 40 AND age < 30",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2 WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(DISTINCT concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity > 50000)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20;",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT singer.name, COUNT(concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT MIN(age) AS youngest, MAX(age) AS oldest, AVG(age) AS middle_age FROM singer WHERE country = 'France'",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND concert.year = 2015;",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2015 )",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT name, country FROM singer WHERE song_name LIKE '%hey%'",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT song_name, song_release_year FROM singer  WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity >= 5000 AND capacity <= 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "I'm sorry, but the question you provided doesn't make sense. Could you please rephrase it or provide more context?",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10 AND pettype = 'pet animal'",
    "SELECT s.fname, s.lname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) >= 2;",
    "SELECT COUNT(pets.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age >= 21",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age >= 21",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age >= 2",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10.",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age > 20",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age >= 21",
    "SELECT COUNT(DISTINCT stuid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_age >= 21",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT petid) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20)",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'female' AND pets.pettype = 'dog'",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'dog' AND p.sex = 'female'",
    "SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT COUNT(pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT s.fname, s.lname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1",
    "SELECT pettype, SUM(weight) AS total_weight FROM pets GROUP BY pettype",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000 ORDER BY year",
    "SELECT makeid, maker FROM car_makers WHERE id NOT IN (   SELECT makeid FROM cars_data   WHERE horsepower = (     SELECT MIN(horsepower) FROM cars_data   ) ) AND id IN (   SELECT makeid FROM cars_data   WHERE cylinders < 4 )",
    "SELECT makeid, model FROM car_names WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT makeid, maker FROM car_names WHERE cylinders < 4 AND makeid NOT IN (     SELECT makeid FROM cars_data     WHERE horsepower = (         SELECT MIN(horsepower) FROM cars_data     ) )",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE weight < (SELECT AVG(weight) FROM cars_data)  ORDER BY weight ASC  LIMIT 1",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE cylinders > 6)",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders >= 7",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 4) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'Fiat')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 4) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT maker, year FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id ORDER BY year LIMIT 1",
    "SELECT maker, MIN(year) FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id ORDER BY year LIMIT 1",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 2 AND countries.continent = 'Europe'",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND countries.continent = 'Europe'",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model, horsepower FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE cylinders = 4) ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders = 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders >= 5",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE weight > 3500 AND maker = 'GM'",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.fullname = 'General Motors' AND cars_data.weight > 3500",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' AND weight > 3500",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'GM' AND cars_data.weight > 3500",
    "SELECT * FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT DISTINCT model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.fullname = 'General Motors' AND cars_data.weight > 3500;",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT DISTINCT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN car_makers ON car_names.makeid = car_makers.id  WHERE car_makers.maker = 'GM' AND cars_data.weight > 3500",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'General Motors' AND weight > 1500",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT car_names.makeid, car_names.model, cars_data.mpg FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT car_names.makeid, car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT car_names.model, car_makers.maker, cars_data.mpg  FROM car_names  JOIN car_makers ON car_names.makeid = car_makers.id  JOIN cars_data ON car_names.model = cars_data.id  ORDER BY cars_data.mpg DESC  LIMIT 1",
    "SELECT maker, model, mpg FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT countryname FROM countries WHERE continent = 'Europe' AND countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3)",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'european'  GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cm.id IN (     SELECT cm.id     FROM car_makers cm     JOIN model_list ml ON cm.id = ml.maker     JOIN car_names cn ON ml.modelid = cn.model     JOIN cars_data cd ON cn.makeid = cd.id     GROUP BY cm.id     HAVING COUNT(DISTINCT ml.modelid) >= 2 AND COUNT(DISTINCT cd.id) > 3 )",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3",
    "SELECT makeid, maker FROM car_makers WHERE maker IN (     SELECT maker FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT modelid) >= 2 ) AND makeid IN (     SELECT makeid FROM car_names     GROUP BY makeid     HAVING COUNT(DISTINCT model) > 3 )",
    "SELECT makeid, maker FROM car_names  WHERE makeid IN (     SELECT maker FROM model_list      GROUP BY maker      HAVING COUNT(DISTINCT modelid) >= 2 ) AND makeid IN (     SELECT maker FROM cars_data      GROUP BY maker      HAVING COUNT(DISTINCT id) >= 3 )",
    "SELECT model_list.modelid, car_makers.maker FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN car_names ON model_list.modelid = car_names.model  WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2)  AND car_makers.id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT car_names.model) >= 4 AND COUNT(DISTINCT model_list.maker) >= 2",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT MAX(accelerate) FROM cars_data",
    "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford'",
    "SELECT * FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN countries ON car_makers.country = countries.countryid  WHERE weight < 3500 AND countries.countryname != 'Ford'",
    "SELECT model FROM car_names  WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT DISTINCT maker FROM model_list WHERE (SELECT AVG(weight) FROM cars_data) > (SELECT AVG(weight) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE model_list.maker = car_makers.maker) OR (SELECT AVG(weight) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE model_list.maker = car_makers.maker) IS NULL",
    "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM car_names  WHERE weight < (SELECT AVG(weight) FROM cars_data)  ORDER BY weight ASC  LIMIT 1",
    "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.maker = 'Fiat' OR countries.countryid IN (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) >= 4 )",
    "SELECT DISTINCT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  WHERE (SELECT COUNT(DISTINCT car_makers.maker)         FROM car_makers         WHERE car_makers.country = countries.countryid) > 3     OR car_makers.maker IN (SELECT car_makers.maker                             FROM car_makers                             JOIN car_names ON car_makers.id = car_names.makeid                             WHERE car_names.model LIKE '%Fiat%')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (     SELECT country FROM car_makers     WHERE maker = 'Fiat' ) OR countryid IN (     SELECT country FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) > 3 )",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.maker = 'Fiat' OR       (SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers WHERE car_makers.country = countries.countryid) >= 3;",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model, horsepower FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1 OFFSET 0",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model, horsepower FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 5",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE year < 1980 OR cylinders = 8",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT maker FROM car_makers WHERE id IN (     SELECT maker FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT modelid) > 3 )",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 4)",
    "SELECT MAX(horsepower), maker FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY maker ORDER BY MAX(horsepower) DESC LIMIT 1",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker  ORDER BY MAX(horsepower) DESC  LIMIT 1",
    "SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3 AND maker = (SELECT maker FROM model_list WHERE cylinders = 3 GROUP BY maker ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list  WHERE modelid = (SELECT id FROM cars_data ORDER BY horsepower ASC LIMIT 1)",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model, make FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.maker WHERE weight < 3500 AND car_makers.fullname != 'Ford Corporation'",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  INNER JOIN car_makers ON car_names.makeid = car_makers.id  WHERE weight < 3500 AND maker != 'Ford'",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford'",
    "SELECT model FROM model_list  WHERE maker <> 'Ford Motors' AND weight < 3500",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(horsepower), maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.model WHERE cylinders = 3 GROUP BY maker",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 3",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT maker, horsepower FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cylinders = 3  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker  ORDER BY MAX(horsepower) DESC  LIMIT 1",
    "SELECT MAX(horsepower), make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cylinders = 3",
    "SELECT MAX(horsepower), maker FROM cars_data  INNER JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker, cars_data.id",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT * FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT * FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT car_names.makeid, car_names.model, car_names.make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT mpg FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT mpg FROM cars_data WHERE year <= 1980 AND cylinders = 8",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT maker FROM car_makers  INNER JOIN cars_data ON car_makers.id = cars_data.id  WHERE year = 1970",
    "SELECT DISTINCT maker FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE year = 1970 AND maker IS NOT NULL",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.maker = 'General Motors (GM)' OR weight > 3500",
    "SELECT model, year FROM cars_data ORDER BY year ASC LIMIT 1",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE model = 'hornet sports about sw' AND maker = 'amc'",
    "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'Hornet Sportabout'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight >= 4000",
    "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT car_makers.maker, car_names.makeid FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3",
    "SELECT car_makers.id, car_makers.maker, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.maker",
    "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) AND continent = 'Europe'",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT model FROM model_list WHERE modelid = (SELECT id FROM cars_data                  ORDER BY horsepower ASC                  LIMIT 1)",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE horsepower = (         SELECT MIN(horsepower) FROM cars_data     ) )",
    "I'm sorry, but the serialized schema you provided does not contain any information about the sound output of a car horn. Could you please provide a schema that includes this information?",
    "I'm sorry, but the serialized schema you provided does not contain the necessary information to answer the question. It seems to be missing tables that would contain information about the 'Hornet sportabout' and the 'AMC Hornet'. Could you please provide a more complete schema?",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'AMC Hornet Sportsabout'",
    "I'm sorry, but the serialized schema you provided does not contain any information about the car hornet sportabout. Could you please provide the necessary information about the car hornet sportabout?",
    "SELECT COUNT(*) FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE car_makers.maker = 'American Motor Corporation'",
    "SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = 'American Motors'",
    "SELECT COUNT(DISTINCT makeid) FROM car_names JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'American Car Company'",
    "SELECT model FROM model_list WHERE maker = 'American Motors Corporation'",
    "SELECT COUNT(*) FROM car_names cn JOIN car_makers cm ON cn.makeid = cm.id WHERE cm.maker = 'American Motors'",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.maker  WHERE car_makers.fullname = 'Volvo' AND cars_data.accelerate = 'slow'",
    "SELECT cylinders FROM cars_data  WHERE id IN (     SELECT id FROM car_names      WHERE model = 'Volvo'  )  ORDER BY accelerate ASC  LIMIT 1",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.countryname = 'United States'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'U.S.'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = 'U.S.'",
    "SELECT model, mpg FROM car_names  INNER JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) >= 3",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT sourceairport AS airport_code, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline) as counts))",
    "SELECT COUNT(*) FROM airlines WHERE country = 'US'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'US'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'US'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Ataturk Airport'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Atlanta Airport'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Anchorage';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ASY' AND airline = (SELECT uid FROM airlines WHERE airline = 'United')",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND destairport = 'ASY'",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen Airport'",
    "SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airlines'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode WHERE a.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights AS f1 JOIN flights AS f2 ON f1.destairport = 'ABZ' AND f2.sourceairport = 'ABZ' AND f1.destairport = f2.destairport AND f2.destairport = 'ASH'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen' AND f.airline = 'United'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'UA' AND destairport = 'Aberdeen'",
    "SELECT sourceairport, destairport FROM flights WHERE destairport = 'Aberdeen'",
    "SELECT abbreviation FROM airlines WHERE country = 'US'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'United States'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States of America'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'United States of America'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'jet blue airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND sourceairport = 'AHD'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND destairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'United' AND destairport = 'Aberdeen'",
    "SELECT * FROM flights WHERE airline = 'United' AND destairport = 'Aberdeen'",
    "SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airline HAVING COUNT(*) BETWEEN 0 AND 200",
    "SELECT * FROM shop WHERE number_products <= 3000 OR number_products >= 10000",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000",
    "SELECT DISTINCT location FROM shop WHERE number_products < 3000 OR number_products > 10000",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT employee.name, employee.age, shop.name, shop.manager_name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id ORDER BY employee.age ASC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT shop.name FROM shop  WHERE shop.number_products > (SELECT AVG(shop.number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT s.name, p.name FROM shop s JOIN product p ON s.shop_id = p.shop_id WHERE p.price > (SELECT AVG(price) FROM product) GROUP BY s.name, p.name",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(shop.number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop  WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) >= 2",
    "SELECT DISTINCT city FROM employee GROUP BY city HAVING COUNT(*) >= 2 AND MAX(age) < 30",
    "SELECT DISTINCT city FROM employee GROUP BY city HAVING COUNT(CASE WHEN age < 30 THEN 1 END) >= 2",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT e.name AS manager_name, s.district FROM shop s JOIN employee e ON s.manager_name = e.name WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  ORDER BY evaluation.bonus DESC  LIMIT 1",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT COUNT(DISTINCT district) FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT district FROM shop WHERE number_products < 3000 UNION SELECT district FROM shop WHERE number_products > 10000",
    "SELECT DISTINCT district FROM shop WHERE number_products < 10000 AND number_products > 100000",
    "SELECT DISTINCT district FROM shop WHERE number_products > 10000 AND district IN (SELECT district FROM shop WHERE number_products < 3000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop) LIMIT 1",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT location, COUNT(*) FROM shop GROUP BY location",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2)",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2)",
    "SELECT document_id, document_name, document_description FROM documents WHERE document_id IN (   SELECT document_id   FROM paragraphs   GROUP BY document_id   HAVING COUNT(*) BETWEEN 1 AND 2 )",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2",
    "SELECT template_type_description, COUNT(*) AS count_of_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_description ORDER BY count_of_templates DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description ORDER BY COUNT(DISTINCT documents.document_id) DESC LIMIT 1;",
    "SELECT template_id, template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code, template_id  FROM templates  WHERE template_id = (     SELECT template_id      FROM documents      GROUP BY template_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN (     SELECT template_id, COUNT(*) AS doc_count     FROM documents     GROUP BY template_id     ORDER BY doc_count DESC     LIMIT 1 ) AS doc_counts ON templates.template_id = doc_counts.template_id",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs WHERE paragraph_number >= 2",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2",
    "SELECT ref_template_types.template_type_description, COUNT(documents.document_id) AS total_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_description ORDER BY total_documents DESC LIMIT 1;",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'summer show')",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE t.template_details = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates_used FROM templates GROUP BY template_type_code",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation.'",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'data base file'",
    "SELECT ref_template_types.template_type_description, COUNT(templates.template_id) AS num_files FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_details FROM templates WHERE template_type_code = 'Presentation Template'",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_description LIKE '%Korea%'",
    "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT document_id, document_name FROM documents WHERE document_name LIKE 'w%'",
    "SELECT documents.document_name, templates.template_type_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name LIKE '%w%' AND templates.template_details IS NOT NULL;",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  JOIN templates ON documents.template_id = templates.template_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND templates.template_details LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PowerPoint')",
    "SELECT version_number, template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(*) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT * FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) = 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) = 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.name  HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT name FROM teacher WHERE hometown NOT LIKE '%Little Lever Urban District%'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC LIMIT 10;",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT age, hometown FROM teacher",
    "SELECT teacher.age, teacher.hometown FROM teacher",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age = 33",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_teach WHERE course = 'mathematics')",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'mathematics'",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_teach WHERE course = 'mathematics')",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IN (SELECT course_id FROM course WHERE course = 'mathematics')",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = (     SELECT MAX(total_spent)     FROM visit )",
    "SELECT visitor.id, visit.total_spent, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.total_spent) DESC LIMIT 1",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visitor.id  ORDER BY SUM(visit.total_spent) DESC  LIMIT 1",
    "SELECT * FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT * FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT SUM(num_of_ticket) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = (SELECT MAX(total_spent) FROM visit)",
    "SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON museum.museum_id = visit.museum_id WHERE museum.open_year < 2009 AND museum.open_year > 2011",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT MAX(num_of_ticket), AVG(num_of_ticket) FROM visit",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4.0",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT age FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT SUM(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1",
    "SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 'level one')",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT player_id, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY tours DESC LIMIT 1)",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "select loser_name, winner_name from matches where minutes = (select max(minutes) from matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name, MAX(minutes) FROM matches GROUP BY winner_name, loser_name ORDER BY MAX(minutes) DESC LIMIT 1",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name, minutes FROM matches ORDER BY minutes DESC LIMIT 1",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >= 51",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT players.first_name, players.last_name, rankings.ranking_points  FROM players  JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking = 1 ORDER BY rankings.ranking_points DESC LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) >= 11",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "select tourney_name from matches group by tourney_name having count(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches WHERE match_num > 10",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'this tournament'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_level = 'WTA Championships'",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "To find the average ages of players that lost and won each match, we need to join the matches table with the players table twice, once for the winner and once for the loser. Then we can group by the match and calculate the average age for the winner and the loser separately. Here is the SQL query:  SELECT matches.match_num, AVG(winner.age) AS avg_winner_age, AVG(loser.age) AS avg_loser_age FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id GROUP BY matches.match_num",
    "select avg(winner_age) from matches union select avg(loser_age) from matches",
    "SELECT AVG(loser_age) FROM matches UNION SELECT AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "select avg(winner_age) as avg_winner_age, avg(loser_age) as avg_loser_age from matches",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank = (SELECT MAX(winner_rank) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian open test' ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank = (SELECT MAX(winner_rank) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name, loser_name FROM matches WHERE DATEDIFF(minute, tourney_date, ranking_date) = (SELECT MAX(DATEDIFF(minute, tourney_date, ranking_date)) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT DISTINCT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name, score FROM matches WHERE LENGTH(score) = (SELECT MAX(LENGTH(score)) FROM matches)",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
    "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT COUNT(DISTINCT players.player_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 OR matches.year = 2016 UNION SELECT COUNT(DISTINCT players.player_id) FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.year = 2013 OR matches.year = 2016",
    "SELECT first_name, last_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed + injured) AS highest_deaths_per_incident, MIN(killed + injured) AS lowest_deaths_per_incident FROM death",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed + injured) AS casualties_reached, MIN(killed + injured) AS casualties_reached FROM death",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT event, MAX(deaths) AS highest_deaths, MIN(deaths) AS lowest_deaths FROM (     SELECT battle.name AS event, SUM(death.killed) AS deaths     FROM battle     JOIN death ON battle.id = death.caused_by_ship_id     GROUP BY battle.name     UNION     SELECT ship.name AS event, SUM(death.killed) AS deaths     FROM ship     JOIN death ON ship.id = death.caused_by_ship_id     GROUP BY ship.name ) AS events_deaths GROUP BY event",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin'",
    "SELECT * FROM death WHERE note LIKE '%East%'",
    "SELECT id, name, result FROM battle_death.battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT name, location, result FROM battle_death JOIN ship ON battle_death.id = ship.id",
    "SELECT battle.id, battle.name FROM battle  JOIN battle_death ON battle.id = battle_death.id  GROUP BY battle.id, battle.name  HAVING SUM(battle_death.killed) + SUM(battle_death.injured) > 10",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT degree_summary_name, COUNT(*) AS enrollment FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrollment DESC LIMIT 1;",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS enrollment_count FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY enrollment_count DESC LIMIT 1;",
    "SELECT degree_summary_name  FROM degree_programs  WHERE degree_program_id = (     SELECT degree_program_id      FROM student_enrolment      GROUP BY degree_program_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT addresses.*, COUNT(students.student_id) AS num_students FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY num_students DESC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date) FROM transcripts",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT course_name, COUNT(*) AS enrollment_count FROM student_enrolment_courses  JOIN courses ON student_enrolment_courses.course_id = courses.course_id  GROUP BY course_name  ORDER BY enrollment_count DESC  LIMIT 1",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (     SELECT course_id     FROM student_enrolment_courses     GROUP BY course_id     HAVING COUNT(*) = (         SELECT MAX(enrollment_count)         FROM (             SELECT course_id, COUNT(*) AS enrollment_count             FROM student_enrolment_courses             GROUP BY course_id         ) AS enrollment_counts     ) )",
    "SELECT course_name, COUNT(*) AS enrollment_count FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY enrollment_count DESC LIMIT 1;",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT transcript_id FROM transcripts WHERE COUNT(student_course_id) >= 2",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT student_course_id, COUNT(*) AS appearance_count FROM student_enrolment_courses GROUP BY course_id HAVING appearance_count = (     SELECT MAX(appearance_count)     FROM (         SELECT COUNT(*) AS appearance_count         FROM student_enrolment_courses         GROUP BY course_id     ) AS appearance_counts ) ORDER BY student_course_id LIMIT 1;",
    "SELECT course_id, student_course_id, COUNT(*) AS num_appearances FROM student_enrolment_courses GROUP BY course_id, student_course_id HAVING num_appearances = (     SELECT MAX(num_appearances)     FROM (         SELECT course_id, student_course_id, COUNT(*) AS num_appearances         FROM student_enrolment_courses         GROUP BY course_id, student_course_id     ) AS appearance_counts ) LIMIT 1;",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT * FROM sections",
    "SELECT * FROM departments WHERE department_description LIKE '%computer%'",
    "SELECT * FROM departments WHERE department_name LIKE '%computers%'",
    "SELECT CONCAT(first_name, ' ', middle_name, ' ', last_name) AS full_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE '%bachelor%'",
    "I'm sorry, but the serialized schema you provided is incomplete. It seems to be missing some important information about the relationships between the tables. Can you please provide the complete schema?",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy' AND last_name = 'Ward'",
    "SELECT CONCAT(first_name, ' ', middle_name, ' ', last_name) AS full_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date) FROM transcripts;   SELECT * FROM transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM transcripts);",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT courses.course_id, courses.course_name FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id, courses.course_name HAVING COUNT(sections.section_id) < 2",
    "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT students.first_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%bachelor%'",
    "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_transcripts_tracking.transcripts ON student_enrolment.student_enrolment_id = transcripts.student_enrolment_id JOIN student_transcripts_tracking.transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN courses ON transcript_contents.course_id = courses.course_id ORDER BY students.date_left - students.date_first_registered DESC LIMIT 1",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semester_id, COUNT(DISTINCT student_id) * 100.0 / (SELECT COUNT(DISTINCT student_id) FROM student_enrolment) AS percentage FROM student_enrolment GROUP BY semester_id ORDER BY percentage DESC LIMIT 1;",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "select section_description from sections where section_name = 'h'",
    "SELECT classifications  FROM courses  JOIN sections ON courses.course_id = sections.course_id  JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.department_id = 'mathematics'",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT first_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti' AND line_1 IS NOT NULL) OR cell_mobile_number = '09700166582' LIMIT 1",
    "SELECT id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option  FROM tv_channel  WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) >= 3)",
    "SELECT series_name, MIN(share), MAX(share) FROM tv_series WHERE series_name LIKE '%TV series%' GROUP BY series_name",
    "SELECT MAX(rating) AS highest_percentage, MIN(rating) AS lowest_percentage FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(rating), MIN(rating) FROM tv_series",
    "I'm sorry, but the schema you provided doesn't seem to have any columns related to percentage. Could you please provide the correct schema or clarify the question?",
    "SELECT id, series_name FROM tv_channel GROUP BY id, series_name HAVING COUNT(*) >= 3",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) >= 3",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) >= 3",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT tv_series.series_name, tv_series.episode, tv_series.rating  FROM tvshow.tv_series  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT series_name, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT rating, episode FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE tv_series.directed_by = 'Ben Jones' AND tv_series.written_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Brandon Nguyen' OR directed_by = 'Benjamin Jones'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.series_name = 'Sky Radio'",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true AND series_name LIKE '%HD%'",
    "SELECT package_option, series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = true",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT DISTINCT tv_channel.package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.directed_by <> 'Ben Jones' AND tv_series.series_name NOT LIKE '%cartoon%'",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%cartoon%'",
    "SELECT tv_channel.series_name, tv_series.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.series_name = 'A love of a lifetime'",
    "SELECT channel FROM tv_series WHERE series_name = 'A love of a lifetime'",
    "SELECT DISTINCT channel FROM tv_series WHERE language = 'English'",
    "SELECT series_name FROM tv_channel WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT title FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky radio'",
    "SELECT weekly_rank FROM tv_series WHERE series_name = 'A love of a lifetime' AND episode = 1",
    "SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE series_name IS NOT NULL AND tv_channel.series_name = 'Sky Radio'",
    "I'm sorry, but the serialized schema you provided does not contain a table that corresponds to the information you are asking for. Could you please provide a correct schema or more information about the table that contains the episode name of the TV show named 'sky radio'?",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT name, earnings FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT name FROM people WHERE nationality != 'russian'",
    "select distinct nationality from people where nationality != 'Russian'",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE earnings < 1000 ORDER BY birth_date LIMIT 1",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT p.birth_date FROM poker_player AS pp JOIN people AS p ON pp.people_id = p.people_id WHERE pp.earnings < (SELECT MAX(earnings) FROM poker_player) ORDER BY pp.earnings LIMIT 1",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 30000",
    "SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000 AND pp.occupation = 'poker'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 30000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000 AND poker_player.best_finish = 'poker professional'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000 AND best_finish LIKE '%poker%'",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT nationality, COUNT(*) as num_players FROM people GROUP BY nationality",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made DESC",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC",
    "SELECT * FROM poker_player ORDER BY final_table_made DESC",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "To get the largest and smallest possible area codes, we need to find the maximum and minimum values of the area codes. Here is the SQL query:  SELECT MAX(area_code) AS largest_area_code, MIN(area_code) AS smallest_area_code FROM area_code_state",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'California' AND created = (SELECT MAX(created) FROM votes)",
    "SELECT created FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT created FROM votes WHERE state = 'California' ORDER BY created DESC LIMIT 1",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT COUNT(DISTINCT phone_number) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'California' AND phone_number LIKE '%NY%'",
    "SELECT COUNT(*) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'New York' OR state = 'California'",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT state, SUM(created) AS total_votes FROM votes GROUP BY state ORDER BY total_votes DESC LIMIT 1",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS cl ON country.code = cl.countrycode WHERE cl.percentage = cl.max_percentage",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS highest_gnp FROM country WHERE country.continent = 'Asia'",
    "SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear <= 1930) AND isofficial = 'T'",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND isofficial = 'T') DESC LIMIT 1;",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY surfacearea DESC LIMIT 3",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT country.name, country.population, country.lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1",
    "SELECT country.population, country.lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'))) AND isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia'     ORDER BY population DESC     LIMIT 1 ) ORDER BY percentage DESC LIMIT 1",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > ALL(SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT c1.name  FROM country c1, country c2  WHERE c1.continent = 'Asia' AND c2.continent = 'Africa' AND c1.population > c2.population",
    "SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 10",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear BETWEEN 1890 AND 1929) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IS NOT NULL AND percentage > 0 AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)",
    "SELECT name, COUNT(language) as num_languages  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE indepyear < 1930 AND isofficial = 'T'  GROUP BY country.name",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language, COUNT(DISTINCT countrycode) AS num_countries FROM countrylanguage GROUP BY language ORDER BY num_countries DESC LIMIT 1;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT city.name FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  GROUP BY city.name  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) DESC LIMIT 1;",
    "SELECT country.name FROM country JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS lang_count ON country.code = lang_count.countrycode",
    "SELECT country.name FROM country JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS subquery ON country.code = subquery.countrycode",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) DESC LIMIT 1;",
    "SELECT country.name  FROM country  JOIN (     SELECT countrycode      FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 ) AS lang ON country.code = lang.countrycode",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT AVG(lifeexpectancy), COUNT(population) FROM country WHERE continent IN (SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72) JOIN city ON country.code = city.countrycode GROUP BY continent",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT DISTINCT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage > 0.0 GROUP BY country.name HAVING COUNT(countrylanguage.language) > 1",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 2",
    "SELECT country.name, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = country.code) > 2",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 2",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 2",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2",
    "SELECT country.name, COUNT(countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) > 2",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(DISTINCT language) >= 3 ) GROUP BY country.code ORDER BY num_languages DESC, country.name ASC",
    "SELECT district, COUNT(city.id)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT country.name FROM country WHERE continent = 'Asia' AND lifeexpectancy < (SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT country.name FROM country ORDER BY lifeexpectancy ASC LIMIT 1 WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_spoken_numbers FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 3;",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3;",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3",
    "SELECT district, COUNT(city.name)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT AVG(gnp) AS mean_gdp, SUM(population) AS total_population FROM country WHERE continent = 'North America' OR continent = 'South America'",
    "SELECT c.population, AVG(c.gnp)  FROM country c  WHERE c.code2 IN ('AS', 'GU', 'MP', 'PR', 'UM', 'VI')  GROUP BY c.code2",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR')",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND governmentform LIKE '%Territory%' AND code != 'PRI' AND code != 'GUM' AND code != 'VIR' AND code != 'ASM' AND code != 'MNP' AND code != 'UMI' AND code != 'PLW' AND code != 'FSM' AND code != 'MHL' AND code != 'MCO' AND code != 'NRU' AND code != 'TUV' AND code != 'COK' AND code != 'NIU' AND code != 'TKL' AND code != 'WLF' AND code != 'ATF' AND code != 'PYF' AND code != 'GUF' AND code != 'MTQ' AND code != 'MYT' AND code != 'REU' AND code != 'BLM' AND code != 'MAF' AND code != 'SPM' AND",
    "SELECT AVG(country.gnp) AS avg_gnp, SUM(country.population) AS total_population FROM country WHERE country.region = 'United States'",
    "SELECT AVG(gnp) AS average_income, SUM(population) AS total_population FROM country WHERE continent = 'North America' AND governmentform = 'Nonmetropolitan Territory of the US'",
    "SELECT AVG(gnp), AVG(population) FROM country WHERE continent = 'North America' AND name NOT LIKE '%United States%'",
    "SELECT country.name, country.population, AVG(city.population) as average_life_span FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;",
    "SELECT c.name AS country_name, c.surfacearea AS land_area, c.population AS population, c.headofstate AS president FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS largest_gnp  FROM country  WHERE country.continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'the_continent_name'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa'",
    "SELECT country.gnp, country.population FROM country WHERE country.code IN (SELECT city.countrycode FROM city WHERE city.name = 'Washington')",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%United States%'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English' AND isofficial = 'T' GROUP BY countrycode)",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT DISTINCT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT continent FROM country GROUP BY continent HAVING SUM(population) > (SELECT SUM(population) FROM country WHERE continent = 'Africa') AND continent = 'Asia'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English' AND country.governmentform <> 'Republic'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name, country.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language != 'English'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'T' AND countrylanguage.language != 'English'",
    "SELECT governmentform, SUM(population) AS population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT country.continent, AVG(country.population) as population, AVG(country.lifeexpectancy) as lifespans FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72;",
    "SELECT name FROM country WHERE continent = 'Europe' AND population > 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population > 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000  Example: If there is a country named \"Exampleland\" in Europe with exactly 80000 people, the query will return \"Exampleland\".",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT name FROM country WHERE indepyear >= 1950",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'Chinese' AND country.continent = 'Asia' AND countrylanguage.isofficial = 'T'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name FROM country WHERE language = 'English' AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central African'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE countrycode = 'NLD' AND district = 'Gelderland'",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT country.name) FROM country WHERE continent = 'Asia'",
    "SELECT SUM(c.population), AVG(c.surfacearea) FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008 OR orchestra.year_of_work > 2008",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded = 2008",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD/DVD'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type NOT LIKE '%Live Final%'",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live Final'",
    "SELECT MAX(stakes), MIN(stakes) FROM performance WHERE performance_id NOT IN (SELECT performance_id FROM show WHERE if_first_show = 'Live Final')",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live final'",
    "SELECT major_record_format, COUNT(*) AS count FROM orchestra GROUP BY major_record_format ORDER BY count DESC",
    "SELECT type, COUNT(*) AS frequency FROM performance GROUP BY type ORDER BY frequency ASC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT major_record_format, COUNT(*) AS occurrence FROM orchestra GROUP BY major_record_format ORDER BY occurrence DESC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT major_record_format, COUNT(*) AS popularity FROM orchestra GROUP BY major_record_format ORDER BY popularity DESC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT record_company FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'America'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'United States'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT DISTINCT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded >= 2009",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'live finals'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type = 'non-live finals'",
    "SELECT MAX(percentage), MIN(percentage) FROM  (SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM performance WHERE type != 'Live final') AS percentage  FROM performance WHERE type != 'Live final' GROUP BY type) AS percentages;",
    "SELECT MAX(percentage), MIN(percentage) FROM  (SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM performance WHERE type != 'live finals') AS percentage  FROM performance WHERE type != 'live finals' GROUP BY orchestra_id) AS percentages",
    "SELECT MAX(percentage_not_live_final), MIN(percentage_not_live_final) FROM  (SELECT (COUNT(CASE WHEN type != 'live final' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_not_live_final FROM performance) AS percentages",
    "SELECT MAX(percentage), MIN(percentage) FROM (SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM performance WHERE type != 'Live final') AS percentage FROM performance WHERE type != 'Live final' GROUP BY type) AS percentages",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'live finals'",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work ASC",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra_id) >= 2",
    "SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o1 ON c.conductor_id = o1.conductor_id  JOIN orchestra o2 ON c.conductor_id = o2.conductor_id AND o1.orchestra_id <> o2.orchestra_id",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) >= 2",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT conductor.name, MAX(conductor.year_of_work) AS longest_serving FROM conductor GROUP BY conductor.name ORDER BY longest_serving DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id ORDER BY performance.date DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT conductor.name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT SUM(attendance) FROM show",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT * FROM conductor WHERE name != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT name FROM conductor WHERE nationality <> 'USA' OR nationality IS NULL",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT * FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT conductor.name FROM conductor WHERE conductor.nationality <> 'USA'",
    "SELECT orchestra_id FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD/DVD'",
    "SELECT * FROM conductor ORDER BY year_of_work DESC",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(f.friend_id) DESC LIMIT 1;",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT highschooler.name FROM highschooler  WHERE highschooler.id = (     SELECT friend.student_id FROM friend      GROUP BY friend.student_id      ORDER BY COUNT(friend.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  WHERE h.grade = 'HS' AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id OR f.friend_id = h.id) >= 2",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 3)",
    "SELECT DISTINCT h1.name FROM highschooler h1, highschooler h2, highschooler h3, friend f1, friend f2, likes l WHERE h1.id = f1.student_id AND h2.id = f1.friend_id AND h2.id = f2.student_id AND h3.id = f2.friend_id AND h1.id = l.student_id AND h3.id = l.liked_id AND h1.grade > 5 AND h2.grade > 5 AND h3.grade > 5 AND h1.id <> h3.id AND h1.id < h3.id;",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.student_id  WHERE h.grade > 5 AND f1.friend_id <> h.id AND f2.friend_id <> h.id  GROUP BY h.id  HAVING COUNT(DISTINCT f1.friend_id, f2.friend_id) >= 2",
    "SELECT h1.name  FROM highschooler h1  WHERE h1.grade > 5 AND        (SELECT COUNT(*)         FROM friend f1         WHERE f1.student_id = h1.id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.friend_id  JOIN likes l ON h.id = l.student_id  GROUP BY h.id  HAVING COUNT(DISTINCT l.liked_id) > 5 AND COUNT(DISTINCT f1.friend_id) >= 2 AND COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT h.name FROM highschooler h WHERE h.grade > 5 AND        (SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.student_id AND f.friend_id <> f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT DISTINCT h1.name FROM highschooler h1, highschooler h2 WHERE h1.id <> h2.id AND h1.id IN (SELECT f1.friend_id FROM friend f1 WHERE f1.student_id = h2.id) AND h2.id IN (SELECT f2.friend_id FROM friend f2 WHERE f2.student_id = h1.id)",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes GROUP BY likes.student_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT likes.student_id FROM likes GROUP BY likes.student_id HAVING COUNT(*) >= 2",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT DISTINCT l1.student_id FROM likes l1 JOIN likes l2 ON l1.student_id = l2.student_id AND l1.liked_id <> l2.liked_id AND l1.liked_id < l2.liked_id ORDER BY l1.student_id",
    "SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT DISTINCT l1.student_id FROM likes l1 JOIN likes l2 ON l1.student_id = l2.student_id AND l1.liked_id <> l2.liked_id WHERE l1.student_id = l2.student_id GROUP BY l1.student_id HAVING COUNT(DISTINCT l1.liked_id) >= 2;",
    "SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1",
    "SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 2",
    "SELECT DISTINCT l1.student_id FROM likes l1 JOIN likes l2 ON l1.student_id = l2.student_id AND l1.liked_id <> l2.liked_id AND l1.liked_id < l2.liked_id WHERE l1.liked_id IN (SELECT l3.liked_id FROM likes l3 WHERE l3.student_id = l1.student_id) ORDER BY l1.student_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY f.student_id HAVING COUNT(f.friend_id) > 2",
    "SELECT DISTINCT h1.name FROM highschooler h1, likes l1, likes l2 WHERE h1.id = l1.student_id AND h1.id = l2.student_id AND l1.liked_id <> l2.liked_id;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.friend_id  WHERE h.grade >= 6  GROUP BY h.id  HAVING COUNT(DISTINCT f1.friend_id) + COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN friend ON likes.liked_id = friend.friend_id AND likes.student_id = friend.student_id WHERE highschooler.grade > 5 GROUP BY highschooler.id HAVING COUNT(DISTINCT friend.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2) AND id IN (SELECT student_id FROM likes WHERE liked_id IN (SELECT id FROM highschooler WHERE grade > 5))",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) > 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  WHERE h.grade = 'high' AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id OR f.friend_id = h.id) >= 3",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS likes_count, COUNT(likes.liked_id)/COUNT(DISTINCT likes.student_id) AS likes_per_person FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY likes_per_person DESC",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f  WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND h2.id = f.friend_id",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f  WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id",
    "SELECT name, count(friend_id) as friend_count FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY name, grade HAVING grade = 'high' ORDER BY friend_count DESC",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT * FROM highschooler WHERE grade = 10",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) FROM highschooler WHERE grade IN ('9', '10') GROUP BY grade",
    "SELECT professionals.first_name, professionals.last_name, professionals.email_address, professionals.home_phone, professionals.cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT professionals.first_name, professionals.last_name, professionals.cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT owners.first_name, owners.cell_number FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT owners.owner_id, owners.last_name, owners.cell_number FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE owners.state = 'Indiana' AND treatments.professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT dog_id) > 2 )",
    "SELECT professional_id, last_name, cell_number  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN dogs ON treatments.dog_id = dogs.dog_id  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE state = 'Indiana'  GROUP BY professional_id, last_name, cell_number  HAVING COUNT(DISTINCT treatments.treatment_id) >= 3",
    "SELECT professional_id, first_name, cell_number FROM professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) > 2)",
    "SELECT dogs.owner_id, owners.last_name, owners.cell_number FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Indiana' AND       (SELECT COUNT(*) FROM treatments WHERE treatments.dog_id = dogs.dog_id) > 2",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code ORDER BY treatments.cost_of_treatment ASC LIMIT 1",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description HAVING SUM(treatments.cost_of_treatment) = (     SELECT MIN(total_cost)     FROM (         SELECT SUM(cost_of_treatment) AS total_cost         FROM treatments         GROUP BY treatment_type_code     ) AS costs )",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT treatment_types.treatment_type_description, MIN(treatments.cost_of_treatment) AS cheapest_cost FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY cheapest_cost ASC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  HAVING MIN(treatments.cost_of_treatment) = (SELECT MIN(cost_of_treatment) FROM treatments)",
    "SELECT treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  HAVING SUM(treatments.cost_of_treatment) = (SELECT MIN(total_cost)                                              FROM (SELECT SUM(cost_of_treatment) AS total_cost                                                    FROM treatments                                                    GROUP BY treatment_type_code) AS costs)",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_type_description, MIN(total_cost) AS lowest_price FROM (     SELECT treatment_type_description, SUM(cost_of_treatment) AS total_cost     FROM treatments     JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code     GROUP BY treatment_type_description ) AS costs_by_treatment_type GROUP BY treatment_type_description ORDER BY lowest_price ASC LIMIT 1;",
    "SELECT age FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT first_name, last_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE owner_id = [your_owner_id]) AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments));   Note: Replace [your_owner_id] with the actual owner_id of the person being referred to in the question.",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'certain_kind' AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals WHERE role_code = 'therapist' AND professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT DISTINCT professionals.first_name, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment < 1000 AND t.treatment_type_code = 'treatment_type_code'",
    "SELECT d.name  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.cost_of_treatment <= 1000",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IS NOT NULL))",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'veterinary' GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owner_id, zip_code FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'dog') * (SELECT size_description FROM sizes WHERE size_code = dogs.size_code)) DESC LIMIT 1)",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT charge_type, charge_amount, SUM(cost_of_treatment) AS total_cost FROM charges LEFT JOIN treatments ON charges.charge_id = treatments.treatment_type_code GROUP BY charge_type, charge_amount",
    "SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes",
    "SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT TOP 1 d.breed_name, t.date_of_treatment  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id  JOIN breeds b ON d.breed_code = b.breed_code  GROUP BY d.breed_name, t.date_of_treatment  ORDER BY COUNT(DISTINCT d.dog_id) ASC, t.date_of_treatment ASC",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'N'",
    "SELECT first_name || ' ' || last_name AS owner_name, email_address FROM owners WHERE state LIKE 'North%'",
    "SELECT owner_id, name, COUNT(*) AS num_dogs FROM dogs GROUP BY owner_id HAVING COUNT(*) > (SELECT COUNT(*) FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY num_dogs DESC LIMIT 1",
    "SELECT date_arrived, date_departed FROM dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
    "SELECT date_arrived, date_departed FROM dogs",
    "I'm sorry, but the schema you provided does not have any information about when dogs came and left. Could you please provide a schema that includes this information?",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT dog_id, date_arrived, date_departed FROM dogs",
    "SELECT dog_id, date_arrived, date_departed FROM dogs",
    "SELECT breed_code, COUNT(*) AS num_dogs FROM dogs GROUP BY breed_code ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'Indiana' AND professional_id IN (     SELECT professional_id      FROM treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) > 2 )",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) > 2) OR professional_id IN (SELECT professional_id FROM treatments WHERE professional_id = professionals.professional_id)",
    "SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id JOIN owners ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Indiana' AND       (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2",
    "SELECT owners.owner_id, owners.last_name, owners.home_phone  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE owners.state = 'Indiana' OR        (SELECT COUNT(DISTINCT treatment_type_code)         FROM treatments         WHERE treatments.dog_id = dogs.dog_id) = 2",
    "SELECT DISTINCT last_name, cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Indiana' AND treatments.treatment_type_code > 2",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT DISTINCT citizenship FROM singer WHERE birth_year NOT BETWEEN 1945 AND 1955",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count_passport FROM singer GROUP BY citizenship ORDER BY count_passport DESC LIMIT 1;",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name, net_worth_millions FROM singer ORDER BY net_worth_millions DESC",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French' AND singer_id IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship != 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 30000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) >= 2",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT name FROM singer WHERE citizenship != 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) AS max_wealth FROM singer GROUP BY citizenship",
    "SELECT singer.name, song.sales FROM singer JOIN song ON singer.singer_id = song.singer_id",
    "SELECT SUM(sales) FROM song",
    "I'm sorry, your question is incomplete. Could you please provide more details or clarify your question?",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1949 OR birth_year = 1948",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT birth_year FROM singer WHERE birth_year IN ('48', '49')",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT property_name FROM properties WHERE room_count > 1",
    "SELECT property_name FROM properties WHERE room_count > 1 AND (property_type_code = 'APT' OR property_type_code = 'HSE')",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count >= 2",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count >= 2"
]