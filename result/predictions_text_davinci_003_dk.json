[
    "SELECT COUNT(*)  FROM singer;",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT singer.name, singer.country  FROM singer  ORDER BY singer.birthday ASC;",
    "SELECT singer.name, singer.country  FROM singer  ORDER BY birthday DESC;",
    "SELECT AVG(singer_id), MIN(singer_id), MAX(singer_id) FROM singer WHERE country = 'France';",
    "SELECT AVG(singer.singer_id), MIN(singer.singer_id), MAX(singer.singer_id) FROM singer WHERE singer.country = 'France';",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN singer_in_concert  ON concert.concert_id = singer_in_concert.concert_id  WHERE singer.birthday = (SELECT MIN(birthday) FROM singer)",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.birthday = (SELECT MIN(birthday) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE birthday LIKE '2001%';",
    "SELECT DISTINCT country  FROM singer  WHERE birthday LIKE '2001%';",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country;",
    "SELECT song_name  FROM singer  WHERE birthday < (SELECT AVG(birthday)                    FROM singer);",
    "SELECT song_name  FROM singer  WHERE birthday < (SELECT AVG(birthday) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT AVG(capacity) AS average_capacity, MAX(highest) AS highest_capacity FROM stadium;",
    "SELECT AVG(capacity), MAX(highest) FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT COUNT(*)  FROM concert  WHERE year >= 2014;",
    "SELECT COUNT(*)  FROM concert  WHERE year >= 2014;",
    "SELECT stadium.name, COUNT(*) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(*) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT s.name, s.capacity  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year >= 2014  GROUP BY s.name, s.capacity  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT name, highest FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1);",
    "SELECT MIN(year) FROM concert;",
    "SELECT concert_name  FROM concert  ORDER BY year ASC  LIMIT 1;",
    "SELECT MAX(highest)  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                           FROM concert);",
    "SELECT location, name, lowest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT country  FROM singer  WHERE YEAR(birthday) IN (1981, 1991);",
    "SELECT AVG(average) FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id                         FROM concert                         WHERE year = 2014);",
    "SELECT lowest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.singer_id)  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY singer.name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT s.name, COUNT(sic.concert_id) AS num_concerts FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year >= 2014;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year <= 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT MIN(stadium.lowest), MAX(stadium.highest) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT MIN(stadium.lowest), MAX(stadium.highest) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT COUNT(*)  FROM concert c  INNER JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = s.highest;",
    "SELECT COUNT(*)  FROM concert c  JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = (SELECT MAX(capacity) FROM stadium)",
    "SELECT COUNT(*) FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10;",
    "SELECT COUNT(*) FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY birthdate DESC  LIMIT 1;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY birthdate  LIMIT 1;",
    "SELECT pettype, MAX(weight) FROM new_pets_1 JOIN has_pet ON new_pets_1.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pettype;",
    "SELECT pettype, MAX(weight), pettype FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'puppy';",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'puppy'",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('kitten', 'puppy');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('kitten', 'puppy');",
    "SELECT fname, lname  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  WHERE petid IN (SELECT petid                                  FROM pets                                  WHERE pettype IN ('Kitten', 'Puppy'))                  GROUP BY stuid                  HAVING COUNT(*) = 2);",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'kitten'  AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'puppy')",
    "SELECT lname, fname, age, major  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'kitten')",
    "SELECT stuid, major, age  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'kitten')",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'kitten')",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'kitten');",
    "SELECT fname, age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND NOT EXISTS (SELECT *                  FROM has_pet AS h                  INNER JOIN pets AS p ON h.petid = p.petid                  WHERE h.stuid = student.stuid                  AND p.pettype = 'puppy')",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'puppy'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'kitten')",
    "SELECT pettype, weight  FROM pets  WHERE birthdate = (SELECT MIN(birthdate) FROM pets);",
    "SELECT pettype, weight  FROM pets  WHERE birthdate = (SELECT MIN(birthdate) FROM pets);",
    "SELECT petid, weight FROM pets WHERE birthdate < '2020-01-01';",
    "SELECT petid, weight  FROM pets  WHERE birthdate < '2020-01-01';",
    "SELECT pettype, AVG(petid) AS avg_petid, MAX(petid) AS max_petid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid GROUP BY pettype;",
    "SELECT pettype, AVG(petid) AS avg_petid, MAX(petid) AS max_petid FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(petid) AS avg_petid, MAX(petid) AS max_petid FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT lname, fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';",
    "SELECT petid  FROM student  JOIN has_pet  ON student.stuid = has_pet.stuid  WHERE lname = 'Smith';",
    "SELECT stuid, COUNT(petid) FROM has_pet INNER JOIN new_pets_1 ON has_pet.stuid = new_pets_1.stuid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY stuid;",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1)",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1);",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.birthdate = '2001';",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.birthdate = '2001';",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    ", origin  SELECT contid, continent, COUNT(countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    ", origin  SELECT contid, continent, COUNT(countryname) AS 'Number of Countries' FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS models_produced FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT MIN(horsepower) FROM cars_data c JOIN car_names n ON c.makeid = n.makeid JOIN model_list m ON n.model = m.model JOIN car_makers mk ON m.maker = mk.id;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC  LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT fullname  FROM car_makers  INNER JOIN car_names ON car_makers.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.year > (YEAR(CURDATE()) - 2)",
    "SELECT fullname  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE year > (YEAR(CURDATE()) - 2)",
    ", origin  SELECT make, year FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY year ASC  LIMIT 1;",
    ", makeid  SELECT maker, MIN(year)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.makeid  GROUP BY maker;",
    "SELECT DISTINCT model FROM model_list  WHERE maker IN (SELECT maker FROM car_makers                  WHERE country IN (SELECT countryname FROM countries                                    WHERE contid IN (SELECT contid FROM continents)))  AND year <= 1980;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year <= 1980;",
    ", origin  SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM continents INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY continents.continent;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makers FROM continents LEFT JOIN countries ON continents.contid = countries.continent LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT fullname, COUNT(model) AS count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY fullname;",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid GROUP BY car_makers.id, car_makers.fullname;",
    "SELECT accelerate FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_names.make = 'amc hornet sportabout (sw)';",
    "SELECT accelerate FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'AMC Hornet Sportabout' AND car_names.make = 'SW';",
    "SELECT COUNT(*) FROM car_makers WHERE country = 'Japan';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'Japan';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.id INNER JOIN countries c ON cm.country = c.countryid INNER JOIN continents co ON c.continent = co.contid WHERE co.continent = 'America';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.make INNER JOIN countries c ON cm.country = c.countryname INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.make  WHERE cars_data.horsepower > 150;",
    "SELECT AVG(weight) FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year  FROM cars_data  GROUP BY year;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN cars_data  ON car_names.model = cars_data.id  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT MAX(horsepower), make FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 3  GROUP BY make;",
    "SELECT MAX(horsepower) AS Max_Horsepower, make FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cylinders = 3  GROUP BY make;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year <= 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year <= 1980;",
    "SELECT AVG(edispl) FROM cars_data JOIN model_list ON cars_data.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_makers.id = car_names.makeid WHERE car_names.model = 'tesla';",
    "SELECT AVG(edispl) FROM cars_data WHERE makeid IN (SELECT makeid FROM car_names WHERE model IN (SELECT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'Tesla')))",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT model, COUNT(make) AS num_make FROM car_names GROUP BY model ORDER BY num_make DESC LIMIT 1;",
    "SELECT model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM cars_data  WHERE year >= (YEAR(CURDATE()) - 2);",
    "SELECT COUNT(*) FROM cars_data WHERE year >= 2018;",
    "SELECT COUNT(model)  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'America'  AND car_makers.fullname = 'American Motor';",
    "SELECT COUNT(model) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'America' AND car_makers.fullname = 'American Motor';",
    "SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker               FROM model_list               GROUP BY maker               HAVING COUNT(model) > 3);",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.model) > 3;",
    "SELECT model_list.model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN cars_data  ON model_list.modelid = cars_data.id  WHERE car_makers.fullname = 'General Motors'  AND cars_data.weight > 3500;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE car_makers.fullname = 'General Motors' OR weight > 3500;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1;",
    "SELECT horsepower  FROM cars_data  ORDER BY accelerate DESC  LIMIT 1;",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'Tesla'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'tesla'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*)  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(*) > 2;",
    "SELECT COUNT(*)  FROM countries c  INNER JOIN car_makers cm ON c.countryid = cm.country  INNER JOIN model_list ml ON cm.id = ml.maker  INNER JOIN car_names cn ON ml.modelid = cn.makeid  INNER JOIN cars_data cd ON cn.model = cd.id  GROUP BY c.countryname  HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.makeid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT car_names.makeid, car_names.make  FROM car_names  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.fullname  FROM car_makers  INNER JOIN car_names ON car_makers.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders < 4;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8  AND year <= 1980;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year <= 1980;",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN car_names  ON model_list.modelid = car_names.modelid  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'Ford Motor'  AND cars_data.weight < 3500;",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN car_names  ON model_list.modelid = car_names.modelid  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE car_makers.fullname = 'Ford Motor'  AND cars_data.weight < 3500;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    ", origin  SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT car_names.makeid) > 3 AND COUNT(DISTINCT model_list.modelid) > 2;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(cars_data.id) > 3;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  WHERE model_list.model = 'tesla'  GROUP BY countries.countryid, countries.countryname  HAVING COUNT(car_makers.id) > 3;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE car_makers.fullname = 'Tesla' OR car_makers.country IN (SELECT countries.countryid                                                              FROM countries                                                              INNER JOIN car_makers ON countries.countryid = car_makers.country                                                              GROUP BY countries.countryid                                                              HAVING COUNT(*) > 3)  GROUP BY countries.countryid, countries",
    "SELECT country FROM airlines WHERE airline = 'JetBlue';",
    "SELECT country  FROM airlines  WHERE airline = 'Jetblue';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue';",
    "SELECT abbreviation  FROM airlines  WHERE airline = 'JetBlue';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Jackson';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Syracuse';",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'America';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'America';",
    "SELECT city, country FROM airports WHERE airportname = 'Alton';",
    "SELECT airports.city, airports.country  FROM airports  WHERE airports.airportname = 'Alton'",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT airportname  FROM airports  WHERE city = 'Jackson'",
    "SELECT airportname  FROM airports  WHERE city = 'Jackson'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Jackson';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Jackson';",
    "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Jackson';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'Jackson';",
    "SELECT COUNT(*)  FROM flights  WHERE sourceairport IN (SELECT airportcode                         FROM airports                         WHERE city = 'Syracuse')  AND destairport IN (SELECT airportcode                      FROM airports                      WHERE city = 'Ashley');",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Syracuse' AND destairport = 'Ashley';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'JetBlue';",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'JetBlue' AND airports.airportname = 'ASY';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  INNER JOIN airports  ON flights.destairport = airports.airportcode  WHERE airlines.abbreviation = 'JetBlue'  AND airports.airportcode = 'ASY';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'JetBlue' AND airports.airportname = 'AHD';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'JBU' AND airports.airportcode = 'AHD';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'JetBlue' AND airports.city = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'JBU' AND airports.city = 'Aberdeen';",
    "SELECT city, COUNT(*) AS num_arriving_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS num_destinations FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num_destinations DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS num_departing_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS num_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) ASC  LIMIT 1;",
    "SELECT airportcode  FROM airports  WHERE airportcode IN (SELECT sourceairport                        FROM flights                        GROUP BY sourceairport                        ORDER BY COUNT(*) ASC                        LIMIT 1);",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airlines.airline, COUNT(*) AS num_flights FROM airlines INNER JOIN flights ON airlines.abbreviation = flights.airline GROUP BY airlines.airline ORDER BY num_flights DESC;",
    "SELECT abbreviation, country  FROM airlines  ORDER BY COUNT(flight_2.airline) ASC  LIMIT 1;",
    "SELECT airlines.abbreviation, airlines.country  FROM airlines  INNER JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.abbreviation, airlines.country  ORDER BY COUNT(*) ASC  LIMIT 1;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  WHERE flights.destairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  INNER JOIN airports  ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'APG'  AND flights.destairport = 'CVO'  GROUP BY airlines.airline;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport IN ('APG', 'CVO')  GROUP BY airlines.airline  HAVING COUNT(DISTINCT flights.sourceairport) = 2;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG'",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) >= 10;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) >= 10;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200;",
    "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'JetBlue';",
    "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'JetBlue';",
    "SELECT flightno  FROM flights  WHERE sourceairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'Jackson';",
    "SELECT flightno  FROM flights  WHERE sourceairport = 'Jackson';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Jackson';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Jackson';",
    "SELECT COUNT(*)  FROM flights  WHERE (destairport = 'Syracuse' OR destairport = 'Jackson');",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Syracuse', 'Jackson');",
    "SELECT airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport                           FROM flights                           UNION                           SELECT destairport                           FROM flights);",
    "SELECT airportcode, airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights);",
    "SELECT COUNT(*) FROM documents;",
    "SELECT COUNT(*) FROM documents;",
    "SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code;",
    "SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code;",
    "SELECT documents.document_name, documents.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_description LIKE '%w%';",
    "SELECT documents.document_name, documents.document_id, templates.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  WHERE documents.document_description LIKE '%w%';",
    "SELECT document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE document_name = 'Robbin CV'",
    "SELECT documents.document_description, documents.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Robbin CV';",
    "SELECT COUNT(DISTINCT templates.template_id)  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id;",
    "SELECT COUNT(DISTINCT template_id)  FROM templates;",
    "SELECT COUNT(*)  FROM documents d  INNER JOIN templates t  ON d.template_id = t.template_id  INNER JOIN ref_template_types rtt  ON t.template_type_code = rtt.template_type_code  WHERE rtt.template_type_description = 'PPT';",
    "SELECT COUNT(*)  FROM documents d  INNER JOIN templates t ON d.template_id = t.template_id  INNER JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code  WHERE rtt.template_type_description = 'PPT';",
    "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id;",
    "SELECT template_id, COUNT(*) FROM templates GROUP BY template_id;",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_id = (SELECT template_id                       FROM documents                       GROUP BY template_id                       ORDER BY COUNT(*) DESC                       LIMIT 1);",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_id = (SELECT template_id                       FROM documents                       GROUP BY template_id                       ORDER BY COUNT(*) DESC                       LIMIT 1);",
    "SELECT templates.template_id  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id  GROUP BY templates.template_id  HAVING COUNT(documents.document_id) > 1;",
    "SELECT template_id  FROM templates  GROUP BY template_id  HAVING COUNT(*) > 1;",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents  ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents  ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "SELECT COUNT(*) FROM templates;",
    "SELECT COUNT(*)  FROM templates;",
    "SELECT ref_template_types.template_type_code, templates.date_effective_from, templates.date_effective_to  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code;",
    "SELECT ref_template_types.template_type_code, templates.date_effective_from, templates.date_effective_to  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code;",
    "SELECT date_effective_from, date_effective_to FROM templates;",
    "SELECT date_effective_from, date_effective_to  FROM templates;",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_type_code IN ('PP', 'PPT');",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_type_code IN ('PP', 'PPT');",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_type_code = 'CV';",
    "SELECT date_effective_from, date_effective_to  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'CV';",
    "SELECT date_effective_from, date_effective_to, template_type_code  FROM cre_Doc_Template_Mgt.templates  INNER JOIN cre_Doc_Template_Mgt.ref_template_types  ON cre_Doc_Template_Mgt.templates.template_type_code = cre_Doc_Template_Mgt.ref_template_types.template_type_code  WHERE version_number > 5;",
    "SELECT date_effective_from, date_effective_to, template_type_code  FROM cre_Doc_Template_Mgt.templates  INNER JOIN cre_Doc_Template_Mgt.ref_template_types  ON cre_Doc_Template_Mgt.templates.template_type_code = cre_Doc_Template_Mgt.ref_template_types.template_type_code  WHERE version_number > 5;",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_templates FROM cre_Doc_Template_Mgt.templates GROUP BY date_effective_from, date_effective_to;",
    "SELECT date_effective_from, date_effective_to, COUNT(*)  FROM cre_Doc_Template_Mgt  JOIN templates ON cre_Doc_Template_Mgt.template_id = templates.template_id  GROUP BY date_effective_from, date_effective_to;",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_templates FROM cre_Doc_Template_Mgt.templates GROUP BY date_effective_from, date_effective_to ORDER BY num_templates DESC LIMIT 1;",
    "SELECT MAX(date_effective_from), MAX(date_effective_to)  FROM cre_Doc_Template_Mgt.templates;",
    "SELECT date_effective_from, date_effective_to  FROM templates  GROUP BY date_effective_from, date_effective_to  HAVING COUNT(*) < 3;",
    "SELECT date_effective_from, date_effective_to  FROM templates  GROUP BY date_effective_from, date_effective_to  HAVING COUNT(*) < 3;",
    "SELECT MIN(version_number), date_effective_from, date_effective_to  FROM templates;",
    "SELECT MIN(version_number), date_effective_from, date_effective_to  FROM templates;",
    "SELECT date_effective_from, date_effective_to  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id  WHERE document_name = 'Data base';",
    "SELECT date_effective_from, date_effective_to  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base';",
    "SELECT documents.document_name, documents.document_id, templates.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK';",
    "SELECT documents.document_name  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK';",
    "SELECT ref_template_types.template_type_code, templates.date_effective_from, templates.date_effective_to, COUNT(documents.document_id)  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code, templates.date_effective_from, templates.date_effective_to;",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description, templates.date_effective_from, templates.date_effective_to, COUNT(documents.document_id) AS document_count  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code, ref_template_types.template_type_description, templates.date_effective_from, templates.date_effective_to;",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS num_docs FROM cre_Doc_Template_Mgt.templates INNER JOIN cre_Doc_Template_Mgt.documents ON cre_Doc_Template_Mgt.templates.template_id = cre_Doc_Template_Mgt.documents.template_id GROUP BY date_effective_from, date_effective_to ORDER BY num_docs DESC LIMIT 1;",
    "SELECT date_effective_from, date_effective_to, COUNT(*) AS count  FROM cre_Doc_Template_Mgt.templates  GROUP BY date_effective_from, date_effective_to  ORDER BY count DESC  LIMIT 1;",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_id NOT IN (SELECT template_id                           FROM documents);",
    "SELECT date_effective_from, date_effective_to  FROM templates  WHERE template_id NOT IN (SELECT template_id                           FROM documents);",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description  FROM ref_template_types;",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description  FROM ref_template_types;",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  WHERE ref_template_types.template_type_description = 'Book';",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id;",
    "SELECT DISTINCT template_type_description  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id;",
    "SELECT date_effective_from, date_effective_to  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation';",
    "SELECT date_effective_from, date_effective_to  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation';",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM players p1  INNER JOIN matches m ON p1.player_id = m.loser_id  INNER JOIN players p2 ON m.winner_id = p2.player_id;",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM matches m  INNER JOIN players p1 ON m.winner_id = p1.player_id  INNER JOIN players p2 ON m.loser_id = p2.player_id;",
    "SELECT loser_age, winner_age FROM matches;",
    "SELECT loser_age, winner_age FROM matches;",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;",
    "SELECT AVG(winner_rank) AS avg_winner_rank, AVG(loser_rank) AS avg_loser_rank FROM matches;",
    "SELECT AVG(winner_rank + loser_rank) FROM matches;",
    "SELECT MAX(winner_rank), MAX(loser_rank) FROM matches;",
    "SELECT MAX(winner_rank) AS best_rank, loser_rank FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY loser_rank;",
    "SELECT DISTINCT country_code FROM wta_1.players;",
    "SELECT COUNT(DISTINCT country_code) FROM players;",
    "SELECT COUNT(DISTINCT loser_name) FROM matches;",
    "SELECT DISTINCT loser_name FROM matches;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
    "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.loser_id  WHERE m1.year = 2013  AND m2.year = 2016;",
    "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.loser_id  WHERE m1.year = 2013  AND m2.year = 2016;",
    "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m  ON p.player_id = m.loser_id OR p.player_id = m.winner_id  WHERE m.year IN (2013, 2016);",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM players p1  INNER JOIN matches m ON p1.player_id = m.winner_id  INNER JOIN players p2 ON p2.player_id = m.loser_id  WHERE m.year IN (2013, 2016);",
    "SELECT p.country_code, p.first_name  FROM players p  INNER JOIN matches m  ON p.player_id = m.winner_id  WHERE m.tourney_name = 'WTA Championships'  AND m.tourney_name = 'Australian Open'  AND m.year = YEAR(CURRENT_DATE);",
    "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.tourney_name = 'WTA Championships'  AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY year ASC LIMIT 1);",
    "SELECT players.first_name, players.last_name  FROM players  ORDER BY players.birth_date ASC;",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC;",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;",
    "SELECT first_name, last_name, birth_date FROM players WHERE hand = 'Left-Handed' ORDER BY birth_date ASC;",
    "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN matches m  ON p.player_id = m.winner_id OR p.player_id = m.loser_id  INNER JOIN rankings r  ON p.player_id = r.player_id  GROUP BY p.player_id  ORDER BY r.tours DESC  LIMIT 1;",
    "SELECT first_name, country_code  FROM players  INNER JOIN (SELECT loser_id, COUNT(*) AS tours              FROM matches              GROUP BY loser_id              ORDER BY tours DESC              LIMIT 1) AS t  ON players.player_id = t.loser_id;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM players p1  INNER JOIN matches m ON p1.player_id = m.winner_id  INNER JOIN players p2 ON m.loser_id = p2.player_id  WHERE m.tourney_name = 'Australian Open'  AND m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT winner_name, loser_name  FROM matches  WHERE winner_rank_points = (SELECT MAX(winner_rank_points)                             FROM matches)  AND tourney_name = 'Australian Open'",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM players p1  INNER JOIN matches m ON p1.player_id = m.winner_id  INNER JOIN players p2 ON p2.player_id = m.loser_id  WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT m.minutes, p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM matches m  INNER JOIN players p1 ON m.winner_id = p1.player_id  INNER JOIN players p2 ON m.loser_id = p2.player_id  ORDER BY m.minutes DESC  LIMIT 1;",
    "SELECT p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;",
    "SELECT first_name, AVG(ranking)  FROM players  INNER JOIN rankings  ON players.player_id = rankings.player_id  GROUP BY first_name;",
    "SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name;",
    "SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points  FROM players p  INNER JOIN rankings r  ON p.player_id = r.player_id  GROUP BY p.first_name, p.last_name;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id HAVING COUNT(*) > 50);",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;",
    "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;",
    "SELECT COUNT(tourney_id) AS total_tours, ranking_date  FROM matches  INNER JOIN rankings  ON matches.tourney_date = rankings.ranking_date  GROUP BY ranking_date;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
    "SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year;",
    "SELECT winner_name, winner_rank  FROM matches  JOIN players ON players.player_id = matches.winner_id  ORDER BY tourney_date DESC  LIMIT 3;",
    "SELECT first_name, last_name, winner_rank  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  ORDER BY ranking_date DESC  LIMIT 3;",
    "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_id IN (SELECT player_id                      FROM players                      WHERE hand = 'L')  AND tourney_name = 'WTA Championships';",
    "SELECT COUNT(*)  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  WHERE players.hand = 'L'  AND rankings.tourney_name = 'WTA Championships';",
    "SELECT first_name, last_name, birth_date  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT first_name, last_name, birth_date  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  ORDER BY rankings.ranking_points DESC  LIMIT 1;",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;",
    ", grade , other_details  SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses;",
    ", grade , other_details  SELECT line_1, line_2, line_3 FROM addresses;",
    "SELECT COUNT(*) FROM show WHERE if_first_show = 'yes';",
    "SELECT COUNT(*)  FROM show  WHERE if_first_show = 'yes';",
    "SELECT name FROM conductor ORDER BY birthday ASC;",
    "SELECT name, birthday FROM conductor ORDER BY birthday;",
    "SELECT name  FROM conductor  WHERE nationality = 'American';",
    "SELECT name FROM conductor WHERE nationality = 'American';",
    "SELECT record_company, year_of_founded  FROM orchestra  ORDER BY year_of_founded ASC;",
    "SELECT record_company, year_of_founded  FROM orchestra  ORDER BY year_of_founded ASC;",
    "SELECT AVG(attendance) FROM show WHERE if_first_show = 'no';",
    "SELECT AVG(attendance) FROM show WHERE if_first_show = 'no';",
    "SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';",
    "SELECT COUNT(DISTINCT nationality)  FROM conductor;",
    "SELECT COUNT(DISTINCT nationality)  FROM conductor;",
    "SELECT name FROM conductor ORDER BY birthday ASC;",
    "SELECT name, birthday FROM conductor ORDER BY birthday ASC;",
    "SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);",
    "SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);",
    "SELECT conductor.name, orchestra.orchestra  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name, orchestra.orchestra  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(orchestra.orchestra_id) > 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(*) > 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;",
    "SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  ORDER BY orchestra.year_of_founded ASC  LIMIT 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  INNER JOIN performance  ON orchestra.orchestra_id = performance.orchestra_id  INNER JOIN show  ON performance.performance_id = show.performance_id  WHERE orchestra.orchestra = 'new_orchestra'  AND show.if_first_show = 1  ORDER BY performance.date DESC;",
    "SELECT record_company, COUNT(orchestra) FROM orchestra GROUP BY record_company;",
    "SELECT record_company, COUNT(orchestra_id) AS 'Number of Orchestras' FROM orchestra GROUP BY record_company;",
    "SELECT o.orchestra, o.record_company, o.year_of_founded, o.major_record_format FROM orchestra o JOIN conductor c ON o.conductor_id = c.conductor_id ORDER BY c.birthday ASC;",
    "SELECT orchestra.orchestra, orchestra.major_record_format, orchestra.year_of_founded FROM orchestra ORDER BY orchestra.year_of_founded;",
    "SELECT record_company  FROM orchestra  WHERE year_of_founded = (SELECT MIN(year_of_founded) FROM orchestra);",
    "SELECT record_company  FROM orchestra  WHERE orchestra_id = (SELECT MAX(orchestra_id) FROM orchestra);",
    "SELECT orchestra.orchestra  FROM orchestra  LEFT JOIN performance  ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.performance_id IS NULL;",
    "SELECT orchestra  FROM orchestra  LEFT JOIN performance  ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.performance_id IS NULL;",
    "SELECT record_company  FROM orchestra  WHERE year_of_founded <= 2003;",
    "SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded >= 2003  GROUP BY record_company  HAVING COUNT(*) > 1;",
    "SELECT COUNT(*) FROM performance p INNER JOIN show s ON p.performance_id = s.performance_id INNER JOIN orchestra o ON p.orchestra_id = o.orchestra_id WHERE o.orchestra = 'Glebe Park' AND s.if_first_show = 'Yes';",
    "SELECT COUNT(*) FROM performance p INNER JOIN orchestra o ON p.orchestra_id = o.orchestra_id INNER JOIN show s ON p.performance_id = s.performance_id WHERE o.orchestra = 'Glebe Park' AND s.if_first_show = 1;",
    "SELECT type  FROM performance  WHERE performance_id IN (SELECT performance_id                          FROM show                          WHERE if_first_show = 'no'                          GROUP BY performance_id                          HAVING COUNT(*) > 1)",
    "SELECT type  FROM performance  INNER JOIN show  ON performance.performance_id = show.performance_id  WHERE show.if_first_show = 'no'  GROUP BY type  HAVING COUNT(*) > 1;",
    "SELECT DISTINCT state  FROM owners  INNER JOIN professionals  ON owners.state = professionals.state;",
    "SELECT DISTINCT o.state, p.state  FROM owners o  INNER JOIN professionals p  ON o.state = p.state;",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;",
    "SELECT AVG(age)  FROM dogs  INNER JOIN treatments  ON dogs.dog_id = treatments.dog_id;",
    "SELECT p.professional_id, p.last_name, p.cell_number  FROM professionals p  INNER JOIN treatments t  ON p.professional_id = t.professional_id  WHERE p.state = 'Indiana'  GROUP BY p.professional_id  HAVING COUNT(t.treatment_id) > 2;",
    "SELECT professionals.professional_id, professionals.last_name, professionals.cell_number  FROM professionals  WHERE professionals.state = 'Indiana'  OR (SELECT COUNT(*)      FROM treatments      WHERE treatments.professional_id = professionals.professional_id) > 2;",
    "SELECT name  FROM dogs  JOIN treatments  ON dogs.dog_id = treatments.dog_id  WHERE cost_of_treatment <= 1000;",
    "SELECT d.name  FROM dogs d  INNER JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.cost_of_treatment > 1000;",
    "SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) AND first_name IN (SELECT first_name FROM professionals) OR first_name IN (SELECT first_name FROM owners);",
    "SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) AND first_name IN (SELECT first_name FROM professionals) OR first_name IN (SELECT first_name FROM owners);",
    "SELECT professional_id, first_name, last_name FROM professionals WHERE professional_id NOT IN (SELECT professional_id                              FROM treatments);",
    "SELECT professional_id, first_name, last_name  FROM professionals  WHERE professional_id NOT IN (SELECT professional_id                               FROM treatments);",
    "SELECT o.owner_id, o.first_name, o.last_name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;",
    "SELECT o.owner_id, o.first_name, o.last_name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id  GROUP BY o.owner_id, o.first_name, o.last_name  ORDER BY COUNT(d.dog_id) DESC  LIMIT 1;",
    "SELECT professional_id, home_phone, cell_number  FROM professionals  WHERE professional_id IN (SELECT professional_id                           FROM treatments                           GROUP BY professional_id                           HAVING COUNT(*) >= 2);",
    "SELECT professional_id, home_phone, cell_number  FROM professionals  WHERE professional_id IN (SELECT professional_id                           FROM treatments                           GROUP BY professional_id                           HAVING COUNT(*) >= 2);",
    "SELECT breed_name FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY COUNT(abandoned_yn) DESC LIMIT 1;",
    "SELECT breed_name  FROM breeds  INNER JOIN dogs  ON breeds.breed_code = dogs.breed_code  WHERE abandoned_yn = 'Y'  GROUP BY breed_name  ORDER BY COUNT(*) DESC;",
    "SELECT o.owner_id, o.last_name  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.last_name  ORDER BY SUM(t.cost_of_treatment) DESC;",
    "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT treatment_type_description, MIN(cost_of_treatment)  FROM treatments  JOIN treatment_types  ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatment_type_description;",
    "SELECT treatment_type_description, SUM(cost_of_treatment) AS total_cost  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatment_type_description  ORDER BY total_cost ASC  LIMIT 1;",
    "SELECT o.owner_id, o.zip_code  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.zip_code  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT owners.owner_id, owners.zip_code  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id, owners.zip_code  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT p.professional_id, p.first_name, p.last_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.first_name, p.last_name HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;",
    "SELECT professionals.professional_id, professionals.home_phone, professionals.cell_number  FROM professionals  INNER JOIN treatments ON treatments.professional_id = professionals.professional_id  GROUP BY professionals.professional_id  HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;",
    "SELECT first_name, last_name  FROM professionals  INNER JOIN treatments  ON professionals.professional_id = treatments.professional_id  GROUP BY first_name, last_name  HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM treatments);",
    "SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "SELECT t.date_of_treatment, p.first_name, p.last_name  FROM treatments t  INNER JOIN professionals p  ON t.professional_id = p.professional_id;",
    "SELECT date_of_treatment, first_name, last_name FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id;",
    "SELECT treatment_types.treatment_type_description, treatments.cost_of_treatment  FROM treatments  INNER JOIN treatment_types  ON treatments.treatment_type_code = treatment_types.treatment_type_code;",
    "SELECT charges.charge_amount, treatment_types.treatment_type_description  FROM charges  INNER JOIN treatment_types  ON charges.charge_type = treatment_types.treatment_type_code;",
    "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN sizes s ON d.size_code = s.size_code;",
    "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN sizes s ON d.size_code = s.size_code;",
    "SELECT o.first_name, o.last_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id;",
    "SELECT o.first_name, o.last_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id;",
    "SELECT D.name, T.date_of_treatment  FROM dogs D  INNER JOIN breeds B ON D.breed_code = B.breed_code  INNER JOIN treatments T ON D.dog_id = T.dog_id  WHERE B.breed_name = (SELECT MIN(breed_name) FROM breeds)",
    "SELECT d.name, t.date_of_treatment  FROM dogs d  INNER JOIN breeds b ON d.breed_code = b.breed_code  INNER JOIN treatments t ON d.dog_id = t.dog_id  WHERE b.breed_name = 'rarest breed'",
    "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id  WHERE o.state = 'VA';",
    "SELECT owners.first_name, dogs.name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'VA';",
    "SELECT date_arrived, date_departed FROM dogs;",
    "SELECT date_arrived, date_departed FROM dogs;",
    "SELECT last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY age ASC  LIMIT 1;",
    "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE age = (SELECT MIN(age) FROM dogs);",
    "SELECT email_address FROM professionals WHERE state IN ('HI', 'WI');",
    "SELECT email_address FROM professionals WHERE state IN ('HI', 'WI');",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'Y';",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'Y';",
    "SELECT COUNT(*) FROM treatments WHERE treatment_id IS NOT NULL;",
    "SELECT COUNT(*)  FROM treatments  WHERE treatment_type_code IS NOT NULL;",
    "SELECT COUNT(DISTINCT professional_id)  FROM treatments  WHERE treatment_type_code IS NOT NULL;",
    "SELECT COUNT(DISTINCT professional_id)  FROM treatments  INNER JOIN dogs ON treatments.dog_id = dogs.dog_id;",
    "SELECT first_name, last_name  FROM professionals  WHERE city LIKE '%West%';",
    "SELECT first_name, last_name FROM professionals WHERE city LIKE '%West%';",
    "SELECT o.first_name, o.last_name  FROM owners o  WHERE o.state LIKE '%North%';",
    "SELECT first_name, last_name  FROM owners  WHERE state LIKE '%North%';",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y'; SELECT COUNT(*) FROM dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y');",
    "SELECT COUNT(*)  FROM dogs  WHERE abandoned_yn = 'Y'  AND age < (SELECT AVG(age) FROM dogs);",
    "SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;",
    "SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;",
    "SELECT COUNT(*)  FROM dogs  WHERE abandoned_yn = 'Y'  AND NOT EXISTS (SELECT *                  FROM treatments                  WHERE dogs.dog_id = treatments.dog_id);",
    "SELECT COUNT(*)  FROM treatments  WHERE treatment_id IS NOT NULL;",
    "SELECT COUNT(*) FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.abandoned_yn = 'N';",
    "SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN (SELECT owner_id                         FROM dogs                         WHERE abandoned_yn = 'Y');",
    "SELECT COUNT(*) FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id                              FROM treatments);",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y';",
    "SELECT AVG(age) FROM dogs WHERE abandoned_yn = 'Y';",
    "SELECT MAX(age) FROM dogs;",
    "SELECT MAX(age) FROM dogs;",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT MAX(charge_amount) FROM charges;",
    "SELECT MAX(charge_amount)  FROM charges;",
    "SELECT email_address, first_name, last_name FROM professionals;",
    "SELECT professionals.email_address, professionals.first_name, professionals.last_name FROM professionals;",
    "SELECT b.breed_name, s.size_description  FROM breeds b  INNER JOIN sizes s  ON b.breed_code = s.size_code;",
    "SELECT DISTINCT breeds.breed_name, sizes.size_description  FROM breeds  INNER JOIN dogs ON breeds.breed_code = dogs.breed_code  INNER JOIN sizes ON sizes.size_code = dogs.size_code;",
    "SELECT p.first_name, p.last_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t  ON p.professional_id = t.professional_id  INNER JOIN treatment_types tt  ON t.treatment_type_code = tt.treatment_type_code;",
    "SELECT p.first_name, p.last_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t ON p.professional_id = t.professional_id  INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "|  SELECT name  FROM singer  ORDER BY birth_year ASC;",
    "SELECT name  FROM singer  ORDER BY birth_year ASC;",
    "SELECT birth_year, citizenship FROM singer;",
    "SELECT birth_year, citizenship FROM singer;",
    "SELECT name  FROM singer  WHERE citizenship != 'French';",
    "SELECT name  FROM singer  WHERE citizenship != 'French';",
    "SELECT name  FROM singer  WHERE birth_year <= 1948;",
    "SELECT name  FROM singer  WHERE birth_year <= 1948;",
    "SELECT name  FROM singer  ORDER BY birth_year DESC  LIMIT 1;",
    "|  SELECT name  FROM singer  ORDER BY birth_year DESC  LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC;",
    "SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC  LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;",
    "SELECT name  FROM singer  INNER JOIN song  ON singer.singer_id = song.singer_id  ORDER BY sales DESC  LIMIT 1;",
    "SELECT title, sales  FROM song  ORDER BY sales DESC  LIMIT 1;",
    "SELECT DISTINCT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      WHERE sales > 300000);",
    "SELECT name  FROM singer  WHERE net_worth_millions > 300000;",
    "SELECT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      GROUP BY singer_id                      HAVING COUNT(*) > 1);",
    "SELECT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      GROUP BY singer_id                      HAVING COUNT(*) > 1);",
    "SELECT s.name, MAX(sales) FROM singer s INNER JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.name;",
    "SELECT s.name, MAX(s.highest_position) FROM singer s INNER JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.name;",
    "SELECT name  FROM singer  WHERE singer_id NOT IN (SELECT singer_id FROM song);",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);",
    "SELECT citizenship  FROM singer  WHERE birth_year <= 1945;",
    "SELECT DISTINCT citizenship  FROM singer  WHERE birth_year <= 1945;"
]