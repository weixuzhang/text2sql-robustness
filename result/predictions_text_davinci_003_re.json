[
    "SELECT COUNT(*)  FROM singer;",
    "SELECT COUNT(*)  FROM singer;",
    "SELECT name, country, age FROM singer ORDER BY age DESC;",
    "SELECT singer.name, singer.country, singer.age  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age DESC;",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';",
    "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';",
    "SELECT singer.name, singer.song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age ASC  LIMIT 1;",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country;",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
    "SELECT AVG(capacity) AS avg_capacity, MAX(capacity) AS max_capacity FROM stadium;",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, COUNT(*) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, COUNT(*) AS num_concerts FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
    "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year >= 2014  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT name, capacity  FROM stadium  WHERE stadium_id IN (SELECT stadium_id                       FROM concert                       WHERE year > 2013                       GROUP BY stadium_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert);",
    "SELECT country  FROM singer  WHERE age > 40 OR age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT singer.name, concert.theme, COUNT(singer_in_concert.singer_id)  FROM singer_in_concert  INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id  INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id  GROUP BY singer.name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT singer.name, COUNT(*) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;",
    "SELECT singer.name  FROM concert_singer  INNER JOIN singer ON concert_singer.singer_id = singer.singer_id  INNER JOIN concert ON concert_singer.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN concert_singer  ON singer.singer_id = concert_singer.singer_id  WHERE concert_singer.song_name LIKE '%Hey%';",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year IN (2014, 2015)  GROUP BY s.name, s.location;",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year IN (2014, 2015)  GROUP BY s.name, s.location  HAVING COUNT(*) = 2;",
    "SELECT COUNT(*)  FROM concert c  INNER JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = s.highest;",
    "SELECT COUNT(*)  FROM concert c  JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = (SELECT MAX(capacity) FROM stadium)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype;",
    "|  SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT COUNT(DISTINCT pettype) FROM pets;",
    "SELECT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'dog')  GROUP BY fname  HAVING COUNT(*) = 2;",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.stuid IN (     SELECT stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'dog' )",
    "SELECT lname, fname, age, major  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT student.major, student.age  FROM student  LEFT JOIN has_pet  ON student.stuid = has_pet.stuid  LEFT JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype != 'cat'",
    "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid                     FROM has_pet                     INNER JOIN pets                     ON has_pet.petid = pets.petid                     WHERE pettype = 'cat');",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets_1                      ON has_pet.petid = pets_1.petid                      WHERE pettype = 'cat')",
    "SELECT fname, age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;",
    "SELECT fname, age FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid;",
    "SELECT fname, age  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid;",
    "SELECT petid FROM pets_1  INNER JOIN has_pet ON pets_1.stuid = has_pet.stuid  INNER JOIN student ON has_pet.stuid = student.stuid  WHERE student.lname = 'Smith';",
    "SELECT petid  FROM pets_1  INNER JOIN has_pet  ON pets_1.stuid = has_pet.stuid  INNER JOIN student  ON has_pet.stuid = student.stuid  WHERE student.lname = 'Smith';",
    "SELECT stuid, COUNT(petid) FROM has_pet INNER JOIN pets_1 ON has_pet.stuid = pets_1.stuid GROUP BY stuid;",
    "SELECT stuid, COUNT(petid) AS num_pets FROM has_pet INNER JOIN students ON has_pet.stuid = students.stuid GROUP BY stuid;",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1)",
    "SELECT fname, sex  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  GROUP BY stuid                  HAVING COUNT(*) > 1)",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT COUNT(*) FROM continents;",
    "SELECT COUNT(*) FROM continents;",
    ", origin  SELECT contid, continent, COUNT(countryid) AS num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    ", origin  SELECT contid, continent, COUNT(countryname) AS 'Number of Countries' FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT COUNT(*) FROM countries;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS models_produced FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT MIN(horsepower) FROM cars_data c JOIN car_names n ON c.makeid = n.makeid JOIN model_list m ON n.model = m.model JOIN car_makers mk ON m.maker = mk.id;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC  LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    ", origin  SELECT fullname  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.make  WHERE cars_data.year = 1970;",
    ", origin  SELECT fullname  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.year = 1970;",
    ", origin  SELECT make, year FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY year ASC  LIMIT 1;",
    ", makeid  SELECT maker, MIN(year)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.makeid  GROUP BY maker;",
    "SELECT DISTINCT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  WHERE year > 1980;",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model;",
    ", origin  SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS count FROM continents INNER JOIN countries ON continents.contid = countries.continent INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY continents.continent;",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker) AS car_makers FROM continents LEFT JOIN countries ON continents.contid = countries.continent LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT fullname, COUNT(model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY fullname;",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid GROUP BY car_makers.id, car_makers.fullname;",
    "SELECT accelerate FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_names.make = 'amc hornet sportabout (sw)';",
    "SELECT accelerate FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'AMC Hornet Sportabout (sw)'",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.id INNER JOIN countries c ON cm.country = c.countryid INNER JOIN continents co ON c.continent = co.contid WHERE co.continent = 'USA';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.make INNER JOIN countries c ON cm.country = c.countryname INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*)  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > 150;",
    "SELECT AVG(weight) FROM cars_data GROUP BY year;",
    "SELECT AVG(weight), year  FROM cars_data  GROUP BY year;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT MAX(horsepower), make FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 3  GROUP BY make;",
    "SELECT MAX(horsepower) AS Max_Horsepower, make FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE cylinders = 3  GROUP BY make;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM car_names  INNER JOIN model_list ON car_names.makeid = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_names.make = 'Volvo';",
    "SELECT AVG(edispl) FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.make  WHERE car_makers.fullname = 'Volvo';",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
    "SELECT MAX(accelerate) FROM cars_data;",
    "SELECT model, COUNT(make) AS num_make FROM car_names GROUP BY model ORDER BY num_make DESC LIMIT 1;",
    "SELECT model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 4;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT COUNT(model) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker               FROM model_list               GROUP BY maker               HAVING COUNT(model) > 3);",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.model) > 3;",
    "SELECT model_list.model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN cars_data  ON model_list.modelid = cars_data.id  WHERE car_makers.fullname = 'General Motors'  AND cars_data.weight > 3500;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE car_makers.fullname = 'General Motors' OR weight > 3500;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000;",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'Volvo'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = 'Volvo'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
    "SELECT COUNT(*) FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*)  FROM countries c  INNER JOIN car_makers cm ON c.countryid = cm.country  INNER JOIN model_list ml ON cm.id = ml.maker  INNER JOIN car_names cn ON ml.modelid = cn.makeid  INNER JOIN cars_data cd ON cn.model = cd.id  GROUP BY c.countryname  HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT COUNT(*)  FROM cars_data  WHERE cylinders > 6;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.makeid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT car_names.makeid, car_names.make  FROM car_names  INNER JOIN cars_data  ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3;",
    "SELECT car_makers.id, car_makers.fullname  FROM car_makers  INNER JOIN car_names ON car_makers.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders < 4;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  WHERE car_makers.fullname != 'Ford Motor Company'  AND weight < 3500;",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  WHERE countries.countryname != 'Ford Motor Company'  AND weight < 3500;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT countries.countryname  FROM countries  LEFT JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;",
    "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(cars_data.id) > 3;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE model_list.model = 'fiat'  GROUP BY countries.countryid, countries.countryname  HAVING COUNT(*) > 3;",
    "SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  WHERE car_makers.fullname = 'Fiat'  OR (SELECT COUNT(*)      FROM car_makers      WHERE car_makers.country = countries.countryid) > 3  GROUP BY countries.countryid, countries.countryname;",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT country  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airlines;",
    "SELECT COUNT(*) FROM airports;",
    "SELECT COUNT(*)  FROM airports;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT COUNT(*) FROM flights;",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT airline  FROM airlines  WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT city, country FROM airports WHERE airportname = 'Alton';",
    "SELECT airports.city, airports.country  FROM airports  WHERE airports.airportname = 'Alton'",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT airportname  FROM airports  WHERE city = 'Aberdeen';",
    "SELECT airportname  FROM airports  WHERE city = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ABZ';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.abbreviation  INNER JOIN airports AS source ON flights.sourceairport = source.airportcode  INNER JOIN airports AS dest ON flights.destairport = dest.airportcode  WHERE source.city = 'Aberdeen'  AND dest.city = 'Ashley';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.airportname = 'ASY';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  INNER JOIN airports  ON flights.destairport = airports.airportcode  WHERE airlines.abbreviation = 'United'  AND airports.airportcode = 'ASY';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  INNER JOIN airports  ON flights.sourceairport = airports.airportcode  WHERE airlines.abbreviation = 'United Airlines'  AND airports.airportname = 'AHD';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  INNER JOIN airports  ON flights.sourceairport = airports.airportcode  WHERE airlines.abbreviation = 'United Airlines'  AND airports.airportcode = 'AHD';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.city = 'Aberdeen';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.uid  INNER JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.abbreviation = 'United Airlines'  AND airports.city = 'Aberdeen';",
    "SELECT city, COUNT(*) AS num_arriving_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS num_destinations FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num_destinations DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS num_departing_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT city, COUNT(*) AS frequency  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY city  ORDER BY frequency DESC  LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT airportcode  FROM airports  INNER JOIN flights  ON airports.airportcode = flights.sourceairport  GROUP BY airportcode  ORDER BY COUNT(*) ASC  LIMIT 1;",
    "SELECT airportcode  FROM airports  WHERE airportcode IN (SELECT sourceairport                        FROM flights                        GROUP BY sourceairport                        ORDER BY COUNT(*) ASC                        LIMIT 1);",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airlines.airline, COUNT(*) AS num_flights FROM airlines INNER JOIN flights ON airlines.abbreviation = flights.airline GROUP BY airlines.airline ORDER BY num_flights DESC;",
    "SELECT abbreviation, country  FROM airlines  ORDER BY COUNT(flight_2.airline) ASC  LIMIT 1;",
    "SELECT airlines.abbreviation, airlines.country  FROM airlines  INNER JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.abbreviation, airlines.country  ORDER BY COUNT(*) ASC  LIMIT 1;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  WHERE flights.destairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  INNER JOIN airports  ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'APG'  AND flights.destairport = 'CVO'  GROUP BY airlines.airline;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport IN ('APG', 'CVO')  GROUP BY airlines.airline  HAVING COUNT(DISTINCT flights.sourceairport) = 2;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG'",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) >= 10;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) >= 10;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.abbreviation = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200;",
    "SELECT flightno FROM flights  WHERE airline = 'United Airlines';",
    "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'United Airlines';",
    "SELECT flightno  FROM flights  WHERE sourceairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen';",
    "SELECT flightno  FROM flights  WHERE sourceairport = 'ABZ';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Aberdeen';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Aberdeen';",
    "SELECT COUNT(*)  FROM flights  WHERE destairport IN (SELECT airportcode                       FROM airports                       WHERE city IN ('Aberdeen', 'Abilene'));",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('ABE', 'ABI');",
    "SELECT airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport                           FROM flights                           UNION                           SELECT destairport                           FROM flights);",
    "SELECT airportcode, airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights);",
    "SELECT COUNT(*) FROM employee;",
    "SELECT COUNT(*)  FROM employee_hire_evaluation  WHERE employee_id IS NOT NULL;",
    "SELECT name, age FROM employee ORDER BY age ASC;",
    "SELECT name, age FROM employee ORDER BY age ASC;",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city;",
    "SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city;",
    "SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING COUNT(*) > 1;",
    "SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING COUNT(*) > 1;",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location;",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location;",
    "SELECT manager_name, district  FROM shop  ORDER BY number_products DESC  LIMIT 1;",
    "SELECT manager_name, district  FROM shop  ORDER BY number_products DESC  LIMIT 1;",
    "SELECT MIN(number_products), MAX(number_products) FROM shop;",
    "SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;",
    "SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC;",
    "SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC;",
    "SELECT shop.name  FROM shop  GROUP BY shop.name  HAVING COUNT(*) > (SELECT AVG(number_products) FROM shop);",
    "SELECT shop.name  FROM shop  WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);",
    "SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  GROUP BY name  ORDER BY COUNT(year_awarded) DESC  LIMIT 1;",
    "SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  GROUP BY name  ORDER BY COUNT(year_awarded) DESC  LIMIT 1;",
    "SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  ORDER BY bonus DESC  LIMIT 1;",
    "SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  ORDER BY bonus DESC  LIMIT 1;",
    "_awarded  SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);",
    "SELECT name  FROM employee  WHERE employee_id NOT IN (SELECT employee_id                           FROM evaluation);",
    "SELECT shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;",
    "SELECT shop.name  FROM shop  INNER JOIN hiring  ON shop.shop_id = hiring.shop_id  GROUP BY shop.name  ORDER BY COUNT(hiring.employee_id) DESC  LIMIT 1;",
    "SELECT shop.name  FROM shop  LEFT JOIN hiring  ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL;",
    "SELECT shop.name  FROM shop  LEFT JOIN hiring  ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL;",
    "SELECT shop.name, COUNT(hiring.employee_id) AS num_employees  FROM shop  INNER JOIN hiring ON shop.shop_id = hiring.shop_id  GROUP BY shop.name;",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees  FROM shop  INNER JOIN hiring ON shop.shop_id = hiring.shop_id  INNER JOIN employee ON employee.employee_id = hiring.employee_id  GROUP BY shop.name;",
    "SELECT SUM(bonus)  FROM evaluation;",
    "SELECT SUM(bonus) FROM evaluation;",
    "SELECT employee.name, employee.age, employee.city, shop.name, shop.location, shop.district, shop.number_products, shop.manager_name, hiring.start_from, hiring.is_full_time, evaluation.year_awarded, evaluation.bonus  FROM employee  INNER JOIN hiring ON employee.employee_id = hiring.employee_id  INNER JOIN shop ON hiring.shop_id = shop.shop_id  INNER JOIN evaluation ON employee.employee_id = evaluation.employee_id;",
    "SELECT employee.name, employee.age, employee.city, shop.name, shop.location, shop.district, shop.number_products, shop.manager_name, hiring.start_from, hiring.is_full_time, evaluation.year_awarded, evaluation.bonus  FROM employee  INNER JOIN hiring ON employee.employee_id = hiring.employee_id  INNER JOIN shop ON hiring.shop_id = shop.shop_id  LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id;",
    "SELECT district  FROM shop  WHERE number_products < 3000  INTERSECT  SELECT district  FROM shop  WHERE number_products > 10000;",
    "SELECT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district                   FROM shop                   WHERE number_products > 10000);",
    "SELECT COUNT(DISTINCT location) FROM shop;",
    "SELECT COUNT(DISTINCT location) FROM shop;",
    "SELECT COUNT(*) FROM documents;",
    "SELECT COUNT(*) FROM documents;",
    "SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents;",
    "SELECT documents.document_id, documents.document_name, documents.document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code;",
    "SELECT documents.document_name, documents.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_description LIKE '%w%';",
    "SELECT documents.document_name, documents.template_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  WHERE documents.document_description LIKE '%w%';",
    "SELECT documents.document_id, templates.template_id, documents.document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Robbin CV';",
    "SELECT documents.document_id, documents.template_id, documents.document_description  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Robbin CV';",
    "SELECT COUNT(DISTINCT templates.template_id)  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id;",
    "SELECT COUNT(DISTINCT template_id)  FROM templates;",
    "SELECT COUNT(*)  FROM documents d  INNER JOIN templates t  ON d.template_id = t.template_id  INNER JOIN ref_template_types r  ON t.template_type_code = r.template_type_code  WHERE r.template_type_code = 'PPT';",
    "SELECT COUNT(*)  FROM documents d  INNER JOIN templates t ON d.template_id = t.template_id  INNER JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code  WHERE rtt.template_type_description = 'PPT';",
    "SELECT t.template_id, COUNT(d.document_id) AS num_documents FROM cre_Doc_Template_Mgt.templates t INNER JOIN cre_Doc_Template_Mgt.documents d ON t.template_id = d.template_id GROUP BY t.template_id;",
    "SELECT template_id, COUNT(*) FROM templates GROUP BY template_id;",
    "SELECT templates.template_id, ref_template_types.template_type_code  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  INNER JOIN documents  ON templates.template_id = documents.template_id  GROUP BY templates.template_id, ref_template_types.template_type_code  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1;",
    "SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id, templates.template_type_code  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1;",
    "SELECT template_id  FROM templates  WHERE template_id IN (SELECT template_id                        FROM documents                        GROUP BY template_id                        HAVING COUNT(*) > 1);",
    "SELECT template_id  FROM templates  GROUP BY template_id  HAVING COUNT(*) > 1;",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents  ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents  ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL;",
    "SELECT COUNT(*) FROM templates;",
    "SELECT COUNT(*)  FROM templates;",
    "SELECT templates.template_id, templates.version_number, templates.template_type_code  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code;",
    "SELECT templates.template_id, templates.version_number, templates.template_type_code  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code;",
    "SELECT DISTINCT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code;",
    "SELECT DISTINCT ref_template_types.template_type_code  FROM ref_template_types;",
    "SELECT templates.template_id  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE templates.template_type_code IN ('PP', 'PPT');",
    "SELECT template_id  FROM templates  WHERE template_type_code IN ('PP', 'PPT');",
    "SELECT COUNT(*)  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'CV';",
    "SELECT COUNT(*)  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'CV';",
    "SELECT ref_template_types.template_type_code, templates.version_number  FROM templates  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE templates.version_number > 5;",
    "SELECT version_number, template_type_code  FROM cre_Doc_Template_Mgt.templates  INNER JOIN cre_Doc_Template_Mgt.ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE version_number > 5;",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code;",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS template_count FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM cre_Doc_Template_Mgt JOIN templates ON cre_Doc_Template_Mgt.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code  ORDER BY COUNT(templates.template_id) DESC  LIMIT 1;",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code  HAVING COUNT(templates.template_id) < 3;",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code  HAVING COUNT(templates.template_id) < 3;",
    "SELECT MIN(version_number), template_type_code  FROM templates  JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY template_type_code;",
    "SELECT version_number, template_type_code  FROM templates  ORDER BY version_number ASC  LIMIT 1;",
    "SELECT ref_template_types.template_type_code  FROM cre_Doc_Template_Mgt  INNER JOIN templates  ON cre_Doc_Template_Mgt.template_id = templates.template_id  INNER JOIN documents  ON cre_Doc_Template_Mgt.document_id = documents.document_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Data base';",
    "SELECT ref_template_types.template_type_code  FROM cre_Doc_Template_Mgt  INNER JOIN templates  ON cre_Doc_Template_Mgt.template_id = templates.template_id  INNER JOIN documents  ON cre_Doc_Template_Mgt.document_id = documents.document_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Data base';",
    "SELECT documents.document_name  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK';",
    "SELECT documents.document_name  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK';",
    "SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;",
    "SELECT template_type_code, COUNT(*) AS num_documents FROM cre_Doc_Template_Mgt INNER JOIN templates ON cre_Doc_Template_Mgt.template_id = templates.template_id INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code ORDER BY num_documents DESC;",
    "SELECT template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN documents  ON templates.template_id = documents.template_id  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  GROUP BY template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  WHERE ref_template_types.template_type_code NOT IN  (SELECT templates.template_type_code  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id);",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  WHERE ref_template_types.template_type_code NOT IN  (SELECT templates.template_type_code  FROM templates  INNER JOIN documents  ON templates.template_id = documents.template_id);",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description  FROM ref_template_types;",
    "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description  FROM ref_template_types;",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD';",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  WHERE ref_template_types.template_type_description = 'Book';",
    "SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book';",
    "SELECT DISTINCT ref_template_types.template_type_description  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id;",
    "SELECT DISTINCT template_type_description  FROM cre_Doc_Template_Mgt.ref_template_types  INNER JOIN cre_Doc_Template_Mgt.templates  ON ref_template_types.template_type_code = templates.template_type_code  INNER JOIN cre_Doc_Template_Mgt.documents  ON templates.template_id = documents.template_id;",
    "SELECT templates.template_id  FROM cre_Doc_Template_Mgt.templates  INNER JOIN cre_Doc_Template_Mgt.ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation';",
    "SELECT templates.template_id  FROM cre_Doc_Template_Mgt.templates  INNER JOIN cre_Doc_Template_Mgt.ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation';",
    "SELECT COUNT(paragraph_id)  FROM paragraphs;",
    "SELECT COUNT(paragraph_id)  FROM paragraphs;",
    "SELECT COUNT(paragraph_id)  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Summer Show';",
    "SELECT COUNT(paragraph_id)  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Summer Show';",
    "SELECT paragraph_details FROM paragraphs WHERE paragraph_text = 'Korea'",
    "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%';",
    "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY';",
    "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  WHERE documents.document_name = 'Welcome to NY';",
    "SELECT paragraph_text  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE cre_Doc_Template_Mgt = 'Customer reviews';",
    "SELECT paragraph_text  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE documents.document_name = 'Customer reviews'  AND cre_Doc_Template_Mgt.template_type_description = 'Customer reviews';",
    "SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;",
    "SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;",
    "SELECT documents.document_id, documents.document_name, ref_template_types.template_type_description, COUNT(paragraphs.paragraph_id) FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name, ref_template_types.template_type_description",
    "SELECT document_id  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  GROUP BY document_id  HAVING COUNT(paragraph_id) >= 2;",
    "SELECT documents.document_id  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2;",
    "SELECT documents.document_id, documents.document_name  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1;",
    "SELECT documents.document_id, documents.document_name  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1;",
    "SELECT document_id FROM documents d JOIN (SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id) p ON d.document_id = p.document_id ORDER BY num_paragraphs ASC LIMIT 1;",
    "SELECT document_id FROM documents d JOIN (SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY num_paragraphs ASC LIMIT 1) p ON d.document_id = p.document_id;",
    "SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text BETWEEN 1 AND 2;",
    "SELECT documents.document_id  FROM documents  INNER JOIN templates ON documents.template_id = templates.template_id  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;",
    "SELECT documents.document_id  FROM documents  INNER JOIN templates  ON documents.template_id = templates.template_id  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%'  AND paragraphs.paragraph_text LIKE '%Ireland%';",
    "SELECT documents.document_id  FROM documents  INNER JOIN paragraphs  ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%'  AND paragraphs.paragraph_text LIKE '%Ireland%';",
    "SELECT COUNT(*) FROM course_teach INNER JOIN teacher ON course_teach.teacher_id = teacher.teacher_id INNER JOIN course_arrange ON course_teach.course_id = course_arrange.course_id;",
    "SELECT COUNT(*) FROM course_teach JOIN teacher ON course_teach.teacher_id = teacher.teacher_id;",
    "SELECT name  FROM teacher  ORDER BY age ASC;",
    "SELECT name  FROM teacher  ORDER BY age ASC;",
    "SELECT age, hometown  FROM teacher;",
    "SELECT teacher.age, teacher.hometown FROM teacher;",
    "SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';",
    "SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';",
    "SELECT name  FROM teacher  WHERE age = 32 OR age = 33;",
    "SELECT name  FROM teacher  WHERE age = 32 OR age = 33;",
    "SELECT hometown  FROM teacher  WHERE age = (SELECT MIN(age)                FROM teacher);",
    "SELECT name, hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;",
    "SELECT hometown, COUNT(teacher_id) AS num_teachers FROM teacher GROUP BY hometown;",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC;",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC LIMIT 1;",
    "SELECT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(*) > 1;",
    "SELECT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(*) >= 2;",
    "SELECT teacher.name, course.course_id  FROM course_arrange  INNER JOIN course ON course_arrange.course_id = course.course_id  INNER JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id;",
    "SELECT teacher.name, course.course_id  FROM course_arrange  INNER JOIN course ON course_arrange.course_id = course.course_id  INNER JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id;",
    "SELECT teacher.name, course.course_id  FROM course_arrange  INNER JOIN course ON course_arrange.course_id = course.course_id  INNER JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id  ORDER BY teacher.name ASC;",
    "SELECT teacher.name, course.course_id  FROM course_teach  INNER JOIN course ON course_teach.course_id = course.course_id  INNER JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  ORDER BY teacher.name ASC;",
    "SELECT name  FROM course_teach  JOIN teacher  ON course_teach.teacher_id = teacher.teacher_id  JOIN course  ON course_teach.course_id = course.course_id  WHERE course.course = 'math';",
    "SELECT name  FROM teacher  INNER JOIN course_arrange  ON teacher.teacher_id = course_arrange.teacher_id  INNER JOIN course  ON course_arrange.course_id = course.course_id  WHERE course.course_name = 'math';",
    "SELECT teacher.name, COUNT(course_arrange.course_id)  FROM course_arrange  INNER JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id  GROUP BY teacher.name;",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;",
    "SELECT name  FROM teacher  WHERE teacher_id IN (SELECT teacher_id                       FROM course_arrange                       GROUP BY teacher_id                       HAVING COUNT(*) >= 2);",
    "SELECT name  FROM teacher  WHERE teacher_id IN (SELECT teacher_id                       FROM course_arrange                       GROUP BY teacher_id                       HAVING COUNT(*) >= 2);",
    "SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id                          FROM course_arrange);",
    "SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id                          FROM course_arrange);",
    "SELECT COUNT(*)  FROM visitor  WHERE age < 30;",
    "SELECT visitor.name  FROM visitor  WHERE visitor.level_of_membership > 4  ORDER BY visitor.level_of_membership DESC;",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;",
    "SELECT visitor.name, visitor.level_of_membership  FROM visitor  WHERE visitor.level_of_membership > 4  ORDER BY visitor.age DESC;",
    "SELECT museum.museum_id, museum.name  FROM museum  ORDER BY num_of_staff DESC  LIMIT 1;",
    "SELECT AVG(num_of_staff)  FROM museum  WHERE open_year < 2009;",
    "SELECT open_year, num_of_staff  FROM museum  WHERE name = 'Plaza Museum';",
    "SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff)                        FROM museum                        WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age  FROM museum_visit  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  GROUP BY visitor.id  HAVING COUNT(*) > 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  INNER JOIN visit  ON visitor.id = visit.visitor_id  GROUP BY visitor.id  ORDER BY SUM(visit.total_spent) DESC;",
    "SELECT museum.museum_id, museum.name  FROM museum  INNER JOIN visit  ON museum.museum_id = visit.museum_id  GROUP BY museum.museum_id, museum.name  ORDER BY COUNT(*) DESC;",
    "SELECT name FROM museum WHERE num_of_staff = 0;",
    "SELECT visitor.name, visitor.age  FROM museum_visit  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  ORDER BY num_of_ticket DESC  LIMIT 1;",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;",
    "SELECT SUM(total_spent)  FROM visit  INNER JOIN visitor  ON visit.visitor_id = visitor.id  WHERE visitor.level_of_membership = 1;",
    "SELECT visitor.name  FROM museum_visit  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  WHERE museum.open_year < 2009  AND museum.open_year > 2011;",
    "SELECT COUNT(*)  FROM visitor  WHERE visitor_id NOT IN (SELECT visitor_id                          FROM visit                          INNER JOIN museum                          ON visit.museum_id = museum.museum_id                          WHERE open_year > 2010);",
    "SELECT COUNT(*)  FROM museum  WHERE open_year > 2013 OR open_year < 2008;",
    "SELECT COUNT(*) FROM players;",
    "SELECT COUNT(*) FROM players;",
    "SELECT COUNT(*) FROM matches;",
    "SELECT COUNT(*) FROM matches;",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;",
    "SELECT AVG(winner_rank)  FROM wta_1.matches;",
    "SELECT AVG(winner_rank) FROM matches;",
    "SELECT MAX(loser_rank) FROM matches;",
    "SELECT loser_rank FROM wta_1.matches ORDER BY loser_rank DESC LIMIT 1;",
    "SELECT DISTINCT country_code FROM wta_1.players;",
    "SELECT COUNT(DISTINCT country_code) FROM players;",
    "SELECT COUNT(DISTINCT loser_name) FROM matches;",
    "SELECT DISTINCT loser_name FROM matches;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
    "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013  AND m2.year = 2016;",
    "SELECT first_name, last_name  FROM players  WHERE player_id IN (SELECT winner_id                      FROM matches                      WHERE year IN (2013, 2016)                      GROUP BY winner_id                      HAVING COUNT(*) = 2);",
    "SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);",
    "SELECT p.country_code, p.first_name  FROM players p  INNER JOIN matches m  ON p.player_id = m.winner_id  WHERE m.tourney_name = 'WTA Championships'  AND m.tourney_name = 'Australian Open'  AND m.year = YEAR(CURRENT_DATE);",
    "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.tourney_name = 'WTA Championships'  AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY year ASC LIMIT 1);",
    "SELECT first_name, last_name FROM players ORDER BY birth_date;",
    "SELECT first_name, last_name, birth_date FROM players ORDER BY birth_date;",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
    "SELECT first_name, last_name, birth_date  FROM players  WHERE hand = 'L'  ORDER BY birth_date ASC;",
    "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN matches m  ON p.player_id = m.winner_id OR p.player_id = m.loser_id  INNER JOIN rankings r  ON p.player_id = r.player_id  GROUP BY p.player_id  ORDER BY r.tours DESC  LIMIT 1;",
    "SELECT p.first_name, p.country_code  FROM wta_1.players p  INNER JOIN wta_1.matches m  ON p.player_id = m.winner_id  INNER JOIN wta_1.rankings r  ON p.player_id = r.player_id  GROUP BY p.player_id  ORDER BY r.tours DESC  LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points FROM wta_1.matches JOIN wta_1.players ON wta_1.matches.winner_id = wta_1.players.player_id GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name  FROM players p1  INNER JOIN matches m ON p1.player_id = m.loser_id  INNER JOIN players p2 ON p2.player_id = m.winner_id  WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM players p1 JOIN matches m ON p1.player_id = m.winner_id JOIN players p2 ON p2.player_id = m.loser_id ORDER BY m.minutes DESC LIMIT 1;",
    "SELECT p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;",
    "SELECT first_name, AVG(ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;",
    "SELECT first_name, SUM(winner_rank_points) AS total_ranking_points FROM players p INNER JOIN matches m ON p.player_id = m.winner_id GROUP BY first_name;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id HAVING COUNT(*) > 50);",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;",
    "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;",
    "SELECT COUNT(tourney_id) AS total_tours, ranking_date  FROM matches  INNER JOIN rankings  ON matches.tourney_date = rankings.ranking_date  GROUP BY ranking_date;",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
    "SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year;",
    "SELECT winner_name, winner_rank  FROM matches  JOIN players ON players.player_id = matches.winner_id  ORDER BY tourney_date DESC  LIMIT 3;",
    "SELECT wta_1.players.first_name, wta_1.players.last_name, wta_1.matches.winner_rank  FROM wta_1.players  INNER JOIN wta_1.matches  ON wta_1.players.player_id = wta_1.matches.winner_id  ORDER BY wta_1.matches.tourney_date DESC  LIMIT 3;",
    "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_id IN (SELECT player_id                      FROM players                      WHERE hand = 'L')  AND tourney_name = 'WTA Championships';",
    "SELECT COUNT(*)  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  WHERE players.hand = 'L'  AND rankings.tourney_name = 'WTA Championships';",
    "SELECT first_name, country_code, birth_date  FROM players  INNER JOIN rankings  ON players.player_id = rankings.player_id  INNER JOIN matches  ON rankings.player_id = matches.winner_id  WHERE rankings.ranking_points = (SELECT MAX(rankings.ranking_points)                                  FROM rankings                                  INNER JOIN matches                                  ON rankings.player_id = matches.winner_id)",
    "SELECT first_name, country_code, birth_date  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;",
    "SELECT hand, COUNT(*) AS num_players FROM wta_1.players GROUP BY hand;",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';",
    "SELECT name, tonnage FROM ship ORDER BY name DESC;",
    "SELECT battle.name, battle.date, battle.result FROM battle;",
    "SELECT MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM death;",
    "SELECT AVG(injured) FROM death;",
    "SELECT death.killed, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
    "SELECT battle.name, battle.result  FROM battle  WHERE battle.bulgarian_commander != 'Boril';",
    "SELECT battle.id, battle.name  FROM battle  INNER JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'",
    "SELECT battle.id, battle.name  FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  GROUP BY battle.id, battle.name  HAVING SUM(killed) > 10;",
    "SELECT ship.id, ship.name  FROM ship  INNER JOIN battle_death ON battle_death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(battle_death.injured) DESC  LIMIT 1;",
    "SELECT DISTINCT battle.name  FROM battle  WHERE battle.bulgarian_commander = 'Kaloyan'  AND battle.latin_commander = 'Baldwin I';",
    "SELECT COUNT(DISTINCT result) FROM battle;",
    "SELECT COUNT(*) FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage = '225' AND battle.result != 'lost';",
    "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');",
    "SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  INNER JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.location = 'English Channel'  AND ship.disposition_of_ship = 'no ships lost'",
    "SELECT death.note  FROM battle_death  INNER JOIN ship ON battle_death.lost_in_battle = ship.id  INNER JOIN death ON battle_death.caused_by_ship_id = death.id  WHERE ship.location LIKE '%East%';",
    ", grade , other_details  SELECT line_1, line_2 FROM addresses;",
    ", grade , other_details  SELECT line_1, line_2 FROM addresses;",
    ", grade  SELECT COUNT(*) FROM courses;",
    ", grade  SELECT COUNT(*) FROM courses;",
    ", grade , other_details  SELECT course_description  FROM courses  WHERE course_name = 'math';",
    ", grade , other_details  SELECT course_description FROM courses;",
    ", grade , other_details  SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';",
    ", grade  SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';",
    ", grade  SELECT departments.department_name, departments.department_id FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC;",
    ", grade , other_details  SELECT department_name, department_id FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY department_name, department_id ORDER BY COUNT(*) DESC LIMIT 1;",
    ", grade  SELECT COUNT(DISTINCT d.department_id)  FROM departments d  INNER JOIN degree_programs dp ON d.department_id = dp.department_id;",
    "SELECT COUNT(DISTINCT d.department_name)  FROM departments d  INNER JOIN degree_programs dp ON d.department_id = dp.department_id;",
    ", grade  SELECT DISTINCT degree_summary_name  FROM degree_programs;",
    ", grade  SELECT COUNT(DISTINCT degree_summary_name)  FROM degree_programs;",
    ", grade  SELECT COUNT(DISTINCT degree_program_id)  FROM degree_programs  WHERE department_id IN (SELECT department_id                          FROM departments                          WHERE department_name = 'Engineering');",
    ", grade  SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs WHERE department_name = 'Engineering';",
    ", grade , other_details  SELECT section_name, section_description FROM sections;",
    ", grade , other_details  SELECT section_name, section_description FROM sections;",
    ", grade , other_details  SELECT courses.course_name, courses.course_id  FROM courses  INNER JOIN sections ON courses.course_id = sections.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) <= 2;",
    ", grade , other_details  SELECT courses.course_name, courses.course_id  FROM courses  INNER JOIN sections  ON courses.course_id = sections.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) < 2;",
    ", grade  SELECT section_name FROM sections ORDER BY section_name DESC;",
    ", grade  SELECT section_name FROM sections ORDER BY section_name DESC;",
    ", grade , other_details  SELECT semester_name, semester_id FROM semesters WHERE semester_id IN (SELECT semester_id                       FROM student_enrolment                       GROUP BY semester_id                       ORDER BY COUNT(*) DESC                       LIMIT 1);",
    ", grade  SELECT semesters.semester_name, semesters.semester_id FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    ", grade , other_details  SELECT department_description  FROM departments  WHERE department_name LIKE '%the computer%';",
    ", grade , other_details  SELECT department_description  FROM departments  WHERE department_name LIKE '%computer%';",
    ", grade , other_details  SELECT first_name, middle_name, last_name, student_id  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN semesters ON student_enrolment.semester_id = semesters.semester_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE semesters.semester_name = 'one semester'  AND degree_programs.degree_summary_name = '2 degree programs'",
    ", grade  SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s INNER JOIN student_enrolment se ON s.student_id = se.student_id INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id INNER JOIN semesters sm ON se.semester_id = sm.semester_id GROUP BY s.student_id HAVING COUNT(DISTINCT dp.degree_program_id) = 2;",
    ", grade , other_details  SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelor'",
    ", grade , other_details  SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelors'",
    ", grade , other_details  SELECT degree_summary_name, COUNT(*) AS num_enrolled FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_enrolled DESC LIMIT 1;",
    ", grade , other_details  SELECT degree_summary_name, COUNT(student_id) AS num_students FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    ", grade  SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC;",
    ", grade , other_details  SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = (SELECT degree_program_id                            FROM student_enrolment                            GROUP BY degree_program_id                            ORDER BY COUNT(*) DESC                            LIMIT 1);",
    ", grade , other_details  SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  INNER JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id  GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name  ORDER BY num_enrollments DESC  LIMIT 1;",
    ", grade , other_details  SELECT first_name, middle_name, last_name, student_id, COUNT(student_enrolment_id) AS num_enrollments FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1;",
    ", grade , other_details  SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id                           FROM student_enrolment);",
    ", grade  SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id                           FROM student_enrolment);",
    ", grade , other_details  SELECT course_name  FROM courses c  INNER JOIN student_enrolment_courses sec  ON c.course_id = sec.course_id  INNER JOIN student_enrolment se  ON sec.student_enrolment_id = se.student_enrolment_id;",
    ", grade , other_details  SELECT course_name  FROM courses c  INNER JOIN sections s  ON c.course_id = s.course_id  INNER JOIN student_enrolment_courses sec  ON s.section_id = sec.course_id  INNER JOIN student_enrolment se  ON sec.student_enrolment_id = se.student_enrolment_id  GROUP BY course_name;",
    ", grade  SELECT course_name, COUNT(*) AS num_enrollments FROM courses INNER JOIN sections ON courses.course_id = sections.course_id INNER JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.section_id GROUP BY course_name ORDER BY num_enrollments DESC LIMIT 1;",
    ", grade  SELECT course_name, COUNT(*) AS num_students FROM courses c INNER JOIN sections s ON c.course_id = s.course_id INNER JOIN student_enrolment_courses sec ON s.section_id = sec.course_id GROUP BY course_name ORDER BY num_students DESC LIMIT 1;",
    ", other_details  SELECT last_name  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id                         FROM student_enrolment)",
    ", grade , other_details  SELECT last_name  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id                         FROM student_enrolment)",
    ", course_result  SELECT transcript_date, transcript_id  FROM transcripts  INNER JOIN transcript_contents  ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_id  HAVING COUNT(*) >= 2;",
    "SELECT transcript_date, transcript_id  FROM transcripts  INNER JOIN transcript_contents  ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_id  HAVING COUNT(*) >= 2;",
    ", grade , other_details  SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward';",
    ", grade , other_details  SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward';",
    ", grade , other_details  SELECT first_name, middle_name, last_name  FROM students  ORDER BY date_first_registered  LIMIT 1;",
    ", grade  SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;",
    ", grade  SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  INNER JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id  ORDER BY transcripts.transcript_date ASC  LIMIT 1;",
    ", grade  SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);",
    ", grade  SELECT first_name  FROM students  WHERE current_address_id != permanent_address_id;",
    ", grade  SELECT first_name FROM students WHERE permanent_address_id != current_address_id;",
    ", grade , other_details  SELECT addresses.address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses INNER JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    ", grade  SELECT address_id, line_1, line_2 FROM addresses WHERE address_id IN (SELECT MAX(current_address_id)                      FROM students                      GROUP BY current_address_id);",
    ", other_details  SELECT AVG(transcript_date) FROM transcripts;",
    "SELECT AVG(transcript_date) FROM transcripts;",
    ", grade , other_details  SELECT transcript_date, other_details  FROM transcripts  ORDER BY transcript_date ASC  LIMIT 1;",
    ", transcript_grade , other_details  SELECT MIN(transcript_date) FROM transcripts;",
    ", grade , other_details  SELECT COUNT(*) FROM transcripts;",
    ", grade  SELECT COUNT(*) FROM transcripts;",
    ", other_details  SELECT MAX(transcript_date) FROM transcripts;",
    ", grade , other_details  SELECT MAX(transcript_date)  FROM transcripts;",
    ", other_details  SELECT MAX(COUNT(student_course_id)) AS max_times, student_course_id FROM transcript_contents GROUP BY student_course_id;",
    "SELECT MAX(COUNT(student_course_id)) AS max_times, student_course_id FROM student_enrolment_courses GROUP BY student_course_id;",
    ", result  SELECT transcript_date, transcript_id  FROM transcripts  ORDER BY result ASC  LIMIT 1;",
    ", result  SELECT transcript_date, transcript_id FROM transcripts t INNER JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;",
    ", grade , other_details  SELECT semester_name  FROM semesters  WHERE semester_id IN (SELECT semester_id                        FROM student_enrolment                        WHERE degree_program_id IN (SELECT degree_program_id                                                   FROM degree_programs                                                   WHERE degree_summary_name IN ('Master', 'Bachelor')));",
    ", grade , other_details  SELECT semester_id  FROM semesters  INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name IN ('Masters', 'Bachelors')  GROUP BY semester_id;",
    ", other_details  SELECT COUNT(DISTINCT current_address_id)  FROM students;",
    ", grade , other_details  SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details  FROM addresses a  INNER JOIN students s ON s.current_address_id = a.address_id OR s.permanent_address_id = a.address_id;",
    ", grade , other_details  SELECT s.student_id, s.current_address_id, s.permanent_address_id, s.first_name, s.middle_name, s.last_name, s.cell_mobile_number, s.email_address, s.ssn, s.date_first_registered, s.date_left, s.other_student_details  FROM students s  ORDER BY s.last_name DESC, s.first_name DESC;",
    ", grade , other_details  SELECT student_id, first_name, middle_name, last_name, other_student_details  FROM students  ORDER BY last_name DESC;",
    ", grade  SELECT section_name, section_description FROM sections;",
    ", grade  SELECT section_description FROM sections WHERE section_name = 'h';",
    ", grade , other_details  SELECT first_name  FROM students  WHERE (permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti'))  OR cell_mobile_number = '09700166582';",
    ", grade , other_details  SELECT first_name  FROM students  WHERE (permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582');",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones';",
    "SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones';",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';",
    "SELECT cartoon.title, cartoon.directed_by  FROM cartoon  ORDER BY cartoon.original_air_date;",
    "SELECT cartoon.title, cartoon.directed_by  FROM cartoon  INNER JOIN tv_series  ON cartoon.id = tv_series.id  ORDER BY tv_series.air_date;",
    "SELECT title  FROM cartoon  WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';",
    "SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';",
    "SELECT country, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY country ORDER BY num_tv_channels DESC;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content)  FROM tv_channel;",
    "SELECT COUNT(DISTINCT series_name) + COUNT(DISTINCT content)  FROM tv_channel;",
    "SELECT tv_channel.content  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.series_name = 'Sky Radio';",
    "SELECT content FROM tvshow WHERE series_name = 'Sky Radio';",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';",
    "SELECT package_option  FROM tv_channel  WHERE series_name = 'Sky Radio';",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English';",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English';",
    "SELECT language, COUNT(*) AS num_tv_channel FROM tv_channel GROUP BY language ORDER BY num_tv_channel ASC;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY language;",
    "SELECT language, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY language;",
    "SELECT tv_channel.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  INNER JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle!';",
    "SELECT tvshow.series_name  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle';",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tvshow.series_name = 'Sky Radio';",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tv_channel  ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = 'Sky Radio';",
    "SELECT tv_series.episode, tv_series.rating  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  ORDER BY tv_series.rating;",
    "SELECT episode, rating FROM tv_series ORDER BY rating;",
    "SELECT tv_series.episode, tv_series.rating  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tvshow.series_name = 'TV Series'  ORDER BY tv_series.rating DESC  LIMIT 3;",
    "SELECT episode, rating  FROM tv_series  ORDER BY rating DESC  LIMIT 3;",
    "SELECT MIN(share) AS min_share, MAX(share) AS max_share FROM tv_series;",
    "SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM tv_series;",
    "SELECT tv_series.air_date  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tv_series.episode = 'A Love of a Lifetime';",
    "SELECT air_date  FROM tv_series  WHERE episode = 'A Love of a Lifetime';",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';",
    "SELECT tv_channel.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = 'A Love of a Lifetime';",
    "SELECT tv_series.episode  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tv_series.episode = 'A Love of a Lifetime';",
    "SELECT tv_series.episode  FROM tvshow  INNER JOIN tv_series  ON tvshow.id = tv_series.id  WHERE tvshow.series_name = 'Sky Radio'  AND tvshow.channel = 'TV Channel';",
    "SELECT episode  FROM tv_series  WHERE channel IN (SELECT id                    FROM tv_channel                    WHERE series_name = 'Sky Radio');",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;",
    "SELECT directed_by, COUNT(title) AS num_cartoons FROM cartoon GROUP BY directed_by;",
    "SELECT production_code, channel  FROM cartoon  ORDER BY original_air_date DESC  LIMIT 1;",
    "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;",
    "SELECT tv_channel.series_name, tv_channel.package_option  FROM tv_channel  WHERE tv_channel.hight_definition_tv = 'Yes';",
    "SELECT tv_channel.package_option, tv_series.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'Yes';",
    "SELECT tv_channel.country  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  INNER JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey';",
    "SELECT tvshow.country  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.id  INNER JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.written_by = 'Todd Casey'  AND tvshow.content = 'cartoon';",
    "SELECT tv_channel.country  FROM tv_channel  LEFT JOIN tv_series  ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey'  GROUP BY tv_channel.country;",
    "SELECT tvshow.country  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.id  JOIN cartoon ON tv_series.id = cartoon.id  WHERE cartoon.written_by = 'Todd Casey'  AND tvshow.series_name != 'cartoon'",
    "SELECT tvshow.series_name, tvshow.country  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');",
    "SELECT tvshow.series_name, tvshow.country  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang';",
    "SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English';",
    "SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country  FROM tv_channel  WHERE tv_channel.language != 'English';",
    "SELECT tv_channel.id  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  GROUP BY tv_channel.country  HAVING COUNT(*) > 2;",
    "SELECT tv_channel.id  FROM tv_channel  GROUP BY tv_channel.id  HAVING COUNT(tv_channel.id) > 2;",
    "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.id NOT IN (SELECT channel                              FROM cartoon                              WHERE directed_by = 'Ben Jones');",
    "SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Ben Jones' );",
    "SELECT tv_channel.package_option  FROM tv_channel  LEFT JOIN tv_series  ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon  ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones';",
    "SELECT tv_channel.package_option  FROM tv_channel  JOIN tv_series  ON tv_channel.id = tv_series.channel  JOIN cartoon  ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones'  AND tv_channel.content != 'cartoon';",
    "SELECT COUNT(*) FROM poker_player;",
    "SELECT COUNT(*) FROM poker_player;",
    "SELECT poker_player.earnings  FROM poker_player  ORDER BY poker_player.earnings DESC;",
    "SELECT poker_player.earnings  FROM poker_player  ORDER BY poker_player.earnings DESC;",
    "SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player;",
    "SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player;",
    "SELECT AVG(earnings) FROM poker_player;",
    "SELECT AVG(earnings) FROM poker_player;",
    "SELECT money_rank  FROM poker_player  ORDER BY earnings DESC  LIMIT 1;",
    "SELECT money_rank  FROM poker_player  ORDER BY earnings DESC  LIMIT 1;",
    "SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;",
    "SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;",
    "SELECT name FROM people WHERE people_id IN (SELECT people_id FROM poker_player);",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id;",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  WHERE earnings > 300000;",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  WHERE earnings > 300000;",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY final_table_made ASC;",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY final_table_made ASC;",
    "SELECT birth_date  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY earnings ASC  LIMIT 1;",
    "SELECT birth_date  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY earnings ASC  LIMIT 1;",
    "SELECT money_rank  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height = (SELECT MAX(height) FROM people)",
    "SELECT money_rank  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  ORDER BY height DESC  LIMIT 1;",
    "SELECT AVG(earnings)  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height > 200;",
    "SELECT AVG(earnings)  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height > 200;",
    "SELECT name  FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY earnings DESC;",
    "SELECT name FROM people  INNER JOIN poker_player  ON people.people_id = poker_player.people_id  ORDER BY earnings DESC;",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality;",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality;",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality ORDER BY num_people DESC LIMIT 1;",
    "SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) > 1;",
    "SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) >= 2;",
    "SELECT people.name, people.birth_date  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  ORDER BY people.name ASC;",
    "SELECT people.name, people.birth_date  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  ORDER BY people.name ASC;",
    "SELECT name  FROM people  WHERE nationality != 'Russia';",
    "SELECT name  FROM people  WHERE nationality != 'Russia';",
    "SELECT name  FROM people  WHERE people_id NOT IN (SELECT people_id                          FROM poker_player);",
    "SELECT name  FROM people  WHERE people_id NOT IN (SELECT people_id                          FROM poker_player);",
    "SELECT COUNT(DISTINCT nationality) FROM people;",
    "SELECT COUNT(DISTINCT nationality)  FROM people;",
    "_at  SELECT COUNT(DISTINCT state) FROM votes;",
    "_at  SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;",
    "_at  SELECT vote_id, phone_number, state  FROM votes  JOIN voter_1 ON votes.state = voter_1.area_code_state;",
    "_at  SELECT MAX(area_code), MIN(area_code) FROM voter_1;",
    "_at  SELECT created_at  FROM votes  WHERE state = 'CA';",
    "_at  SELECT contestant_name  FROM contestants  WHERE contestant_name != 'Jessie Alloway';",
    "_time  SELECT DISTINCT state, created_time FROM votes;",
    "_at  SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (   SELECT contestant_number   FROM votes   GROUP BY contestant_number   HAVING COUNT(*) >= 2 );",
    "_at  SELECT contestant_number, contestant_name  FROM contestants  INNER JOIN votes  ON contestants.contestant_number = votes.contestant_number  INNER JOIN voter_1  ON votes.phone_number = voter_1.phone_number  AND votes.state = voter_1.area_code_state  GROUP BY contestant_number, contestant_name  ORDER BY COUNT(*) ASC  LIMIT 1;",
    "_at  SELECT COUNT(*)  FROM votes  WHERE state IN ('NY', 'CA');",
    "_at  SELECT COUNT(*) FROM contestants c LEFT JOIN votes v ON c.contestant_number = v.contestant_number WHERE v.vote_id IS NULL;",
    "_at  SELECT area_code, COUNT(*) AS num_votes FROM voter_1 JOIN votes ON voter_1.area_code_state = votes.state GROUP BY area_code ORDER BY num_votes DESC LIMIT 1;",
    "_date  SELECT created_date, state, phone_number  FROM votes  INNER JOIN contestants  ON votes.contestant_number = contestants.contestant_number  INNER JOIN voter_1  ON votes.phone_number = voter_1.phone_number  WHERE contestants.contestant_name = 'Tabatha Gehling';",
    "_at  SELECT area_code_state.area_code  FROM voter_1  INNER JOIN votes ON voter_1.phone_number = votes.phone_number  INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number  WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')  GROUP BY area_code_state.area_code  HAVING COUNT(*) = 2;",
    "_at  SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%';",
    "SELECT name  FROM country  WHERE indepyear > 1950;",
    "|  SELECT name FROM country WHERE indepyear > 1950;",
    "|  SELECT COUNT(*)  FROM country  WHERE governmentform = 'Republic';",
    "SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%republic%';",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';",
    "SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';",
    "SELECT continent  FROM country  WHERE name = 'Anguilla';",
    "|  SELECT continent  FROM country  WHERE code = (SELECT countrycode                FROM city                WHERE name = 'Anguilla');",
    "SELECT region FROM country WHERE name = 'Kabul';",
    "SELECT region FROM country WHERE name = 'Kabul';",
    "SELECT language, MAX(percentage)  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language;",
    "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code                       FROM country                       WHERE name = 'Aruba')  AND isofficial = 'T';",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';",
    "SELECT region, population FROM country WHERE name = 'Angola';",
    "|  SELECT region, population FROM country WHERE name = 'Angola';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';",
    "SELECT country.name  FROM country  WHERE country.continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1;",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
    "|  SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';",
    "SELECT COUNT(*) AS 'Number of People Living in Asia', MAX(gnp) AS 'Largest GNP' FROM world_1 w1 JOIN country c ON w1.countrycode = c.code WHERE c.continent = 'Asia';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform LIKE '%Republic%';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform LIKE '%Republic%';",
    "SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');",
    "SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');",
    "SELECT COUNT(*)  FROM city  WHERE district = 'Gelderland';",
    "|  SELECT SUM(population) FROM city WHERE district = 'Gelderland';",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';",
    "|  SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM country WHERE continent = 'North America');",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage;",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage;",
    "SELECT COUNT(DISTINCT governmentform)  FROM country  WHERE continent = 'Africa';",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';",
    "SELECT SUM(percentage)  FROM countrylanguage  WHERE countrycode = 'ABW';",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';",
    "SELECT COUNT(*) FROM countrylanguage WHERE isofficial = 'T' AND countrycode = 'AFG';",
    "SELECT COUNT(*) FROM countrylanguage WHERE isofficial = 'T';",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY MAX(percentage) DESC  LIMIT 1;",
    "SELECT country.name  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY SUM(percentage) DESC  LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT continent, COUNT(language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC;",
    "SELECT COUNT(*)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'Dutch')  AND isofficial = 'T';",
    "SELECT COUNT(*)  FROM countrylanguage  WHERE language IN ('English', 'Dutch') AND isofficial = 'T';",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'French')  GROUP BY country.name  HAVING COUNT(*) = 2;",
    "|  SELECT country.name  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'French')  GROUP BY country.name  HAVING COUNT(*) = 2;",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'T'  AND countrylanguage.countrycode IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'French'      AND isofficial = 'T' )",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'French')  AND isofficial = 'T';",
    "SELECT COUNT(DISTINCT continent)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Chinese'",
    "SELECT COUNT(DISTINCT continent)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Chinese'",
    "SELECT region  FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language IN ('English', 'Dutch'))",
    "SELECT region  FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language IN ('Dutch', 'English'))",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'Dutch')  AND isofficial = 'T';",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'Dutch')  AND isofficial = 'T';",
    "SELECT language, MAX(percentage)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE continent = 'Asia'  GROUP BY language;",
    "SELECT language, MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language;",
    "SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  GROUP BY language  HAVING COUNT(countrycode) = 1  AND governmentform LIKE '%Republic%';",
    "SELECT language  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE isofficial = 'T'  AND governmentform LIKE '%Republic%'  GROUP BY language  HAVING COUNT(*) = 1;",
    "SELECT city.name  FROM city  INNER JOIN countrylanguage  ON city.countrycode = countrylanguage.countrycode  WHERE language = 'English'  ORDER BY population DESC  LIMIT 1;",
    "SELECT name, population  FROM city  WHERE countrycode IN (SELECT code                        FROM country                        WHERE language = 'English')  ORDER BY population DESC  LIMIT 1;",
    "SELECT country.name, country.population, country.lifeexpectancy  FROM country  WHERE country.continent = 'Asia'  ORDER BY country.surfacearea DESC  LIMIT 1;",
    "SELECT country.name, country.population, country.lifeexpectancy  FROM country  WHERE country.continent = 'Asia'  ORDER BY country.surfacearea DESC  LIMIT 1;",
    "SELECT AVG(lifeexpectancy)  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE isofficial = 'F' AND language = 'English';",
    "SELECT AVG(lifeexpectancy)  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT SUM(population)  FROM city  INNER JOIN country  ON city.countrycode = country.code  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT COUNT(*)  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT language  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE headofstate = 'Beatrix'  AND isofficial = 'T';",
    "SELECT language  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE headofstate = 'Beatrix'  AND isofficial = 'T';",
    "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930  AND isofficial = 'T';",
    "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930;",
    "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea)                       FROM country                       WHERE continent = 'Europe');",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Africa'  AND country.population < (SELECT MIN(country.population)                            FROM country                            WHERE country.continent = 'Asia');",
    "SELECT c1.name  FROM country c1  JOIN country c2  ON c2.continent = 'Asia'  WHERE c1.continent = 'Africa'  AND c1.population < c2.population;",
    "SELECT country.name  FROM country  WHERE country.continent = 'Asia'  AND country.population > (SELECT MAX(country.population)                            FROM country                            WHERE country.continent = 'Africa');",
    "SELECT country.name  FROM country  WHERE country.continent = 'Asia'  AND country.population > (SELECT MAX(country.population)                            FROM country                            WHERE country.continent = 'Africa');",
    "SELECT countrycode  FROM countrylanguage  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT countrycode FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');",
    "SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE language != 'English'",
    "SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE language != 'English'",
    "|  SELECT code  FROM country  WHERE governmentform != 'Republic'  AND code NOT IN (SELECT countrycode                   FROM countrylanguage                   WHERE language = 'English');",
    "SELECT code  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')  AND governmentform NOT LIKE '%Republic%';",
    "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'F'",
    "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'F'",
    "|  SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';",
    "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';",
    "|  SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1;",
    "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1;",
    "SELECT country.name, country.population, country.headofstate  FROM country  ORDER BY country.surfacearea DESC  LIMIT 1;",
    "SELECT name, population, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);",
    "SELECT country.name, COUNT(countrylanguage.language)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) >= 3;",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) > 2;",
    "SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
    "SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
    "SELECT governmentform, SUM(population)  FROM city  INNER JOIN country  ON city.countrycode = country.code  WHERE lifeexpectancy > 72  GROUP BY governmentform;",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;",
    "SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country WHERE lifeexpectancy < 72 GROUP BY continent;",
    "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_life_expectancy  FROM country  WHERE lifeexpectancy < 72  GROUP BY continent;",
    "SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;",
    "SELECT name  FROM country  ORDER BY population DESC  LIMIT 3;",
    "SELECT name  FROM country  ORDER BY population DESC  LIMIT 3;",
    "|  SELECT name FROM country ORDER BY population ASC LIMIT 3;",
    "SELECT name  FROM country  ORDER BY population ASC  LIMIT 3;",
    "SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';",
    "SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Europe'  AND country.population = 80000;",
    "SELECT name  FROM country  WHERE continent = 'Europe'  AND population = 80000;",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT country.population, country.surfacearea  FROM country  WHERE country.continent = 'North America'  AND country.surfacearea > 3000;",
    "|  SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
    "SELECT name  FROM city  WHERE population BETWEEN 160000 AND 900000;",
    "SELECT language, MAX(percentage) FROM countrylanguage GROUP BY language;",
    "SELECT language, COUNT(*) AS num_countries FROM countrylanguage GROUP BY language ORDER BY num_countries DESC LIMIT 1;",
    "SELECT country.name, countrylanguage.language, MAX(countrylanguage.percentage) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name;",
    "SELECT country.code, countrylanguage.language, countrylanguage.percentage  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  ORDER BY countrylanguage.percentage DESC;",
    "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T'  ORDER BY percentage DESC;",
    "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;",
    "SELECT country.code  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  ORDER BY percentage DESC;",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50);",
    "SELECT COUNT(*) FROM conductor;",
    "SELECT COUNT(*) FROM conductor;",
    "SELECT name FROM conductor ORDER BY age ASC;",
    "SELECT conductor.name  FROM conductor  ORDER BY conductor.age;",
    "SELECT conductor.name  FROM conductor  WHERE conductor.nationality != 'USA';",
    "SELECT name  FROM conductor  WHERE nationality != 'USA';",
    "SELECT record_company, year_of_founded  FROM orchestra  ORDER BY year_of_founded DESC;",
    "SELECT record_company, year_of_founded FROM orchestra ORDER BY year_of_founded DESC;",
    "SELECT AVG(attendance) FROM show;",
    "SELECT AVG(attendance) FROM show;",
    "SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final';",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';",
    "SELECT COUNT(DISTINCT nationality)  FROM conductor;",
    "SELECT COUNT(DISTINCT nationality)  FROM conductor;",
    "SELECT conductor.name, conductor.year_of_work  FROM conductor  ORDER BY conductor.year_of_work DESC;",
    "SELECT conductor.name, conductor.year_of_work FROM conductor ORDER BY conductor.year_of_work DESC;",
    "SELECT conductor.name, MAX(conductor.year_of_work)  FROM conductor  GROUP BY conductor.name;",
    "SELECT conductor.name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1;",
    "SELECT conductor.name, orchestra.orchestra  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(orchestra.orchestra_id) > 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(*) > 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008;",
    "SELECT conductor.name  FROM conductor  INNER JOIN orchestra  ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded > 2008;",
    "SELECT record_company, COUNT(orchestra) FROM orchestra GROUP BY record_company;",
    "SELECT record_company, COUNT(orchestra) FROM orchestra GROUP BY record_company;",
    "SELECT orchestra.orchestra, orchestra.record_company  FROM orchestra  ORDER BY orchestra.orchestra ASC;",
    "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  GROUP BY major_record_format  ORDER BY frequency DESC;",
    "SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1;",
    "SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1;",
    "SELECT orchestra  FROM orchestra  LEFT JOIN performance  ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.performance_id IS NULL;",
    "SELECT orchestra  FROM orchestra  LEFT JOIN performance  ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.performance_id IS NULL;",
    "SELECT orchestra.orchestra, orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded < 2003 OR orchestra.year_of_founded > 2003;",
    "SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded < 2003  INTERSECT  SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded > 2003;",
    "SELECT COUNT(*)  FROM orchestra  WHERE major_record_format IN ('CD', 'DVD');",
    "SELECT COUNT(*)  FROM orchestra  WHERE major_record_format IN ('CD', 'DVD');",
    "SELECT year_of_founded  FROM orchestra  GROUP BY orchestra_id  HAVING COUNT(*) > 1;",
    "SELECT year_of_founded  FROM orchestra  WHERE orchestra_id IN (SELECT orchestra_id                         FROM performance                         GROUP BY orchestra_id                         HAVING COUNT(*) > 1);",
    "SELECT COUNT(*) FROM highschooler;",
    "SELECT COUNT(*) FROM highschooler;",
    "SELECT name, grade FROM highschooler;",
    "SELECT highschooler.name, highschooler.grade FROM highschooler;",
    "SELECT highschooler.grade FROM highschooler;",
    "SELECT highschooler.name, highschooler.grade FROM highschooler;",
    "SELECT grade FROM highschooler WHERE name = 'Kyle';",
    "SELECT grade FROM highschooler WHERE name = 'Kyle';",
    "SELECT name FROM highschooler WHERE grade = 10;",
    "SELECT name FROM highschooler WHERE grade = 10;",
    "SELECT id FROM highschooler WHERE name = 'Kyle';",
    "SELECT id FROM highschooler WHERE name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
    "|  SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade HAVING num_students >= 4;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade HAVING num_highschoolers >= 4;",
    "SELECT highschooler.id, COUNT(friend.friend_id) AS number_of_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;",
    "SELECT name  FROM highschooler  WHERE id = (SELECT student_id              FROM friend              GROUP BY student_id              ORDER BY COUNT(*) DESC              LIMIT 1);",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.name  HAVING COUNT(f.friend_id) >= 3;",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.name  HAVING COUNT(f.friend_id) >= 3;",
    "SELECT h.name  FROM highschooler h  INNER JOIN friend f  ON h.id = f.student_id  WHERE h.name = 'Kyle'",
    "SELECT h.name  FROM highschooler h  INNER JOIN friend f  ON h.id = f.student_id  WHERE h.name = 'Kyle'  INNER JOIN highschooler h2  ON f.friend_id = h2.id;",
    "SELECT COUNT(*) FROM highschooler hs JOIN friend f ON hs.id = f.student_id WHERE hs.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler hs JOIN friend f ON hs.id = f.student_id WHERE hs.name = 'Kyle';",
    "SELECT highschooler.id FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id LEFT JOIN likes ON highschooler.id = likes.student_id WHERE friend.friend_id IS NULL AND likes.liked_id IS NULL;",
    "SELECT highschooler.id FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id LEFT JOIN likes ON highschooler.id = likes.student_id WHERE friend.friend_id IS NULL AND likes.liked_id IS NULL;",
    "SELECT hs.name FROM highschooler hs LEFT JOIN friend f ON hs.id = f.student_id WHERE f.friend_id IS NULL;",
    "SELECT highschooler.name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL;",
    "SELECT hs.id FROM highschooler hs INNER JOIN friend f ON hs.id = f.student_id INNER JOIN likes l ON hs.id = l.student_id GROUP BY hs.id HAVING COUNT(f.friend_id) > 0 AND COUNT(l.liked_id) > 0;",
    "SELECT highschooler.id FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id INNER JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(friend.friend_id) > 0 AND COUNT(likes.liked_id) > 0;",
    "SELECT highschooler.name  FROM highschooler  INNER JOIN friend ON highschooler.id = friend.student_id  INNER JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name  HAVING COUNT(friend.friend_id) > 0 AND COUNT(likes.liked_id) > 0;",
    "SELECT hs.name  FROM highschooler hs  INNER JOIN friend f ON hs.id = f.student_id  INNER JOIN likes l ON hs.id = l.student_id;",
    "SELECT highschooler.id, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;",
    "SELECT highschooler.id, COUNT(likes.liked_id) AS likes_count FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;",
    "SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON f.friend_id = l.student_id GROUP BY h.name;",
    "SELECT h.name, COUNT(l.liked_id) AS likes FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON f.friend_id = l.student_id GROUP BY h.name;",
    "SELECT name  FROM highschooler  WHERE id = (SELECT student_id              FROM likes              GROUP BY student_id              ORDER BY COUNT(*) DESC              LIMIT 1);",
    "SELECT h.name  FROM highschooler h  INNER JOIN likes l  ON h.id = l.student_id  GROUP BY h.name  ORDER BY COUNT(l.liked_id) DESC  LIMIT 1;",
    "SELECT h1.name  FROM highschooler h1  JOIN likes l1 ON h1.id = l1.student_id  JOIN likes l2 ON l1.liked_id = l2.liked_id  WHERE l2.student_id = l1.student_id  GROUP BY h1.name  HAVING COUNT(*) >= 2;",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.name  HAVING COUNT(*) >= 2;",
    "SELECT highschooler.name  FROM highschooler  INNER JOIN friend ON highschooler.id = friend.student_id  INNER JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name  HAVING highschooler.grade > 5  AND COUNT(friend.friend_id) >= 2  AND COUNT(likes.liked_id) >= 2;",
    "SELECT highschooler.name  FROM highschooler  INNER JOIN friend ON highschooler.id = friend.student_id  INNER JOIN likes ON highschooler.id = likes.student_id  WHERE highschooler.grade > 5  GROUP BY highschooler.name  HAVING COUNT(friend.friend_id) >= 2  AND COUNT(likes.liked_id) >= 2;",
    "SELECT COUNT(*) FROM highschooler hs JOIN likes l ON hs.id = l.student_id WHERE hs.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler hs JOIN likes l ON hs.id = l.student_id WHERE hs.name = 'Kyle';",
    "SELECT AVG(grade) FROM highschooler WHERE EXISTS (SELECT *               FROM friend               WHERE highschooler.id = friend.student_id)",
    "SELECT AVG(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id                   FROM friend                   WHERE friend_id IN (SELECT student_id                                       FROM highschooler))",
    "SELECT DISTINCT state  FROM owners  INNER JOIN professionals  ON owners.state = professionals.state;",
    "SELECT DISTINCT o.state, p.state  FROM owners o  INNER JOIN professionals p  ON o.state = p.state;",
    "SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;",
    "SELECT AVG(age)  FROM dogs  INNER JOIN treatments  ON dogs.dog_id = treatments.dog_id;",
    "SELECT p.professional_id, p.last_name, p.cell_number  FROM professionals p  INNER JOIN treatments t  ON p.professional_id = t.professional_id  WHERE p.state = 'Indiana'  GROUP BY p.professional_id  HAVING COUNT(t.treatment_id) > 2;",
    "SELECT professionals.professional_id, professionals.last_name, professionals.cell_number  FROM professionals  WHERE professionals.state = 'Indiana'  OR (SELECT COUNT(*)      FROM treatments      WHERE treatments.professional_id = professionals.professional_id) > 2;",
    "SELECT name  FROM dogs  INNER JOIN treatments  ON dogs.dog_id = treatments.dog_id  WHERE treatments.cost_of_treatment <= 1000;",
    "SELECT d.name  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.cost_of_treatment <= 1000;",
    "SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) AND first_name IN (SELECT first_name FROM professionals) OR first_name IN (SELECT first_name FROM owners);",
    "SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) AND first_name IN (SELECT first_name FROM professionals) OR first_name IN (SELECT first_name FROM owners);",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id                              FROM treatments);",
    "SELECT professional_id, role_code, email_address  FROM professionals  WHERE professional_id NOT IN (SELECT professional_id                               FROM treatments);",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1;",
    "SELECT p.professional_id, p.role_code, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;",
    "SELECT professional_id, role_code, first_name  FROM professionals  WHERE professional_id IN (SELECT professional_id                           FROM treatments                           GROUP BY professional_id                           HAVING COUNT(*) >= 2);",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM dog_kennels JOIN breeds ON dog_kennels.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT o.owner_id, o.last_name  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.last_name  ORDER BY SUM(t.cost_of_treatment) DESC;",
    "SELECT o.owner_id, o.last_name  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.last_name  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT treatment_type_description, MIN(cost_of_treatment)  FROM treatments  JOIN treatment_types  ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatment_type_description;",
    "SELECT treatment_type_description, MIN(cost_of_treatment)  FROM treatment_types  JOIN treatments  ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description;",
    "SELECT o.owner_id, o.zip_code  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.zip_code  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT owners.owner_id, owners.zip_code  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id, owners.zip_code  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id                          FROM treatments                          GROUP BY professional_id                          HAVING COUNT(DISTINCT treatment_type_code) >= 2);",
    "SELECT professionals.professional_id, professionals.cell_number  FROM professionals  INNER JOIN treatments ON treatments.professional_id = professionals.professional_id  GROUP BY professionals.professional_id  HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2;",
    "SELECT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "SELECT first_name, last_name  FROM professionals  INNER JOIN treatments  ON professionals.professional_id = treatments.professional_id  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment)                            FROM treatments);",
    "SELECT t.date_of_treatment, p.first_name  FROM treatments t  INNER JOIN professionals p  ON t.professional_id = p.professional_id;",
    "SELECT date_of_treatment, first_name FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id;",
    "SELECT treatment_types.treatment_type_description, treatments.cost_of_treatment  FROM treatments  INNER JOIN treatment_types  ON treatments.treatment_type_code = treatment_types.treatment_type_code;",
    "SELECT charges.charge_amount, treatment_types.treatment_type_description  FROM charges  INNER JOIN treatment_types  ON charges.charge_type = treatment_types.treatment_type_code;",
    "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN sizes s ON d.size_code = s.size_code;",
    "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN sizes s ON d.size_code = s.size_code;",
    "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id;",
    "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id;",
    "SELECT D.name, T.date_of_treatment  FROM dogs D  INNER JOIN breeds B ON D.breed_code = B.breed_code  INNER JOIN treatments T ON D.dog_id = T.dog_id  WHERE B.breed_name = (SELECT MAX(breed_name) FROM breeds);",
    "SELECT d.name, t.date_of_treatment  FROM dogs d  INNER JOIN breeds b ON d.breed_code = b.breed_code  INNER JOIN treatments t ON d.dog_id = t.dog_id  WHERE b.breed_name = 'rarest breed'",
    "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id  WHERE o.state = 'Virginia';",
    "SELECT owners.first_name, dogs.name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia';",
    "SELECT date_arrived, date_departed  FROM dogs  INNER JOIN treatments  ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code IS NOT NULL;",
    "SELECT date_arrived, date_departed  FROM dogs  INNER JOIN treatments  ON dogs.dog_id = treatments.dog_id  WHERE treatments.treatment_type_code IS NOT NULL;",
    "SELECT last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY age ASC  LIMIT 1;",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);",
    "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
    "SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');",
    "SELECT date_arrived, date_departed FROM dogs;",
    "SELECT date_arrived, date_departed FROM dogs;",
    "SELECT COUNT(*) FROM treatments WHERE treatment_id IS NOT NULL;",
    "SELECT COUNT(*)  FROM treatments  WHERE treatment_type_code IS NOT NULL;",
    "SELECT COUNT(DISTINCT professional_id)  FROM treatments  WHERE treatment_type_code IS NOT NULL;",
    "SELECT COUNT(DISTINCT professional_id)  FROM treatments  INNER JOIN dogs ON treatments.dog_id = dogs.dog_id;",
    "SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';",
    "SELECT o.first_name, o.last_name, o.email_address  FROM owners o  WHERE o.state LIKE '%North%';",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);",
    "SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);",
    "SELECT MAX(cost_of_treatment)  FROM treatments;",
    "SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;",
    "SELECT COUNT(*)  FROM dogs  WHERE NOT EXISTS (SELECT *                    FROM treatments                    WHERE treatments.dog_id = dogs.dog_id);",
    "SELECT COUNT(*)  FROM dogs  WHERE dog_id NOT IN (SELECT dog_id                       FROM treatments);",
    "SELECT COUNT(*) FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);",
    "SELECT COUNT(*) FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id                              FROM treatments);",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;",
    "SELECT AVG(age) FROM dogs;",
    "SELECT AVG(age) FROM dogs;",
    "SELECT MAX(age) FROM dogs;",
    "SELECT MAX(age) FROM dogs;",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT charge_type, charge_amount FROM charges;",
    "SELECT MAX(charge_amount) FROM charges;",
    "SELECT MAX(charge_amount)  FROM charges;",
    "SELECT email_address, cell_number, home_phone FROM professionals;",
    "SELECT email_address, cell_number, home_phone FROM professionals;",
    "SELECT b.breed_name, s.size_description  FROM breeds b  INNER JOIN sizes s  ON b.breed_code = s.size_code;",
    "SELECT DISTINCT breeds.breed_name, sizes.size_description  FROM breeds  INNER JOIN dogs ON breeds.breed_code = dogs.breed_code  INNER JOIN sizes ON sizes.size_code = dogs.size_code;",
    "SELECT p.first_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t  ON p.professional_id = t.professional_id  INNER JOIN treatment_types tt  ON t.treatment_type_code = tt.treatment_type_code;",
    "SELECT p.first_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t  ON p.professional_id = t.professional_id  INNER JOIN treatment_types tt  ON t.treatment_type_code = tt.treatment_type_code;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT COUNT(*) FROM singer;",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC;",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC;",
    "SELECT birth_year, citizenship FROM singer;",
    "SELECT birth_year, citizenship FROM singer;",
    "SELECT name  FROM singer  WHERE citizenship != 'France';",
    "SELECT name  FROM singer  WHERE citizenship != 'French';",
    "SELECT name  FROM singer  WHERE birth_year IN (1948, 1949);",
    "SELECT name  FROM singer  WHERE birth_year IN (1948, 1949);",
    "SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;",
    "|  SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer);",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;",
    "SELECT song.title, singer.name  FROM song  INNER JOIN singer  ON song.singer_id = singer.singer_id;",
    "SELECT song.title, singer.name  FROM song  INNER JOIN singer  ON song.singer_id = singer.singer_id;",
    "SELECT DISTINCT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      WHERE sales > 300000);",
    "SELECT name  FROM singer  WHERE net_worth_millions > 300000;",
    "SELECT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      GROUP BY singer_id                      HAVING COUNT(*) > 1);",
    "SELECT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      GROUP BY singer_id                      HAVING COUNT(*) > 1);",
    "SELECT s.name, SUM(song.sales) FROM singer s INNER JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;",
    "|  SELECT s.name, SUM(song.sales) FROM singer s INNER JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;",
    "SELECT name  FROM singer  WHERE singer_id NOT IN (SELECT singer_id FROM song);",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);",
    "SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955;",
    "SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955;",
    "SELECT COUNT(*) FROM other_available_features;",
    "SELECT feature_type_name  FROM ref_feature_types  INNER JOIN other_available_features  ON ref_feature_types.feature_type_code = other_available_features.feature_type_code  WHERE feature_name = 'AirCon';",
    "SELECT ref_property_types.property_type_description  FROM ref_property_types  INNER JOIN real_estate_properties  ON ref_property_types.property_type_code = real_estate_properties.property_type_code  WHERE ref_property_types.property_type_code = 'code'",
    "SELECT properties.property_name  FROM properties  INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code  INNER JOIN ref_feature_types ON ref_property_types.property_type_code = ref_feature_types.feature_type_code  WHERE ref_feature_types.feature_type_name IN ('house', 'apartment')  AND properties.room_count > 1;"
]