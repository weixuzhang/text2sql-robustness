[
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT singer.name, singer.country  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%'",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10.",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog')",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT COUNT(pets.petid) FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog' AND pets.sex = 'F' AND student.sex = 'F'",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT s.fname, s.lname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1",
    "SELECT accelerate FROM cars_data WHERE makeid = (SELECT makeid FROM car_names WHERE model = 'Hornet Sportabout (S)')",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = 'AMC Hornet Sportabout (SW)'",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT makeid FROM cars_data WHERE year = 1970)",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  INNER JOIN cars_data ON car_makers.id = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT makeid FROM car_names WHERE modelid IN (SELECT modelid FROM model_list WHERE maker = 'car_makers' AND model = 'cars_data') AND make = 'car_names' AND model = 'cars_data') AND country IN (SELECT countryname FROM countries WHERE country = 'countries' AND year = 1970)",
    "SELECT DISTINCT maker FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = 1970",
    "SELECT MAX(accelerate) FROM cars_data",
    "SELECT car_names.makeid, car_names.model, cars_data.horsepower  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.accelerate = (SELECT MAX(accelerate) FROM cars_data)  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker;",
    "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY car_makers.maker, cars_data.id",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker  ORDER BY MAX(horsepower) DESC  LIMIT 1",
    "SELECT MAX(horsepower), maker FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.model  WHERE cylinders = 3 GROUP BY maker",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.fullname  FROM car_makers  JOIN cars_data ON car_makers.id = cars_data.id  WHERE year = 1970 AND car_names.makeid = car_makers.id",
    "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker  FROM car_makers  INNER JOIN car_names ON car_makers.id = car_names.makeid  INNER JOIN cars_data ON car_names.modelid = cars_data.id  WHERE cars_data.year = 1970",
    "SELECT * FROM cars_data WHERE weight > 3500 OR id IN (SELECT id FROM car_names WHERE makeid IN (SELECT id FROM car_makers WHERE maker = 'General Motors'))",
    "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'General Motors' OR cars_data.weight > 3500",
    "SELECT MIN(year), make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE model = 'car'",
    "SELECT cars_data.year, car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id ORDER BY cars_data.year LIMIT 1",
    "SELECT model, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY year ASC LIMIT 1",
    "SELECT maker, year FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  ORDER BY year ASC LIMIT 1",
    "SELECT maker, MIN(year) FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id ORDER BY year LIMIT 1",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_names.make, MIN(cars_data.year) FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.year LIMIT 1",
    "SELECT car_makers.maker, MIN(cars_data.year) AS earliest_year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.maker ORDER BY earliest_year LIMIT 1",
    "SELECT model, horsepower FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT * FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT car_names.makeid, car_names.model, car_names.make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT model, make FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model_list.maker, model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.weight ASC LIMIT 1",
    "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT DISTINCT maker FROM model_list WHERE (SELECT AVG(weight) FROM cars_data) > (SELECT AVG(weight) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE model_list.maker = car_makers.maker) OR (SELECT AVG(weight) FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE model_list.maker = car_makers.maker) IS NULL",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model, year FROM cars_data ORDER BY year ASC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year >= 1980",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid AND car_names.model = 'Hornet Sportabout'",
    "SELECT accelerate FROM cars_data WHERE makeid = (SELECT id FROM car_names WHERE model = 'Hornet Sportabout (SW)')",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders = 4",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE car_makers.maker = 'General Motors' AND weight > 1500;",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT car_makers.maker, car_names.makeid FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE year < 1980 OR cylinders = 8",
    "SELECT model_list.modelid, car_makers.maker FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN car_names ON model_list.modelid = car_names.model  WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) >= 2)  AND car_makers.id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT DISTINCT cm.id, cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cm.id IN (     SELECT cm.id     FROM car_makers cm     JOIN model_list ml ON cm.id = ml.maker     JOIN car_names cn ON ml.modelid = cn.model     JOIN cars_data cd ON cn.makeid = cd.id     GROUP BY cm.id     HAVING COUNT(DISTINCT ml.modelid) >= 2 AND COUNT(DISTINCT cd.id) > 3 )",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.maker = 'Fiat' OR       (SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers WHERE car_makers.country = countries.countryid) >= 3;",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen Airport'",
    "SELECT DISTINCT f1.airline FROM flights f1 JOIN flights f2 ON f1.airline = f2.airline WHERE f1.sourceairport = 'APG' AND f2.sourceairport = 'CVO'",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO' INTERSECT SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND flights.destairport = 'APG'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode JOIN airlines al ON f.airline = al.abbreviation WHERE a.airportname = 'AHD' AND al.airline = 'United Airlines'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.abbreviation WHERE f.sourceairport = 'AHD' AND a.airline = 'United Airlines'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD'",
    "SELECT airlines.*, flights.flightno, airports.* FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE flights.sourceairport = 'AHD'",
    "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD'",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.airportcode = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportname = 'AHD'",
    "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'AHD'",
    "SELECT DISTINCT airline  FROM flights  WHERE sourceairport = 'CVO' AND airline NOT IN  (SELECT airline FROM flights WHERE sourceairport = 'APG')",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode  JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode  JOIN airlines ON flights.airline = airlines.airline  WHERE cvo_airport.city = 'CVO' AND apg_airport.city != 'APG'",
    "SELECT DISTINCT airline  FROM flights  WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE destairport = 'APG')",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT location, COUNT(*) FROM shop GROUP BY location",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT MAX(number_products), MIN(number_products) FROM shop",
    "To get the minimum and maximum number of goods across all the stores, we need to have a schema that includes information about the number of products in each store. The given schema does not have such information. Therefore, it is not possible to answer this question with the given schema.",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name, location, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT s.name  FROM shop s  WHERE EXISTS (     SELECT *      FROM hiring h      JOIN evaluation e ON h.employee_id = e.employee_id      WHERE h.shop_id = s.shop_id      GROUP BY h.shop_id      HAVING AVG(e.bonus) < (         SELECT AVG(e2.bonus)          FROM evaluation e2          JOIN hiring h2 ON e2.employee_id = h2.employee_id          WHERE h2.shop_id = s.shop_id     ) )",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description, template_type_code FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT documents.document_id, templates.template_type_code, documents.document_name, documents.document_description FROM documents JOIN templates ON documents.template_id = templates.template_id",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code",
    "SELECT template_type_code, COUNT(*) AS num_templates_used FROM templates GROUP BY template_type_code",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation.'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT documents.document_id, templates.template_id, documents.document_description  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE documents.document_name = 'Robbin CV' LIMIT 1;",
    "SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id, version_number, template_type_code FROM templates",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT * FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description ORDER BY COUNT(DISTINCT documents.document_id) DESC LIMIT 1;",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
    "SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'data base'",
    "SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data Base'",
    "SELECT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'data base file'",
    "SELECT ref_template_types.template_type_description, COUNT(templates.template_id) AS num_files FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents))",
    "SELECT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_id IS NULL",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentations')",
    "SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')",
    "SELECT template_details FROM templates WHERE template_type_code = 'Presentation Template'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT * FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_description LIKE '%Korea%'",
    "SELECT paragraph_text, other_details FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT * FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_details LIKE '%Korea%' OR d.document_description LIKE '%Korea%' OR d.document_name LIKE '%Korea%' OR EXISTS (SELECT 1 FROM paragraphs p WHERE p.document_id = d.document_id AND p.paragraph_text LIKE '%Korea%')",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer Reviews')",
    "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%customer reviews%' AND other_details = 'title'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer Reviews')",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer Reviews')",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT DISTINCT document_id  FROM paragraphs  WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT age, hometown FROM teacher",
    "SELECT name, age, hometown FROM teacher",
    "SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown NOT LIKE '%Little Lever Urban District%'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC LIMIT 10;",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'Math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name FROM course_teach  JOIN course_arrange ON course_teach.course_id = course_arrange.course_id  JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id  WHERE course_teach.course = 'maths'",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4.0",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT SUM(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "To calculate the average and maximum number of tickets sold, the following SQL query can be used:  SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1",
    "SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 'level one')",
    "SELECT players.first_name, players.last_name, rankings.ranking_points  FROM players  JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT AVG(rankings.ranking) AS average_rank, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT AVG(loser_age) FROM matches UNION SELECT AVG(winner_age) FROM matches",
    "To find the average ages of players that lost and won each match, we need to join the matches table with the players table twice, once for the winner and once for the loser. Then we can group by the match and calculate the average age for the winner and the loser separately. Here is the SQL query:  SELECT matches.match_num, AVG(winner.age) AS avg_winner_age, AVG(loser.age) AS avg_loser_age FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id GROUP BY matches.match_num",
    "SELECT AVG(winner_age) FROM matches UNION SELECT AVG(loser_age) FROM matches",
    "select avg(winner_age) as avg_winner_age, avg(loser_age) as avg_loser_age from matches",
    "SELECT winner_name, MAX(winner_rank_points) AS max_points FROM matches GROUP BY winner_name ORDER BY max_points DESC LIMIT 1;",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name, loser_name, MAX(minutes) FROM matches GROUP BY winner_name, loser_name ORDER BY MAX(minutes) DESC LIMIT 1",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE DATEDIFF(minute, tourney_date, ranking_date) = (SELECT MAX(DATEDIFF(minute, tourney_date, ranking_date)) FROM matches)",
    "SELECT players.first_name, SUM(matches.winner_rank_points) as total_score FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_score FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT first_name, country_code, birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE winner_rank = (SELECT MIN(winner_rank) FROM matches) LIMIT 1;",
    "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (     SELECT winner_id     FROM matches     WHERE winner_rank_points = (         SELECT MAX(winner_rank_points)         FROM matches         WHERE winner_id IN (             SELECT player_id             FROM players         )     )     AND winner_id IN (         SELECT player_id         FROM players     ) )",
    "SELECT SUM(killed) + SUM(injured) FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT SUM(killed) + SUM(injured) FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT COUNT(*) FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed + injured) AS casualties_reached, MIN(killed + injured) AS casualties_reached FROM death",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed + injured) AS highest_death_per_incident, MIN(killed + injured) AS lowest_death_per_incident FROM death",
    "SELECT event, MAX(deaths) AS highest_deaths, MIN(deaths) AS lowest_deaths FROM (     SELECT battle.name AS event, SUM(death.killed) AS deaths     FROM battle     JOIN death ON battle.id = death.caused_by_ship_id     GROUP BY battle.name     UNION     SELECT ship.name AS event, SUM(death.killed) AS deaths     FROM ship     JOIN death ON ship.id = death.caused_by_ship_id     GROUP BY ship.name ) AS events_deaths GROUP BY event",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) + SUM(injured) > 10)",
    "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) + SUM(injured) > 10)",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin'",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT * FROM death WHERE note LIKE '%East%'",
    "SELECT section_name, section_description FROM sections",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT * FROM sections",
    "SELECT * FROM departments WHERE department_description LIKE '%computer%'",
    "SELECT * FROM departments WHERE department_name LIKE '%computers%'",
    "SELECT CONCAT(first_name, ' ', middle_name, ' ', last_name) AS full_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE '%bachelor%'",
    "I'm sorry, but the serialized schema you provided is incomplete. It seems to be missing some important tables such as the one that links students to their mobile numbers. Can you please provide the complete schema?",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students)",
    "SELECT MIN(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT * FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT DISTINCT degree_summary_name, semester_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE degree_summary_name IN ('Master', 'Bachelor')",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "I'm sorry, but the given schema does not contain any information about what the section 'h' means. Could you please provide more context or information about the schema?",
    "SELECT * FROM sections WHERE section_name = 'H'",
    "SELECT * FROM sections WHERE section_id = 'h'",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT series_name, package_option FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT air_date FROM tv_series WHERE episode = \"A love of a lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT DISTINCT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT DISTINCT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT tv_channel.series_name, tv_series.title  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.series_name LIKE '%Sky Radio%'",
    "SELECT series_name FROM tv_channel WHERE series_name LIKE '%Sky Radio%'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "I'm sorry, but the serialized schema you provided doesn't seem to have any information about Joseph Kuhr or his work. Could you please provide a schema that includes this information?",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT cartoon.title FROM cartoon  JOIN tv_series ON cartoon.id = tv_series.id  WHERE tv_series.directed_by = 'Ben Jones' AND tv_series.written_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Brandon Nguyen' OR directed_by = 'Benjamin Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.series_name = 'Sky Radio'",
    "SELECT MAX(rating), MIN(rating) FROM tv_series",
    "SELECT MAX(rating) AS highest_percentage, MIN(rating) AS lowest_percentage FROM tv_series",
    "SELECT MAX(rating), MIN(rating) FROM tv_series",
    "I'm sorry, but the schema you provided doesn't seem to have any columns related to percentage. Could you please provide the correct schema or clarify the question?",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true AND series_name LIKE '%HD%'",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT package_option, series_name FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE hight_definition_tv = true",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%cartoon%'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT country, pixel_aspect_ratio_par FROM tv_channel WHERE language <> 'English'",
    "SELECT pixel_aspect_ratio_par FROM tv_channel WHERE language != 'English' AND country IS NOT NULL",
    "SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT tv_channel.package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.directed_by <> 'Ben Jones' AND tv_series.series_name NOT LIKE '%cartoon%'",
    "SELECT DISTINCT package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.id NOT IN      (SELECT id FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "SELECT DISTINCT package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT name, earnings FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000 AND best_finish LIKE '%poker%'",
    "SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000 AND pp.occupation = 'poker'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000 AND poker_player.best_finish = 'poker professional'",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT nationality, COUNT(*) as num_players FROM people GROUP BY nationality",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT * FROM people WHERE nationality != 'Russia'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'",
    "SELECT name, headofstate, population FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND governmentform LIKE '%Territory%' AND code != 'PRI' AND code != 'GUM' AND code != 'VIR' AND code != 'ASM' AND code != 'MNP' AND code != 'UMI' AND code != 'PLW' AND code != 'FSM' AND code != 'MHL' AND code != 'MCO' AND code != 'NRU' AND code != 'TUV' AND code != 'COK' AND code != 'NIU' AND code != 'TKL' AND code != 'WLF' AND code != 'ATF' AND code != 'PYF' AND code != 'GUF' AND code != 'MTQ' AND code != 'MYT' AND code != 'REU' AND code != 'BLM' AND code != 'MAF' AND code != 'SPM' AND",
    "SELECT AVG(gnp) AS mean_gdp, SUM(population) AS total_population FROM country WHERE continent = 'North America' OR continent = 'South America'",
    "SELECT c.population, AVG(c.gnp)  FROM country c  WHERE c.code2 IN ('AS', 'GU', 'MP', 'PR', 'UM', 'VI')  GROUP BY c.code2",
    "SELECT AVG(country.gnp/country.population) AS avg_gdp_per_capita, SUM(country.population) AS total_population FROM country WHERE country.code2 IN ('AS', 'GU', 'PR', 'UM', 'VI')",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR')",
    "SELECT name, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 GROUP BY name",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T'  GROUP BY country.code",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear BETWEEN 1890 AND 1929) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IS NOT NULL AND percentage > 0 AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear <= 1930) AND isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT continent) > 1 FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT DISTINCT continent FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')",
    "SELECT country.name, country.population, AVG(city.population) as average_life_span FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT country.name, country.population, country.lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1",
    "SELECT c.name, c.population, c.headofstate FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT country.name, country.population, country.headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;",
    "SELECT name AS country_name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT c.name, c.population, c.headofstate  FROM country c  ORDER BY c.surfacearea DESC  LIMIT 1",
    "SELECT c.name AS country_name, c.surfacearea AS land_area, c.population AS population, c.headofstate AS president FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Republic%'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT country.name FROM country ORDER BY lifeexpectancy ASC LIMIT 1 WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM country  WHERE continent = 'Asia'",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS largest_gnp  FROM country  WHERE country.continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'continent_name'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%US territory%'",
    "SELECT country.gnp, country.population FROM country WHERE country.code IN (SELECT city.countrycode FROM city WHERE city.name = 'Washington')",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%United States%'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%US Territory%'",
    "SELECT name FROM country WHERE (language = 'English' OR language = 'Dutch') AND isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = true",
    "SELECT DISTINCT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      GROUP BY code      HAVING COUNT(*) = 1 )",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English' AND isofficial = 'T' GROUP BY countrycode)",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT language, isofficial, percentage FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 'T'",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia' AND MOD(population, 2) = 0)",
    "SELECT continent FROM country GROUP BY continent HAVING SUM(population) > (SELECT SUM(population) FROM country WHERE continent = 'Africa') AND continent = 'Asia'",
    "SELECT code FROM country WHERE governmentform NOT LIKE '%republic%' AND code IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English' AND country.governmentform != 'Republic'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language != 'English'",
    "SELECT governmentform, SUM(population) AS population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT country.continent, AVG(country.population) as population, AVG(country.lifeexpectancy) as lifespans FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72;",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country WHERE continent = 'Europe' AND population > 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population > 80000",
    "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language_percentage.language = countrylanguage.language AND max_language_percentage.max_percentage = countrylanguage.percentage",
    "SELECT country.name, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 'T'",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Spanish'  ORDER BY countrylanguage.percentage DESC  LIMIT 1;",
    "SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 UNION SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded >= 2003",
    "SELECT DISTINCT record_company FROM orchestra WHERE year_of_work < 2003 INTERSECT SELECT DISTINCT record_company FROM orchestra WHERE year_of_work >= 2003",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT conductor.name FROM conductor WHERE conductor.nationality <> 'USA'",
    "SELECT * FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show JOIN performance ON show.performance_id = performance.performance_id",
    "SELECT MAX(percentage), MIN(percentage) FROM (SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM performance WHERE type != 'Live final') AS percentage FROM performance WHERE type != 'Live final' GROUP BY type) AS percentages",
    "SELECT MAX(percentage), MIN(percentage) FROM  (SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM performance WHERE type != 'Live final') AS percentage  FROM performance WHERE type != 'Live final' GROUP BY type) AS percentages;",
    "SELECT MAX(official_ratings_in_millions / share) AS max_ratio, MIN(official_ratings_in_millions / share) AS min_ratio FROM performance WHERE type != 'Live final'",
    "SELECT MAX(stakes), MIN(stakes) FROM performance WHERE performance_id NOT IN (SELECT performance_id FROM show WHERE if_first_show = 'Live Final')",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT major_record_format, COUNT(*) AS popularity  FROM orchestra  GROUP BY major_record_format  ORDER BY popularity DESC",
    "SELECT major_record_format, COUNT(*) AS count FROM orchestra GROUP BY major_record_format ORDER BY count DESC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT major_record_format, COUNT(*) AS occurrence FROM orchestra GROUP BY major_record_format ORDER BY occurrence DESC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT record_company FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2004",
    "SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT orchestra_id FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD/DVD'",
    "SELECT email_address, home_phone, cell_number FROM owners",
    "SELECT email_address, cell_number, home_phone FROM owners ORDER BY owner_id",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "select cell_number, home_phone, email_address from professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals WHERE role_code = 'therapist' AND professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM treatment_types WHERE treatment_type_description = 'therapy') AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id FROM treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) )",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "I'm sorry, but the question is incomplete. Please provide the name of the professional(s) for whom you want to retrieve the email, home phone, and cell number.",
    "SELECT email_address, home_phone, cell_number FROM professionals",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals  WHERE state = 'Indiana' AND professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT DISTINCT breed_name, size_description FROM breeds, sizes, dogs WHERE breeds.breed_code = dogs.breed_code AND sizes.size_code = dogs.size_code",
    "SELECT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code WHERE dogs.abandoned_yn = 'N'",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.treatment_type_code = charges.charge_type WHERE charge_amount > 1000)",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE owner_id = [your_owner_id]) AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments));   Note: Replace [your_owner_id] with the actual owner_id of the person who was treated.",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT name FROM dogs  WHERE dog_id IN (     SELECT dog_id FROM treatments      WHERE cost_of_treatment <= 1000 )",
    "SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment < 1000 AND t.treatment_type_code = 'treatment_type_code'",
    "SELECT d.name  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.cost_of_treatment <= 1000",
    "SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IS NOT NULL))",
    "SELECT email_address, role_code, professional_id FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'dog')))",
    "SELECT treatment_type_description, MIN(total_cost) AS lowest_price FROM (     SELECT treatment_type_description, SUM(cost_of_treatment) AS total_cost     FROM treatments     JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code     GROUP BY treatment_type_description ) AS costs_by_treatment_type GROUP BY treatment_type_description ORDER BY lowest_price ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description, MIN(treatments.cost_of_treatment) AS cheapest_cost FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY cheapest_cost ASC LIMIT 1;",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description HAVING SUM(treatments.cost_of_treatment) = (     SELECT MIN(total_cost)     FROM (         SELECT SUM(cost_of_treatment) AS total_cost         FROM treatments         GROUP BY treatment_type_code     ) AS costs )",
    "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE treatments.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM treatments)",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT owner_id, zip_code FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'dog') * (SELECT size_description FROM sizes WHERE size_code = dogs.size_code)) DESC LIMIT 1)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT cell_number, professional_id FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT charge_type, charge_amount, SUM(cost_of_treatment) AS total_cost FROM charges LEFT JOIN treatments ON charges.charge_id = treatments.treatment_type_code GROUP BY charge_type, charge_amount",
    "SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes",
    "SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT professionals.first_name, treatments.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id ORDER BY professionals.first_name",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name, net_worth_millions FROM singer ORDER BY net_worth_millions DESC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE highest_position > 0)",
    "SELECT birth_year, citizenship FROM singer",
    "I'm sorry, but the schema you provided does not have a nationality attribute for the singer entity. Can you please confirm if the schema is correct or provide an updated version?",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship != 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count_passport FROM singer GROUP BY citizenship ORDER BY count_passport DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions) AS max_wealth FROM singer GROUP BY citizenship",
    "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT * FROM properties WHERE property_type_code = [particular property type code]"
]