[
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT location, name FROM stadium WHERE capacity >= 5000 AND capacity <= 10000",
    "SELECT location, name FROM stadium WHERE capacity >= 5000 AND capacity <= 10000",
    "SELECT      PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY age) AS median_age,     MIN(age) AS min_age,     MAX(age) AS max_age FROM      singer WHERE      country = 'France'",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year FROM concert GROUP BY year HAVING COUNT(*) = (     SELECT COUNT(*) AS cnt     FROM concert     GROUP BY year     ORDER BY cnt DESC     LIMIT 1 )",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id HAVING MAX(year) >= 2014 ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert GROUP BY stadium_id HAVING COUNT(*) ORDER BY COUNT(*) DESC LIMIT 1) AND year >= 2014;",
    "SELECT name, capacity FROM stadium  WHERE stadium_id = (SELECT stadium_id FROM concert                      WHERE year >= 2014                      GROUP BY stadium_id                      ORDER BY COUNT(*) DESC                      LIMIT 1)",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT MAX(capacity), AVG(capacity) FROM stadium",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name ORDER BY num_concerts DESC LIMIT 1",
    "SELECT DISTINCT country FROM singer WHERE age > 40 AND country IN (SELECT country FROM singer WHERE age < 30)",
    "SELECT DISTINCT country FROM singer WHERE age > 40 AND age < 30",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sc1, singer_in_concert sc2 WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sc1.singer_id AND s2.singer_id = sc2.singer_id AND sc1.concert_id = sc2.concert_id",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE song_name IN (SELECT name FROM singer GROUP BY name HAVING AVG(age) > (SELECT AVG(age) FROM singer))",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT singer.country, COUNT(singer.singer_id) AS total_singers FROM singer GROUP BY singer.country",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT singer.name, COUNT(concert.concert_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert.concert_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_singer.concert_id) AS total_concerts FROM singer JOIN concert_singer ON singer.singer_id = concert_singer.singer_id GROUP BY singer.name",
    "SELECT MIN(age) AS youngest, MAX(age) AS oldest, AVG(age) AS middle_age FROM singer WHERE country = 'France'",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10 AND pettype = 'pet animal'",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) >= 2)",
    "SELECT s.fname, s.lname, s.sex FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) >= 2;",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) >= 2)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) >= 2)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) >= 2)",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20",
    "SELECT COUNT(pets.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age >= 21",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  WHERE student.age > 20",
    "SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE student.age >= 21",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS total_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT pettype, MAX(weight) AS largest_weight FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, MAX(weight) FROM pets GROUP BY pettype",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age >= 2",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT petid) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20)",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT stuid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_age >= 21",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age >= 21",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data) AND model IN (SELECT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE maker = 'car'))",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE year = 1974 AND cylinders = 8",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT horsepower FROM cars_data ORDER BY accelerate ASC LIMIT 1",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000 ORDER BY year ASC",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT makeid, maker FROM car_makers WHERE id NOT IN (   SELECT makeid FROM cars_data   WHERE horsepower = (     SELECT MIN(horsepower) FROM cars_data   ) ) AND id IN (   SELECT makeid FROM cars_data   WHERE cylinders < 4 )",
    "SELECT makeid, model FROM car_names WHERE cylinders < 4 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM model_list  WHERE modelid IN (     SELECT makeid FROM cars_data      WHERE weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM car_names  WHERE car_names.modelid IN (     SELECT cars_data.id FROM cars_data      WHERE cars_data.weight < (         SELECT AVG(weight) FROM cars_data     ) )",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders >= 7",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 4) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'Fiat')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 4) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE (SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers WHERE car_makers.country = countries.countryid) > 3 OR car_names.model = 'Fiat'",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1",
    "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.modelid = cars_data.id  GROUP BY car_makers.maker  ORDER BY MIN(cars_data.year) LIMIT 1",
    "SELECT maker, year FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id ORDER BY year LIMIT 1",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3 AND c.continent = 'Europe'",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT COUNT(DISTINCT countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryid HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN car_makers cm ON cn.maker = cm.maker WHERE cm.country = 'American Motor Company'",
    "SELECT model FROM model_list  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;",
    "SELECT DISTINCT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.maker  INNER JOIN cars_data ON model_list.modelid = cars_data.id  WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)",
    "SELECT DISTINCT model FROM car_makers  JOIN model_list ON car_makers.maker = model_list.maker  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE car_makers.maker = 'General Motors' AND cars_data.weight > 3500",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders >= 5",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' AND weight > 3500",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT car_names.makeid, car_names.model, cars_data.mpg FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1",
    "SELECT maker, model, mpg FROM cars_data ORDER BY mpg DESC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150.",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT model, COUNT(DISTINCT version) AS num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT model FROM model_list GROUP BY model HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM model_list GROUP BY model) AS counts)",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT countryname FROM countries  WHERE continent = 'Europe' AND countryid IN  (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3)",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT car_names.model) >= 2 AND COUNT(DISTINCT model_list.modelid) >= 4",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'United States'",
    "SELECT COUNT(*) FROM cars_data cd JOIN car_makers cm ON cd.id = cm.id JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'United States'",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150.",
    "SELECT DISTINCT model FROM model_list  JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country != 'USA' JOIN cars_data ON model_list.modelid = cars_data.id AND cars_data.weight < 3500",
    "SELECT * FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  JOIN countries ON car_makers.country = countries.countryid  WHERE weight < 3500 AND countries.countryname != 'Ford'",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 2",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 2",
    "SELECT model FROM car_names  WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))",
    "SELECT make, model FROM car_names  WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryid ASC",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.maker = 'Fiat' OR countries.countryid IN (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(DISTINCT maker) >= 4 )",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.id = cars_data.id  WHERE cylinders = 4  ORDER BY horsepower DESC  LIMIT 1",
    "SELECT * FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT car_makers.id, car_makers.maker, car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker, car_makers.fullname HAVING COUNT(DISTINCT model_list.modelid) >= 4",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(*) >= 3)",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker  ORDER BY MAX(horsepower) DESC  LIMIT 1",
    "SELECT MAX(horsepower), maker FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY maker ORDER BY MAX(horsepower) DESC LIMIT 1",
    "SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3 AND maker = (SELECT maker FROM model_list WHERE cylinders = 3 GROUP BY maker ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT model FROM cars_data  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list  WHERE maker <> 'Ford Motors' AND weight < 3500",
    "SELECT model FROM model_list  WHERE maker <> 'Ford Motor Company' AND modelid IN  (SELECT makeid FROM cars_data WHERE weight < 3500)",
    "SELECT model FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.country != 'USA' AND car_makers.maker != 'Ford'",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford'",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN car_makers ON cars_data.id = car_makers.id  WHERE cylinders = 3  GROUP BY maker",
    "SELECT MAX(horsepower), make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cylinders = 3",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 3",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT * FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM airports",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT city FROM airports WHERE airportcode = (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT sourceairport, COUNT(*) AS num_departures FROM flights GROUP BY sourceairport ORDER BY num_departures DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_outgoing_flights FROM flights GROUP BY sourceairport ORDER BY num_outgoing_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT MAX(count_incoming) FROM (SELECT COUNT(*) as count_incoming FROM flights GROUP BY destairport) as incoming_flights",
    "SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode JOIN airlines al ON f.airline = al.uid WHERE al.airline = 'United Airlines' AND a.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT sourceairport AS airport_code, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT sourceairport AS airportcode FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen' AND f.sourceairport != f.destairport",
    "SELECT airline, abbreviation FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT * FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportname = 'ASY Airport'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY' AND f.destairport = ap.airportcode",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT MAX(count_flights) FROM (SELECT COUNT(*) as count_flights FROM flights GROUP BY airline) as flights_count",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT city FROM airports  WHERE airportcode IN (     SELECT destairport FROM flights      GROUP BY destairport      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline) as counts))",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT airlines.country, airlines.abbreviation  FROM airlines  JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.uid  HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline) as counts)",
    "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000",
    "SELECT * FROM shop WHERE number_products <= 3000 OR number_products >= 10000",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT city, COUNT(*) AS employee_count FROM employee GROUP BY city",
    "SELECT location, COUNT(*) AS total_shops FROM shop GROUP BY location",
    "SELECT location, COUNT(*) AS total_count_of_shops FROM shop GROUP BY location",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop) LIMIT 1",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT city, COUNT(*) as total_employees FROM employee GROUP BY city",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT DISTINCT city FROM employee GROUP BY city HAVING COUNT(*) >= 2 AND MAX(age) < 30",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) >= 2",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT COUNT(*) FROM shop",
    "SELECT COUNT(DISTINCT location) FROM shop",
    "SELECT district FROM shop WHERE number_products < 3000 UNION SELECT district FROM shop WHERE number_products > 10000",
    "SELECT DISTINCT district FROM shop WHERE shop_id IN (SELECT shop_id FROM shop WHERE number_products < 3000 OR number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products > 10000 AND district IN (SELECT district FROM shop WHERE number_products < 3000)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) AS total_evaluation_bonuses FROM evaluation",
    "SELECT MIN(version_number), template_type_code FROM templates",
    "SELECT ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code ORDER BY templates.date_effective_from ASC LIMIT 1;",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (SELECT document_id                       FROM paragraphs                       GROUP BY document_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT document_id, COUNT(*) AS total_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT * FROM documents WHERE LENGTH(document_description) BETWEEN 1 AND 2;",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 1 OR COUNT(*) >= 2)",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2)",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) <= 2)",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS total_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT document_id, document_name, COUNT(paragraph_id) AS paragraph_count FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name",
    "SELECT document_id, document_name, COUNT(paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS total_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS total_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code = (SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_type_description, COUNT(*) AS count_of_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_description ORDER BY count_of_templates DESC LIMIT 1;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code ORDER BY num_templates DESC LIMIT 1;",
    "SELECT template_id, template_type_code FROM templates WHERE template_id = (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT template_type_code, COUNT(*) AS total_count_of_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_id, template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY COUNT(documents.document_id) DESC LIMIT 1;",
    "SELECT template_type_code, template_id  FROM templates  WHERE template_id = (     SELECT template_id      FROM documents      GROUP BY template_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN (     SELECT template_id, COUNT(*) AS doc_count     FROM documents     GROUP BY template_id     ORDER BY doc_count DESC     LIMIT 1 ) AS doc_counts ON templates.template_id = doc_counts.template_id",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs WHERE paragraph_number >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) <= 2",
    "SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) IN (1,2)",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) IN (1,2)",
    "SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2)",
    "SELECT template_type_code, COUNT(*) as count FROM templates GROUP BY template_type_code HAVING count > 1",
    "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) >= 2",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) >= 2",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "SELECT templates.template_id, COUNT(documents.document_id) AS total_count_of_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2",
    "SELECT documents.document_id, COUNT(paragraphs.paragraph_id) as num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_type_code, COUNT(*) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code ORDER BY num_documents DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code = (SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_description, COUNT(documents.document_id) AS total_documents FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_description ORDER BY total_documents DESC LIMIT 1;",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(*) < 3)",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code IN  (SELECT template_type_code FROM templates  GROUP BY template_type_code  HAVING COUNT(*) < 3)",
    "SELECT template_type_code, COUNT(*) AS total_count FROM templates GROUP BY template_type_code",
    "SELECT template_type_code  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY templates.template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT template_type_code, COUNT(*) AS count_of_templates FROM templates GROUP BY template_type_code ORDER BY count_of_templates DESC LIMIT 1;",
    "SELECT template_type_code FROM ref_template_types  WHERE template_type_code = (SELECT template_type_code FROM templates                              GROUP BY template_type_code                              ORDER BY COUNT(*) DESC                              LIMIT 1)",
    "SELECT COUNT(DISTINCT template_type_code) FROM templates",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (SELECT document_id                       FROM paragraphs                       GROUP BY document_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT document_id, document_name FROM documents WHERE document_id = (     SELECT document_id     FROM paragraphs     GROUP BY document_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT document_id, document_name  FROM documents  WHERE document_id = (     SELECT document_id      FROM paragraphs      GROUP BY document_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS amount_of_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS total_counts FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT * FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.name  HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT hometown, COUNT(*) as num_teachers FROM teacher GROUP BY hometown HAVING COUNT(*) > 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visitor.id  ORDER BY SUM(visit.total_spent) DESC  LIMIT 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  WHERE visit.total_spent = (SELECT MAX(total_spent) FROM visit)",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visitor.id  ORDER BY SUM(visit.total_spent) DESC  LIMIT 1",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT SUM(num_of_ticket) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE age < 30",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = (SELECT MAX(total_spent) FROM visit)",
    "SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON museum.museum_id = visit.museum_id WHERE museum.open_year < 2009 AND museum.open_year > 2011",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "SELECT museum_id, name FROM museum ORDER BY num_of_ticket DESC LIMIT 1",
    "SELECT MAX(num_of_ticket), AVG(num_of_ticket) FROM visit",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT age FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership BETWEEN 1 AND 4",
    "select year, count(*) as num_matches from matches group by year order by num_matches desc limit 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC, year DESC LIMIT 1",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
    "SELECT players.first_name, SUM(rankings.ranking_points) AS overall_rank_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name",
    "SELECT players.first_name, rankings.ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id",
    "SELECT SUM(rankings.ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT player_id, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY tours DESC LIMIT 1)",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)",
    "SELECT first_name, country_code, tours FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE tours = (SELECT MAX(tours) FROM rankings) LIMIT 1",
    "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;",
    "SELECT COUNT(*) FROM matches",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) >= 51",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking = 1 ORDER BY rankings.ranking_points DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "select first_name, last_name from players order by birth_date",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) >= 11",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT year, COUNT(*) AS total_matches FROM matches GROUP BY year ORDER BY total_matches DESC LIMIT 1;",
    "select year, count(*) as num_matches from matches group by year order by num_matches desc limit 1",
    "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches WHERE match_num > 10",
    "SELECT AVG(loser_age) as mean_loser_age, AVG(winner_age) as mean_winner_age FROM matches",
    "SELECT DISTINCT loser_rank FROM matches WHERE loser_rank IS NOT NULL ORDER BY loser_rank ASC",
    "SELECT COUNT(*) FROM matches",
    "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;",
    "SELECT id, name FROM ship WHERE id = (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC LIMIT 1)",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT MAX(killed + injured) AS highest_deaths_per_incident, MIN(killed + injured) AS lowest_deaths_per_incident FROM death",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1)",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_summary_name, COUNT(*) AS enrollment FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrollment DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs WHERE degree_program_id IN (     SELECT degree_program_id FROM student_enrolment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1)",
    "SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT addresses.*, COUNT(students.student_id) AS num_students FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY num_students DESC LIMIT 1",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1",
    "SELECT * FROM students ORDER BY student_id DESC",
    "SELECT address_id, line_1, line_2 FROM addresses WHERE address_id = (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT transcript_id, transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name ASC, section_description DESC",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 )",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT semester_name, semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1",
    "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id LIMIT 1",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT degree_programs.degree_summary_name, degree_programs.degree_summary_description, degree_programs.degree_program_id FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id FROM student_enrolment ORDER BY date_first_registered ASC LIMIT 1)",
    "SELECT s.semester_name, c.course_id, c.course_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN courses c ON sec.course_id = c.course_id GROUP BY s.semester_name, c.course_id, c.course_name HAVING COUNT(*) = (     SELECT COUNT(*)     FROM student_enrolment se2     JOIN student_enrolment_courses sec2 ON se2.student_enrolment_id = sec2.student_enrolment_id     WHERE se2.semester_id = s.semester_id     GROUP BY sec2.course_id     ORDER BY COUNT(*) DESC     LIMIT 1 )",
    "SELECT s.semester_id, s.semester_name, se.degree_program_id, COUNT(*) AS num_students FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.semester_id, s.semester_name, se.degree_program_id HAVING COUNT(*) = (     SELECT MAX(num_students)     FROM (         SELECT s.semester_id, se.degree_program_id, COUNT(*) AS num_students         FROM semesters s         JOIN student_enrolment se ON s.semester_id = se.semester_id         JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id         GROUP BY s.semester_id, se.degree_program_id     ) AS temp     WHERE temp.semester_id = s.semester_id AND temp.degree_program_id = se.degree",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (     SELECT course_id     FROM student_enrolment_courses     GROUP BY course_id     HAVING COUNT(*) = (         SELECT MAX(enrollment_count)         FROM (             SELECT course_id, COUNT(*) AS enrollment_count             FROM student_enrolment_courses             GROUP BY course_id         ) AS enrollment_counts     ) )",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING MAX(section_id) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) <= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2)",
    "SELECT degree_summary_name AS program_type, COUNT(*) AS num_students FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1 OFFSET (SELECT COUNT(*) FROM transcripts) / 2",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) >= 3",
    "SELECT id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option  FROM tv_channel  WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) >= 3)",
    "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) >= 3",
    "SELECT channel FROM tv_series GROUP BY country, channel HAVING COUNT(DISTINCT channel) >= 3",
    "SELECT language, COUNT(*) as total_counts FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) AS total_count FROM tv_series GROUP BY language",
    "SELECT language, COUNT(*) AS total_count FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) AS total_count FROM tv_channel GROUP BY language",
    "SELECT COUNT(series_name) + COUNT(content) AS total_amount FROM tv_channel",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT cartoon.id, cartoon.channel FROM cartoon INNER JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.air_date DESC LIMIT 1;",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT series_name, MIN(share), MAX(share) FROM tv_series WHERE series_name LIKE '%TV series%' GROUP BY series_name",
    "SELECT id, series_name FROM tv_channel GROUP BY id, series_name HAVING COUNT(*) >= 3",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) >= 3",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) >= 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;  This query selects the top 3 episodes from the tv_series table based on their rating. The rating column is sorted in descending order using the ORDER BY clause and the LIMIT clause is used to limit the output to 3 rows. The query returns the episode number and its rating. The rating column is a measure of how well-received the episode was by the audience.",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT directed_by, COUNT(*) AS total_cartoons_directed FROM cartoon GROUP BY directed_by",
    "SELECT episode, content, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT series_name, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT poker_player_id FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT DISTINCT nationality FROM people WHERE nationality IN (SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) > 1)",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT DISTINCT nationality FROM people WHERE nationality NOT IN (SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) > 1)",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) > 1",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT AVG(earnings) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200.",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT COUNT(*) FROM poker_player",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) > 1",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality != 'russian'",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY earnings ASC LIMIT 1",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(money_rank) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height = (SELECT MAX(height) FROM people)",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT p.birth_date FROM poker_player AS pp JOIN people AS p ON pp.people_id = p.people_id WHERE pp.earnings < (SELECT MAX(earnings) FROM poker_player) ORDER BY pp.earnings LIMIT 1",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "To get the largest and smallest possible area codes, we need to find the maximum and minimum values of the area codes. Here is the SQL query:  SELECT MAX(area_code) AS largest_area_code, MIN(area_code) AS smallest_area_code FROM area_code_state",
    "SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT area_code FROM (     SELECT area_code, COUNT(*) AS num_voters     FROM voter_1     JOIN area_code_state ON voter_1.state = area_code_state.state     GROUP BY area_code     ORDER BY num_voters DESC     LIMIT 1 ) AS largest_num_voters_area_code",
    "SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name HAVING COUNT(votes.vote_id) >= 2",
    "SELECT contestant_name, COUNT(*) as vote_count FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number JOIN area_code_state a ON v.state = a.state WHERE a.state = 'NY' OR a.state = 'CA' GROUP BY c.contestant_name",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT created FROM votes WHERE state = 'California'",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT MAX(created) FROM votes WHERE state = 'California'",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) LIMIT 1)",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS cl ON country.code = cl.countrycode AND cl.percentage = cl.max_percentage;",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_language_percentage ON country.code = max_language_percentage.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_language_percentage.language = countrylanguage.language AND max_language_percentage.max_percentage = countrylanguage.percentage",
    "SELECT country.name, countrylanguage.language FROM countrylanguage JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_lang_percentage ON countrylanguage.countrycode = max_lang_percentage.countrycode AND countrylanguage.percentage = max_lang_percentage.max_percentage JOIN country ON country.code = countrylanguage.countrycode",
    "SELECT c.name, cl.language FROM country c JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) cl ON c.code = cl.countrycode WHERE cl.percentage = cl.max_percentage",
    "SELECT c.name, cl.language FROM country c JOIN (     SELECT countrycode, language     FROM countrylanguage     WHERE isofficial = true     GROUP BY countrycode     HAVING MAX(percentage) ) cl ON c.code = cl.countrycode ORDER BY c.name ASC",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language     FROM countrylanguage     WHERE isofficial = true     GROUP BY countrycode     HAVING MAX(percentage) ) AS countrylanguage ON country.code = countrylanguage.countrycode",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_percentage ON country.code = max_percentage.countrycode AND max_percentage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrycode = max_percentage.countrycode ) ORDER BY country.name;",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS max_country_language ON country.code = max_country_language.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode AND max_country_language.max_percentage = countrylanguage.percentage",
    "SELECT population, headofstate, name FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT COUNT(*) AS num_asia_residents, MAX(gnp) AS max_gdp_asia FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia'",
    "SELECT SUM(population) AS asia_population, gnp FROM country WHERE continent = 'Asia' AND gnp = (SELECT MAX(gnp) FROM country WHERE continent = 'Asia')",
    "SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS highest_gnp FROM country WHERE country.continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS highest_gnp FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear >= 1950",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language <> 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != 'English'",
    "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != 'English'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT country.population, AVG(city.population)  FROM country  JOIN city ON country.code = city.countrycode  WHERE country.continent = 'North America' AND country.surfacearea > 3000  GROUP BY country.code",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND isofficial = 'T') DESC LIMIT 1;",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(country.gnp), SUM(country.population) FROM country WHERE country.governmentform = 'US territory'",
    "SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT country.population, country.lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'))) AND isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia'     ORDER BY population DESC     LIMIT 1 ) ORDER BY percentage DESC LIMIT 1",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50",
    "SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country WHERE country.lifeexpectancy < 72 GROUP BY country.continent",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > ALL(SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Asia' AND c1.population > ALL (SELECT c2.population FROM country c2 WHERE c2.continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language != 'English')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT language, COUNT(*) AS count FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' GROUP BY language ORDER BY count DESC LIMIT 1;",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000.",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT district, COUNT(city.id)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5",
    "SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform LIKE '%Republic%' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1",
    "SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform LIKE '%Republic%'      AND code NOT IN (         SELECT countrycode          FROM countrylanguage          GROUP BY countrycode          HAVING COUNT(*) > 1     ) )",
    "SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrycode = country.code )",
    "SELECT country.code, GROUP_CONCAT(DISTINCT countrylanguage.language ORDER BY countrylanguage.percentage DESC SEPARATOR ', ') AS languages_spoken FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code",
    "SELECT cl.countrycode, cl.language FROM countrylanguage cl WHERE cl.percentage = (     SELECT MAX(cl2.percentage)     FROM countrylanguage cl2     WHERE cl2.countrycode = cl.countrycode ) ORDER BY cl.countrycode ASC;",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language, COUNT(DISTINCT countrycode) AS num_countries FROM countrylanguage GROUP BY language ORDER BY num_countries DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T')",
    "SELECT country.code FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Spanish'  GROUP BY country.code  ORDER BY MAX(countrylanguage.percentage) DESC  LIMIT 1",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1",
    "SELECT city.name FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  GROUP BY city.name  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT AVG(lifeexpectancy), COUNT(population) FROM country WHERE continent IN (SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72) JOIN city ON country.code = city.countrycode GROUP BY continent",
    "SELECT continent, AVG(population), AVG(lifeexpectancy), AVG(indepyear)  FROM country  WHERE lifeexpectancy < 72  GROUP BY continent",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia')",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(DISTINCT language) >= 3 ) GROUP BY country.code ORDER BY num_languages DESC, country.name ASC",
    "SELECT district, COUNT(city.id)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(city)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(DISTINCT countrycode) = (     SELECT MAX(num_countries)     FROM (         SELECT COUNT(DISTINCT countrycode) as num_countries         FROM countrylanguage         GROUP BY language     ) );",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT name, population FROM country WHERE lifeexpectancy > 72 AND governmentform LIKE '%government%';",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT COUNT(DISTINCT city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.language != 'English' AND country.language != 'en'",
    "SELECT COUNT(DISTINCT city.population)  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(DISTINCT orchestra_id) AS cnt         FROM orchestra         GROUP BY record_company     ) AS counts )",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra) DESC LIMIT 1;",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.record_company  FROM orchestra  GROUP BY orchestra.record_company  ORDER BY SUM(performance.official_ratings_in_millions) DESC  LIMIT 1",
    "SELECT nationality, COUNT(*) AS nationality_count FROM conductor GROUP BY nationality",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD/DVD'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type NOT LIKE '%Live Final%'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live Final'",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(official_ratings_in_millions), MIN(official_ratings_in_millions) FROM performance WHERE type != 'Live final'",
    "SELECT major_record_format, COUNT(*) AS frequency_of_use FROM orchestra GROUP BY major_record_format ORDER BY frequency_of_use DESC",
    "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT type, COUNT(*) AS frequency FROM performance GROUP BY type ORDER BY frequency ASC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT DISTINCT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  WHERE orchestra.year_of_founded >= 2009",
    "SELECT DISTINCT c1.name  FROM conductor c1  JOIN conductor c2 ON c1.name = c2.name AND c1.conductor_id <> c2.conductor_id  WHERE c1.conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) >= 2)",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) >= 2",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) >= 2",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT MAX(percentage_not_live_final), MIN(percentage_not_live_final) FROM  (SELECT (COUNT(CASE WHEN type != 'live final' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_not_live_final FROM performance) AS percentages",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'live final'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor ORDER BY year_of_work ASC",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work ASC",
    "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) >= 2",
    "SELECT conductor.name FROM conductor  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra_id) >= 2",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) >= 2)",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) >= 2)",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name, MAX(conductor.year_of_work) AS longest_serving FROM conductor GROUP BY conductor.name ORDER BY longest_serving DESC",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 10",
    "SELECT SUM(attendance) FROM show",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) >= 2)",
    "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT h.name  FROM highschooler h  WHERE h.id = (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) > 3",
    "SELECT id, name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3) ORDER BY id ASC",
    "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f GROUP BY f.student_id HAVING COUNT(*) >= 3)",
    "SELECT h.name  FROM highschooler h  WHERE h.grade = 'HS' AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id OR f.friend_id = h.id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  JOIN friend f ON h.id = f.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT h1.name  FROM highschooler h1  JOIN friend f1 ON h1.id = f1.student_id  JOIN friend f2 ON f1.friend_id = f2.student_id  JOIN highschooler h2 ON f2.friend_id = h2.id  JOIN likes l ON h1.id = l.student_id AND h2.id = l.liked_id  WHERE h1.grade > 5  GROUP BY h1.id  HAVING COUNT(DISTINCT f1.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)",
    "SELECT h1.name  FROM highschooler h1  WHERE h1.grade > 5 AND        (SELECT COUNT(*)         FROM friend f1         WHERE f1.student_id = h1.id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT student_id, COUNT(*) AS total_likes FROM likes GROUP BY student_id",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes GROUP BY likes.student_id HAVING COUNT(*) >= 2)",
    "SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1",
    "SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade, COUNT(*) as num_students FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT h.name  FROM highschooler h  WHERE h.id IN (     SELECT f.student_id      FROM friend f      GROUP BY f.student_id      ORDER BY COUNT(f.friend_id) DESC      LIMIT 1 )",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT h1.name FROM highschooler h1, likes l1, likes l2 WHERE h1.id = l1.student_id AND h1.id = l2.student_id AND l1.liked_id <> l2.liked_id;",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON f1.friend_id = f2.student_id  WHERE h.grade > 5 AND f2.friend_id = h.id  GROUP BY h.id  HAVING COUNT(DISTINCT f1.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.friend_id  WHERE h.grade >= 6  GROUP BY h.id  HAVING COUNT(DISTINCT f1.friend_id) + COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id = (     SELECT likes.liked_id      FROM likes      GROUP BY likes.liked_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT h1.name FROM highschooler h1, likes l1, highschooler h2 WHERE h1.id = l1.student_id AND l1.liked_id = h2.id GROUP BY h1.id HAVING COUNT(*) > (SELECT COUNT(*) FROM likes WHERE student_id = h1.id)",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id = (SELECT owner_id                    FROM dogs                    GROUP BY owner_id                    ORDER BY COUNT(*) DESC                    LIMIT 1)",
    "SELECT professionals.first_name, professionals.last_name, professionals.email_address, professionals.home_phone, professionals.cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT professional_id, home_phone FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2)",
    "SELECT professionals.first_name, professionals.last_name, professionals.cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT owners.first_name, owners.cell_number FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT SUM(cost_of_treatment) FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' AND professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT dog_id) >= 3 )",
    "SELECT MAX(age) FROM dogs",
    "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2",
    "SELECT AVG(age) FROM dogs",
    "SELECT name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.cost_of_treatment = charges.charge_amount WHERE charges.charge_amount <= 1000",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT AVG(age) FROM dogs",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'adoption_fee') + (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id)) DESC LIMIT 1",
    "SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM((SELECT charge_amount FROM charges WHERE charge_type = 'dog boarding') * (DATEDIFF(dogs.date_departed, dogs.date_arrived) + 1)) DESC LIMIT 1",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IS NOT NULL))",
    "SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE dog_id IN (SELECT dog_id FROM dogs WHERE breed_code IS NOT NULL))",
    "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)",
    "SELECT name, date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_name LIMIT 1) ORDER BY date_of_treatment ASC",
    "SELECT DISTINCT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.dog_id) >= 2",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) > 1",
    "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;",
    "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)",
    "SELECT treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  HAVING SUM(treatments.cost_of_treatment) = (SELECT MIN(total_cost)                                              FROM (SELECT SUM(cost_of_treatment) AS total_cost                                                    FROM treatments                                                    GROUP BY treatment_type_code) AS costs)",
    "SELECT treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code  GROUP BY treatments.treatment_type_code  HAVING MIN(treatments.cost_of_treatment) = (SELECT MIN(cost_of_treatment) FROM treatments)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT age FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT age FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT charge_amount FROM charges ORDER BY charge_id DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000",
    "SELECT name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment <= 1000)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT SUM(CASE WHEN treatments.treatment_id IS NULL THEN 1 ELSE 0 END) AS sum_of_dogs_without_treatment FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2)",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (     SELECT professional_id FROM treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM treatments     ) ) ORDER BY professional_id LIMIT 1;",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'certain_kind' AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))",
    "SELECT owner_id, zip_code FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     JOIN (         SELECT dog_id, SUM(cost_of_treatment) AS total_cost         FROM treatments         GROUP BY dog_id     ) AS dog_treatment_cost     ON dogs.dog_id = dog_treatment_cost.dog_id     JOIN owners     ON dogs.owner_id = owners.owner_id     ORDER BY total_cost DESC     LIMIT 1 )",
    "SELECT owners.owner_id, CONCAT(owners.first_name, ' ', owners.last_name) AS full_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT DISTINCT citizenship FROM singer WHERE birth_year NOT BETWEEN 1945 AND 1955",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer WHERE citizenship != 'French'",
    "SELECT name FROM singer WHERE citizenship != 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship != 'French'",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer  WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) >= 2",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 30000)",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) >= 2",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count >= 2",
    "SELECT property_name FROM properties WHERE room_count > 1",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count >= 2"
]