[
    "SELECT singer.name, singer.country, singer.age  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';",
    "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';",
    "SELECT singer.name, singer.song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  ORDER BY singer.age ASC  LIMIT 1;",
    "SELECT singer.name, song_release_year  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT DISTINCT country  FROM singer  WHERE age > 20;",
    "SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;",
    "SELECT country, COUNT(*) AS num_singers FROM singer GROUP BY country;",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer);",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015);",
    "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year >= 2014  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT name, capacity  FROM stadium  WHERE stadium_id IN (SELECT stadium_id                       FROM concert                       WHERE year > 2013                       GROUP BY stadium_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert);",
    "SELECT country  FROM singer  WHERE age > 40 OR age < 30;",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id                          FROM concert                          WHERE year = 2014);",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;",
    "SELECT singer.name  FROM concert_singer  INNER JOIN singer ON concert_singer.singer_id = singer.singer_id  INNER JOIN concert ON concert_singer.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  INNER JOIN concert  ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014;",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN singer_in_concert  ON singer.singer_id = singer_in_concert.singer_id  WHERE singer.song_name LIKE '%Hey%';",
    "SELECT singer.name, singer.country  FROM singer  INNER JOIN concert_singer  ON singer.singer_id = concert_singer.singer_id  WHERE concert_singer.song_name LIKE '%Hey%';",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year = 2014  AND c.stadium_id IN (SELECT c2.stadium_id                       FROM concert c2                       WHERE c2.year = 2015)",
    "SELECT s.name, s.location  FROM stadium s  INNER JOIN concert c  ON s.stadium_id = c.stadium_id  WHERE c.year IN (2014, 2015)  GROUP BY s.name, s.location  HAVING COUNT(*) = 2;",
    "SELECT COUNT(*)  FROM concert c  JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = (SELECT MAX(capacity) FROM stadium);",
    "SELECT COUNT(*)  FROM concert c  INNER JOIN stadium s  ON c.stadium_id = s.stadium_id  WHERE s.capacity = s.highest;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT COUNT(*) FROM pets WHERE weight > 10;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets_1 ON has_pet.petid = pets_1.petid WHERE student.sex = 'female' AND pets_1.pettype = 'dog';",
    "SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets_1 ON has_pet.petid = pets_1.petid WHERE student.sex = 'female' AND pets_1.pettype = 'dog';",
    "SELECT fname FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT fname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog');",
    "SELECT lname, fname  FROM student  WHERE stuid IN (SELECT stuid                  FROM has_pet                  WHERE petid IN (SELECT petid                                  FROM pets                                  WHERE pettype IN ('cat', 'dog'))                  GROUP BY stuid                  HAVING COUNT(*) = 2);",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.stuid IN (     SELECT stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'dog' )",
    "SELECT major, age  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT student.major, student.age  FROM student  LEFT JOIN has_pet  ON student.stuid = has_pet.stuid  LEFT JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pettype != 'cat'",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT stuid  FROM student  WHERE stuid NOT IN (SELECT stuid                      FROM has_pet                      INNER JOIN pets                      ON has_pet.petid = pets.petid                      WHERE pettype = 'cat')",
    "SELECT fname, age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT stuid                            FROM has_pet                            INNER JOIN pets ON has_pet.petid = pets.petid                            WHERE pets.pettype = 'cat')",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT petid, weight  FROM pets  WHERE pet_age > 1;",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT lname  FROM student  INNER JOIN has_pet  ON student.stuid = has_pet.stuid  INNER JOIN pets  ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3;",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS models_produced FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model HAVING AVG(weight) < (SELECT AVG(weight) FROM cars_data);",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);",
    ", origin  SELECT fullname  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.make  WHERE cars_data.year = 1970;",
    "SELECT fullname  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.year = 1970;",
    ", origin  SELECT make, year FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  ORDER BY year ASC  LIMIT 1;",
    "SELECT maker, MIN(year)  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  GROUP BY maker;",
    "SELECT DISTINCT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  WHERE year > 1980;",
    "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model;",
    "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id GROUP BY countries.countryname ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT countryname, COUNT(*) AS num_makers FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY num_makers DESC LIMIT 1;",
    "SELECT fullname, COUNT(model) AS count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model GROUP BY fullname;",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;",
    "SELECT accelerate FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_names.make = 'AMC Hornet Sportabout (sw)'",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryname INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'France';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.id INNER JOIN countries c ON cm.country = c.countryid INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'USA';",
    "SELECT COUNT(*) FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.modelid = cn.makeid INNER JOIN cars_data cd ON cn.model = cd.make INNER JOIN countries c ON cm.country = c.countryname INNER JOIN continents con ON c.continent = con.contid WHERE con.continent = 'United States';",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;",
    "SELECT MIN(weight)  FROM cars_data  WHERE cylinders = 8 AND year = 1974;",
    "SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname, countries.countryid HAVING COUNT(car_makers.id) > 0;",
    "SELECT countries.countryname, countries.countryid  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  GROUP BY countries.countryname, countries.countryid  HAVING COUNT(car_makers.id) > 0;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  INNER JOIN continents ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  INNER JOIN model_list  ON car_makers.id = model_list.maker  INNER JOIN car_names  ON model_list.modelid = car_names.makeid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(*) >= 3;",
    "SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;",
    "SELECT model FROM model_list  INNER JOIN car_names ON model_list.modelid = car_names.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  ORDER BY mpg DESC  LIMIT 1;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;",
    "SELECT AVG(edispl) FROM cars_data  JOIN car_names ON cars_data.makeid = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'Volvo';",
    "SELECT AVG(edispl) FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.modelid = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.make  WHERE car_makers.fullname = 'Volvo';",
    "SELECT car_names.make, COUNT(*) AS num_versions FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_names.make ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980;",
    "SELECT COUNT(model)  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  INNER JOIN continents  ON countries.continent = continents.contid  WHERE continents.continent = 'America'  AND car_makers.fullname = 'American Motor Company';",
    "SELECT COUNT(*) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.id INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN continents ON countries.continent = continents.contid WHERE car_makers.fullname = 'American Motor Company';",
    "SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker               FROM model_list               GROUP BY maker               HAVING COUNT(model) > 3);",
    "SELECT car_makers.fullname, car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.modelid) > 3;",
    "SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'General Motors'  AND weight > 3500;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN car_names ON model_list.model = car_names.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500)  GROUP BY model;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT year  FROM cars_data  WHERE weight BETWEEN 3000 AND 4000;",
    "SELECT cylinders  FROM cars_data  WHERE accelerate = (SELECT MIN(accelerate)                      FROM cars_data                      WHERE makeid IN (SELECT makeid                                       FROM car_names                                       WHERE maker IN (SELECT id                                                       FROM car_makers                                                       WHERE fullname = 'Volvo')))",
    "SELECT cylinders FROM cars_data  INNER JOIN car_names ON cars_data.makeid = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN continents ON countries.continent = continents.contid  WHERE car_makers.fullname = 'Volvo'  ORDER BY accelerate ASC  LIMIT 1;",
    "SELECT COUNT(*) FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT COUNT(*) FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.modelid = cn.model JOIN cars_data cd ON cn.makeid = cd.id GROUP BY c.countryname HAVING COUNT(*) > 2;",
    "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;",
    "SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980;",
    ", origin  SELECT model FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.weight < 3500  AND car_makers.fullname != 'Ford Motor Company';",
    ", origin  SELECT model  FROM model_list  INNER JOIN car_makers  ON model_list.maker = car_makers.id  INNER JOIN countries  ON car_makers.country = countries.countryid  WHERE countries.countryname != 'Ford Motor Company'  AND weight < 3500;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers  ON countries.countryid = car_makers.country  WHERE car_makers.maker IN (SELECT maker FROM car_makers WHERE fullname = 'fiat' OR car_makers.country IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3))  GROUP BY countries.countryid, countries.countryname;",
    ", origin  SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.modelid = car_names.makeid  INNER JOIN cars_data ON car_names.model = cars_data.id  WHERE (car_makers.fullname = 'Fiat' OR (SELECT COUNT(*) FROM car_makers WHERE car_makers.country = countries.countryid) > 3)  GROUP BY countries.countryid, countries.countryname;",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT country  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';",
    "SELECT abbreviation  FROM airlines  WHERE airline = 'Jetblue Airways';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airlines.airline, airlines.abbreviation  FROM airlines  WHERE airlines.country = 'USA';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony';",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA';",
    "SELECT airportname  FROM airports  WHERE airportcode = 'AKO';",
    "SELECT airline FROM airlines WHERE abbreviation = 'AKO';",
    "SELECT airportname  FROM airports  WHERE city = 'Aberdeen';",
    "SELECT airportname  FROM airports  WHERE city = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ABZ';",
    "SELECT COUNT(*)  FROM flights  WHERE sourceairport IN (SELECT airportcode                          FROM airports                          WHERE city = 'Aberdeen')  AND destairport IN (SELECT airportcode                      FROM airports                      WHERE city = 'Ashley');",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'UAL' AND airports.airportcode = 'ASY';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.airportcode = 'ASY';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'United Airlines'  AND flights.sourceairport = 'AHD';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.city = 'AHD';",
    "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.uid INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.city = 'Aberdeen';",
    "SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.uid  INNER JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.abbreviation = 'United Airlines'  AND airports.city = 'Aberdeen';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.destairport = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  INNER JOIN airports  ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'APG'  AND flights.destairport = 'CVO'  GROUP BY airlines.airline;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport IN ('APG', 'CVO')  GROUP BY airlines.airline  HAVING COUNT(DISTINCT flights.sourceairport) = 2;",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG';",
    "SELECT airlines.airline  FROM airlines  INNER JOIN flights  ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'CVO'  AND flights.destairport != 'APG';",
    "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'United Airlines';",
    "SELECT flightno  FROM flights  INNER JOIN airlines  ON flights.airline = airlines.uid  WHERE airlines.abbreviation = 'United Airlines';",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno  FROM flights  WHERE destairport = 'APG';",
    "SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen';",
    "SELECT flightno  FROM flights  WHERE sourceairport = 'ABZ';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Aberdeen';",
    "SELECT flightno  FROM flights  WHERE destairport = 'Aberdeen';",
    "SELECT COUNT(*)  FROM flights  WHERE destairport IN (SELECT airportcode                        FROM airports                        WHERE city IN ('Aberdeen', 'Abilene'));",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('ABE', 'ABI');",
    "SELECT airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport                           FROM flights                           UNION                           SELECT destairport                           FROM flights);",
    "SELECT airportcode, airportname  FROM airports  WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights);",
    "SELECT name FROM employee ORDER BY age ASC;",
    "SELECT e.name, e.age  FROM employee e  ORDER BY e.age ASC;",
    "SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING COUNT(*) > 1;",
    "SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING COUNT(*) > 1;",
    "SELECT location, COUNT(*) AS num_shops FROM shop GROUP BY location;",
    "SELECT location, COUNT(*) AS shop_count FROM shop GROUP BY location;",
    "SELECT shop.manager_name, shop.district  FROM shop  ORDER BY shop.number_products DESC  LIMIT 1;",
    "SELECT manager_name, district  FROM shop  ORDER BY number_products DESC  LIMIT 1;",
    "SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC;",
    "SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC;",
    "SELECT shop.name  FROM shop  GROUP BY shop.name  HAVING COUNT(*) > AVG(number_products);",
    "SELECT shop.name  FROM shop  GROUP BY shop.name  HAVING AVG(number_products) < SUM(number_products);",
    "_amount  SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  ORDER BY bonus_amount DESC  LIMIT 1;",
    "_amount  SELECT name  FROM employee  INNER JOIN evaluation  ON employee.employee_id = evaluation.employee_id  ORDER BY bonus_amount DESC  LIMIT 1;",
    "SELECT shop.name  FROM shop  INNER JOIN hiring  ON shop.shop_id = hiring.shop_id  GROUP BY shop.name  ORDER BY COUNT(hiring.employee_id) DESC  LIMIT 1;",
    "SELECT shop.name  FROM shop  INNER JOIN hiring  ON shop.shop_id = hiring.shop_id  GROUP BY shop.name  ORDER BY COUNT(hiring.employee_id) DESC  LIMIT 1;",
    "SELECT shop.name  FROM shop  LEFT JOIN hiring  ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL;",
    "SELECT shop.name  FROM shop  LEFT JOIN hiring  ON shop.shop_id = hiring.shop_id  WHERE hiring.employee_id IS NULL;",
    "SELECT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district                   FROM shop                   WHERE number_products > 10000);",
    "SELECT district  FROM shop  WHERE number_products < 3000  INTERSECT  SELECT district  FROM shop  WHERE number_products > 10000;",
    "SELECT name  FROM teacher  ORDER BY age ASC;",
    "SELECT name  FROM teacher  ORDER BY age ASC;",
    "SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';",
    "SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District';",
    "SELECT name  FROM teacher  WHERE age = 32 OR age = 33;",
    "SELECT name  FROM teacher  WHERE age = 32 OR age = 33;",
    "SELECT hometown  FROM teacher  WHERE age = (SELECT MIN(age)                FROM teacher);",
    "SELECT teacher.name, teacher.age, teacher.hometown  FROM course_teach  INNER JOIN course ON course_teach.course_id = course.course_id  INNER JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  INNER JOIN course_arrange ON course_teach.course_id = course_arrange.course_id  AND course_teach.teacher_id = course_arrange.teacher_id  ORDER BY teacher.age ASC  LIMIT 1;",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;",
    "SELECT hometown, COUNT(teacher_id)  FROM teacher  GROUP BY hometown;",
    "SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC;",
    "SELECT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(*) >= 2;",
    "SELECT name  FROM teacher  INNER JOIN course_arrange  ON teacher.teacher_id = course_arrange.teacher_id  INNER JOIN course  ON course_arrange.course_id = course.course_id  WHERE course.course = 'math';",
    "SELECT name  FROM teacher  INNER JOIN course_arrange  ON teacher.teacher_id = course_arrange.teacher_id  INNER JOIN course  ON course_arrange.course_id = course.course_id  WHERE course.course_name = 'math';",
    "SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id                          FROM course_arrange);",
    "SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT teacher_id                          FROM course_arrange);",
    "SELECT COUNT(*)  FROM visitor  WHERE age < 30;",
    "SELECT visitor.name  FROM museum_visit  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  WHERE visitor.level_of_membership > 4  ORDER BY visitor.level_of_membership DESC;",
    "SELECT AVG(age)  FROM visitor  WHERE level_of_membership <= 4;",
    "SELECT museum.museum_id, museum.name  FROM museum  ORDER BY num_of_staff DESC  LIMIT 1;",
    "SELECT AVG(num_of_staff)  FROM museum  WHERE open_year < 2009;",
    "SELECT open_year, num_of_staff  FROM museum  WHERE name = 'Plaza Museum';",
    "SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff)                        FROM museum                        WHERE open_year > 2010)                        AND open_year > 2010;",
    "SELECT visitor.id, visitor.name, visitor.age  FROM museum_visit  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  GROUP BY visitor.id  HAVING COUNT(*) > 1;",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM museum_visit  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  INNER JOIN museum ON museum_visit.museum_id = museum.museum_id  ORDER BY total_spent DESC  LIMIT 1;",
    "SELECT museum.museum_id, museum.name  FROM museum  INNER JOIN visit  ON museum.museum_id = visit.museum_id  GROUP BY museum.museum_id, museum.name  ORDER BY COUNT(*) DESC;",
    "SELECT name  FROM museum  WHERE museum_id NOT IN (SELECT museum_id                          FROM visit);",
    "SELECT visitor.name, visitor.age  FROM museum_visit  INNER JOIN visitor ON museum_visit.visitor_id = visitor.id  INNER JOIN visit ON museum_visit.museum_id = visit.museum_id  GROUP BY visitor.name, visitor.age  ORDER BY visit.num_of_ticket DESC  LIMIT 1;",
    "SELECT SUM(total_spent)  FROM visit  INNER JOIN visitor  ON visit.visitor_id = visitor.id  WHERE visitor.level_of_membership = 'lv 1';",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
    "SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
    "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013  AND m2.year = 2016;",
    "SELECT first_name, last_name  FROM players  WHERE player_id IN (SELECT winner_id                      FROM matches                      WHERE year IN (2013, 2016)                      GROUP BY winner_id                      HAVING COUNT(*) = 2);",
    "SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);",
    "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);",
    "SELECT players.country_code, players.first_name  FROM players  INNER JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  AND matches.year = 'Australian Open'  GROUP BY players.player_id;",
    "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.tourney_name = 'WTA Championships'  AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);",
    "SELECT first_name, country_code FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY year ASC LIMIT 1);",
    "SELECT p.first_name, p.last_name  FROM players p  ORDER BY p.birth_date;",
    "SELECT p.first_name, p.last_name  FROM wta_1.players p  JOIN wta_1.matches m  ON p.player_id = m.loser_id OR p.player_id = m.winner_id  ORDER BY m.loser_age, m.winner_age;",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
    "|  SELECT first_name, last_name  FROM players  WHERE hand = 'Left'  ORDER BY birth_date ASC;",
    "SELECT winner_name, winner_rank_points  FROM matches  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;",
    "SELECT winner_name, winner_rank_points  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM players p1 INNER JOIN matches m ON p1.player_id = m.loser_id INNER JOIN players p2 ON p2.player_id = m.winner_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM players p1 JOIN matches m ON p1.player_id = m.winner_id JOIN players p2 ON p2.player_id = m.loser_id ORDER BY m.minutes DESC LIMIT 1;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code;",
    "SELECT country_code, COUNT(*) AS num_players FROM wta_1.players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;",
    "SELECT country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id HAVING COUNT(*) > 50)",
    "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;",
    "SELECT first_name, last_name, winner_rank  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  ORDER BY ranking_date DESC  LIMIT 3;",
    "SELECT first_name, last_name, winner_rank  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  ORDER BY ranking_date DESC  LIMIT 3;",
    "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_id IN (SELECT player_id                      FROM players                      WHERE hand = 'L')  AND winner_id IN (SELECT player_id                    FROM players                    WHERE tourney_name = 'WTA Championships')",
    "SELECT COUNT(*)  FROM players  INNER JOIN matches  ON players.player_id = matches.winner_id  INNER JOIN rankings  ON players.player_id = rankings.player_id  WHERE players.hand = 'L'  AND rankings.tourney_name = 'WTA Championships';",
    "SELECT COUNT(*) FROM ship WHERE lost_in_battle = 'Captured';",
    "SELECT battle.id, battle.name  FROM battle  INNER JOIN death ON battle.id = death.caused_by_ship_id  GROUP BY battle.id, battle.name  HAVING COUNT(death.killed) > 10;",
    "SELECT ship.id, ship.name  FROM ship  INNER JOIN battle_death ON battle_death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(battle_death.injured) DESC  LIMIT 1;",
    "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta') AND death.killed > 0;",
    "SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  INNER JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.location = 'English Channel'  AND ship.disposition_of_ship = 'no ships lost'",
    ", grade  SELECT course_description, section_description, semester_description  FROM courses  INNER JOIN sections ON courses.course_id = sections.course_id  INNER JOIN semesters ON sections.semester_id = semesters.semester_id;",
    ", grade  SELECT course_description FROM courses;",
    ", grade , other_details  SELECT zip_postcode  FROM addresses  WHERE city = 'Port Chelsea';",
    ", grade  SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';",
    ", other_details  SELECT last_name  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id                                  FROM student_enrolment)",
    ", grade  SELECT last_name  FROM students  INNER JOIN addresses ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.degree_program_id IS NULL;",
    ", grade , other_details  SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward';",
    ", grade , other_details  SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward';",
    ", grade , other_details  SELECT first_name, middle_name, last_name  FROM students  ORDER BY date_first_registered  LIMIT 1;",
    ", grade  SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  INNER JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id  ORDER BY transcripts.transcript_date ASC  LIMIT 1;",
    ", grade  SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);",
    ", grade  SELECT addresses.address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM student_transcripts_tracking  INNER JOIN students ON student_transcripts_tracking.student_id = students.student_id  INNER JOIN addresses ON students.current_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(*) DESC;",
    ", grade , other_details  SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1;",
    ", grade  SELECT semester_name  FROM semesters  INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name IN ('Master', 'Bachelor')  GROUP BY semester_name  HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;",
    ", grade , other_details  SELECT semester_id  FROM semesters  INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name IN ('Masters', 'Bachelors')  GROUP BY semester_id;",
    ", grade , other_details  SELECT first_name FROM students WHERE (permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')) OR (cell_mobile_number = '09700166582');",
    ", grade , other_details  SELECT first_name  FROM students  WHERE (permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582');",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT cartoon.title  FROM cartoon  ORDER BY cartoon.title ASC;",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE cartoon.directed_by = 'Ben Jones';",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE directed_by = 'Ben Jones';",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuh';",
    "SELECT cartoon.title, cartoon.directed_by  FROM cartoon  ORDER BY cartoon.original_air_date;",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;",
    "SELECT title  FROM cartoon  WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';",
    "SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';",
    "SELECT country, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY country ORDER BY num_tv_channels DESC;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';",
    "SELECT content FROM tvshow WHERE series_name = 'Sky Radio';",
    "SELECT package_option  FROM tv_channel  WHERE tv_channel.series_name = 'Sky Radio';",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English';",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English';",
    "SELECT tv_channel.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  INNER JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle!';",
    "SELECT tv_series.series_name  FROM tv_series  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle';",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tvshow.series_name = 'Sky Radio';",
    "SELECT cartoon.title  FROM cartoon  INNER JOIN tv_series  ON cartoon.channel = tv_series.channel  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tvshow.series_name = 'Sky Radio';",
    "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';",
    "SELECT air_date  FROM tv_series  WHERE series_name = 'A Love of a Lifetime';",
    "SELECT weekly_rank FROM tv_series WHERE series_name = 'A Love of a Lifetime';",
    "SELECT weekly_rank  FROM tv_series  WHERE series_name = 'A Love of a Lifetime';",
    "SELECT tv_channel.series_name  FROM tv_channel  WHERE tv_channel.content = 'A Love of a Lifetime';  SELECT tv_series.episode  FROM tv_series  WHERE tv_series.channel = (SELECT tv_channel.id                             FROM tv_channel                             WHERE tv_channel.content = 'A Love of a Lifetime');",
    "SELECT tv_series.series_name  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.id  WHERE tvshow.series_name = 'A Love of a Lifetime';",
    "SELECT tv_series.episode  FROM tv_series  INNER JOIN tvshow  ON tv_series.channel = tvshow.tv_channel  WHERE tvshow.tv_channel = 'Sky Radio';",
    "SELECT episode  FROM tv_series  WHERE channel = (SELECT id                   FROM tv_channel                   WHERE series_name = 'Sky Radio');",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;",
    "SELECT directed_by, COUNT(title) AS num_cartoons FROM cartoon GROUP BY directed_by;",
    "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;",
    "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;",
    "SELECT tv_channel.package_option, tv_series.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'HD TV';",
    "SELECT tv_channel.package_option, tv_series.series_name  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = 'HDTV';",
    "SELECT tv_channel.country  FROM tv_channel  INNER JOIN tv_series  ON tv_channel.id = tv_series.channel  INNER JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT tvshow.series_name  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.id  INNER JOIN cartoon ON tv_series.id = cartoon.id  WHERE tvshow.country != ''  AND cartoon.written_by = 'Todd Casey'",
    "SELECT tv_channel.country  FROM tv_channel  LEFT JOIN tv_series  ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon  ON tv_series.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey'  GROUP BY tv_channel.country  HAVING COUNT(*) = 0;",
    "SELECT tvshow.series_name FROM tvshow LEFT JOIN tv_series ON tvshow.id = tv_series.id LEFT JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.written_by != 'Todd Casey' AND tvshow.country != 'playing';",
    "SELECT tvshow.series_name, tvshow.country  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')  AND tvshow.content = 'cartoons';",
    "SELECT tvshow.series_name, tvshow.country  FROM tvshow  INNER JOIN tv_series ON tvshow.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')  AND tvshow.content = 'cartoons';",
    "SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English';",
    "SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country  FROM tv_channel  WHERE tv_channel.language != 'English';",
    "SELECT tv_channel.id  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON tv_series.channel = cartoon.channel  GROUP BY tv_channel.country  HAVING COUNT(*) > 2;",
    "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.id NOT IN (SELECT channel                              FROM cartoon                              WHERE directed_by = 'Ben Jones')",
    "SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' AND cartoon.title IS NULL;",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN (SELECT channel                   FROM cartoon                   WHERE directed_by = 'Ben Jones');",
    "SELECT tv_channel.package_option  FROM tv_channel  JOIN tv_series  ON tv_channel.id = tv_series.channel  JOIN cartoon  ON tv_series.channel = cartoon.channel  WHERE tv_series.directed_by != 'Ben Jones'  AND cartoon.title IS NULL;",
    "SELECT poker_player.earnings  FROM poker_player  ORDER BY poker_player.earnings DESC;",
    "SELECT money_rank  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height = (SELECT MAX(height) FROM people)",
    "SELECT money_rank  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE people.height = (SELECT MAX(height) FROM people)",
    "SELECT AVG(earnings)  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height > 200;",
    "SELECT AVG(earnings)  FROM poker_player  INNER JOIN people  ON poker_player.people_id = people.people_id  WHERE height > 200;",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality;",
    "SELECT nationality, COUNT(*) AS num_people FROM people GROUP BY nationality;",
    "SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) > 1;",
    "SELECT name  FROM people  WHERE nationality != 'Russia';",
    "SELECT name  FROM people  WHERE nationality != 'Russia';",
    "_date  SELECT created_date  FROM votes  WHERE state = 'CA'  ORDER BY created_date DESC  LIMIT 1;",
    "_at  SELECT COUNT(*)  FROM votes  INNER JOIN voter_1 ON votes.phone_number = voter_1.phone_number  WHERE voter_1.state IN ('NY', 'CA');",
    "_date  SELECT created_date, state, phone_number  FROM votes  INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number  INNER JOIN voter_1 ON votes.state = voter_1.area_code_state  WHERE contestants.contestant_name = 'Tabatha Gehling';",
    "_at  SELECT area_code_state.area_code  FROM voter_1  INNER JOIN votes ON voter_1.phone_number = votes.phone_number  INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number  WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')  GROUP BY area_code_state.area_code  HAVING COUNT(*) = 2;",
    "|  SELECT name FROM country WHERE indepyear > 1950;",
    "|  SELECT name FROM country WHERE indepyear > 1950;",
    "SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%republic%';",
    "SELECT COUNT(*)  FROM country  WHERE governmentform LIKE '%republic%';",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';",
    "SELECT SUM(surfacearea)  FROM country  WHERE region = 'Caribbean';",
    "SELECT continent  FROM country  WHERE name = 'Anguilla';",
    "|  SELECT continent  FROM country  WHERE code = (SELECT countrycode                FROM city                WHERE name = 'Anguilla');",
    "SELECT region FROM country WHERE name = 'Kabul';",
    "SELECT region FROM country WHERE name = 'Kabul';",
    "SELECT language, MAX(percentage)  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language;",
    "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code                       FROM country                       WHERE name = 'Aruba')  AND isofficial = 'T';",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';",
    "SELECT region, population FROM country WHERE name = 'Angola';",
    "|  SELECT region, population FROM country WHERE name = 'Angola';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa';",
    "SELECT country.name  FROM country  WHERE country.continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1;",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;",
    "|  SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';",
    "SELECT COUNT(*) AS 'Number of People Living in Asia', MAX(gnp) AS 'Largest GNP' FROM world_1 w1 JOIN country c ON w1.countrycode = c.code WHERE c.continent = 'Asia';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform LIKE '%Republic%';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform LIKE '%Republic%';",
    "SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');",
    "SELECT SUM(surfacearea)  FROM country  WHERE continent IN ('Asia', 'Europe');",
    "SELECT COUNT(*)  FROM city  WHERE district = 'Gelderland';",
    "SELECT SUM(population)  FROM city  WHERE district = 'Gelderland';",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE continent = 'North America' AND region = 'Central America';",
    "|  SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM country WHERE continent = 'North America');",
    "SELECT COUNT(DISTINCT governmentform)  FROM country  WHERE continent = 'Africa';",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';",
    "SELECT SUM(percentage)  FROM countrylanguage  WHERE countrycode = 'ABW';",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';",
    "SELECT COUNT(*) FROM countrylanguage WHERE isofficial = 'T' AND countrycode = 'AFG';",
    "SELECT COUNT(*) FROM countrylanguage WHERE isofficial = 'T';",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY MAX(percentage) DESC  LIMIT 1;",
    "SELECT country.name  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY SUM(percentage) DESC  LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT continent, COUNT(language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC;",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'French')  GROUP BY country.name  HAVING COUNT(*) = 2;",
    "|  SELECT country.name  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'French')  GROUP BY country.name  HAVING COUNT(*) = 2;",
    "SELECT name  FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language IN ('English', 'French')                 GROUP BY countrycode                 HAVING COUNT(*) = 2);",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'French')  AND countrylanguage.isofficial = 'T';",
    "|  SELECT COUNT(DISTINCT continent)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Chinese'",
    "SELECT COUNT(DISTINCT continent)  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Chinese'",
    "SELECT region  FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language IN ('English', 'Dutch'))",
    "SELECT region  FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language IN ('Dutch', 'English'))",
    "SELECT country.name  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language IN ('English', 'Dutch')  AND isofficial = 'T';",
    "SELECT language, MAX(percentage)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE continent = 'Asia'  GROUP BY language;",
    "SELECT language, MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language;",
    "SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  GROUP BY language  HAVING COUNT(countrycode) = 1;",
    "SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code                      FROM country                      WHERE governmentform = 'Republic'                      AND code NOT IN (SELECT countrycode                                       FROM countrylanguage                                       WHERE isofficial = 'T'                                       AND countrycode IN (SELECT code                                                           FROM country                                                           WHERE governmentform = 'Republic')                                       AND language != language))",
    "SELECT city.name  FROM city  INNER JOIN countrylanguage  ON city.countrycode = countrylanguage.countrycode  WHERE language = 'English'  ORDER BY population DESC  LIMIT 1;",
    "SELECT name, population  FROM city  WHERE countrycode IN (SELECT code                        FROM country                        WHERE language = 'English')  ORDER BY population DESC  LIMIT 1;",
    "SELECT country.name, country.population, country.lifeexpectancy  FROM country  WHERE country.continent = 'Asia'  ORDER BY country.surfacearea DESC  LIMIT 1;",
    "SELECT AVG(lifeexpectancy)  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE isofficial = 'F' AND language != 'English';",
    "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode                      FROM countrylanguage                      WHERE language = 'English'                      AND isofficial = 'T');",
    "SELECT SUM(population)  FROM city  INNER JOIN country  ON city.countrycode = country.code  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT COUNT(*)  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT language  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE headofstate = 'Beatrix'  AND isofficial = 'T';",
    "SELECT language  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE headofstate = 'Beatrix'  AND isofficial = 'T';",
    "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930  AND isofficial = 'T';",
    "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country  ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930;",
    "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea)                       FROM country                       WHERE continent = 'Europe');",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Africa'  AND country.population < (SELECT MIN(country.population)                            FROM country                            WHERE country.continent = 'Asia');",
    "SELECT c1.name  FROM country c1  JOIN country c2  ON c1.continent = 'Africa'  AND c2.continent = 'Asia'  WHERE c1.population < c2.population;",
    "SELECT c1.name  FROM country c1  JOIN country c2  ON c1.continent = 'Asia'  AND c2.continent = 'Africa'  WHERE c1.population > c2.population;",
    "SELECT c1.name  FROM country c1  JOIN country c2  ON c1.continent = 'Asia'  AND c2.continent = 'Africa'  WHERE c1.population > c2.population;",
    "SELECT countrycode  FROM countrylanguage  WHERE language != 'English' AND isofficial = 'T';",
    "SELECT countrycode FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');",
    "SELECT countrycode FROM countrylanguage WHERE language != 'English' GROUP BY countrycode;",
    "SELECT countrycode FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');",
    "SELECT code  FROM country  WHERE NOT EXISTS (SELECT *                    FROM countrylanguage                    WHERE country.code = countrylanguage.countrycode                    AND language = 'English'                    AND isofficial = 'T')  AND governmentform != 'Republic';",
    "SELECT country.code  FROM country  JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE country.governmentform NOT LIKE '%Republic%'  AND countrylanguage.language != 'English'",
    "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language = 'English'  AND countrylanguage.isofficial = 'F'",
    "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';",
    "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T';",
    "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1;",
    "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1;",
    "SELECT country.name, country.population, country.headofstate  FROM country  ORDER BY country.surfacearea DESC  LIMIT 1;",
    "SELECT district, COUNT(*) AS num_cities FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city) ORDER BY district;",
    "SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;",
    "SELECT name, population  FROM country  ORDER BY population DESC  LIMIT 3;",
    "SELECT name  FROM country  ORDER BY population DESC  LIMIT 3;",
    "|  SELECT name FROM country ORDER BY population ASC LIMIT 3;",
    "SELECT name  FROM country  ORDER BY population ASC  LIMIT 3;",
    "SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';",
    "SELECT COUNT(*)  FROM country  WHERE continent = 'Asia';",
    "SELECT country.name  FROM country  INNER JOIN city  ON country.code = city.countrycode  WHERE country.continent = 'Europe'  AND city.population > 80000;",
    "SELECT country.name  FROM country  WHERE country.continent = 'Europe'  AND country.population > 80000;",
    "SELECT SUM(population), AVG(surfacearea)  FROM country  WHERE continent = 'North America'  AND surfacearea > 3000;",
    "SELECT country.name, country.population, AVG(country.population)  FROM country  WHERE country.continent = 'North America'  AND country.surfacearea > 3000  GROUP BY country.name;",
    "|  SELECT name FROM city WHERE population > 160000 AND population < 900000;",
    "SELECT name  FROM city  WHERE population BETWEEN 160000 AND 900000;",
    "SELECT country.name, countrylanguage.language, countrylanguage.percentage  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 'T'  ORDER BY countrylanguage.percentage DESC;",
    "SELECT country.code, countrylanguage.language, countrylanguage.percentage  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 'T'  ORDER BY countrylanguage.percentage DESC;",
    "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND isofficial = 'T'  AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T');",
    "SELECT COUNT(*)  FROM country c  INNER JOIN countrylanguage cl  ON c.code = cl.countrycode  WHERE cl.language = 'Spanish' AND cl.percentage > 50;",
    "SELECT country.code  FROM country  INNER JOIN countrylanguage  ON country.code = countrylanguage.countrycode  WHERE language = 'Spanish'  ORDER BY percentage DESC;",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50);",
    "SELECT name FROM conductor ORDER BY age ASC;",
    "SELECT conductor.name, conductor.age FROM conductor ORDER BY conductor.age;",
    "SELECT conductor.name  FROM conductor  WHERE conductor.nationality != 'USA';",
    "SELECT name FROM conductor WHERE nationality != 'USA';",
    "SELECT record_company  FROM orchestra  ORDER BY year_of_founded DESC;",
    "SELECT record_company  FROM orchestra  ORDER BY year_of_founded ASC;",
    "SELECT COUNT(*)  FROM orchestra  WHERE major_record_format IN ('CD', 'DVD');",
    "SELECT grade FROM highschooler WHERE name = 'Kyle';",
    "SELECT grade FROM highschooler WHERE name = 'Kyle';",
    "SELECT name FROM highschooler WHERE grade = 10;",
    "SELECT name  FROM highschooler  WHERE grade = 10;",
    "SELECT id FROM highschooler WHERE name = 'Kyle';",
    "SELECT id FROM highschooler WHERE name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;",
    "SELECT YEAR(highschooler.grade) AS year, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY YEAR(highschooler.grade) ORDER BY num_highschoolers DESC LIMIT 1;",
    "SELECT h2.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN highschooler h2 ON f.friend_id = h2.id  WHERE h1.name = 'Kyle';",
    "SELECT h2.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h1.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE h.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler hs JOIN friend f ON hs.id = f.student_id WHERE hs.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler hs JOIN likes l ON hs.id = l.student_id WHERE hs.name = 'Kyle';",
    "SELECT COUNT(*) FROM highschooler hs JOIN likes l ON hs.id = l.student_id WHERE hs.name = 'Kyle';",
    "SELECT AVG(grade) FROM highschooler WHERE EXISTS (SELECT *               FROM friend               WHERE highschooler.id = friend.student_id)",
    "SELECT AVG(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id                  FROM friend                  WHERE friend_id IN (SELECT student_id                                      FROM highschooler))",
    "SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'Indiana'  AND professional_id IN (SELECT professional_id                          FROM treatments                          GROUP BY professional_id                          HAVING COUNT(*) > 2);",
    "SELECT professionals.professional_id, professionals.last_name, professionals.cell_number  FROM professionals  WHERE professionals.state = 'Indiana'  OR (SELECT COUNT(*)      FROM treatments      WHERE treatments.professional_id = professionals.professional_id) > 2;",
    "SELECT d.name  FROM dogs d  INNER JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.cost_of_treatment > 1000;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1;",
    "SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1;",
    "SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id                         FROM treatments                         GROUP BY professional_id                         HAVING COUNT(*) >= 2);",
    "SELECT p.professional_id, p.role_code, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;",
    "SELECT treatment_type_description  FROM treatment_types  ORDER BY (SELECT MIN(cost_of_treatment)            FROM treatments            WHERE treatments.treatment_type_code = treatment_types.treatment_type_code) ASC;",
    "SELECT treatment_type_description FROM treatment_types tt JOIN treatments t ON tt.treatment_type_code = t.treatment_type_code ORDER BY t.cost_of_treatment ASC LIMIT 1;",
    "SELECT o.owner_id, o.zip_code  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.zip_code  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT o.owner_id, o.zip_code  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.zip_code  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;",
    "SELECT first_name, last_name  FROM professionals  JOIN treatments  ON professionals.professional_id = treatments.professional_id  GROUP BY professionals.professional_id  HAVING AVG(treatments.cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM treatments);",
    "SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d  ON o.owner_id = d.owner_id  WHERE o.state = 'Virginia';",
    "SELECT first_name FROM owners WHERE state = 'Virginia' AND owner_id IN (SELECT owner_id FROM dogs);",
    "SELECT last_name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY age ASC  LIMIT 1;",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);",
    "SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');",
    "SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');",
    "SELECT AVG(age) FROM dogs; SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);",
    "SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs);",
    "SELECT MAX(date_of_treatment), cost_of_treatment  FROM treatments;",
    "SELECT cost_of_treatment  FROM treatments  ORDER BY date_of_treatment DESC  LIMIT 1;",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y';",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y';",
    "|  SELECT name FROM singer ORDER BY net_worth_millions ASC;",
    "|  SELECT name FROM singer ORDER BY net_worth_millions ASC;",
    "SELECT name  FROM singer  WHERE citizenship != 'French';",
    "SELECT name  FROM singer  WHERE citizenship != 'French';",
    "SELECT name FROM singer WHERE birth_year IN (1948, 1949);",
    "|  SELECT name  FROM singer  WHERE birth_year IN (1948, 1949);",
    "|  SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(singer_id) AS num_singers FROM singer GROUP BY citizenship;",
    "SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC  LIMIT 1;",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship;",
    "|  SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship;",
    "SELECT DISTINCT name  FROM singer  WHERE singer_id IN (SELECT singer_id                      FROM song                      WHERE sales > 300000);",
    "SELECT name  FROM singer  WHERE sales > 300000;",
    "SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955;",
    "SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955;",
    "SELECT property_name  FROM properties  INNER JOIN ref_property_types  ON properties.property_type_code = ref_property_types.property_type_code  WHERE (ref_property_types.property_type_description = 'House' OR ref_property_types.property_type_description = 'Apartment')  AND room_count > 1;"
]