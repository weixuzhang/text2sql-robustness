[
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name, country as nationality, age FROM singer WHERE is_male = false ORDER BY age DESC",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)",
    "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT singer.country AS State, COUNT(*) AS num_vocalists FROM singer GROUP BY singer.country",
    "SELECT country, COUNT(*) FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT DISTINCT singer.song_name  FROM singer  WHERE singer.age > (SELECT AVG(age) FROM singer)",
    "SELECT position, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015",
    "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_shows FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) AS num_shows FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT year, COUNT(*) AS num_shows FROM concert GROUP BY year ORDER BY num_shows DESC LIMIT 1;",
    "SELECT year, COUNT(*) AS num_shows FROM concert GROUP BY year ORDER BY num_shows DESC LIMIT 1;",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT s1.country FROM singer s1, singer s2, singer_in_concert sic1, singer_in_concert sic2, concert c WHERE s1.age > 40 AND s2.age < 30 AND s1.singer_id = sic1.singer_id AND s2.singer_id = sic2.singer_id AND sic1.concert_id = sic2.concert_id AND c.concert_id = sic1.concert_id",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_vocalists FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id",
    "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_shows FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_shows FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT DISTINCT stadium.name, stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND EXISTS (     SELECT *     FROM concert AS c2     WHERE c2.year = 2015 AND c2.stadium_id = concert.stadium_id )",
    "SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT COUNT(*) FROM pets WHERE weight > 10",
    "SELECT weight FROM pets ORDER BY pet_age ASC LIMIT 1",
    "SELECT MIN(weight) FROM pets",
    "SELECT pet.pettype AS pet_category, MAX(pet.weight) AS max_weight FROM pets AS pet GROUP BY pet.pettype;",
    "SELECT pets.pettype, MAX(pets.weight), pets.category FROM pets GROUP BY pets.pettype, pets.category",
    "SELECT COUNT(pets.petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    "SELECT COUNT(*) FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE p.pettype = 'puppy' AND s.sex = 'F'",
    "SELECT COUNT(*) FROM pets WHERE pettype = 'puppy' AND petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'female'))",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT COUNT(DISTINCT pettype) FROM pets",
    "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('kitten', 'puppy')",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'kitten' OR pettype = 'puppy')",
    "SELECT s.fname, s.lname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'kitten' JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'puppy'",
    "SELECT DISTINCT s.fname FROM student s  INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid  INNER JOIN pets p1 ON hp1.petid = p1.petid AND p1.pettype = 'kitten' INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid  INNER JOIN pets p2 ON hp2.petid = p2.petid AND p2.pettype = 'puppy'",
    "SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'kitten')",
    "SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN (SELECT hp.stuid FROM has_pet hp WHERE hp.petid IN (SELECT p.petid FROM pets p WHERE p.pettype = 'kitten'))",
    "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'kitten')",
    "SELECT DISTINCT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'kitten')",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'puppy')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))",
    "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'kitten')))",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT pettype, AVG(pet_age), MAX(pet_age) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pets.pettype, AVG(pets.weight) FROM pets GROUP BY pets.pettype",
    "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid",
    "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
    "SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "SELECT has_pet.stuid, COUNT(pets.petid) AS num_animals FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY has_pet.stuid",
    "SELECT student.stuid, COUNT(pets.petid) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'kitten' AND pet_age = 3)",
    "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'kitten' AND pet_age = 3)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT COUNT(*) FROM continents",
    "SELECT COUNT(*) FROM continents",
    "SELECT continents.contid, continents.continent, COUNT(DISTINCT countries.countryid) AS num_nations FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT continents.contid, continents.continent, COUNT(DISTINCT countries.countryid) AS num_states FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    "SELECT COUNT(DISTINCT continent) FROM countries",
    "SELECT COUNT(*) FROM countries",
    "SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS number_of_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.fullname, car_makers.id",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY horsepower ASC LIMIT 1",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT model FROM model_list WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT DISTINCT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970",
    "SELECT make, year FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year = (SELECT MIN(year) FROM cars_data)",
    "SELECT car_makers.maker, MIN(cars_data.year)  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  GROUP BY car_makers.maker  ORDER BY MIN(cars_data.year)  LIMIT 1",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT DISTINCT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE year > 1980",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS count FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    "SELECT continents.continent, COUNT(DISTINCT car_makers.maker)  FROM continents  JOIN countries ON continents.contid = countries.continent  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent",
    "SELECT countries.countryname AS state_name FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid ORDER BY COUNT(DISTINCT car_makers.maker) DESC LIMIT 1",
    "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "SELECT car_makers.id, car_makers.fullname, COUNT(DISTINCT model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make = 'amc hornet sportabout (sw)'",
    "SELECT accelerate FROM cars_data WHERE makeid = (SELECT makeid FROM car_names WHERE model = 'hornet sportabout (sw)' AND maker = 'amc')",
    "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = 'France'",
    "SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France' AND car_makers.maker = 'vehicle'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker AND car_makers.country = 'usa'",
    "SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN countries ON car_makers.country = countries.countryname WHERE countries.continent = 'United States'",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    "SELECT maker, model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker JOIN car_names ON model_list.modelid = car_names.modelid",
    "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.makerid",
    "SELECT DISTINCT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ORDER BY countries.countryname",
    "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country ",
    "SELECT id FROM cars_data WHERE horsepower > 150",
    "SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT AVG(weight), year FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3",
    "SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3",
    "SELECT MAX(horsepower), maker FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cylinders = 3 GROUP BY maker",
    "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 3",
    "SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data)",
    "SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY mpg DESC LIMIT 1",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    "SELECT AVG(edispl) FROM cars_data  WHERE id IN (SELECT id FROM car_names WHERE model = 'volvo')",
    "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo'",
    "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders",
    "SELECT model, COUNT(makeid) AS num_makes FROM car_names GROUP BY model ORDER BY num_makes DESC LIMIT 1;",
    "SELECT maker, model, COUNT(DISTINCT makeid) AS num_versions FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY maker, model ORDER BY num_versions DESC LIMIT 1;",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    "SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE car_makers.fullname = 'American Motor Company'",
    "SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = 'American Motor Company'",
    "SELECT id, fullname FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) > 3)",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)",
    "SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.maker WHERE (car_makers.fullname = 'General Motors' OR weight > 3500)",
    "SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500",
    "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 ORDER BY year",
    "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000",
    "SELECT POWER FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    "SELECT MAX(accelerate) FROM cars_data",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT cylinders FROM cars_data WHERE model = 'volvo' ORDER BY accelerate ASC LIMIT 1",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
    "SELECT COUNT(DISTINCT country.continent) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.continent HAVING COUNT(DISTINCT car_makers.maker) > 2",
    "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    "SELECT model FROM model_list  JOIN cars_data ON model_list.modelid = cars_data.id  WHERE cars_data.cylinders = 4  ORDER BY cars_data.horsepower DESC  LIMIT 1",
    "SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    "SELECT makeid, maker FROM car_names  WHERE cylinders <= 3 AND horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN car_names ON car_makers.id = car_names.makeid  JOIN cars_data ON car_names.model = cars_data.id  WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980",
    "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980",
    "SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.maker  WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor Company'",
    "SELECT model FROM model_list  WHERE maker != 'Ford' AND weight < 3500",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3",
    "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT model) > 3)",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')",
    "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers WHERE maker = 'fiat') OR countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3)",
    "SELECT airports.country FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'JetBlue Airways' LIMIT 1;",
    "SELECT countryabbrev FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT COUNT(DISTINCT airline) FROM flights",
    "SELECT COUNT(DISTINCT airline) AS total_airways FROM flights",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM airports",
    "SELECT COUNT(*) FROM flights",
    "SELECT COUNT(*) FROM flights",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    "SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    "SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT city, country FROM airports WHERE airportname = 'Alton airport'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'ATO' OR destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'ASY' AND f.sourceairport != 'ASY'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.sourceairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airports a ON f.sourceairport = a.airportcode JOIN airlines al ON f.airline = al.uid WHERE al.airline = 'United Airlines' AND a.airportcode = 'AHD'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports ap ON f.destairport = ap.airportcode WHERE a.airline = 'United Airlines' AND ap.city = 'Aberdeen'",
    "SELECT sourceairport, COUNT(*) AS num_arriving_flights FROM flights GROUP BY sourceairport ORDER BY num_arriving_flights DESC LIMIT 1;",
    "SELECT sourceairport AS town, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1;",
    "SELECT sourceairport, COUNT(*) AS num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1;",
    "SELECT sourceairport AS town, COUNT(*) AS frequency FROM flights GROUP BY sourceairport ORDER BY frequency DESC LIMIT 1",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT sourceairport AS aerodrome_code FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT sourceairport AS aerodrome, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights ASC LIMIT 1;",
    "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT airlines.airline, COUNT(flights.flightno) AS num_flights FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline ORDER BY num_flights DESC LIMIT 1;",
    "SELECT abbreviation, country FROM airlines  WHERE uid = (SELECT airline FROM flights               GROUP BY airline               ORDER BY COUNT(*) ASC               LIMIT 1)",
    "SELECT abbreviation, countryabbrev FROM airlines a JOIN flights f ON a.uid = f.airline JOIN airports s ON f.sourceairport = s.airportcode JOIN airports d ON f.destairport = d.airportcode GROUP BY abbreviation, countryabbrev HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) cnt FROM flights GROUP BY airline) t) ORDER BY abbreviation LIMIT 1",
    "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'AHD'",
    "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD'",
    "SELECT DISTINCT airlines.airline  FROM flights  JOIN airlines ON flights.airline = airlines.uid  WHERE flights.destairport = 'AHD'",
    "SELECT airline FROM flights WHERE destairport = 'AHD' OR sourceairport = 'AHD'",
    "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.airportname = 'APG' JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.airportname = 'CVO' JOIN airlines ON flights.airline = airlines.airline",
    "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')",
    "SELECT DISTINCT airlines.airline FROM flights JOIN airports AS cvo_airport ON flights.sourceairport = cvo_airport.airportcode AND cvo_airport.city = 'CVO' JOIN airports AS apg_airport ON flights.sourceairport = apg_airport.airportcode AND apg_airport.city = 'APG' JOIN airlines ON flights.airline = airlines.airline WHERE apg_airport.airportcode IS NULL",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    "SELECT flightno FROM flights WHERE destairport = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "SELECT flightno FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT COUNT(*) FROM employee",
    "SELECT COUNT(*) FROM employee",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT name FROM employee ORDER BY age ASC",
    "SELECT city, COUNT(*) AS num_workers FROM employee GROUP BY city",
    "SELECT city, COUNT(*) AS num_staffs FROM employee GROUP BY city",
    "SELECT city FROM employee GROUP BY city HAVING COUNT(CASE WHEN age < 30 THEN employee_id END) > 1",
    "SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "SELECT city, COUNT(DISTINCT shop_id) AS num_shops FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY city",
    "SELECT city, COUNT(DISTINCT shop_id) AS num_stores FROM employee JOIN shop ON employee.employee_id = shop.manager_name GROUP BY city",
    "SELECT name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1;",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT MIN(number_products), MAX(number_products) FROM shop",
    "SELECT name, city, district FROM shop ORDER BY number_products DESC",
    "SELECT name, city, district FROM shop ORDER BY number_products DESC",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  GROUP BY employee.employee_id  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_staff_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id LEFT JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT SUM(bonus) FROM evaluation",
    "SELECT * FROM hiring",
    "SELECT * FROM hiring",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
    "SELECT COUNT(DISTINCT city) FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON shop.shop_id = hiring.shop_id",
    "SELECT COUNT(DISTINCT city) FROM employee",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'",
    "SELECT documents.document_name, documents.template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%w%'",
    "SELECT documents.document_id, templates.template_details, paragraphs.paragraph_text  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE documents.document_name = 'Robbin CV'",
    "SELECT documents.document_id, templates.template_id AS layout_id, documents.document_description AS describing_details FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_type_code) FROM templates",
    "SELECT COUNT(DISTINCT template_type_code) FROM templates",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT' AND d.document_name LIKE '%.txt'",
    "SELECT COUNT(*) FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT' AND d.document_name LIKE '%.txt%'",
    "SELECT templates.template_id AS layout_id, COUNT(documents.document_id) AS num_text_files FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT templates.template_id, COUNT(*) as usage_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id",
    "SELECT template_id, template_type_code FROM documents  WHERE template_id = (SELECT template_id FROM documents                       GROUP BY template_id                       ORDER BY COUNT(*) DESC                       LIMIT 1)",
    "SELECT templates.template_type_code, COUNT(*) AS num_papers FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY num_papers DESC LIMIT 1;",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL",
    "SELECT COUNT(*) FROM templates",
    "SELECT COUNT(*) FROM templates",
    "SELECT templates.template_id, templates.version_number, template_types.template_type_description  FROM templates  JOIN template_types ON templates.template_type_code = template_types.template_type_code",
    "SELECT templates.template_id, templates.version_number, ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
    "SELECT DISTINCT template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types",
    "SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')",
    "SELECT DISTINCT templates.template_id FROM templates WHERE templates.template_type_code IN ('PP', 'PPT')",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'",
    "SELECT version_number, template_type_description FROM templates t JOIN ref_template_types r ON t.template_type_code = r.template_type_code WHERE version_number > 5",
    "SELECT version_number, template_type_description  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE version_number > 5",
    "SELECT template_type_code, COUNT(*) AS num_layouts FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code",
    "SELECT template_type_description, COUNT(*) AS num_layouts FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_description",
    "SELECT template_type_code, COUNT(*) AS num_layouts FROM templates GROUP BY template_type_code ORDER BY num_layouts DESC LIMIT 1;",
    "SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_description ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_description FROM ref_template_types  WHERE template_type_code IN (     SELECT template_type_code FROM templates      GROUP BY template_type_code      HAVING COUNT(DISTINCT template_id) < 3 )",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3)",
    "SELECT MIN(version_number), template_type_code FROM templates",
    "SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1;",
    "SELECT template_type_code FROM templates WHERE template_type_description = 'Data base'",
    "SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'",
    "SELECT document_name FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_details LIKE '%BK%'",
    "SELECT ref_template_types.template_type_description, COUNT(documents.document_id) AS num_papers FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_description",
    "SELECT ref_template_types.template_type_description, COUNT(DISTINCT documents.document_id) AS num_papers FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_description",
    "SELECT template_type_description, COUNT(*) AS num_files FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id WHERE document_name LIKE '%.txt' GROUP BY template_type_description ORDER BY num_files DESC LIMIT 1;",
    "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       INNER JOIN documents ON templates.template_id = documents.template_id       WHERE document_name LIKE '%.txt%')",
    "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT template_type_code       FROM templates       JOIN documents ON templates.template_id = documents.template_id       WHERE document_name LIKE '%.txt%')",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_code, template_type_description FROM ref_template_types",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraph_text LIKE '%.txt%'",
    "SELECT DISTINCT template_type_description FROM ref_template_types t JOIN templates temp ON t.template_type_code = temp.template_type_code JOIN documents d ON temp.template_id = d.template_id JOIN paragraphs p ON d.document_id = p.document_id",
    "SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs",
    "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Summer Show'",
    "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')",
    "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'",
    "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY'",
    "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'",
    "SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id ASC",
    "SELECT document_id, COUNT(paragraph_id) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id ASC",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name LIKE '%.txt%' GROUP BY documents.document_id, documents.document_name",
    "SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name",
    "SELECT DISTINCT documents.document_name, documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_name, documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_id) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
    "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT documents.document_id, documents.document_name FROM documents JOIN (     SELECT document_id, COUNT(*) AS num_paragraphs     FROM paragraphs     GROUP BY document_id     ORDER BY num_paragraphs DESC     LIMIT 1 ) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_id) BETWEEN 1 AND 2",
    "SELECT DISTINCT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT DISTINCT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'",
    "SELECT COUNT(*) FROM teacher",
    "SELECT COUNT(*) FROM teacher",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT age, hometown FROM teacher",
    "SELECT age, hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT DISTINCT teacher.name FROM teacher WHERE teacher.hometown <> 'Little Lever Urban District'",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)",
    "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
    "SELECT hometown, COUNT(*) as num_instructors FROM teacher GROUP BY hometown",
    "SELECT teacher.hometown, COUNT(DISTINCT teacher.teacher_id) AS num_instructors FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.hometown",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;",
    "SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1",
    "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT course_teach.course.course, teacher.name  FROM course_teach.course  JOIN course_teach.course_arrange ON course_teach.course.course_id = course_teach.course_arrange.course_id  JOIN course_teach.teacher ON course_teach.course_arrange.teacher_id = course_teach.teacher.teacher_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "SELECT c.course, t.name  FROM course_teach ct  JOIN course c ON ct.course_id = c.course_id  JOIN teacher t ON ct.teacher_id = t.teacher_id  ORDER BY t.name ASC, c.course ASC",
    "SELECT teacher.name FROM course_teach  JOIN course ON course_teach.course_id = course.course_id  JOIN course_arrange ON course.course_id = course_arrange.course_id  JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id  WHERE course.course = 'math'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT teacher.name, COUNT(DISTINCT course_arrange.course_id) AS num_curriculums_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_curriculums_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2)",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "SELECT COUNT(*) FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC",
    "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009",
    "SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.museum_id IN (     SELECT museum_id     FROM visit     GROUP BY museum_id     HAVING COUNT(DISTINCT visitor_id) > 1 )",
    "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;",
    "SELECT museum.museum_id, museum.name  FROM museum_visit  JOIN museum ON museum_visit.museum_id = museum.museum_id  GROUP BY museum.museum_id, museum.name  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.num_of_ticket) DESC LIMIT 1;",
    "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)",
    "SELECT DISTINCT v.name FROM visitor v JOIN visit v1 ON v.id = v1.visitor_id JOIN visit v2 ON v.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010)",
    "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "select count(*) from players",
    "SELECT COUNT(*) FROM players",
    "SELECT COUNT(*) FROM matches",
    "SELECT COUNT(*) FROM matches",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT AVG(winner_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT MAX(loser_rank) FROM matches",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT country_code) FROM players",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(DISTINCT tourney_id) > 10",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "SELECT players.country_code, players.first_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'",
    "SELECT first_name, last_name, country_code FROM players WHERE player_id IN (     SELECT winner_id FROM matches     WHERE tourney_name = 'WTA Championships'     AND winner_id IN (         SELECT winner_id FROM matches         WHERE tourney_name = 'Australian Open'     ) )",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)",
    "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
    "SELECT first_name, last_name FROM players ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date",
    "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT players.first_name, players.country_code FROM players JOIN (SELECT winner_id, COUNT(*) AS num_tours FROM matches GROUP BY winner_id ORDER BY num_tours DESC LIMIT 1) AS max_tours ON players.player_id = max_tours.winner_id",
    "SELECT players.first_name, players.country_code FROM players JOIN (SELECT winner_id, COUNT(*) AS num_tours FROM matches GROUP BY winner_id ORDER BY num_tours DESC LIMIT 1) AS max_tours ON players.player_id = max_tours.winner_id",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year, COUNT(*) AS num_competitions FROM matches GROUP BY year ORDER BY num_competitions DESC LIMIT 1;",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = (SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1",
    "SELECT winner_name, winner_rank_points FROM (     SELECT winner_name, winner_rank_points, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank     FROM matches     GROUP BY winner_name, winner_rank_points ) AS t WHERE rank = 1",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT matches.loser_name, matches.winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name",
    "SELECT first_name, AVG(rankings.ranking) as avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id",
    "SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name",
    "SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
    "SELECT country_code, COUNT(*) as num_participants FROM players GROUP BY country_code",
    "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, COUNT(*) as total_trips FROM rankings GROUP BY ranking_date",
    "SELECT ranking_date, SUM(tours) AS total_travels FROM rankings GROUP BY ranking_date",
    "SELECT year, COUNT(*) AS num_games FROM matches GROUP BY year",
    "SELECT year, COUNT(*) FROM matches GROUP BY year",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "SELECT first_name, last_name, ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE birth_date > (SELECT MAX(birth_date) FROM players) ORDER BY birth_date ASC LIMIT 3",
    "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "SELECT COUNT(*) FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships'",
    "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) AND r.ranking_date = (SELECT MAX(ranking_date) FROM rankings)",
    "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1",
    "SELECT hand, COUNT(*) as num_participants FROM players GROUP BY hand",
    "SELECT hand, COUNT(*) FROM players GROUP BY hand",
    "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "SELECT name, tonnage FROM ship ORDER BY name DESC",
    "SELECT name, date, result FROM battle",
    "SELECT MAX(killed), MIN(killed) FROM death",
    "SELECT AVG(injured) FROM death",
    "SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' AND battle.id NOT IN (     SELECT DISTINCT lost_in_battle     FROM ship     WHERE ship_type = 'Brig' )",
    "SELECT DISTINCT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) + SUM(death.injured) > 10",
    "SELECT caused_by_ship_id, name FROM ship JOIN (SELECT caused_by_ship_id, SUM(injured) AS total_injured FROM death GROUP BY caused_by_ship_id ORDER BY total_injured DESC LIMIT 1) AS max_injured ON ship.id = max_injured.caused_by_ship_id",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT COUNT(DISTINCT result) FROM battle",
    "SELECT COUNT(*) FROM battle b WHERE NOT EXISTS (SELECT * FROM ship s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')",
    "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')",
    "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.disposition_of_ship = 'no vessels lost'",
    "SELECT note FROM death WHERE note LIKE '%East%'",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT line_1, line_2 FROM addresses",
    "SELECT COUNT(*) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs",
    "SELECT course_description FROM courses WHERE course_name = 'math'",
    "SELECT course_description FROM courses WHERE course_name LIKE '%math%'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    "SELECT department_id, department_name FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY department_id, department_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT degree_programs.department_id, departments.department_name FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY degree_programs.department_id HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT degree_programs.department_id, COUNT(*) AS count         FROM degree_programs         JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id         JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id         JOIN courses ON student_enrolment_courses.course_id = courses.course_id",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
    "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')",
    "SELECT section_name, section_description FROM sections",
    "SELECT section_name, section_description, other_details FROM sections",
    "SELECT curriculum_id, curriculum_name FROM curriculums WHERE curriculum_id IN (SELECT curriculum_id FROM sections GROUP BY curriculum_id HAVING COUNT(*) <= 2)",
    "SELECT curriculum_id, curriculum_name FROM curriculum WHERE (SELECT COUNT(*) FROM sections WHERE sections.curriculum_id = curriculum.curriculum_id) < 2",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semester.semester_id, semester.semester_name FROM semesters AS semester JOIN student_enrolment AS enrolment ON enrolment.semester_id = semester.semester_id JOIN student_enrolment_courses AS enrolment_courses ON enrolment_courses.student_enrolment_id = enrolment.student_enrolment_id JOIN courses ON courses.course_id = enrolment_courses.course_id JOIN degree_programs ON degree_programs.degree_program_id = enrolment.degree_program_id WHERE degree_programs.degree_summary_name = 'undergraduate' GROUP BY semester.semester_id, semester.semester_name ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT s.semester_id, s.semester_name, se.degree_program_id FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN courses c ON sec.course_id = c.course_id WHERE c.course_name LIKE '%undergraduate%' GROUP BY s.semester_id, se.degree_program_id HAVING COUNT(DISTINCT se.student_id) = (     SELECT COUNT(DISTINCT se2.student_id)     FROM student_enrolment se2     JOIN student_enrolment_courses sec2 ON se2.student_enrolment_id = sec2.student_enrolment_id     JOIN courses c2 ON sec2.course_id = c2.course_id     WHERE c2.course_name LIKE '%undergraduate%'     AND se2.semester_id = s.semester_id     AND se2.degree_program_id = se",
    "SELECT * FROM departments WHERE department_name LIKE '%the computer%'",
    "SELECT department_name, department_description, other_details FROM departments WHERE department_name LIKE '%computer%'",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2;",
    "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment_courses.course_id IN (     SELECT course_id     FROM student_enrolment_courses     GROUP BY course_id     HAVING COUNT(DISTINCT student_enrolment_id) = 2 ) AND student_enrolment.degree_program_id IN (     SELECT degree_program_id     FROM student_enrolment     GROUP BY degree_program_id     HAVING COUNT(DISTINCT semester_id) = 1 )",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelor%'",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs  WHERE degree_program_id IN  (SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC LIMIT 1)",
    "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1",
    "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) as num_enrollments, sp.degree_program_id as undergraduate_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN degree_programs sp ON se.degree_program_id = sp.degree_program_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name, sp.degree_program_id ORDER BY num_enrollments DESC LIMIT 1",
    "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT MAX(num_enrollments) FROM (SELECT COUNT(*) AS num_enrollments FROM student_enrolment GROUP BY student_id) AS temp) LIMIT 1;",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
    "SELECT DISTINCT courses.course_name  FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
    "SELECT courses.course_name  FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  GROUP BY courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1",
    "SELECT courses.course_name  FROM courses  JOIN sections ON courses.course_id = sections.course_id  JOIN student_enrolment_courses ON sections.section_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  GROUP BY courses.course_name  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1",
    "SELECT DISTINCT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT DISTINCT last_name FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)",
    "SELECT transcript_date, student_id FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     HAVING COUNT(DISTINCT student_course_id) >= 2 )",
    "SELECT transcript_date, student_id FROM transcripts JOIN student_enrolment ON transcripts.transcript_id = student_enrolment.student_enrolment_id GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) >= 2",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "SELECT cell_mobile_number FROM students WHERE first_name = 'Timothy' AND last_name = 'Ward'",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
    "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  INNER JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id  INNER JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id  ORDER BY transcript_date ASC LIMIT 1",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id",
    "SELECT current_address_id, COUNT(*) AS num_students FROM students GROUP BY current_address_id ORDER BY num_students DESC LIMIT 1;",
    "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY addresses.address_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT AVG(transcript_date) FROM transcripts",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date), * FROM transcripts",
    "I'm sorry, but I cannot find any information about the release of student records in the given schema. Could you please provide me with another question?",
    "SELECT COUNT(*) FROM students",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT student_course_id, COUNT(*) as max_count FROM student_enrolment_courses GROUP BY student_course_id ORDER BY max_count DESC LIMIT 1",
    "SELECT MAX(enrollment_count), enrollment_id FROM (SELECT COUNT(*) AS enrollment_count, student_enrolment_courses.student_enrolment_id AS enrollment_id FROM student_enrolment_courses GROUP BY student_enrolment_courses.course_id) AS enrollment_counts",
    "SELECT transcript_date, transcript_contents.student_course_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_date ORDER BY COUNT(*) ASC LIMIT 1",
    "SELECT transcript_date, student_id FROM transcripts ORDER BY transcript_id LIMIT 1",
    "SELECT semester.semester_name  FROM semesters AS semester  JOIN student_enrolment AS enrolment ON enrolment.semester_id = semester.semester_id  JOIN degree_programs AS degree ON degree.degree_program_id = enrolment.degree_program_id  JOIN student_enrolment_courses AS enrolment_course ON enrolment_course.student_enrolment_id = enrolment.student_enrolment_id  JOIN courses AS course ON course.course_id = enrolment_course.course_id  WHERE degree.degree_summary_name IN ('Master', 'Bachelor')  GROUP BY semester.semester_name  HAVING COUNT(DISTINCT degree.degree_summary_name) = 2",
    "SELECT se.semester_id  FROM student_enrolment se  JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id  JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id  WHERE dp.degree_summary_name IN ('Masters', 'Bachelors')  GROUP BY se.semester_id  HAVING COUNT(DISTINCT dp.degree_summary_name) = 2",
    "SELECT COUNT(DISTINCT current_address_id) FROM students",
    "SELECT DISTINCT city FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM students ORDER BY last_name DESC",
    "SELECT * FROM sections WHERE section_name = 'h'",
    "SELECT section_description FROM sections WHERE section_name = 'h'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon ORDER BY title ASC",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'",
    "SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE content = 'animation' ORDER BY tv_series.air_date ASC",
    "SELECT title, directed_by FROM cartoon ORDER BY original_air_date",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel",
    "SELECT COUNT(DISTINCT content) FROM tv_channel",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT COUNT(*) FROM tv_series WHERE language = 'English'",
    "SELECT COUNT(*) FROM tv_channel WHERE language = 'English'",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language ORDER BY num_channels ASC LIMIT 1;",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM tv_channel GROUP BY language) AS channel_counts)",
    "SELECT language, COUNT(*) AS num_channels FROM tv_series GROUP BY language",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio' AND cartoon.directed_by = 'animation'",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio' AND cartoon.content = 'animation'",
    "SELECT episode FROM tv_series ORDER BY rating DESC",
    "SELECT * FROM tv_series ORDER BY rating DESC",
    "SELECT tv_series.episode, tv_series.rating  FROM tvshow.tv_series  ORDER BY tv_series.rating DESC  LIMIT 3",
    "SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3",
    "SELECT MIN(share), MAX(share) FROM tv_series",
    "SELECT MAX(share), MIN(share) FROM tv_series",
    "SELECT air_date FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT rating FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = \"A Love of a Lifetime\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'",
    "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT episode FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT directed_by, COUNT(*) FROM cartoon WHERE content = 'animation' GROUP BY directed_by",
    "SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by",
    "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1",
    "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "I'm sorry, but the provided schema doesn't seem to have the necessary information to answer your question. Could you please provide a schema that includes the relevant tables and columns?",
    "SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT tv_channel.country  FROM tv_channel  WHERE tv_channel.id NOT IN      (SELECT tv_series.channel       FROM tv_series       JOIN cartoon ON tv_series.id = cartoon.id       WHERE cartoon.written_by = 'Todd Casey')",
    "SELECT DISTINCT cartoon.directed_by FROM cartoon WHERE cartoon.written_by != 'Todd Casey'",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%animation%'",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%animation%'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English'",
    "SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English' AND content = 'TV'",
    "SELECT id FROM tv_channel WHERE country = 'States' GROUP BY country HAVING COUNT(*) > 2",
    "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2",
    "SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.id IS NULL",
    "SELECT DISTINCT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL",
    "SELECT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones' AND title LIKE '%animation%')",
    "SELECT DISTINCT package_option  FROM tv_channel  WHERE id NOT IN      (SELECT channel       FROM cartoon       WHERE directed_by = 'Ben Jones' AND title LIKE '%animation%')",
    "I'm sorry, but the serialized schema you provided does not contain any information about car gamers. Could you please provide the correct schema or more information about the table containing car gamers?",
    "SELECT COUNT(*) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.nationality = 'car gamer'",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT earnings FROM poker_player ORDER BY earnings DESC",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT final_table_made, best_finish FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT AVG(earnings) FROM poker_player",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000",
    "SELECT DISTINCT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.final_table_made ASC",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))",
    "SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player ORDER BY earnings LIMIT 1)",
    "SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY height DESC LIMIT 1",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200",
    "SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200.0",
    "SELECT p.name FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.earnings DESC",
    "SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC",
    "SELECT nationality, COUNT(*) as num_people FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) FROM people GROUP BY nationality",
    "SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1",
    "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT DISTINCT p1.nationality  FROM people p1  JOIN people p2 ON p1.nationality = p2.nationality AND p1.people_id <> p2.people_id",
    "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name, birth_date FROM people ORDER BY name ASC",
    "SELECT name FROM people WHERE nationality != 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT pg.people_id FROM poker_player pg)",
    "SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT pg.people_id FROM poker_player pg)",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT nationality) FROM people",
    "SELECT COUNT(DISTINCT state) FROM area_code_state",
    "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
    "SELECT vote_id, phone_number, state FROM votes",
    "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state",
    "SELECT MAX(created) FROM votes WHERE state = 'CA'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT DISTINCT state, created FROM votes",
    "SELECT DISTINCT votes.phone_number, contestants.contestant_name FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number GROUP BY votes.phone_number HAVING COUNT(*) >= 2",
    "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)",
    "SELECT area_code FROM (     SELECT area_code, COUNT(*) AS num_votes     FROM votes     JOIN area_code_state ON votes.state = area_code_state.state     GROUP BY area_code     ORDER BY num_votes DESC     LIMIT 1 ) AS max_votes_area",
    "SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')",
    "SELECT DISTINCT area_code FROM voter_1 WHERE phone_number IN (     SELECT phone_number FROM votes     WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')     INTERSECT     SELECT phone_number FROM votes     WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss') )",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean'",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')",
    "SELECT region FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Kabul')",
    "SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = true",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'",
    "SELECT region, population FROM country WHERE name = 'Angola'",
    "SELECT country.region, city.population FROM country JOIN city ON country.capital = city.id WHERE country.name = 'Angola'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia'",
    "SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp  FROM country  WHERE continent = 'Asia'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'",
    "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')",
    "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT SUM(population) FROM city WHERE district = 'Gelderland'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform LIKE '%US territory%'",
    "SELECT AVG(gnp), SUM(population) FROM country WHERE code IN ('ASM', 'GUM', 'MNP', 'PRI', 'UMI', 'VIR')",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true",
    "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT country.name FROM country  JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS lang_count  ON country.code = lang_count.countrycode",
    "SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1;",
    "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY num_languages DESC LIMIT 1;",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch')",
    "SELECT DISTINCT c1.name FROM countrylanguage cl1 JOIN country c1 ON cl1.countrycode = c1.code JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode AND cl1.language <> cl2.language JOIN country c2 ON cl2.countrycode = c2.code WHERE cl1.language = 'English' AND cl2.language = 'French'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T')",
    "SELECT COUNT(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
    "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))",
    "SELECT DISTINCT country.region FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' AND countrylanguage.isofficial = 'T'",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1) AND isofficial = true",
    "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' GROUP BY code HAVING COUNT(*) = 1) GROUP BY language HAVING COUNT(*) = 1",
    "SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform LIKE '%Republic%' AND code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(*) = 1))",
    "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE language = 'English' ORDER BY population DESC LIMIT 1",
    "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930 AND cl.isofficial = 'T'",
    "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 'T'",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > ALL(SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')",
    "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.code2  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language != 'English'",
    "SELECT DISTINCT code2 FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English' AND isofficial = 'T')",
    "SELECT DISTINCT code2 FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != 'English')",
    "SELECT code2 FROM country WHERE code2 NOT IN (SELECT country.code2 FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English') AND governmentform != 'Republic'",
    "SELECT DISTINCT country.code2  FROM country  WHERE country.governmentform NOT LIKE '%Republic%'  AND country.code NOT IN (     SELECT countrylanguage.countrycode      FROM countrylanguage      WHERE countrylanguage.language != 'English' )",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name, indepyear, continent FROM country ORDER BY population ASC LIMIT 1",
    "SELECT name, indepyear, continent FROM country ORDER BY population ASC LIMIT 1",
    "SELECT country.population, country.name, country.headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'  GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T'  GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2",
    "SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT district, COUNT(name)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district",
    "SELECT governmentform, SUM(population) as total_residents FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT governmentform, SUM(population) as total_residents FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "SELECT AVG(lifeexpectancy), COUNT(*) FROM country WHERE lifeexpectancy < 72 GROUP BY continent",
    "SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS avg_lifespan FROM country WHERE avg_lifespan < 72 GROUP BY continent",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name, territory FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT name FROM country WHERE continent = 'Europe' AND code IN (SELECT countrycode FROM city WHERE population = 80000)",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT COUNT(*) AS total_people, AVG(surfacearea) AS avg_territory FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT COUNT(*) AS total_people, AVG(surfacearea) AS avg_territory FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1",
    "SELECT country.name, countrylanguage.language FROM country JOIN (     SELECT countrycode, language, MAX(percentage) AS max_percentage     FROM countrylanguage     GROUP BY countrycode ) AS cl ON country.code = cl.countrycode WHERE cl.max_percentage = (     SELECT MAX(percentage)     FROM countrylanguage     WHERE countrycode = cl.countrycode ) ORDER BY country.name ASC",
    "SELECT country.code AS nation_abbreviation, countrylanguage.language AS most_spoken_language FROM country JOIN (     SELECT countrycode, language     FROM countrylanguage     WHERE isofficial = 'T'     ORDER BY percentage DESC ) AS countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code",
    "SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage >= ALL (SELECT percentage FROM countrylanguage WHERE language = 'Spanish')",
    "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50.0",
    "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'))",
    "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Spanish' AND percentage > 50.0",
    "SELECT COUNT(*) FROM conductor",
    "SELECT COUNT(*) FROM conductor",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
    "SELECT * FROM orchestra WHERE orchestra = 'ensembles' ORDER BY year_of_founded DESC",
    "SELECT AVG(attendance) FROM show",
    "SELECT AVG(attendance) FROM show",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final'",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT COUNT(DISTINCT nationality) FROM conductor",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor  GROUP BY conductor.name  ORDER BY SUM(orchestra.year_of_work) DESC  LIMIT 1",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  JOIN performance ON orchestra.orchestra_id = performance.orchestra_id  WHERE performance.type = 'ensemble'  GROUP BY conductor.name  HAVING COUNT(DISTINCT performance_id) > 1",
    "SELECT DISTINCT c1.name  FROM conductor c1  JOIN orchestra o1 ON c1.conductor_id = o1.conductor_id  JOIN orchestra o2 ON o1.orchestra_id <> o2.orchestra_id AND o1.conductor_id = o2.conductor_id",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.type = 'ensemble' GROUP BY conductor.conductor_id ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.type = 'ensemble' GROUP BY conductor.name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id JOIN performance p ON o.orchestra_id = p.orchestra_id WHERE p.type = 'ensemble' AND p.date > '2008'",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT orchestra.record_company, COUNT(DISTINCT orchestra_id) AS num_ensembles FROM orchestra GROUP BY orchestra.record_company",
    "SELECT orchestra.record_company, COUNT(DISTINCT orchestra.orchestra_id) AS num_ensembles_managed FROM orchestra GROUP BY orchestra.record_company",
    "SELECT orchestra, COUNT(*) AS count FROM orchestra GROUP BY orchestra ORDER BY count ASC",
    "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "SELECT orchestra.record_company FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.record_company HAVING COUNT(DISTINCT performance.performance_id) = (     SELECT MAX(count)     FROM (         SELECT COUNT(DISTINCT performance.performance_id) AS count         FROM orchestra         JOIN performance ON orchestra.orchestra_id = performance.orchestra_id         GROUP BY orchestra.record_company     ) AS counts )",
    "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1;",
    "SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    "SELECT orchestra  FROM orchestra  WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)",
    "SELECT e1.* FROM orchestra e1 JOIN orchestra e2 ON e1.orchestra_id = e2.orchestra_id WHERE e1.year_of_founded < 2003 AND e2.year_of_founded > 2003",
    "SELECT DISTINCT record_company  FROM orchestra  WHERE orchestra_id IN (     SELECT orchestra_id      FROM orchestra      WHERE year_of_founded < 2003 ) AND orchestra_id IN (     SELECT orchestra_id      FROM orchestra      WHERE year_of_founded > 2003 )",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1)",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT COUNT(*) FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT name, grade FROM highschooler",
    "SELECT grade FROM highschooler",
    "SELECT id, grade FROM highschooler",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT id FROM highschooler WHERE name = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10)",
    "SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade;",
    "SELECT grade, COUNT(*) FROM highschooler GROUP BY grade",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    "SELECT friend.student_id, COUNT(friend.friend_id) AS num_of_friends FROM friend GROUP BY friend.student_id;",
    "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.name",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id = (     SELECT friend.student_id      FROM friend      GROUP BY friend.student_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1)",
    "SELECT h1.name FROM highschooler h1 JOIN friend f ON h1.id = f.student_id GROUP BY h1.id, h1.name HAVING COUNT(DISTINCT f.friend_id) >= 3",
    "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f GROUP BY f.student_id HAVING COUNT(*) >= 3) ORDER BY h.name",
    "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h2.name FROM highschooler h1, highschooler h2, friend f WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT h1.id FROM highschooler h1 WHERE NOT EXISTS (     SELECT *     FROM friend f     WHERE f.student_id = h1.id )",
    "SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT h.name  FROM highschooler h  WHERE NOT EXISTS (     SELECT *      FROM friend f      WHERE f.student_id = h.id      OR f.friend_id = h.id )",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id WHERE EXISTS (SELECT 1 FROM friend WHERE student_id = f.student_id AND friend_id <> f.friend_id) ORDER BY f.student_id",
    "SELECT DISTINCT f1.student_id FROM friend f1 JOIN friend f2 ON f1.student_id = f2.friend_id AND f1.friend_id = f2.student_id JOIN likes l ON f1.student_id = l.student_id AND f2.friend_id = l.liked_id",
    "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE EXISTS (SELECT 1 FROM friend WHERE student_id = h.id) AND EXISTS (SELECT 1 FROM likes WHERE student_id = h.id AND liked_id <> f.friend_id)",
    "SELECT DISTINCT h1.name FROM highschooler h1, friend f1, likes l1 WHERE h1.id = f1.student_id AND h1.id = l1.student_id AND h1.id IN (     SELECT f2.student_id     FROM friend f2     WHERE f2.friend_id = h1.id ) AND h1.id IN (     SELECT l2.student_id     FROM likes l2     WHERE l2.liked_id = h1.id )",
    "SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id",
    "SELECT student_id, COUNT(*) FROM likes GROUP BY student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(likes.liked_id) DESC LIMIT 1",
    "SELECT highschooler.name  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.id  ORDER BY COUNT(*) DESC  LIMIT 1;",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT DISTINCT h.name  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.id  HAVING COUNT(DISTINCT l.liked_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    "SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)",
    "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)",
    "SELECT state FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE breed_code IN (SELECT breed_code FROM dogs WHERE breed_code = 'guardians') AND state IN (SELECT state FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE breed_code IN (SELECT breed_code FROM dogs WHERE breed_code = 'veterinarians')))) GROUP BY state HAVING COUNT(DISTINCT breed_code) = 2",
    "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state WHERE professionals.role_code IN ('guardian', 'veterinarian')",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'medical care'",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code = 'health care'",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
    "SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments JOIN charges ON treatments.treatment_type_code = charges.charge_type WHERE charge_amount > 1000)",
    "SELECT name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)",
    "SELECT DISTINCT professionals.first_name FROM professionals WHERE (role_code = 'veterinarian' OR role_code = 'guardian') AND professionals.first_name NOT IN  (SELECT DISTINCT dogs.name FROM dogs)",
    "SELECT DISTINCT first_name FROM professionals WHERE role_code IN ('veterinarian', 'guardian') AND first_name NOT IN (SELECT name FROM dogs WHERE breed_code IS NOT NULL)",
    "SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     WHERE treatments.treatment_type_code IN (         SELECT treatment_types.treatment_type_code         FROM treatment_types         WHERE treatment_types.treatment_type_description = 'medical care'     ) AND treatments.dog_id IN (         SELECT dogs.dog_id         FROM dogs         WHERE dogs.abandoned_yn = 'N'     ) )",
    "SELECT id, role, email  FROM professionals  WHERE id NOT IN      (SELECT professional_id       FROM treatments       JOIN dogs ON treatments.dog_id = dogs.dog_id       WHERE dogs.gender = 'male')",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1",
    "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN (SELECT owner_id, COUNT(*) AS num_dogs       FROM dogs       GROUP BY owner_id) AS dog_counts ON owners.owner_id = dog_counts.owner_id WHERE owners.owner_id IN (SELECT owner_id                           FROM dogs                           WHERE abandoned_yn = 'N'                           GROUP BY owner_id                           HAVING COUNT(*) = (SELECT MAX(num_dogs)                                              FROM (SELECT COUNT(*) AS num_dogs                                                    FROM dogs                                                    WHERE abandoned_yn = 'N'                                                    GROUP BY owner_id) AS dog_counts)))",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2",
    "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY treatments.professional_id HAVING COUNT(DISTINCT treatments.treatment_id) >= 2 AND professionals.role_code = 'veterinarian'",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1",
    "SELECT charge_type, charge_amount, size_description, treatment_type_description  FROM charges  JOIN sizes ON charges.charge_id = sizes.size_code  JOIN treatment_types ON charges.charge_id = treatment_types.treatment_type_code  ORDER BY charge_amount ASC  LIMIT 1",
    "SELECT * FROM health_care ORDER BY total_cost LIMIT 1;",
    "SELECT dogs.owner_id, owners.zip_code, SUM(treatments.cost_of_treatment) AS total_paid FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY total_paid DESC LIMIT 1;",
    "SELECT owner_id AS guardian_id, zip_code FROM owners WHERE owner_id IN (     SELECT owner_id     FROM dogs     WHERE owner_id IS NOT NULL     GROUP BY owner_id     ORDER BY SUM(         (SELECT SUM(charge_amount)          FROM charges          WHERE charge_type = 'puppy'            AND treatment_id IN (                SELECT treatment_id                FROM treatments                WHERE dog_id = dogs.dog_id            )         )     ) DESC     LIMIT 1 )",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
    "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
    "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)) AND role_code = 'veterinarian'",
    "SELECT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) AND professionals.role_code = 'veterinarian'",
    "SELECT treatments.date_of_treatment, professionals.first_name || ' ' || professionals.last_name AS veterinarian_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT charge_amount, charge_type, treatment_type_description  FROM charges  JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code",
    "SELECT treatment_type_description, charge_amount FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code JOIN charges ON treatment_types.treatment_type_code = charges.charge_type",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.size_code = charges.charge_id WHERE charges.charge_type = 'size'",
    "SELECT owners.first_name AS guardian_given_name, dogs.name AS puppy_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "SELECT d.name, t.date_of_treatment  FROM dogs d  JOIN (SELECT breed_code, COUNT(*) as breed_count FROM dogs GROUP BY breed_code ORDER BY breed_count ASC LIMIT 1) r ON d.breed_code = r.breed_code  JOIN treatments t ON d.dog_id = t.dog_id",
    "SELECT name, date_of_treatment FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1)",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)",
    "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN (SELECT MIN(age) AS min_age FROM dogs) AS youngest ON d.age = youngest.min_age JOIN (SELECT MIN(date_of_birth) AS min_dob FROM dogs WHERE age = youngest.min_age) AS youngest_dob ON d.date_of_birth = youngest_dob.min_dob JOIN (SELECT dog_id FROM dogs WHERE age = youngest.min_age AND date_of_birth = youngest_dob.min_dob) AS youngest_dog ON d.dog_id = youngest_dog.dog_id JOIN owners guardian ON d.owner_id = guardian.owner_id",
    "SELECT last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)",
    "SELECT email_address FROM professionals WHERE role_code = 'veterinarian' AND (state = 'Hawaii' OR state = 'Wisconsin')",
    "SELECT email_address FROM professionals WHERE role_code = 'veterinarian' AND (state = 'Hawaii' OR state = 'Wisconsin')",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments",
    "SELECT COUNT(*) FROM treatments WHERE treatment_type_code = 'health care'",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code = 'health care' AND dog_id IN (SELECT dog_id FROM dogs WHERE age < 1)",
    "SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE treatment_type_code = 'puppies'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%' AND role_code = 'veterinarian'",
    "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%' AND role_code = 'veterinarian'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%' AND owner_id IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'N')",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%' AND email_address IS NOT NULL AND email_address != ''",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT MAX(cost_of_treatment) FROM treatments",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)",
    "SELECT COUNT(DISTINCT dog_id) FROM treatments WHERE treatment_type_code IS NOT NULL",
    "SELECT COUNT(*) FROM owners o WHERE NOT EXISTS (SELECT * FROM dogs d WHERE d.owner_id = o.owner_id AND d.date_departed IS NULL) AND EXISTS (SELECT * FROM dogs d WHERE d.owner_id = o.owner_id AND d.date_departed IS NULL AND EXISTS (SELECT * FROM dog_kennels dk WHERE dk.dog_id = d.dog_id AND dk.temporary_guardian_id IS NOT NULL))",
    "SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE date_departed IS NULL)",
    "SELECT COUNT(*) FROM professionals WHERE role_code = 'veterinarian' AND professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatment_type_code = 'operation' AND dog_id IN (SELECT dog_id FROM dogs WHERE age < 1))",
    "SELECT COUNT(*) FROM professionals WHERE role_code = 'veterinarian' AND professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments WHERE treatment_type_code = 'puppy')",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT MAX(age) FROM dogs WHERE abandoned_yn = 'N'",
    "SELECT MAX(age) FROM dogs WHERE age IS NOT NULL",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_type, charge_amount FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT MAX(charge_amount) FROM charges",
    "SELECT email_address, home_phone, cell_number FROM professionals WHERE role_code = 'veterinarian'",
    "SELECT email_address, home_phone, cell_number FROM professionals WHERE role_code = 'veterinarian'",
    "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes",
    "SELECT DISTINCT breed_code, size_code FROM dogs",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  WHERE professionals.role_code = 'veterinarian'",
    "SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "SELECT COUNT(*) FROM singer",
    "SELECT COUNT(*) FROM singer",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT birth_year, citizenship FROM singer",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT citizenship, COUNT(DISTINCT singer_id) AS num_vocalists FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1",
    "SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;",
    "SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship",
    "SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)",
    "SELECT DISTINCT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.singer_id HAVING COUNT(so.song_id) > 1",
    "SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955",
    "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955",
    "SELECT COUNT(*) FROM other_available_features",
    "select feature_type_name from ref_feature_types where feature_type_code = (select feature_type_code from other_available_features where feature_name = 'AirCon')",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties WHERE property_id = <code>)",
    "SELECT property_name FROM properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
]