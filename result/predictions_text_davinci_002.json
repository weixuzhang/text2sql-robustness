[
    ", song_name , song_release_year , is_male  SELECT COUNT(*) as \"Number of Singers\" FROM singer",
    ", song_name , is_solo_performance |  SELECT COUNT(*) as \"total number of singers\" FROM singer",
    "SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age",
    "SELECT singer.name, singer.country, singer.age FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id ORDER BY singer.age DESC",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    ", song_name , song_release_year , age , is_male  SELECT name, song_release_year FROM singer JOIN concert_singer USING (singer_id) WHERE age = (SELECT MIN(age) FROM singer)",
    ", song_name , song_release_year , is_male  SELECT name, song_release_year FROM singer JOIN concert_singer ON singer.singer_id = concert_singer.singer_id WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT DISTINCT country FROM singer WHERE age > 20",
    "SELECT country, COUNT(singer_id) as num_singers FROM singer GROUP BY country",
    ", song_name , song_release_year , is_male  SELECT country, COUNT(*) as num_singers FROM singer GROUP BY country",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 AND 10000",
    ", song_name , song_release_year , is_male  SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
    "SELECT MAX(capacity) AS \"maximum capacity\", AVG(capacity) AS \"average capacity\" FROM stadium",
    "SELECT AVG(capacity), MAX(capacity) FROM stadium",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    ", song_name , is_lead_singer |  SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015)",
    "SELECT COUNT(*)  FROM concert  WHERE year IN (2014, 2015)",
    "SELECT stadium.name, COUNT(concert.concert_id) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name",
    "SELECT stadium.name, COUNT(concert.concert_id) as num_concerts FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name",
    ", song_name , is_lead_singer  SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity HAVING COUNT(*) = (SELECT MAX(c)                   FROM (SELECT COUNT(*) AS c                         FROM concert                         WHERE year >= 2014                         GROUP BY stadium_id) AS tmp);",
    "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY stadium.name, stadium.capacity HAVING COUNT(*) = (SELECT MAX(c)                    FROM (SELECT COUNT(*) AS c                          FROM concert                          GROUP BY concert.stadium_id) AS temp)",
    "SELECT year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1",
    "SELECT year FROM concert GROUP BY year HAVING COUNT(*) = (SELECT MAX(c)                    FROM (SELECT COUNT(*) AS c                          FROM concert                          GROUP BY year) AS tmp);",
    "SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL",
    "SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL",
    "SELECT country  FROM singer  WHERE age > 40 AND age < 30",
    "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert WHERE concert.year = 2014)",
    "SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year != 2014 GROUP BY stadium.name HAVING COUNT(concert.concert_id) = 0",
    ", number_of_singers  SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS \"number_of_singers\" FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme",
    "SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer.singer_id = singer_in_concert.singer_id GROUP BY concert.concert_name, concert.theme",
    ", song_name , song_release_year , is_male  SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    ", song_name , song_release_year , is_male  SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    ", song_name  SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name LIKE '%Hey%'",
    ", song_name  SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer_in_concert.song_name LIKE '%Hey%'",
    "SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015) GROUP BY stadium.name, stadium.location HAVING COUNT(DISTINCT concert.year) = 2",
    ", song_name , is_lead_singer  SELECT DISTINCT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN (2014, 2015)",
    "SELECT COUNT(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium)",
    "SELECT COUNT(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.capacity HAVING stadium.capacity = MAX(stadium.capacity)",
    ", color , name  SELECT COUNT(*) FROM pets WHERE weight > 10",
    ", color , name  SELECT COUNT(*) FROM pets WHERE weight > 10",
    ", color , name | pet_types : pettype , pet_type_name  SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    ", color , name | pet_types : pettype , pet_type_name  SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    ", color  SELECT MAX(weight), pettype FROM pets GROUP BY pettype",
    ", color , name  SELECT pettype, MAX(weight), type FROM pets GROUP BY pettype",
    ", color , name  SELECT COUNT(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20",
    ", color , name , owner_name |  SELECT COUNT(*) FROM pets_1 JOIN has_pet ON pets_1.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets_1.age > 20",
    ", color , name , breed  SELECT COUNT(*) FROM pets_1 JOIN has_pet ON pets_1.stuid = has_pet.stuid JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F' AND pets_1.pettype = 'dog'",
    ", color , name | dog : petid , breed , obedience_training |  SELECT COUNT(*) FROM students JOIN has_pet ON students.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.petid = dog.petid WHERE students.sex = 'female'",
    ", height , pet_color  SELECT COUNT(DISTINCT pettype) FROM pets;",
    ", color , name  SELECT DISTINCT pettype FROM pets;",
    ", color | pettype : pettypeid , pet_type_name  SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    ", color , name |  SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    ", color , name |  SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog' GROUP BY student.stuid HAVING COUNT(*) = 2",
    ", color , name | pet_types : pettype , pet_type_desc | cities : city_code , city_name  SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog'",
    ", color | pettype : pettypeid , pet_type_name  SELECT major, age FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet      WHERE petid IN          (SELECT petid           FROM pets           WHERE pettype = 'cat'))",
    ", color | pettype : pettypeid , pet_type_name |  SELECT major, age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid IS NULL OR pets.pettype != 'cat'",
    ", color | pet_types : pettype , pet_descr | cities : city_code , city_name  SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid                     FROM has_pet                     WHERE petid IN (SELECT petid                                     FROM pets                                     WHERE pettype = 'cat'))",
    ", color , name | pet_types : pettype , pet_description | cities : city_code , city_name , state_code , state_name  SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid                    FROM has_pet                    WHERE petid IN (SELECT petid                                   FROM pets                                   WHERE pettype = 'cat'))",
    ", color , name , owner_ssn  SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND NOT EXISTS (     SELECT *     FROM has_pet     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat'     AND has_pet.stuid = student.stuid )",
    ", color , name | pet_types : pettype , pet_type_desc | cities : city_code , city_name  SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND NOT EXISTS (     SELECT *     FROM has_pet AS h     JOIN pets AS p ON h.petid = p.petid     WHERE p.pettype = 'cat'     AND h.stuid = student.stuid )",
    ", pet_color |  SELECT type, weight FROM pets WHERE age = (SELECT MIN(age) FROM pets)",
    ", color , name  SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    ", color , name  SELECT id, weight FROM pets WHERE age > 1",
    ", color , name  SELECT id, weight FROM pets WHERE age > 1",
    ", color  SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    ", height , name , color  SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    ", color  SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    ", color , name  SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    ", color , name  SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    ", color , name |  SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid;",
    ", color , name  SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    ", color , name , owner_name |  SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    ", color , name , owner_id  SELECT stuid, COUNT(*) as num_pets FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY stuid",
    ", color , name | pet_types : pettype , pet_category | cities : city_code , city_name  SELECT stuid, COUNT(petid) as num_pets FROM has_pet GROUP BY stuid",
    ", color , name  SELECT fname, sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid HAVING COUNT(*) > 1",
    ", color , name |  SELECT fname, sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid HAVING COUNT(*) > 1",
    ", color , name  SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3",
    ", color , name  SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3",
    ", color | pet_types : pettype , pet_category | cities : city_code , city_name  SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    ", color , name | pet_types : pettype , pet_category | cities : city_code , city_name  SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    ", origin | SELECT count(*) FROM continents;  SELECT count(*) FROM continents;",
    ", origin | SELECT count(*) FROM continents",
    ", origin |  SELECT continents.contid, continents.continent, count(countries.countryid) as num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent",
    ", origin |  SELECT contid, continent, count(*) FROM continents JOIN countries ON countries.continent = continents.continent GROUP BY contid, continent",
    ", origin | SELECT COUNT(*) FROM countries",
    ", origin | SELECT COUNT(*) FROM countries",
    ", origin |  SELECT fullname, id, count(model) as num FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY fullname, id",
    ", origin , name , makeid , modelid  SELECT car_makers.fullname, car_makers.id, count(model_list.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id",
    ", origin |  SELECT model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    ", origin |  SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data)",
    ", origin |  SELECT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.make = cars_data.make WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)",
    ", origin |  SELECT model FROM car_names WHERE weight < (SELECT AVG(weight) FROM cars_data)",
    ", origin |  SELECT fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.make WHERE cars_data.year = 1970",
    ", origin , name , makeid , modelid  SELECT DISTINCT maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.makeid WHERE year = 1970",
    ", origin |  SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY year ORDER BY year LIMIT 1;",
    ", origin , name , serial_id , modelid  SELECT maker, MIN(year) AS earliest_year FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.serial_id = cars_data.serial_id GROUP BY maker",
    ", origin , name  SELECT DISTINCT model FROM model_list WHERE year>1980",
    ", origin , name , modelid , makeid , makerid  SELECT DISTINCT model FROM car_names JOIN model_list ON car_names.model = model_list.model WHERE year > 1980",
    ", origin |  SELECT continents.continent, count(DISTINCT car_makers.maker) as num_makers FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent",
    ", origin , name , makeid , modelid  SELECT continent, count(maker) as num_makers FROM continents JOIN countries ON countries.continent = continents.continent JOIN car_makers ON car_makers.country = countries.countryname GROUP BY continent",
    ", origin |  SELECT countryname, COUNT(DISTINCT maker) AS num_makers FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING num_makers = (SELECT MAX(num_makers) FROM                      (SELECT countryname, COUNT(DISTINCT maker) AS num_makers                     FROM countries                     JOIN car_makers ON countries.countryid = car_makers.country                     GROUP BY countryname) AS temp)",
    ", origin , name |  SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(*) DESC LIMIT 1",
    ", origin | car_models : modelid , maker , model , fullname , country |  SELECT fullname, count(model) as count FROM car_makers JOIN car_models ON car_makers.id = car_models.maker GROUP BY fullname",
    ", origin |  SELECT car_makers.id, car_makers.fullname, count(model_list.modelid) as num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    ", modelid , makeid | sw_cars : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year , modelid , makeid |  SELECT accelerate FROM cars_data WHERE make = 'amc hornet sportabout (sw)'",
    ", modelid , makeid , countryid  SELECT accelerate FROM cars_data WHERE model = 'amc hornet sportabout (sw)'",
    ", origin | SELECT count(DISTINCT maker) FROM car_makers WHERE country = 'France'",
    ", origin , name  SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country = 'France'",
    ", origin |  SELECT COUNT(DISTINCT model) FROM car_names WHERE make = 'usa'",
    ", origin |  SELECT COUNT(model) FROM car_names WHERE make = 'United States'",
    ", origin |  SELECT AVG(cars_data.mpg)  FROM cars_data  WHERE cars_data.cylinders = 4",
    ", origin |  SELECT AVG(cars_data.mpg) FROM cars_data WHERE cars_data.cylinders = 4",
    ", origin |  SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    ", origin |  SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974",
    ", origin , name , makeid , modelid , contid , countryid |  SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model;",
    ", origin , name , maker , model  SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model WHERE maker = model;",
    ", origin | SELECT countries.countryname, countries.id FROM countries JOIN car_makers ON countries.id = car_makers.country GROUP BY countries.countryname HAVING COUNT(car_makers.id) > 0;",
    ", origin | SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname , countries.countryid HAVING COUNT(car_makers.id) > 0",
    ", origin , name , serial_schema:  | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year , origin , name ,  SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE horsepower > 150",
    ", modelid  SELECT AVG(weight) FROM cars_data WHERE year=",
    ", modelid  SELECT AVG(weight), year FROM cars_data GROUP BY year",
    ", origin , name , makeid , modelid  SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.make WHERE countries.continent = 'Europe' GROUP BY countryname HAVING COUNT(DISTINCT maker) >= 3",
    ", origin |  SELECT countryname FROM countries WHERE continent = 'Europe' AND countryid IN     (SELECT countryid      FROM car_makers      GROUP BY countryid      HAVING COUNT(*) >= 3)",
    ", origin |  SELECT MAX(horsepower), make FROM car_names WHERE cylinders = 3",
    ", origin |  SELECT MAX(horsepower) AS horsepower, make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 3 GROUP BY make",
    ", origin |  SELECT MAX(mpg) FROM cars_data",
    ", origin |  SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model ORDER BY MAX(mpg) DESC LIMIT 1;",
    ", origin |  SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    ", origin |  SELECT AVG(horsepower) FROM cars_data WHERE year < 1980",
    ", modelid  SELECT AVG(edispl) FROM cars_data WHERE modelid IN (SELECT modelid FROM model_list WHERE model = 'volvo')",
    ", modelid  SELECT AVG(edispl) FROM cars_data WHERE modelid IN (SELECT modelid FROM model_list WHERE maker = 'volvo')",
    ", modelid  SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders",
    ", origin |  SELECT MAX(accelerate) FROM cars_data;",
    ", origin , name , makeid , modelid  SELECT make, count(*) as num FROM car_names GROUP BY make ORDER BY num DESC LIMIT 1",
    ", origin , name , modelid  SELECT model, count(DISTINCT version) as num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE cylinders > 4",
    ", origin , name  SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE year = 1980",
    ", origin |  SELECT COUNT(model) FROM model_list WHERE maker = 'American Motor Company'",
    ", origin |  SELECT COUNT(model) FROM model_list WHERE maker = 'American Motor Company'",
    ", origin , name , makeid , modelid  SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker              FROM model_list              GROUP BY maker              HAVING COUNT(model) > 3)",
    ", origin |  SELECT maker, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) > 3)",
    ", origin |  SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') OR weight > 3500;",
    ", origin |  SELECT DISTINCT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model WHERE fullname = 'General Motors' OR weight > 3500",
    ", origin |  SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000",
    ", origin , name , makeid  SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  OR weight > 3000",
    ", origin |  SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1",
    ", modelid  SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)",
    ", modelid , makeid |  SELECT cylinders FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model = 'volvo')",
    ", modelid , makeid , countryid  SELECT cylinders FROM car_names cn JOIN cars_data cd ON cn.id=cd.id JOIN model_list ml ON cn.model=ml.modelid JOIN car_makers cm ON ml.maker=cm.id WHERE cm.maker='volvo' ORDER BY accelerate LIMIT 1",
    ", modelid , makeid , countryid  SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate)                     FROM cars_data                     WHERE horsepower = (SELECT MAX(horsepower)                                         FROM cars_data))",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
    ", origin |   SELECT COUNT(*)  FROM countries  WHERE countryid IN  (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(*) > 2)",
    ", origin , name |  SELECT COUNT(DISTINCT countries.countryname)  FROM countries  JOIN car_makers ON countries.countryname = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(DISTINCT car_makers.maker) > 2",
    ", origin |  SELECT COUNT(*) FROM cars_data WHERE cylinders > 6",
    ", origin |  SELECT COUNT(*) as \"Number of Cars\" FROM cars_data WHERE cylinders > 6",
    ", origin |  SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    ", origin |  SELECT model FROM car_names JOIN cars_data ON car_names.make = cars_data.make WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1",
    ", origin |  SELECT makeid, make FROM car_names WHERE horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cylinders <= 3",
    ", country |  SELECT car_makers.id, car_makers.maker, car_makers.fullname, car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.model = cars_data.model WHERE cars_data.horsepower < 4",
    ", origin |  SELECT MAX(cars_data.mpg)  FROM cars_data  WHERE cars_data.cylinders = 8  OR cars_data.year < 1980",
    ", origin |  SELECT MAX(mpg)  FROM cars_data  WHERE cylinders = 8 OR year < 1980",
    ", origin |  SELECT model FROM model_list WHERE weight < 3500 AND maker != 'Ford Motor Company'",
    ", origin , name , maker , model |  SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND model_list.maker != \"Ford Motor Company\"",
    ", origin , name , makeid , modelid  SELECT countryname  FROM countries  WHERE countryid NOT IN  (SELECT country  FROM car_makers)",
    ", origin , name | SELECT countryname FROM countries WHERE countryname NOT IN (SELECT countryname FROM car_makers)",
    ", origin |  SELECT id, maker FROM car_makers WHERE id IN (   SELECT maker   FROM model_list   GROUP BY maker   HAVING COUNT(model) >= 2 ) AND id IN (   SELECT maker   FROM car_makers   GROUP BY maker   HAVING COUNT(id) > 3 )",
    ", origin , name , makeid , modelid  SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2) AND id IN (SELECT makeid FROM cars_data GROUP BY makeid HAVING COUNT(id) > 3)",
    ", origin , name , makeid , modelid  SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.make WHERE countries.continent = 'Europe' AND ( SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers WHERE car_makers.country = countries.countryid ) > 3 OR ( SELECT COUNT(DISTINCT car_names.make) FROM car_names WHERE car_names.model = 'fiat' ) > 0",
    ", origin |  SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE countries.continent = 'Europe' GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 3 OR SUM(CASE WHEN car_makers.maker = 'Fiat' THEN 1 ELSE 0 END) > 0",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | equipment_1 : equipmentcode , equipmentdescription | equipment_2 : equipmentcode , equipmentdescription | equipment_3 : equipmentcode , equipmentdescription | equipment_4 : equipmentcode , equipmentdescription | equipment_5 : equipmentcode , equipmentdescription | equipment_6 : equipmentcode , equipmentdescription | equipment_7 : equipmentcode , equipmentdescription | equipment_8 : equipmentcode , equipmentdescription | equipment_9 : equipmentcode , equipmentdescription | equipment_10 : equipmentcode , equipmentdescription | equipment_11 : equipmentcode , equipmentdescription | equipment_12 : equipmentcode , equipmentdescription | equipment_13 : equipmentcode , equipmentdescription | equipment_14 : equipmentcode , equipmentdescription | equipment_15 : equipmentcode , equipmentdescription | equipment_16 : equipmentcode , equipmentdescription | equipment_17 : equipmentcode , equipmentdescription | equipment_18 :",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | countries : country , countryabbrev , countrydescription  SELECT country FROM airlines WHERE abbreviation = 'JBU'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmenttype , description |  SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription  SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description | SELECT airportcode , airportname FROM airports WHERE city = 'Anthony'",
    ", departure , arrival , equipment | equipment : airline , flightno , equipment |   SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT COUNT(*) FROM airlines",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT COUNT(*) FROM airlines",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | SELECT COUNT(*) FROM airports",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT COUNT(*) FROM airports",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT COUNT(*) FROM flights",
    ", departuretime , arrivaltime , distance , equipment |  SELECT COUNT(*) FROM flights;",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | flights_1 : airline , flightno , sourceairport , destairport , depdate , deptime , arrdate , arrtime , distance , equipment | equipment_1 : equipmentcode , equipmentdescription  SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | flights_2 : airline , flightno , sourceairport , destairport , depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT airline FROM airlines WHERE abbreviation = 'UAL'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT COUNT(*)  FROM airlines  WHERE country = 'USA'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT COUNT(*) FROM airlines WHERE country = 'USA'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | equipment_1 : equipmentcode , equipmentdescription | equipment_2 : equipmentcode , equipmentdescription  SELECT city, country FROM airports WHERE airportname = 'Alton'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT city, country FROM airports WHERE airportname = 'Alton'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmenttype , description |  SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmenttype , description |  SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'APG'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmenttype , description |  SELECT COUNT(*)  FROM flights  WHERE destairport = 'ATO'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABZ'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABR'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT COUNT(*) FROM flights WHERE destairport = 'ABZ'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT COUNT(*) FROM flights WHERE destairport = 'ABR'",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipmenttype , description |  SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'Aberdeen'  AND destairport = 'Ashley'",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABR' AND destairport = 'ASY'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , manufacturer , iatacode , seatsfirst , seatsbusiness , seatscoach , widebody |  SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription  SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport = 'AHD'",
    ", departuretime , arrivaltime , distance , equipment |  SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT city, COUNT(*) as num FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT city, COUNT(*) AS num_flights FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY num_flights DESC LIMIT 1",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT city, COUNT(*) AS num FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY num DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT sourceairport, COUNT(*) as num FROM flights GROUP BY sourceairport ORDER BY num DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY COUNT(flightno) DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription , seatsfirst , seatscoach , seatsfirstandcoach , seatsbusiness , seatsfirstandbusiness , seatscoachandbusiness , seatsfirstandcoachandbusiness |  SELECT airportcode  FROM airports  ORDER BY (SELECT COUNT(*)             FROM flights             WHERE flights.sourceairport = airports.airportcode) ASC  LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT airportcode FROM airports ORDER BY flights ASC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airline, COUNT(*) as num FROM flights GROUP BY airline ORDER BY num DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | SELECT airline , COUNT ( flight_2 . flightno ) AS num_flights FROM flight_2 GROUP BY airline ORDER BY num_flights DESC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT abbreviation, country FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM flights GROUP BY airline) AS temp))",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT abbreviation, country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline WHERE flights.sourceairport = 'AHD' GROUP BY airlines.airline",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipmenttype , description |  SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline WHERE flights.sourceairport = 'AHD'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline WHERE flights.destairport = 'AHD'",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipmenttype , description |  SELECT airlines.airline, flights.flightno, flights.destairport FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'APG' AND flights.destairport = 'CVO' GROUP BY airlines.airline HAVING COUNT(*) > 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline WHERE flights.sourceairport = 'CVO' AND airlines.abbreviation NOT IN (   SELECT airlines.abbreviation   FROM airlines   JOIN flights ON airlines.abbreviation = flights.airline   WHERE flights.sourceairport = 'APG' )",
    ", departuretime , arrivaltime , distance , equipment |  SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'CVO' AND flights.destairport != 'APG' GROUP BY airlines.airline HAVING COUNT(*) >= 1",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airline FROM flight_2.airlines JOIN flight_2.flights ON flight_2.airlines.uid = flight_2.flights.airline GROUP BY airline HAVING COUNT(*) >= 10",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING COUNT(flight_2) < 200",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | SELECT airlines.airline FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY airlines.airline HAVING COUNT(flights.flightno) < 200;",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmenttype , description |  SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription | flight_1 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport , depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription  SELECT flightno FROM flights WHERE airline = 'United Airlines'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE sourceairport = \"APG\";",
    ", departure , arrival , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE sourceairport = 'APG'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment |  SELECT flightno FROM flights WHERE destairport = \"APG\";",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE destairport = 'APG'",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen'",
    ", departuretime , arrivaltime , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE sourceairport = 'ABR'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT flightno FROM flights WHERE destairport = 'Aberdeen'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipmentcode , equipmentdescription |  SELECT flightno FROM flights WHERE destairport = 'ABR'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT COUNT(*)  FROM flights  WHERE sourceairport = 'ABR' OR sourceairport = 'ABI'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment | equipment : equipment , description |  SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABR' OR destairport = 'ABI'",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airportname FROM airports WHERE airportcode NOT IN     (SELECT sourceairport      FROM flights      UNION      SELECT destairport      FROM flights)",
    ", depdate , deptime , arrdate , arrtime , distance , equipment  SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "_percentage  SELECT COUNT(*) FROM employee",
    "_percentage  SELECT COUNT(*) FROM employee",
    "_percentage  SELECT name, age FROM employee ORDER BY age ASC",
    "_percentage  SELECT name FROM employee ORDER BY age ASC",
    "_percentage  SELECT city, count(*) as num_employees FROM employee GROUP BY city",
    "_percentage  SELECT city, count(*) as num_employees FROM employee GROUP BY city",
    "_percentage  SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "_percentage  SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
    "_percentage  SELECT location, COUNT(*) as num_shops FROM shop GROUP BY location",
    "_percentage  SELECT location, COUNT(*) as num_shops FROM shop GROUP BY location",
    "_percentage  SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "_percentage  SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);",
    "_percentage  SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;",
    "_percentage  SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;",
    "_percentage  SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC",
    "_percentage  SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC",
    "_percentage  SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(shop.number_products)                              FROM shop)",
    "_percentage  SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(shop.number_products)                              FROM shop)",
    "_percentage  SELECT name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1",
    "_percentage  SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1",
    "_amount  SELECT name FROM employee WHERE employee_id = (SELECT employee_id FROM evaluation WHERE bonus_amount = (SELECT MAX(bonus_amount) FROM evaluation))",
    "_amount  SELECT name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus_amount = (SELECT MAX(bonus_amount) FROM evaluation)",
    "_percentage , award_name  SELECT name FROM employee WHERE employee_id NOT IN (   SELECT employee_id   FROM evaluation )",
    "_percentage  SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
    "_percentage  SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) =      (SELECT MAX(c)      FROM (SELECT COUNT(hiring.employee_id) AS c            FROM hiring            GROUP BY hiring.shop_id) AS temp)",
    "_percentage  SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) = (SELECT MAX(COUNT(hiring.employee_id))                                     FROM hiring                                     GROUP BY hiring.shop_id)",
    "_percentage  SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL",
    "_percentage  SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL",
    "_percentage  SELECT shop.name, COUNT(hiring.employee_id) AS \"Number of Employees\" FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name",
    "_percentage  SELECT shop.name, count(employee.employee_id) as num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "_amount  SELECT sum(bonus_amount) as total_bonus FROM evaluation",
    "_amount  SELECT sum(bonus_amount) FROM evaluation",
    "_percentage  SELECT * FROM hiring JOIN employee ON hiring.employee_id = employee.employee_id JOIN shop ON hiring.shop_id = shop.shop_id JOIN evaluation ON evaluation.employee_id = employee.employee_id",
    "_percentage  SELECT * FROM hiring JOIN employee ON hiring.employee_id = employee.employee_id JOIN shop ON hiring.shop_id = shop.shop_id",
    "_percentage  SELECT district  FROM shop  GROUP BY district  HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0  AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0",
    "_percentage  SELECT district  FROM shop  WHERE number_products < 3000  AND number_products > 10000",
    "_percentage  SELECT COUNT(DISTINCT shop.location) FROM shop",
    "_percentage  SELECT COUNT(DISTINCT shop.location) FROM shop",
    "SELECT COUNT(*) FROM documents",
    "SELECT COUNT(*) FROM documents",
    "SELECT document_id, document_name, document_description FROM documents",
    "SELECT templates.template_id, templates.template_type_code, template_details.description  FROM cre_Doc_Template_Mgt.templates  JOIN cre_Doc_Template_Mgt.template_details  ON templates.template_id = template_details.template_id",
    "SELECT document_name, template_id FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE document_description LIKE '%w%';",
    "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_description LIKE '%w%'",
    "|  SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "| sections : section_id , document_id , section_text , other_details | SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'",
    "SELECT COUNT(DISTINCT template_id)  FROM templates",
    "SELECT COUNT(DISTINCT template_type_code)  FROM ref_template_types",
    "|  SELECT COUNT(*)  FROM cre_Doc_Template_Mgt.templates  WHERE template_type_code = 'PPT'",
    "|  SELECT COUNT(*)  FROM documents d  JOIN templates t ON d.template_id = t.template_id  WHERE t.template_type_code = 'PPT'",
    "SELECT template_id, COUNT(document_id) as document_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_id",
    "|  SELECT template_id, COUNT(*) FROM templates GROUP BY template_id",
    "SELECT template_id, template_type_code FROM templates JOIN (SELECT template_id, COUNT(*) AS num_docs     FROM documents     GROUP BY template_id     ORDER BY num_docs DESC     LIMIT 1) AS most_docs USING (template_id);",
    "SELECT template_id, template_type_code FROM templates WHERE template_id =  (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "| ref_paragraph_types : paragraph_type_code , paragraph_type_description | cre_Doc_Template_Mgt_Paragraph_Types : template_id , paragraph_type_code , sequence_number , other_details  SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1",
    "SELECT template_id FROM templates WHERE template_id IN (   SELECT template_id   FROM documents   GROUP BY template_id   HAVING COUNT(*) > 1 )",
    "SELECT template_id FROM templates WHERE template_id NOT IN     (SELECT template_id      FROM documents)",
    "SELECT template_id FROM templates WHERE template_id NOT IN     (SELECT template_id      FROM documents)",
    "SELECT COUNT(*)  FROM templates",
    "SELECT COUNT(*)  FROM templates",
    "|  SELECT template_id, version_number, template_type_code FROM templates;",
    "|  SELECT template_id, version_number, template_type_code FROM templates;",
    "| sections : section_id , document_id , section_name , other_details | section_paragraphs : section_id , paragraph_id , other_details  SELECT DISTINCT template_type_code FROM ref_template_types",
    "| sections : section_id , document_id , section_text , other_details |  SELECT template_type_code FROM ref_template_types",
    "SELECT template_id  FROM templates  WHERE template_type_code = 'PP'  OR template_type_code = 'PPT'",
    "|  SELECT template_id FROM templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
    "|  SELECT COUNT(*)  FROM templates  WHERE template_type_code = 'CV'",
    "| sections : section_id , document_id , section_name , other_details | questions : question_id , section_id , question_text , other_details | responses : response_id , question_id , response_text , other_details  SELECT COUNT(*)  FROM cre_Doc_Template_Mgt.templates  WHERE template_type_code = 'CV'",
    "|  SELECT template_type_code, version_number FROM cre_Doc_Template_Mgt.templates WHERE version_number > 5",
    "SELECT version_number, template_type_code FROM templates WHERE version_number > 5",
    "| sections : section_id , document_id , section_text , other_details |  SELECT template_type_code, COUNT(*) AS num_templates FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(template_id) as template_count FROM ref_template_types LEFT JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code",
    "|  SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code HAVING COUNT(*) = (SELECT MAX(COUNT(*))                    FROM templates                    GROUP BY template_type_code)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code = (SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_type_code) DESC LIMIT 1)",
    "|  SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) >= 3)",
    "| SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN ( SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT ( * ) >= 3 )",
    "SELECT version_number, template_type_code FROM templates ORDER BY version_number LIMIT 1",
    "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number)                        FROM templates)",
    "|  SELECT template_type_code FROM cre_Doc_Template_Mgt.templates JOIN cre_Doc_Template_Mgt.documents ON templates.template_id = documents.template_id WHERE document_name = 'Data base'",
    "SELECT template_type_code FROM cre_Doc_Template_Mgt.ref_template_types  JOIN cre_Doc_Template_Mgt.templates ON template_type_code=templates.template_type_code  JOIN cre_Doc_Template_Mgt.documents ON template_id=documents.template_id  WHERE document_name='Data base'",
    "SELECT templates.template_details  FROM templates  JOIN documents ON templates.template_id=documents.template_id  WHERE template_type_code='BK'",
    "| SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT template_type_code, COUNT(documents.document_id)  FROM ref_template_types  JOIN templates ON templates.template_type_code=ref_template_types.template_type_code  JOIN documents ON templates.template_id=documents.template_id  GROUP BY template_type_code",
    "SELECT template_type_code, COUNT(*)  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY template_type_code",
    "SELECT template_type_code FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id GROUP BY template_type_code HAVING COUNT(*) = (SELECT MAX(c)                    FROM (SELECT template_type_code, COUNT(*) AS c                          FROM ref_template_types                          JOIN templates ON templates.template_type_code = ref_template_types.template_type_code                          JOIN documents ON documents.template_id = templates.template_id                          GROUP BY template_type_code) AS t);",
    "SELECT template_type_code FROM ref_template_types JOIN templates ON template_type_code = templates.template_type_code GROUP BY template_type_code HAVING COUNT(*) > 1",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
    "| sections : section_id , document_id , section_text , other_details |  SELECT template_type_code, template_type_description FROM ref_template_types",
    "| sections : section_id , document_id , section_name , other_details | section_paragraphs : section_id , paragraph_id , other_details  SELECT template_type_code, template_type_description FROM ref_template_types",
    "| sections : section_id , document_id , section_text , other_details | questions : question_id , section_id , question_text , other_details | responses : response_id , question_id , response_text , other_details  SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "| sections : section_id , document_id , section_text , other_details | questions : question_id , section_id , question_text , other_details | responses : response_id , question_id , response_text , other_details |  SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
    "|  SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "| ref_paragraph_types : paragraph_type_code , paragraph_type_description | ref_template_paragraph_types : template_type_code , paragraph_type_code , other_details  SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'",
    "| sections : section_id , document_id , section_name , other_details | section_paragraphs : section_id , paragraph_id , other_details  SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON template_type_code = templates.template_type_code",
    "|  SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id",
    "|  SELECT template_id  FROM templates  WHERE template_type_description = 'Presentation'",
    "|  SELECT template_id  FROM templates  WHERE template_type_description = 'Presentation'",
    "SELECT COUNT(*)  FROM paragraphs",
    "SELECT COUNT(*)  FROM paragraphs",
    "SELECT COUNT(*)  FROM paragraphs  WHERE document_id =  (SELECT document_id  FROM documents  WHERE document_name = 'Summer Show')",
    "SELECT COUNT(*)  FROM paragraphs  WHERE document_name = 'Summer Show'",
    "SELECT paragraph_id, document_id, paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text = 'Korea'",
    "|  SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')",
    "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id                     FROM documents                     WHERE document_name = 'Welcome to NY')",
    "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')",
    "SELECT paragraph_text FROM paragraphs WHERE document_name = 'Customer reviews'",
    "SELECT document_id, COUNT(paragraph_id) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id",
    "SELECT document_id, COUNT(paragraph_id) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id",
    "SELECT document_id, document_name, COUNT(paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name",
    "SELECT templates.template_id, templates.template_type_code, templates.template_details, COUNT(paragraphs.paragraph_id)  FROM templates  JOIN documents ON templates.template_id=documents.template_id  JOIN paragraphs ON documents.document_id=paragraphs.document_id  GROUP BY templates.template_id, templates.template_type_code, templates.template_details",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2",
    "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2",
    "SELECT document_id, document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name ORDER BY COUNT(paragraph_id) DESC LIMIT 1",
    "SELECT document_id, document_name FROM documents ORDER BY (SELECT COUNT(*)            FROM paragraphs            WHERE paragraphs.document_id = documents.document_id) DESC LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) LIMIT 1",
    "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1;",
    "SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) BETWEEN 1 AND 2",
    "SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) BETWEEN 1 AND 2",
    "SELECT document_id, paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'",
    "SELECT paragraph_id  FROM paragraphs  WHERE paragraph_text LIKE '%Brazil%'  AND paragraph_text LIKE '%Ireland%'",
    "_id | grade : grade_id , grade_name , num_of_students  SELECT COUNT(*) FROM teacher",
    "_id , class_id , classroom_id | grade : grade_id , grade_name | class : class_id , class_name | classroom : classroom_id , classroom_name  SELECT COUNT(*) FROM teacher",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher ORDER BY age ASC",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher ORDER BY age ASC",
    "_id | grade : grade_id , grade_name  SELECT age, hometown FROM teacher;",
    "_id | grade : grade_id , grade_name  SELECT age, hometown FROM teacher;",
    "_id | grade : grade_id , grade_name |   SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';",
    "_id | grade : grade_id , grade_name |   SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "_id | grade : grade_id , grade_name  SELECT hometown FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id WHERE course_teach.course_id = (SELECT course_id FROM grade WHERE grade_name = 'youngest');",
    "_id | grade : grade_id , grade_name  SELECT teacher.name  FROM course_teach  JOIN teacher ON course_teach.teacher_id = teacher.teacher_id  JOIN course_arrange ON course_teach.course_id = course_arrange.course_id  JOIN grade ON course_arrange.grade_id = grade.grade_id  WHERE grade.grade_name = 'youngest'",
    "_id | grade : grade_id , grade_name | hometown : hometown_id , hometown_name  SELECT hometown_name, COUNT(*) AS num_teachers FROM teacher JOIN hometown ON teacher.hometown_id = hometown.hometown_id GROUP BY hometown_name",
    "_id | grade : grade_id , grade_name | hometown : hometown_id , hometown_name  SELECT COUNT(teacher_id), hometown_name FROM teacher JOIN hometown ON teacher.hometown_id = hometown.hometown_id GROUP BY hometown_name",
    "_id | grade : grade_id , grade_name  SELECT teacher.hometown, count(*) as num FROM course_teach JOIN teacher ON course_teach.teacher_id = teacher.teacher_id GROUP BY teacher.hometown ORDER BY num DESC",
    "_id | grade : grade_id , grade_name  SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown ORDER BY num_teachers DESC LIMIT 1",
    "_id | grade : grade_id , grade_name  SELECT DISTINCT hometown FROM teacher WHERE hometown IN (SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*)>1)",
    "_id | grade : grade_id , grade_name | town : town_id , town_name  SELECT town_name FROM town WHERE town_id IN (SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2)",
    "SELECT teacher.name, course.course_id FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "_id | grade : grade_id , grade_name  SELECT teacher.name, course.course_id FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course_id FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC",
    "_id | grade : grade_id , grade_name  SELECT teacher.name, course.course_id FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id ORDER BY teacher.name ASC",
    "_id | grade : grade_id , grade_name  SELECT teacher.name FROM course_teach JOIN teacher ON course_teach.teacher_id = teacher.teacher_id WHERE course_teach.course_id = 'math'",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id JOIN course ON course_teach.course_id = course.course_id WHERE course.course = 'math'",
    "_id | grade : grade_id , grade_name  SELECT teacher.name, COUNT(course_teach.course_id) FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.name",
    "_id | grade : grade_id , grade_name  SELECT teacher.name, COUNT(course_teach.course_id) FROM teacher JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id GROUP BY teacher.name",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id GROUP BY name HAVING COUNT(*) >= 2",
    "_id | grade : grade_id , grade_name  SELECT name FROM teacher WHERE teacher_id IN (   SELECT teacher_id   FROM course_teach   GROUP BY teacher_id   HAVING COUNT(*) >= 2 )",
    "_id  SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "_id , classroom_id  SELECT name FROM teacher WHERE teacher_id NOT IN (   SELECT teacher_id   FROM course_arrange )",
    "SELECT COUNT(*) as \"Number of Visitors\" FROM visitor WHERE age < 30",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT AVG(age)  FROM visitor  WHERE level_of_membership <= 4",
    "SELECT name, level_of_membership  FROM visitor  WHERE level_of_membership > 4  ORDER BY age DESC",
    "_time , visit_date  SELECT museum.museum_id, museum.name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "SELECT AVG(num_of_staff)  FROM museum_visit  WHERE open_year < 2009",
    "_time | SELECT open_year , num_of_staff FROM museum WHERE name = 'Plaza Museum'",
    "_time , visit_date  SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    ", visit_date  SELECT id, name, age FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(*) > 1",
    "_money  SELECT id, name, level_of_membership FROM visitor WHERE id IN (   SELECT visitor_id   FROM visit   GROUP BY visitor_id   ORDER BY SUM(total_spent_money) DESC   LIMIT 1 )",
    ", visit_date  SELECT museum.id, museum.name FROM museum JOIN visit ON museum.id = visit.museum_id GROUP BY museum.id, museum.name HAVING COUNT(*) = (SELECT MAX(c)                    FROM (SELECT COUNT(*) AS c                          FROM visit                          GROUP BY museum_id) AS tmp);",
    ", visit_date | SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    ", purpose | ticket : museum_id , visitor_id , price , type , purchase_date  SELECT name, age  FROM visitor  JOIN (SELECT visitor_id, MAX(num_of_ticket) AS max_ticket        FROM visit        GROUP BY visitor_id) AS max_visit  ON visitor.id = max_visit.visitor_id",
    ", purpose_of_visit  SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",
    "_on_ticket  SELECT sum(total_spent_on_ticket)  FROM visit  WHERE level_of_membership=1",
    ", visit_date | SELECT visitor.name FROM museum_visit.visitor JOIN museum_visit.visit ON visitor.id = visit.visitor_id JOIN museum_visit.museum ON museum.museum_id = visit.museum_id WHERE museum.open_year < 2009 AND museum.open_year > 2011 GROUP BY visitor.name HAVING COUNT(*) = 2",
    ", visit_date  SELECT COUNT(*)  FROM visitor  WHERE visitor.id NOT IN      (SELECT visitor_id       FROM visit       JOIN museum       ON visit.museum_id = museum.museum_id       WHERE museum.open_year > 2010)",
    ", visit_date  SELECT COUNT(*)  FROM museum_visit  WHERE open_year > 2013 OR open_year < 2008",
    "SELECT COUNT(*) as \"Total Number of Players\"FROM players",
    "_played  SELECT COUNT(*) FROM players",
    "SELECT COUNT(*) as total_matches FROM matches",
    "SELECT COUNT(*) FROM matches",
    "| countries : country_code , country_name  SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'",
    "| countries : country_code , country_full , country_abbrev , notes | surface : surface_name , notes | SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
    "| surface_types : surface | countries : country_code , country_full , country_abbrev | tourney_levels : tourney_level , tourney_level_desc | tourney_categories : tourney_category , tourney_category_desc | tourney_types : tourney_type , tourney_type_desc | player_hand_types : player_hand , player_hand_desc | rounds : round , round_desc | matches_stats : match_id , winner_id , winner_name , loser_id , loser_name , winner_seed , loser_seed , winner_entry , loser_entry , winner_rank , loser_rank , winner_rank_points , loser_rank_points , winner_ace , winner_df , winner_svpt , winner_1stIn , winner_1stWon , winner_2ndWon , winner_SvGms , winner",
    "| surface_types : surface_type | surfaces : surface_type , surface_name | countries : country_code , country_name  SELECT AVG(loser_age) AS avg_age_loser, AVG(winner_age) AS avg_age_winner FROM matches",
    "| SELECT avg(winner_rank) FROM matches",
    "| SELECT avg(winner_rank) FROM matches",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , surface , tourney_location , tourney_singles_draw , tourney_doubles_draw , tourney_conditions , tourney_prize_money , tourney_url , source_url , tourney_slug , tourney_main_draw_size , tourney_qual_draw_size  SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1",
    "SELECT loser_rank FROM matches",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , surface , tourney_location , tourney_singles_draw , tourney_doubles_draw , tourney_conditions , tourney_prize_money , tourney_url , source_url , tourney_slug , tourney_main_draw_size , tourney_qual_draw_size , tourney_order_of_play_url , tourney_abbrev , tourney_starts_on , tourney_ends_on , tourney_series , tourney_series_order , tourney_timezone , tourney_venue , tourney_address , tourney_city , tourney_state , tourney_country , tourney_notes , tourney_latitude , tourney_longitude , tourney_has_qualifying , tour",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_location  SELECT COUNT(DISTINCT country_code)  FROM players",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_location , tourney_prize_money , tourney_slug  SELECT COUNT(DISTINCT loser_name) FROM matches",
    "SELECT DISTINCT loser_name FROM matches",
    "| SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "_played  SELECT DISTINCT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10",
    "| tournaments : tourney_id , tourney_name , tourney_level , tourney_date , tourney_surface , tourney_draw_size , tourney_prize_money , tourney_location , source_id | SELECT DISTINCT first_name, last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE year = 2013 OR year = 2016",
    "_played  SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id                     FROM matches                     WHERE year = 2013) AND player_id IN (SELECT winner_id                   FROM matches                   WHERE year = 2016)",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_city , tourney_country , tourney_prize_money , tourney_slug | SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_city , tourney_country | SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
    "_played | tourneys : tourney_id , tourney_name , surface , draw_size , tourney_level , tourney_date , tourney_month , tourney_year | wta_2 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year",
    "_played | tournaments : tourney_id , tourney_name , surface , draw_size , tourney_level , tourney_date , tourney_month , tourney_year , tourney_url | SELECT first_name, country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN tournaments ON matches.tourney_id = tournaments.tourney_id WHERE tournaments.tourney_name = 'WTA Championships' AND year = matches.year AND matches.winner_id IN (SELECT winner_id FROM matches JOIN tournaments ON matches.tourney_id = tournaments.tourney_id WHERE tournaments.tourney_name = 'Australian Open')",
    "_played  SELECT first_name, country_code  FROM players  ORDER BY birth_date ASC  LIMIT 1",
    "_played  SELECT first_name, country_code  FROM players  ORDER BY birth_date ASC  LIMIT 1",
    "_played  SELECT first_name, last_name FROM players ORDER BY birth_date",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , surface , tourney_location , tourney_singles_draw , tourney_doubles_draw , tourney_conditions , tourney_prize_money , tourney_url , source_url , tourney_slug , tourney_main_draw | SELECT first_name, last_name FROM players ORDER BY birth_date",
    "| tournaments : tourney_date , tourney_id , tourney_level , tourney_name , surface , draw_size , tourney_location , tourney_singles_draw , tourney_doubles_draw , tourney_conditions , tourney_prize_money , tourney_url , source_url , tourney_slug |  SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "| countries : country_code , country_full , country_abbrev | surfaces : surface | SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "_played  SELECT first_name, country_code FROM players JOIN (SELECT player_id, COUNT(*) AS tours_played FROM matches GROUP BY player_id ORDER BY tours_played DESC LIMIT 1) AS most_tours ON players.player_id = most_tours.player_id",
    "SELECT first_name, country_code FROM players JOIN (SELECT player_id, COUNT(*) AS tours FROM matches GROUP BY player_id ORDER BY tours DESC LIMIT 1) AS most_tours ON players.player_id = most_tours.player_id",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_city , tourney_country , tourney_prize_money , tourney_slug | SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY COUNT(winner_name) DESC LIMIT 1",
    "| SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_rank_points DESC LIMIT 1",
    "_played  SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) AND tourney_name = 'Australian Open'",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_city , tourney_country | SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
    "_played  SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "_played  SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1",
    "SELECT first_name, avg(ranking) as avg_rankingFROM playersJOIN rankings ON players.player_id = rankings.player_idGROUP BY first_name;",
    "| tourney_order_of_play : tourney_date , tourney_id , match_num , player_id , result , scoreSELECT first_name, AVG(ranking) as average_rankingFROM playersJOIN rankings ON players.player_id = rankings.player_idGROUP BY first_name",
    "SELECT first_name, sum(ranking_points) as total_ranking_points from players join rankings on players.player_id = rankings.player_id group by first_name;",
    "| tournaments : tourney_date , tourney_id , tourney_level , draw_size , tourney_name , surface , tourney_state , winner_id , winner_age , winner_seed , winner_entry , winner_name , winner_hand , winner_ht , loser_id , loser_age , loser_seed , loser_entry , loser_name , loser_hand , loser_ht , score , best_of , round , minutes , tourney_timezone , tourney_location , tourney_country | SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name ORDER BY total_ranking_points DESC",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_location  SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_location , tourney_prize_money | SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code",
    "| countries : country_code , country_name  SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(*) = (SELECT MAX(c)                     FROM (SELECT COUNT(*) AS c                           FROM players                           GROUP BY country_code) AS t)",
    "| countries : country_code , country_name  SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1",
    "| countries : country_code , country_name  SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
    "| countries : country_code , country_name  SELECT country_code FROM countries JOIN players ON countries.country_code = players.country_code GROUP BY country_code HAVING COUNT(*) > 50",
    "SELECT ranking_date, COUNT(*) as total_tours FROM rankings GROUP BY ranking_date",
    "_played  SELECT ranking_date, COUNT(*) as total_tours FROM rankings GROUP BY ranking_date",
    "| tournaments : tourney_id , tourney_name , tourney_level , draw_size , tourney_date , tourney_surface , tourney_city , tourney_country , tourney_prize_money  SELECT year, count(*) as num_matches FROM matches GROUP BY year",
    "| SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year",
    "| SELECT winner_name , winner_rank FROM matches JOIN rankings ON matches . winner_id = rankings . player_id ORDER BY ranking_date DESC LIMIT 3",
    "| SELECT first_name , last_name , ranking FROM rankings JOIN players ON rankings . player_id = players . player_id WHERE ranking_date = ( SELECT MAX ( ranking_date ) FROM rankings ) ORDER BY ranking LIMIT 3",
    "| tournaments : tourney_id , tourney_name , surface , draw_size , tourney_level , tourney_date , tourney_month , tourney_year , tourney_url , tourney_slug | SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON winner_id = player_id WHERE winner_id IN (SELECT player_id FROM matches WHERE tourney_name = 'WTA Championships') AND hand = 'L'",
    "_played  SELECT COUNT(*)  FROM players  WHERE hand = 'L'  AND player_id IN  (SELECT winner_id  FROM matches  WHERE tourney_name = 'WTA Championships')",
    "| SELECT first_name, country_code, birth_date FROM players JOIN (SELECT winner_id FROM matches JOIN (SELECT player_id, MAX(ranking_points) AS max_points FROM rankings GROUP BY player_id) AS t1 ON t1.player_id = matches.winner_id) AS t2 ON t2.winner_id = players.player_id",
    "| SELECT first_name, country_code, birth_date FROM players JOIN (SELECT player_id, MAX(ranking_points) AS max_points FROM rankings GROUP BY player_id) AS max_points ON players.player_id = max_points.player_id;",
    "_played  SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    "_played  SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand",
    ", missing , prisoner , ship_id , battle_id  SELECT COUNT(*)  FROM ship  WHERE lost_in_battle = 'Captured'",
    ", missing , total_casualties , side | commander : id , name , side , army_size , army_type , army_disposition , army_result  SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC",
    ", missing , prisoner |  SELECT battle.name, battle.date, battle.result FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle INNER JOIN death ON ship.id = death.caused_by_ship_id",
    ", missing , total_death_toll |  SELECT MAX(total_death_toll), MIN(total_death_toll) FROM death",
    ", ship_id , battle_id  SELECT AVG(death.injured) FROM death JOIN battle ON battle.id = death.battle_id",
    ", ship_id | injury : caused_by_ship_id , id , note , killed , injured , ship_id  SELECT battle_death.id, battle_death.name, battle_death.date, battle_death.bulgarian_commander, battle_death.latin_commander, battle_death.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured, death.ship_id, injury.caused_by_ship_id, injury.id, injury.note, injury.killed, injury.injured, injury.ship_id FROM battle_death JOIN ship ON battle_death.id = ship.id JO",
    ", missing , prisoner | commander : id , name , birth_date , death_date , biography |  SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'Boril'",
    ", missing , total_casualties , side | commander : id , name , side  SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
    ", missing , total_deaths_in_battle  SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(total_deaths_in_battle) > 10",
    ", total_injured , total_killed , type_of_death , location , date , ship_id , battle_id  SELECT ship.id, ship.name FROM ship JOIN battle ON ship.id = battle.ship_id JOIN death ON battle.id = death.battle_id GROUP BY ship.id, ship.name HAVING SUM(death.total_injured) =  (SELECT MAX(x.total_injured) FROM (SELECT SUM(death.total_injured) AS total_injured FROM ship JOIN battle ON ship.id = battle.ship_id JOIN death ON battle.id = death.battle_id GROUP BY ship.id, ship.name) x);",
    ", missing , prisoner | commander : id , name , birth_date , death_date , nationality | SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'",
    ", missing , prisoner | commander : id , name , birth_date , death_date , commander_type , army_id | army : id , name , army_type , commander_id  SELECT COUNT(DISTINCT result) FROM battle",
    ", missing , total_deaths , total_injuries , total_missing | commander : id , name , birth_date , death_date , biography , commander_type , commander_rank , commander_nationality | location : id , name , latitude , longitude , type_of_location , type_of_terrain , climate , elevation , water_access , water_type , water_quality , population_density , population_type , population_nationality , population_religion , population_ethnic_group , population_language , population_literacy , population_employment , population_industry , population_agriculture , population_animal_husbandry , population_transportation , population_communications , population_military , population_law_enforcement , population_religion , population_education , population_health_care , population_recreation , population_food , population_housing , population_commerce , population_finance , population_government",
    ", missing , total_casualties | commander : id , name , rank , nationality , birth_date , death_date | SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' AND ship.name = 'HMS Atalanta'",
    ", missing , total_casualties | commander : id , name , birth_date , death_date , biography | SELECT battle.name, battle.result, commander.name FROM battle JOIN commander ON battle.bulgarian_commander = commander.id WHERE battle.id NOT IN (SELECT battle_death.battle FROM battle_death)",
    ", event_id | event : id , name , type , location , date |  SELECT note FROM death WHERE event_id IN (SELECT id FROM event WHERE name LIKE '%East%')",
    ", grade_id , other_details  SELECT addresses.line_1, addresses.line_2 FROM addresses",
    ", grade_id , other_details  SELECT line_1, line_2 FROM addresses",
    ", grade_id , other_details  SELECT COUNT(*) FROM courses",
    ", grade_id , other_details  SELECT COUNT(*) FROM courses",
    ", grade_id , other_details  SELECT course_description FROM courses",
    ", grade_id , other_details  SELECT course_description FROM courses;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT department_name, department_id FROM departments ORDER BY COUNT(degree_program_id) DESC LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT department_name, department_id  FROM departments  JOIN degree_programs ON departments.department_id = degree_programs.department_id  JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY department_name  HAVING COUNT(student_id) =  (SELECT COUNT(student_id)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*) as num_departments  FROM departments  WHERE department_id IN  (SELECT DISTINCT department_id  FROM degree_programs)",
    ", grade_id , other_details  SELECT DISTINCT department_name  FROM degree_programs  JOIN departments  ON degree_programs.department_id = departments.department_id",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT DISTINCT degree_summary_name FROM degree_programs",
    ", grade_id , other_details  SELECT DISTINCT degree_summary_name  FROM degree_programs",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*)  FROM degree_programs  JOIN departments ON degree_programs.department_id = departments.department_id  WHERE departments.department_name = 'engineering'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*)  FROM degree_programs  JOIN departments ON degree_programs.department_id = departments.department_id  WHERE departments.department_name = 'engineering'",
    ", grade_id , other_details  SELECT section_name, section_description FROM sections;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT section_name, section_description FROM sections;",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT course_name, course_id FROM courses WHERE course_id IN     (SELECT course_id      FROM sections      GROUP BY course_id      HAVING COUNT(*) <= 2)",
    ", grade_id , other_details  SELECT course_name, course_id FROM courses WHERE (SELECT COUNT(*)        FROM sections        WHERE sections.course_id = courses.course_id) < 2",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT section_name FROM sections ORDER BY section_name DESC;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT section_name FROM sections ORDER BY section_name DESC;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT semester_name, semester_id  FROM semesters  ORDER BY COUNT(*) DESC  LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT semester_id                      FROM student_enrolment                      GROUP BY semester_id                      ORDER BY COUNT(student_id) DESC                      LIMIT 1)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name, id  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_program_id = 2  GROUP BY students.student_id  HAVING COUNT(*) = 2",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT first_name, middle_name, last_name, student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.department_id = 2 GROUP BY student_id HAVING COUNT(*) = 2",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT degree_summary_name, count(*) as num_students FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name HAVING count(*) = (SELECT max(c)                    FROM (SELECT degree_summary_name, count(*) as c                          FROM degree_programs                          JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id                          GROUP BY degree_summary_name) as t)",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT degree_summary_name  FROM degree_programs  GROUP BY degree_summary_name  HAVING COUNT(student_id) = (SELECT MAX(COUNT(student_id))                              FROM student_enrolment                              GROUP BY degree_program_id)",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT degree_program_id, degree_summary_name, COUNT(*) AS num_students FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_program_id HAVING COUNT(*) = (SELECT MAX(num_students)                    FROM (SELECT degree_program_id, COUNT(*) AS num_students                          FROM degree_programs                          JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id                          GROUP BY degree_program_id) AS temp)",
    ", grade_id , other_details  SELECT degree_program_id, degree_summary_name, degree_summary_description, count(*) AS num_students FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_program_id HAVING count(*) = (SELECT max(c)                   FROM (SELECT degree_program_id, count(*) AS c                         FROM degree_programs                         JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id                         GROUP BY degree_program_id) AS t)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT students.id, first_name, middle_name, last_name, COUNT(student_enrolment.id) AS enrolment_count, student_id  FROM student_enrolment  JOIN students ON student_enrolment.student_id = students.id  GROUP BY students.id  HAVING COUNT(student_enrolment.id) =  (SELECT MAX(enrolment_count)  FROM  (SELECT COUNT(student_enrolment.id) AS enrolment_count, student_id  FROM student_enrolment  JOIN students ON student_enrolment.student_id = students.id  GROUP BY students.id) AS temp)",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT first_name, middle_name, last_name, id, count(*) as num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    ", grade_id , other_details  SELECT course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id",
    ", grade_id , other_details  SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_name HAVING COUNT(*) > 0",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_name HAVING COUNT(*) = (SELECT MAX(c)                   FROM (SELECT COUNT(*) AS c                         FROM courses                         JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id                         JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment",
    ", grade_id , other_details |  SELECT last_name  FROM students  WHERE current_address_id IN  (SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina')  AND student_id NOT IN  (SELECT student_id  FROM student_enrolment)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN  (SELECT student_id  FROM student_enrolment)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN     (SELECT transcript_id      FROM transcript_contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2)",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT transcript_date, transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date HAVING COUNT(transcript_contents.student_course_id) >= 2",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT cell_mobile_number  FROM students  JOIN addresses ON students.current_address_id=addresses.address_id  WHERE first_name='Timmothy'  AND last_name='Ward'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT cell_mobile_number  FROM students  WHERE first_name = 'Timmothy'  AND last_name = 'Ward'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE semesters.semester_name = 'EARLIEST'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id JOIN departments ON degree_programs.department_id = departments.department_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id ORDER BY semester_name LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name FROM students WHERE current_address_id != permanent_address_id",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name FROM students WHERE permanent_address_id != current_address_id",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id  GROUP BY addresses.address_id  HAVING COUNT(students.student_id) = (SELECT MAX(c) FROM (SELECT COUNT(students.student_id) AS c FROM students GROUP BY students.current_address_id) AS t)",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN student_enrolment ON student_enrolment.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 HAVING COUNT(student_enrolment.student_id) =  (SELECT MAX(num_students) FROM (SELECT COUNT(student_enrolment.student_id) AS num_students FROM student_enrolment GROUP BY student_enrolment.current_address_id) AS temp)",
    ", grade_id , other_details |  SELECT AVG(transcript_date)  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT AVG(transcript_date) FROM transcripts;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT transcript_date, other_details  FROM transcripts  ORDER BY transcript_date  LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT MIN(transcript_date) AS earliest_date  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*)  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*)  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT MAX(transcript_date)  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT MAX(transcript_date)  FROM transcripts",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(*) as \"Number of Times\" FROM student_enrolment_courses GROUP BY student_course_id HAVING COUNT(*) <= 3",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT COUNT(DISTINCT course_id) AS num_times,         course_id  FROM student_enrolment_courses  GROUP BY course_id  HAVING num_times>1",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT transcript_date  FROM transcripts  ORDER BY COUNT(*) ASC  LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT transcript_date, transcript_id  FROM transcripts  ORDER BY COUNT(transcript_contents.transcript_id)  LIMIT 1",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT semester_name  FROM semesters  WHERE semester_id IN  (SELECT semester_id  FROM student_enrolment  WHERE degree_program_id IN  (SELECT degree_program_id  FROM degree_programs  WHERE degree_summary_name = 'Master')  INTERSECT  SELECT semester_id  FROM student_enrolment  WHERE degree_program_id IN  (SELECT degree_program_id  FROM degree_programs  WHERE degree_summary_name = 'Bachelor'))",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT semester_id FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Masters'  INTERSECT  SELECT semester_id FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT COUNT(DISTINCT current_address_id) AS num_addresses  FROM students",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT DISTINCT addresses.address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id",
    ", grade_id , other_details | grades : grade_id , grade_name , other_details  SELECT * FROM students ORDER BY last_name DESC, first_name DESC;",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT * FROM students ORDER BY last_name DESC",
    ", grade_id , other_details |  SELECT section_name, section_description FROM sections WHERE section_id = 'h'",
    ", grade_id , other_details |  SELECT section_description FROM sections WHERE section_name = 'h';",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    ", grade_id , other_details | grades : grade_id , grade_name , grade_description , other_details  SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    "SELECT title FROM cartoon ORDER BY title ASC;",
    ", season , episode , tv_series_id  SELECT cartoon.title FROM cartoon JOIN tv_series ON tv_series.id = cartoon.tv_series_id WHERE tv_series.channel = 'Ben Jones'",
    "SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'",
    "SELECT COUNT(*) as \"Number of Cartoons\" FROM cartoon WHERE written_by = \"Joseph Kuhr\"",
    "SELECT COUNT(*) as num_cartoons_written_by_Joseph_Kuhr  FROM cartoon  WHERE written_by = 'Joseph Kuhr'",
    "SELECT title, directed_by, original_air_date FROM cartoon ORDER BY original_air_date",
    "SELECT title, directed_by FROM cartoon WHERE id IN (SELECT id FROM tv_series WHERE tv_channel = 'cartoon') ORDER BY original_air_date",
    ", season , episode , tv_series_id  SELECT title FROM cartoon WHERE directed_by = \"Ben Jones\" OR directed_by = \"Brandon Vietti\"",
    ", season , episode , tv_series_id  SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'",
    "SELECT country, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY country HAVING num_tv_channels = MAX(num_tv_channels)",
    "SELECT country, COUNT(*) AS num_tv_channels FROM tv_channel GROUP BY country HAVING num_tv_channels = MAX(num_tv_channels)",
    "SELECT series_name, content  FROM tv_channel  GROUP BY series_name, content",
    "SELECT COUNT(DISTINCT series_name) AS \"Different Series\", COUNT(DISTINCT content) AS \"Different Contents\" FROM tv_channel",
    "SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'",
    "SELECT content FROM tv_series WHERE series_name = 'Sky Radio'",
    "SELECT tv_channel.package_option  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.series_name = 'Sky Radio'",
    "SELECT tv_channel.package_option FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.series_name = 'Sky Radio'",
    "SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English'",
    "SELECT COUNT(*)  FROM tv_channel  WHERE language = 'English'",
    "SELECT language, COUNT(tv_channel.id) AS \"Number of TV Channels\" FROM tv_channel GROUP BY language HAVING COUNT(tv_channel.id) = (SELECT MIN(COUNT(tv_channel.id))                                FROM tv_channel                                GROUP BY language)",
    "SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language HAVING num_channels = (SELECT MIN(num_channels)                        FROM (SELECT language, COUNT(*) AS num_channels                              FROM tv_channel                              GROUP BY language) AS temp)",
    "SELECT language, count(*) as num FROM tv_channel GROUP BY language",
    "SELECT language, COUNT(*) as num_tv_channels FROM tv_channel GROUP BY language",
    "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT series_name  FROM tvshow  JOIN tv_series ON tvshow.id=tv_series.channel  JOIN cartoon ON tv_series.id=cartoon.channel  WHERE cartoon.title='The Rise of the Blue Beetle'",
    "SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')",
    "SELECT cartoon.title FROM cartoon JOIN tv_series ON tv_series.id = cartoon.id JOIN tv_channel ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "SELECT episode, rating FROM tv_series ORDER BY rating",
    "SELECT episode, rating FROM tv_series ORDER BY rating",
    "SELECT tv_series.series_name, tv_series.episode, tv_series.rating FROM tv_series INNER JOIN tvshow ON tv_series.series_name=tvshow.series_name WHERE tvshow.tv_channel='HBO' ORDER BY tv_series.rating DESC LIMIT 3",
    "SELECT episode, rating FROM tv_series WHERE rating IN  (SELECT MAX(rating) FROM tv_series)",
    "SELECT MIN(share) AS min_share, MAX(share) AS max_share FROM tv_series;",
    "SELECT MAX(share) AS maximum_share, MIN(share) AS minimum_share FROM tv_series;",
    "SELECT air_date  FROM tv_series  WHERE episode = \"A Love of a Lifetime\"",
    "SELECT air_date  FROM tv_series  WHERE episode = 'A Love of a Lifetime'",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_series.episode = 'A Love of a Lifetime'",
    "SELECT series_name  FROM tv_series  JOIN tvshow ON tv_series.channel=tvshow.id  WHERE episode=\"A Love of a Lifetime\"",
    "SELECT tv_series.episode, tv_series.air_date, tv_series.rating, tv_series.share, tv_series.18_49_rating_share, tv_series.viewers_m, tv_series.weekly_rank, tv_series.channel FROM tv_series JOIN tvshow ON tv_series.id = tvshow.id WHERE tvshow.series_name = 'Sky Radio'",
    "SELECT episode FROM tv_series WHERE series_name = \"Sky Radio\"",
    "SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by",
    ", season , episode , rating , share , 18_49_rating_share , viewers_m , weekly_rank  SELECT directed_by, COUNT(*) as num_cartoons FROM cartoon GROUP BY directed_by",
    "SELECT tvshow.production_code, tvshow.channel FROM tvshow JOIN cartoon ON tvshow.id = cartoon.id ORDER BY cartoon.original_air_date DESC LIMIT 1",
    "SELECT production_code, channel  FROM cartoon  ORDER BY original_air_date DESC  LIMIT 1",
    "SELECT tv_channel.series_name, tv_channel.package_option FROM tv_channel WHERE tv_channel.hight_definition_tv = 'TRUE'",
    "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 'TRUE'",
    "SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT DISTINCT country  FROM tvshow  JOIN tv_series ON tvshow.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.written_by = 'Todd Casey'",
    "SELECT tv_channel.country FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.written_by != 'Todd Casey' GROUP BY tv_channel.country HAVING COUNT(cartoon.written_by) = 0",
    "SELECT country FROM tv_channel WHERE tv_channel.country NOT IN (SELECT country FROM tv_series WHERE tv_series.written_by = 'Todd Casey')",
    "SELECT tvshow.series_name, tv_channel.country FROM tvshow JOIN tv_channel ON tvshow.tv_channel = tv_channel.id WHERE tvshow.cartoon.directed_by = \"Ben Jones\"  AND tvshow.cartoon.directed_by = \"Michael Chang\"",
    "_id  SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel_id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'",
    "SELECT pixel_aspect_ratio_par, country  FROM tv_channel  WHERE language != 'English'",
    "SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English'",
    "SELECT tv_channel.id  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_channel.id = cartoon.channel  GROUP BY tv_channel.country  HAVING COUNT(DISTINCT tv_channel.id) > 2",
    "SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel GROUP BY tv_channel.id HAVING COUNT(tv_series.id) > 2",
    "SELECT tv_channel.id  FROM tv_channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  LEFT JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by != 'Ben Jones'  GROUP BY tv_channel.id  HAVING COUNT(cartoon.id) = 0",
    "_id  SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel_id WHERE cartoon.directed_by != 'Ben Jones' GROUP BY tv_channel.id HAVING COUNT(cartoon.id) = 0",
    "SELECT tvshow.package_option  FROM tvshow  JOIN tv_channel ON tvshow.tv_channel = tv_channel.id  WHERE tv_channel.content != 'cartoon'  AND tv_channel.directed_by != 'Ben Jones'",
    "SELECT tv_channel.package_option FROM tv_channel LEFT JOIN tv_series ON tv_channel.id = tv_series.channel LEFT JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones'",
    ", weight  SELECT COUNT(*) FROM poker_player",
    ", weight  SELECT COUNT(*) FROM poker_player",
    ", weight  SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC",
    ", weight  SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC",
    ", weight  SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player INNER JOIN people ON poker_player.people_id=people.people_id",
    ", weight  SELECT poker_player.poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings FROM poker_player INNER JOIN people ON poker_player.poker_player_id = people.people_id",
    ", weight  SELECT AVG(earnings) FROM poker_player",
    ", weight  SELECT AVG(earnings) FROM poker_player;",
    ", weight  SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    ", weight  SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
    ", weight  SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000",
    ", weight  SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000;",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    ", weight  SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC",
    ", weight  SELECT people.name  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY final_table_made ASC",
    ", weight  SELECT birth_date  FROM people  JOIN poker_player ON people.people_id = poker_player.people_id  ORDER BY earnings  LIMIT 1",
    ", weight  SELECT birth_date  FROM people  JOIN poker_player ON people.people_id = poker_player.people_id  ORDER BY earnings  LIMIT 1",
    ", weight  SELECT money_rank FROM poker_player ORDER BY height DESC LIMIT 1",
    "SELECT money_rank FROM poker_player ORDER BY height DESC LIMIT 1",
    ", weight  SELECT AVG(earnings) FROM poker_player WHERE height > 200;",
    "SELECT AVG(earnings) FROM poker_player WHERE height > 200;",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC",
    ", weight  SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC",
    ", weight | nationality : nationality_id , nationality_name  SELECT nationality_name, COUNT(*) as num_people FROM people JOIN nationality ON people.nationality = nationality.nationality_id GROUP BY nationality_name",
    ", weight  SELECT people.nationality, COUNT(*) as num_people FROM poker_player JOIN people ON poker_player.people_id = people.people_id GROUP BY people.nationality",
    ", weight  SELECT nationality, COUNT(*) AS num FROM people GROUP BY nationality ORDER BY num DESC LIMIT 1",
    ", weight  SELECT nationality, COUNT(*) AS num FROM people GROUP BY nationality ORDER BY num DESC LIMIT 1",
    ", weight | nationality : nationality_id , name |  SELECT nationality.name  FROM nationality  JOIN people ON nationality.nationality_id = people.nationality  GROUP BY nationality.name  HAVING COUNT(*) >= 2",
    ", weight  SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) >= 2",
    ", weight  SELECT people.name, people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.name ASC",
    ", weight  SELECT people.name, people.birth_date FROM people ORDER BY people.name",
    ", weight |  SELECT people.name FROM people WHERE people.nationality != \"Russia\"",
    ", weight  SELECT people.name FROM people WHERE people.nationality != 'Russia'",
    ", weight , gender | SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    ", weight  SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    ", weight | nationality : nationality_id , name , continent_id | continent : continent_id , name  SELECT COUNT(DISTINCT nationality)  FROM people",
    ", weight  SELECT COUNT(DISTINCT nationality)  FROM people",
    "_at  SELECT COUNT(*) FROM states",
    "_at  SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC",
    "_at |  SELECT vote_id, phone_number, state FROM votes;",
    "_at |  SELECT MAX(area_code), MIN(area_code) FROM voter_1",
    "_date |  SELECT MAX(created_date) FROM votes WHERE state = 'CA'",
    "_at  SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "_time  SELECT DISTINCT state, created_time  FROM votes",
    "_at  SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)",
    "_at  SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(num_votes) FROM (SELECT COUNT(*) AS num_votes FROM votes GROUP BY contestant_number) AS x))",
    "_date  SELECT COUNT(*)  FROM votes  WHERE state = 'NY' OR state = 'CA'",
    "_at  SELECT COUNT(*)  FROM contestants  LEFT JOIN votes ON contestants.contestant_number = votes.contestant_number  WHERE votes.contestant_number IS NULL",
    "_at  SELECT area_code, COUNT(*) AS num_votes FROM voter_1 GROUP BY area_code ORDER BY num_votes DESC LIMIT 1",
    "_date |  SELECT created_date, state, phone_number FROM votes WHERE contestant_name = 'Tabatha Gehling'",
    "_date |   SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state WHERE votes.contestant_number IN (   SELECT contestant_number   FROM contestants   WHERE contestant_name = 'Tabatha Gehling'   INTERSECT   SELECT contestant_number   FROM contestants   WHERE contestant_name = 'Kelly Clauss' ) GROUP BY area_code_state.area_code HAVING COUNT(DISTINCT votes.phone_number) = 2",
    "_at |  SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "|  SELECT country.name  FROM country  WHERE country.indepyear > 1950",
    "|  SELECT country.name  FROM country  WHERE country.indepyear > 1950",
    "|  SELECT COUNT(*)  FROM country  WHERE governmentform = 'Republic'",
    "|  SELECT COUNT(*)  FROM country  WHERE governmentform = 'Republic'",
    "|  SELECT sum(surfacearea)  FROM country  WHERE region = 'Caribbean'",
    "|  SELECT sum(surfacearea)  FROM country  WHERE continent = 'North America'  AND region = 'Caribbean'",
    "|  SELECT continent FROM world_1.country WHERE code = 'ATG';",
    "|  SELECT continent FROM world_1 WHERE countrycode = 'ATG'",
    "|  SELECT region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';",
    "|  SELECT region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';",
    "|  SELECT language, MAX(percentage) FROM countrylanguage GROUP BY language HAVING countrycode='ABW'",
    "SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.countrycode = 'ABW' AND countrylanguage.isofficial = 'T'",
    "SELECT population, lifeexpectancy FROM city JOIN country ON city.countrycode = country.code WHERE country.name = 'Brazil';",
    "SELECT population, lifeexpectancy FROM city JOIN country ON country.code = city.countrycode WHERE country.name = 'Brazil';",
    "SELECT region, population FROM country WHERE name = 'Angola';",
    "|  SELECT region, population FROM country WHERE name = 'Angola';",
    "|  SELECT AVG(lifeexpectancy)  FROM country  WHERE region = 'Central Africa'",
    "SELECT lifeexpectancy FROM country WHERE continent = 'Central Africa'",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Asia'  ORDER BY lifeexpectancy ASC  LIMIT 1",
    "|  SELECT sum(population) as total_population, max(gnp) as max_gnp FROM country WHERE continent = 'Asia'",
    "|  SELECT continent, SUM(population) AS population, MAX(gnp) AS gnp FROM country WHERE continent='Asia' GROUP BY continent",
    "|  SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform = 'Republic'",
    "|  SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa'  AND governmentform = 'Republic'",
    "|  SELECT sum(surfacearea)  FROM country  WHERE continent = 'Asia' OR continent = 'Europe'",
    "|  SELECT sum(surfacearea)  FROM country  WHERE continent = 'Asia' OR continent = 'Europe'",
    "|  SELECT population FROM city WHERE district = 'Gelderland';",
    "|  SELECT SUM(population) FROM city WHERE district = 'Gelderland';",
    "|  SELECT AVG(gnp) AS avg_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US Territory'",
    "|  SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE countrycode IN ('USA', 'UMI', 'ASM', 'VIR', 'PRI', 'GUM', 'MNP')",
    "|  SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "|  SELECT COUNT(DISTINCT language) FROM countrylanguage",
    "SELECT DISTINCT governmentform FROM country WHERE continent = 'Africa'",
    "|  SELECT DISTINCT governmentform FROM country WHERE continent = 'Africa'",
    "|  SELECT count(language) FROM countrylanguage WHERE isofficial = 'T'",
    "|  SELECT count(*) FROM countrylanguage WHERE isofficial = 'T'",
    "|  SELECT count(*) FROM countrylanguage WHERE isofficial = 'T' AND countrycode = 'AFG'",
    "SELECT COUNT(*)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode = 'AFG'",
    "|  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING MAX(countrylanguage.percentage)",
    "SELECT country.name AS 'Country Name' FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING MAX(countrylanguage.percentage)",
    "SELECT continent, count(distinct language) as num_langs FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_langs DESC LIMIT 1",
    "|  SELECT continent, count(*) as num FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY num DESC",
    "SELECT COUNT(*)  FROM country  WHERE country.code IN  (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE countrylanguage.language='English'  INTERSECT  SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE countrylanguage.language='Dutch')",
    "|  SELECT COUNT(*) FROM country WHERE country.code IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language='English' INTERSECT SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language='Dutch')",
    "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  INTERSECT  SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'French'",
    "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  INTERSECT  SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'French'",
    "|  SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  AND isofficial = 'T'  INTERSECT  SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'French'  AND isofficial = 'T'",
    "|  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' AND countrylanguage.isofficial = 'T'",
    "|  SELECT COUNT(DISTINCT continent) FROM country WHERE localname LIKE '%China%'",
    "|  SELECT COUNT(DISTINCT continent)  FROM country  WHERE code IN  (SELECT countrycode  FROM countrylanguage  WHERE language='Chinese'  AND isofficial=1)",
    "|  SELECT region FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T')",
    "|  SELECT region FROM country WHERE countrycode IN     (SELECT countrycode      FROM countrylanguage      WHERE language IN ('Dutch', 'English')      GROUP BY countrycode      HAVING COUNT(*) = 2)",
    "|  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch' GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2",
    "|  SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'",
    "|  SELECT language, MAX(percentage) FROM countrylanguage WHERE continent = 'Asia' GROUP BY language HAVING MAX(percentage)",
    "|  SELECT language FROM countrylanguage WHERE isofficial = 'T' GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1",
    "|  SELECT language FROM countrylanguage WHERE isofficial = 'T' AND percentage = 100.0 GROUP BY language HAVING COUNT(*) = 1",
    "|  SELECT language FROM countrylanguage WHERE isofficial = 1 AND percentage = 100 AND countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic')",
    "|  SELECT name FROM city WHERE population = (SELECT MAX(population) FROM city WHERE countrycode IN (SELECT code FROM countrylanguage WHERE language = 'English' AND isofficial = 'T'))",
    "|  SELECT name FROM city WHERE population = (SELECT MAX(population) FROM city WHERE countrycode IN (SELECT code FROM countrylanguage WHERE language = 'English' AND isofficial = 'T'))",
    "|  SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;",
    "|  SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1;",
    "|  SELECT AVG(lifeexpectancy)  FROM country  WHERE localname NOT LIKE '%English%'",
    "|  SELECT lifeexpectancy FROM country WHERE localname NOT LIKE '%English%'",
    "|  SELECT sum(population) as \"Total Population\" FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language='English' AND isofficial='T')",
    "|  SELECT COUNT(*) FROM country WHERE country.code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language='English')",
    "|  SELECT country.name, countrylanguage.language, countrylanguage.isofficial FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'",
    "|  SELECT country.name FROM country WHERE country.headofstate = 'Beatrix'",
    "|  SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country  ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930  AND countrylanguage.isofficial = 'T'",
    "|  SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code                      FROM country                      WHERE indepyear < 1930)",
    "|  SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')",
    "|  SELECT country.name  FROM country  WHERE country.surfacearea >      (SELECT MAX(country.surfacearea)       FROM country       WHERE country.continent = 'Europe')",
    "|  SELECT country.name AS African_country FROM country WHERE country.continent = 'Africa' AND country.population <      (SELECT MIN(country.population)      FROM country      WHERE country.continent = 'Asia')",
    "|  SELECT country.name AS African_country  FROM world_1.country  WHERE country.continent = 'Africa'  AND country.population <      (SELECT country.population       FROM world_1.country       WHERE country.continent = 'Asia'       ORDER BY country.population DESC       LIMIT 1)",
    "|  SELECT country.name AS 'Asian Country' FROM world_1.country WHERE country.continent = 'Asia' AND country.population >  (SELECT MAX(country.population) FROM world_1.country WHERE country.continent = 'Africa')",
    "|  SELECT country.name AS Asian_country FROM country WHERE country.continent = 'Asia'   AND country.population > (SELECT MAX(country.population)                            FROM country                            WHERE country.continent = 'Africa')",
    "|  SELECT code FROM country WHERE localname NOT LIKE '%English%'",
    "|  SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "|  SELECT countrycode FROM countrylanguage WHERE language != 'English'",
    "|  SELECT countrycode FROM countrylanguage WHERE language != 'English'",
    "|  SELECT code FROM country WHERE governmentform != 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT code FROM country WHERE governmentform != 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')",
    "|  SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = 'Europe'  AND country.language != 'English'",
    "|  SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'F' AND country.continent = 'Europe'",
    "|  SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T'",
    "|  SELECT DISTINCT name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE continent = 'Asia' AND language = 'Chinese' AND isofficial = 'T'",
    "|  SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)",
    "|  SELECT country.name, country.indepyear, country.surfacearea FROM country ORDER BY country.population LIMIT 1",
    "|  SELECT country.name, country.population, country.leader  FROM country  WHERE country.surfacearea = (SELECT MAX(country.surfacearea) FROM country)",
    "|  SELECT country.name, country.population, country.headofstate FROM country WHERE country.surfacearea = (SELECT MAX(country.surfacearea)                              FROM country)",
    "|  SELECT country.name, count(*) AS num_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING num_languages >= 3",
    "SELECT country.name, count(*) as num_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.name HAVING num_languages > 2",
    "|  SELECT district, count(*) as num FROM city WHERE population > (SELECT avg(population) FROM city) GROUP BY district",
    "|  SELECT district, count(*) as num_of_cities, avg(population) as avg_population FROM city GROUP BY district HAVING population > avg_population",
    "|  SELECT governmentform, SUM(population) FROM city JOIN country ON city.countrycode = country.code GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72",
    "|  SELECT governmentform, SUM(population) as total_population FROM world_1.country WHERE lifeexpectancy > 72 GROUP BY governmentform",
    "|  SELECT continent, AVG(lifeexpectancy), SUM(population) FROM country WHERE lifeexpectancy < 72 GROUP BY continent",
    "|  SELECT continent, sum(population), avg(lifeexpectancy) FROM country WHERE lifeexpectancy < 72 GROUP BY continent",
    "|  SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5",
    "|  SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;",
    "|  SELECT country.name FROM country ORDER BY population DESC LIMIT 3",
    "|  SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "|  SELECT name FROM country WHERE population IN (SELECT population FROM country ORDER BY population LIMIT 3)",
    "|  SELECT name FROM country ORDER BY population LIMIT 3",
    "|  SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "SELECT COUNT(*) FROM country WHERE continent = 'Asia'",
    "|  SELECT country.name  FROM country  WHERE country.continent = 'Europe'  AND country.population = 80000",
    "|  SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;",
    "|  SELECT country.name, country.population, country.surfacearea  FROM country  WHERE country.continent = \"North America\"  AND country.surfacearea > 3000",
    "|  SELECT country.name, country.surfacearea, country.population FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000",
    "|  SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
    "|  SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;",
    "|  SELECT language, MAX(countries) AS num_countries FROM (SELECT language, COUNT(DISTINCT countrycode) AS countries       FROM countrylanguage       GROUP BY language) GROUP BY language HAVING num_countries = (SELECT MAX(countries)                        FROM (SELECT COUNT(DISTINCT countrycode) AS countries                              FROM countrylanguage                              GROUP BY language))",
    "|  SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1",
    "| language : language , isofficial , percentage  SELECT country.name, language.language, MAX(language.percentage) AS percentage FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN language ON countrylanguage.language = language.language GROUP BY country.name HAVING percentage = 100",
    "|  SELECT country.code, countrylanguage.language, countrylanguage.percentage FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING MAX(countrylanguage.percentage)",
    "|  SELECT COUNT(*)  FROM country  WHERE country.code IN  (SELECT countrycode  FROM countrylanguage  WHERE language='Spanish'  GROUP BY countrycode  HAVING MAX(percentage)=100)",
    "|  SELECT COUNT(*)  FROM country  WHERE country.code IN  (SELECT countrycode  FROM countrylanguage  WHERE language='Spanish'  GROUP BY countrycode  HAVING MAX(percentage)>=50)",
    "|  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC",
    "|  SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY country.code HAVING MAX(countrylanguage.percentage)",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |SELECT COUNT(*) as conductor_count FROM conductor",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |SELECT COUNT(*) as conductor_count FROM conductor;",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor ORDER BY conductor.age ASC",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_type |SELECT conductor.name AS conductor_name, conductor.age AS conductor_age FROM conductor ORDER BY conductor_age;",
    ", ticket_price , ticket_sales , ticket_sales_revenue , ticket_sales_revenue_per_attendance , ticket_sales_revenue_per_ticket_price |  SELECT conductor.name  FROM conductor  WHERE conductor.nationality != \"USA\"",
    ", ticket_price , ticket_sales , ticket_revenue , ticket_sales_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor WHERE conductor.nationality != \"USA\"",
    ", ticket_price , ticket_sales , ticket_sales_revenue , ticket_sales_revenue_per_attendee , ticket_sales_revenue_per_attendee_by_ticket_price , ticket_sales_revenue_per_attendee_by_ticket_sales_revenue , ticket_sales_revenue_per_attendee_by_ticket_sales_revenue_per_attendee , ticket_sales_revenue_per_attendee_by_ticket_sales_revenue_per_attendee_by_ticket_price , ticket_sales_revenue_per_attendee_by_ticket_sales_revenue_per_attendee_by_ticket_sales_revenue , ticket_sales_revenue_per_attendee_by_ticket_",
    "_rate , ticket_price | record_company : record_company_id , record_company , year_of_founded , major_record_format  SELECT record_company, year_of_founded FROM orchestra JOIN record_company ON orchestra.record_company = record_company.record_company_id ORDER BY year_of_founded DESC",
    "|  SELECT AVG(attendance) FROM show",
    "|  SELECT AVG(attendance) FROM show;",
    "_rate , ticket_price , ticket_sales_revenue , broadcast_revenue , merchandise_revenue , sponsorship_revenue , other_revenue , total_revenue |SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != \"Live final\"",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_out |  SELECT MAX(share), MIN(share) FROM performance WHERE type != \"Live final\"",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage |  SELECT DISTINCT nationality  FROM conductor",
    "_rate , ticket_price , ticket_sales_revenue , merchandise_sales_revenue , other_revenue , total_revenue , total_expenses , net_income , operating_income , ebitda , ebitda_margin , gross_profit , gross_profit_margin , net_profit_margin , ebit , ebit_margin , ebt , ebt_margin , net_income_margin , pretax_margin , tax_rate , tax_provision , effective_tax_rate , net_operating_profit_after_tax , net_operating_profit_margin , pretax_operating_profit_margin , net_profit_before_extraordinary_items , net_income_from_continuing_operations , diluted_eps_from_continuing_operations , eps_from_continuing_operations , weighted_average_shares_outstanding ,",
    "_rate , ticket_price , ticket_sold , ticket_revenue |SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name, conductor.year_of_work FROM conductor ORDER BY conductor.year_of_work DESC",
    "_rate , ticket_price , ticket_sold , ticket_revenue |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING MAX(year_of_work)",
    "_rate , ticket_price , ticket_sales_revenue , ticket_sales_volume |  SELECT conductor.name FROM conductor JOIN performance ON conductor.conductor_id = performance.conductor_id GROUP BY conductor.name HAVING MAX(YEAR(performance.date)) - MIN(YEAR(performance.date))",
    ", ticket_price , ticket_sold |  SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name AS conductor_name, orchestra.orchestra AS orchestra_name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(*) > 1",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(orchestra.orchestra_id) =  (SELECT MAX(COUNT(orchestra_1.orchestra_id)) FROM conductor AS conductor_1 JOIN orchestra AS orchestra_1 ON conductor_1.conductor_id = orchestra_1.conductor_id GROUP BY conductor_1.name)",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON performance.performance_id = show.performance_id GROUP BY conductor.name HAVING COUNT(*) = (SELECT MAX(c)                    FROM (SELECT conductor.name, COUNT(*) AS c                          FROM conductor                          JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id                          JOIN performance ON orchestra.orchestra_id = performance.orchestra_id                          JOIN show ON performance.performance_id = show.performance_id                          GROUP BY conductor.name) AS temp",
    "_rate , ticket_price , ticket_sales |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "_rate , ticket_price , ticket_sales_revenue , merchandise_sales_revenue | record_company : record_company_id , name , headquarters , year_of_founded , major_record_format , number_of_artists , number_of_employees , net_revenue , operating_income , total_assets , total_equity | artist : artist_id , name , age , nationality , gender , year_of_debut , number_of_albums , number_of_singles , number_of_concerts , net_revenue , operating_income , total_assets , total_equity | album : album_id , name , release_date , artist_id , record_company_id , number_of_tracks , length , sales_revenue , number_of_singles , number_of_awards , number_of_certifications | song : song",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage | record_company : record_company_id , name , country , year_of_founded , major_record_format , number_of_employees , revenue , profit , net_income , operating_income , total_assets , total_equity |  SELECT record_company, count(orchestra) as num_orchestras FROM orchestra GROUP BY record_company",
    "_rate , ticket_price , ticket_sales_revenue , merchandise_sales_revenue , other_revenue , total_revenue |  SELECT orchestra.orchestra, orchestra.record_company, orchestra.major_record_format FROM orchestra ORDER BY orchestra.count ASC",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage |  SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_type | record_company : record_company_id , record_company , country , year_of_founded , major_record_format  SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company HAVING num_orchestras = (SELECT MAX(num_orchestras)                         FROM (SELECT record_company, COUNT(*) AS num_orchestras                               FROM orchestra                               GROUP BY record_company) AS temp)",
    "_rate , ticket_price , ticket_sales_revenue , merchandise_sales_revenue , other_revenue , total_revenue | record_company : record_company_id , record_company , major_record_format , year_of_founded , headquarters , parent_company , CEO , CFO , COO , CIO , CTO , CMO , president , vice_president , general_counsel , chief_accountant , chief_auditor , chief_compliance_officer , chief_controller , chief_information_security_officer , chief_investment_officer , chief_risk_officer , chief_sustainability_officer , chief_technology_officer , chief_underwriting_officer , chief_actuary , chief_actuarial_officer , chief_analytics_officer , chief_data_officer , chief_digital_officer , chief",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_out  SELECT orchestra.orchestra FROM orchestra LEFT JOIN performance ON performance.orchestra_id = orchestra.orchestra_id WHERE performance.performance_id IS NULL",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_type , ticket_number , ticket_sold_out , ticket_sold_out_time , ticket_sold_out_time_unit |  SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage | record_company : record_company_id , record_company , year_of_founded , major_record_format , number_of_employees , headquarters , website |  SELECT record_company FROM orchestra JOIN record_company ON orchestra.record_company = record_company.record_company_id WHERE year_of_founded < 2003 AND year_of_founded > 2003",
    ", ticket_price , ticket_sold , ticket_revenue , ticket_sold_percentage , ticket_revenue_percentage | record_company : record_company_id , name , year_of_founded , major_record_format , headquarters , parent_company , CEO , website , revenue , operating_income , net_income , assets , equity |  SELECT DISTINCT record_company  FROM orchestra  JOIN record_company  ON orchestra.record_company=record_company.record_company_id  WHERE year_of_founded<2003  INTERSECT  SELECT DISTINCT record_company  FROM orchestra  JOIN record_company  ON orchestra.record_company=record_company.record_company_id  WHERE year_of_founded>2003",
    "_rate , ticket_price , ticket_sales_revenue , merchandise_sales_revenue , other_revenue , total_revenue  SELECT COUNT(*)  FROM orchestra  WHERE major_record_format = \"CD\"  OR major_record_format = \"DVD\"",
    "_rate , ticket_price , ticket_sold , ticket_revenue , ticket_sold_out | record : record_id , orchestra_id , type , release_date , sales_rank , sales_revenue , sales_unit , sales_territory , sales_year |  SELECT orchestra.orchestra_id, orchestra.orchestra, orchestra.conductor_id, orchestra.record_company, orchestra.year_of_founded, orchestra.major_record_format FROM orchestra WHERE orchestra.major_record_format = 'CD' OR orchestra.major_record_format = 'DVD'",
    ", ticket_price , ticket_sales , ticket_sales_revenue , ticket_sales_revenue_currency |  SELECT year_of_founded FROM orchestra WHERE conductor_id IN (   SELECT conductor_id   FROM orchestra   GROUP BY conductor_id   HAVING COUNT(*) > 1 )",
    ", ticket_price , venue_id , venue_name , venue_capacity , venue_location , venue_type , venue_year_of_construction , venue_year_of_renovation , venue_year_of_demolition |  SELECT year_of_founded  FROM orchestra  WHERE orchestra_id IN  (SELECT DISTINCT orchestra_id  FROM performance  GROUP BY orchestra_id  HAVING COUNT(*) > 1)",
    ", type | school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and type is the type of the like: 1 is a friend request, 2 is a superlike, and 3 is a regular like.  SELECT COUNT(*) FROM highschooler",
    ", type |  SELECT COUNT(*) FROM highschooler",
    ", type |  SELECT name, grade FROM highschooler",
    ", score | school : id , name | SELECT name, grade FROM highschooler;",
    "| school : id , name | SELECT grade FROM highschooler;",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and school_id is the id of the school that the highschooler attends.  SELECT highschooler.name, highschooler.grade FROM highschooler",
    "| | network_2 | college_student : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id |  SELECT grade FROM highschooler WHERE name = 'Kyle'",
    "| school : id , name | SELECT grade FROM highschooler WHERE name = 'Kyle'",
    ", score | school : id , name | student : id , name , grade | table_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id , score | school : id , name | student : id , name , grade  SELECT name FROM highschooler WHERE grade = 10;",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and id is the id of a school.  SELECT name FROM highschooler WHERE grade = 10;",
    ", score | school : id , name | student : id , name , grade | table_1 | id | name | grade | table_2 | student_id | friend_id | table_3 | student_id | liked_id | score | table_4 | id | name | table_5 | id | name | grade  SELECT id FROM highschooler WHERE name = 'Kyle'",
    "| | network_2 | college_student : id , name , college | friend : student_id , friend_id | likes : student_id , liked_id |  SELECT id FROM highschooler WHERE name = 'Kyle'",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and id is the id of a school.  SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and id is the id of a school.  SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);",
    "| school : id , name | student : id , name , school_id  SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and school_id is the id of the school that the highschooler attends.  SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade;",
    ", type |  SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade HAVING num_students = (SELECT MAX(num_students)                        FROM (SELECT grade, COUNT(*) AS num_students                              FROM highschooler                              GROUP BY grade) AS grades)",
    ", score |  SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade HAVING num_students = (SELECT MAX(num_students)                        FROM (SELECT grade, COUNT(*) AS num_students                              FROM highschooler                              GROUP BY grade) AS grades)",
    "| course : student_id , course_id , mark | clazz : student_id , course_id , day_of_week , period_of_day | SELECT grade, COUNT(*) AS num_students FROM highschooler GROUP BY grade HAVING num_students >= 4",
    "| school : id , name | clique : id , name | student_id is the id of a highschooler, friend_id is the id of one of his friends, liked_id is the id of a student that the highschooler likes, and school_id is the id of the school that the highschooler attends.  SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4",
    ", type | SELECT id , COUNT ( friend_id ) AS num_friends FROM highschooler GROUP BY id ;",
    ", type | SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;",
    ", type | SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) > 0",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name",
    "SELECT name FROM highschooler ORDER BY (SELECT COUNT(*) FROM friend WHERE highschooler.id = friend.student_id) DESC LIMIT 1",
    ", type | id | name | grade | student_id | friend_id | liked_id | type |  SELECT name FROM highschooler WHERE id = (SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);",
    ", type | schema:  | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id , type |  SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 3",
    ", type | id | name | grade | student_id | friend_id | liked_id | type | 1 | Jordan | 9 | 1 | 2 | 2 | 2 | 2 | Alex | 9 | 2 | 1 | 3 | 2 | 3 | Jessica | 9 | 3 | 1 | 4 | 2 | 4 | Jessica | 9 | 4 | 2 | 3 | 2 | 5 | Max | 10 | 5 | 3 | 4 | 2 | 6 | Max | 10 | 6 | 4 | 3 | 2 | 7 | Jordan | 11 | 7 | 5 | 6 | 2 | 8 | Jordan | 11 | 8 | 6 | 5 | 2 | 9 | Alex | 11 | 9 | 7 | 8 | 2 | 10 | Alex | 11 | 10 | 8 | 7 | 2 | 11 | Jessica | 12 | 11 | 9 | 10 | 2 | 12 | Jessica | 12 | 12 | 10 | 9 | 2 | 13 | Max | 12 | 13 | 11",
    ", type | clique : student_id , friend_id , type  SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle'",
    ", type | SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle'",
    ", type | SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')",
    ", type | SELECT COUNT(*) FROM friend WHERE student_id = 'Kyle'",
    ", type | id | name | grade | student_id | friend_id | liked_id | type | 1 | Jordan | 10 | 1 | 2 | 2 | 2 | Alex | 10 | 2 | 1 | 1 | 3 | Emily | 11 | 3 | 4 | 1 | 4 | Gabriel | 11 | 4 | 3 | 1 | SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    ", type | id | name | grade | student_id | friend_id | liked_id | type | 1 | A | 10 | 1 | 2 | 2 | 2 | B | 10 | 2 | 1 | 3 | 3 | C | 11 | 3 | 4 | 4 | D | 11 | 4 | 3 | 5 | E | 12 | 5 | 6 | 6 | F | 12 | 6 | 5 | 7 | G | 12 | 7 | 8 | 8 | H | 12 | 8 | 7 | 9 | I | 11 | 9 | 10 | 10 | J | 12 | 10 | 9 | 11 | K | 11 | 11 | 12 | 12 | L | 12 | 12 | 11 | 13 | M | 12 | 13 | 14 | 14 | N | 12 | 14 | 13 | 15 | O | 12 | 15 | 16 | 16 | P | 12 | 16 | 15 | 17 | Q | 12 | 17 | 18 | 18 | R",
    ", type | id | name | grade | student_id | friend_id | liked_id | type | 1 | Jordan | 9 | 1 | 2 | 2 | 2 | 2 | Alex | 10 | 2 | 1 | 3 | 2 | 3 | 4 | Andrew | 10 | 3 | 4 | 5 | 2 | 4 | 5 | Sarah | 9 | 4 | 3 | 6 | 2 | 5 | 6 | Emily | 11 | 5 | 6 | 7 | 2 | 6 | 7 | Samantha | 12 | 6 | 5 | 8 | 2 | 7 | 8 | Julia | 11 | 7 | 8 | 9 | 2 | 8 | 9 | Isabel | 12 | 8 | 7 | 10 | 2 | 9 | 10 | SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.friend_id FROM friend WHERE friend.student_id = highschooler.id)",
    "SELECT highschooler.name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL",
    "| id | name | grade | student_id | friend_id | liked_id |  SELECT id FROM highschooler WHERE id IN (SELECT friend_id FROM friend) AND id IN (SELECT liked_id FROM likes)",
    "SELECT id FROM highschooler WHERE id IN (SELECT student_id             FROM friend             WHERE friend_id IN (SELECT student_id                                 FROM friend))   AND id IN (SELECT student_id              FROM likes              WHERE liked_id IN (SELECT student_id                                 FROM friend))",
    "| id | name | grade | student_id | friend_id | liked_id | 1 | Jordan | 10 | 1 | 2 | 2 | 2 | Alex | 10 | 2 | 1 | 1 | 3 | Emily | 9 | 3 | 4 | 4 | 4 | Sarah | 9 | 4 | 3 | 3 | SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name HAVING COUNT(DISTINCT friend.friend_id) > 0 AND COUNT(DISTINCT likes.liked_id) > 0;",
    "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE friend.friend_id = likes.liked_id",
    "SELECT highschooler.id, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id",
    "SELECT highschooler.id, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id",
    ", value  SELECT highschooler.name, COUNT(likes.value) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name",
    "SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name",
    "SELECT name FROM highschooler ORDER BY (SELECT COUNT(*) FROM likes WHERE student_id = highschooler.id) DESC LIMIT 1",
    "SELECT name FROM highschooler WHERE id = (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)",
    "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.grade > 5 GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 2",
    ", time | network_2 | college_student : id , name , college | friend : student_id , friend_id | likes : student_id , liked_id , time  SELECT COUNT(*) FROM likes WHERE student_id = 'Kyle'",
    "SELECT COUNT(*) FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id WHERE h.name = 'Kyle'",
    ", type | SELECT AVG(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id",
    ", type | SELECT AVG(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id",
    ", type | SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend WHERE student_id = id)",
    ", score | SELECT grade FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend WHERE student_id = id)",
    "| SELECT DISTINCT state FROM owners JOIN professionals ON owners.state = professionals.state",
    "SELECT DISTINCT state  FROM owners  INNER JOIN professionals  ON owners.state = professionals.state",
    "SELECT AVG(age)  FROM dogs  WHERE dogs.dog_id IN  (SELECT treatments.dog_id  FROM treatments)",
    "SELECT AVG(age)  FROM dogs  WHERE dogs.dog_id IN  (SELECT treatments.dog_id  FROM treatments)",
    ", notes  SELECT id, last_name, cell_phone  FROM professionals  WHERE state = 'Indiana'  OR treatments > 2",
    "|  SELECT id, last_name, cell_phone  FROM professionals  WHERE state = 'Indiana'  OR treatments > 2",
    "SELECT DISTINCT d.name FROM dogs d JOIN charges c ON d.dog_id = c.dog_id WHERE c.charge_amount <= 1000",
    "SELECT DISTINCT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id JOIN charges c ON d.dog_id = c.dog_id WHERE o.owner_id = d.owner_id AND c.charge_amount <= 1000",
    "SELECT first_name  FROM owners  WHERE first_name NOT IN  (SELECT name FROM dogs)",
    ", notes | dog_kennel_owners : dog_kennel_owner_id , dog_kennel_id , owner_id , primary_yn | dog_kennels : dog_kennel_id , name , street , city , state , zip_code , email_address , home_phone , cell_number | dog_kennel_professionals : dog_kennel_professional_id , dog_kennel_id , professional_id , primary_yn  SELECT first_name  FROM owners  WHERE first_name NOT IN  (SELECT name FROM dogs)",
    "|  SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id                               FROM treatments)",
    "|  SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id                               FROM treatments)",
    "| dog_breeds : dog_id , breed_code  SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) = (SELECT MAX(COUNT(d.dog_id))                         FROM owners o                         JOIN dogs d ON o.owner_id = d.owner_id                         GROUP BY o.owner_id, o.first_name, o.last_name)",
    "| dog_kennel_breeds : dog_kennel_id , breed_codeSELECT owners.owner_id, first_name, last_nameFROM ownersJOIN dogs ON owners.owner_id = dogs.owner_idGROUP BY owners.owner_id, first_name, last_nameHAVING COUNT(dog_id) = (SELECT MAX(COUNT(dog_id))FROM dogsGROUP BY owner_id)",
    "|  SELECT professional_id, role_code, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professional_id HAVING COUNT(treatment_id) >= 2",
    "|  SELECT id, role, first_name FROM professionals WHERE id IN (   SELECT professional_id   FROM treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 )",
    "| dog_kennel_breeds : dog_kennel_code , breed_codeSELECT breed_name FROM breeds JOIN dog_kennel_breeds ON breeds.breed_code = dog_kennel_breeds.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id HAVING SUM(treatments.cost_of_treatment) =  (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id) AS owner_costs);",
    "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) =  (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id) AS max_cost_table);",
    "SELECT treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1",
    "SELECT treatment_type_description FROM treatment_types WHERE cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM treatments)",
    "SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code HAVING SUM(t.cost_of_treatment) =      (SELECT MAX(SUM(t.cost_of_treatment))      FROM owners o      JOIN dogs d ON o.owner_id = d.owner_id      JOIN treatments t ON d.dog_id = t.dog_id      GROUP BY o.owner_id, o.zip_code)",
    ", notes  SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code HAVING SUM(t.cost_of_treatment) =      (SELECT MAX(SUM(t.cost_of_treatment))      FROM owners o      JOIN dogs d ON o.owner_id = d.owner_id      JOIN treatments t ON d.dog_id = t.dog_id      GROUP BY o.owner_id, o.zip_code)",
    "|  SELECT professional_id, cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2",
    "|  SELECT DISTINCT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2",
    "|  SELECT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);",
    "|  SELECT first_name, last_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY first_name, last_name HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT date_of_treatment, first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT date_of_treatment, first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "SELECT treatment_types.treatment_type_description, charges.charge_amount FROM treatments JOIN charges ON treatments.treatment_id = charges.charge_id JOIN treatment_types ON treatment_types.treatment_type_code = charges.charge_type",
    "SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;",
    ", notes  SELECT first_name, last_name, size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "|  SELECT first_name, last_name, size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "| dog_breeds : dog_id , breed_code , primary_breed_yn | dog_sizes : dog_id , size_code , primary_size_yn | dog_charges : dog_id , charge_id , primary_charge_yn | dog_treatment_types : dog_id , treatment_type_code , primary_treatment_type_yn  SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id",
    "|  SELECT DISTINCT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id",
    "SELECT DISTINCT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code ORDER BY b.breed_name DESC, t.date_of_treatment",
    "|  SELECT DISTINCT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = 'rarest'",
    "| dog_kennel_breeds : dog_kennel_id , breed_code | dog_kennel_sizes : dog_kennel_id , size_code | dog_kennel_owners : dog_kennel_id , owner_id | dog_kennel_dogs : dog_kennel_id , dog_id | dog_kennel_professionals : dog_kennel_id , professional_id | dog_kennels : dog_kennel_id , name , street , city , state , zip_code , email_address , home_phone , cell_number  SELECT DISTINCT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'",
    "SELECT DISTINCT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'",
    "SELECT date_arrived, date_departed FROM dogs WHERE treatment_id IS NOT NULL",
    "SELECT date_arrived, date_departed FROM dogs WHERE treatment_id IS NOT NULL",
    "| dog_breeds : dog_id , breed_code , primary_breed_yn | dog_sizes : dog_id , size_code | dog_treatments : dog_id , treatment_id  SELECT last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE dogs.age = (SELECT MIN(age) FROM dogs)",
    ", notes | dog_kennel_owners : dog_kennel_owner_id , dog_kennel_id , owner_id , primary_yn | dog_kennels : dog_kennel_id , name , street , city , state , zip_code , primary_phone , secondary_phone , email_address , website_url , notes | dog_kennel_professionals : dog_kennel_professional_id , dog_kennel_id , professional_id , primary_yn  SELECT last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE dogs.age = (SELECT MIN(age) FROM dogs)",
    "| SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "| SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "SELECT date_arrived, date_departed FROM dogs",
    "| SELECT date_arrived, date_departed FROM dogs;",
    "SELECT COUNT(*)  FROM treatments",
    ", notes  SELECT COUNT(*)  FROM treatments",
    "SELECT COUNT(*)  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  JOIN dogs ON treatments.dog_id = dogs.dog_id",
    "|  SELECT COUNT(DISTINCT professional_id)  FROM treatments  JOIN dogs ON treatments.dog_id = dogs.dog_id",
    "| SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'",
    "|  SELECT role, street, city, state FROM professionals WHERE city LIKE '%West%';",
    "| SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'",
    "| dog_kennel_breeds : dog_kennel_code , breed_code | dog_kennels : dog_kennel_code , name , capacity , size_code , street , city , state , zip_code , contact_first_name , contact_last_name , contact_phone , contact_email | dog_kennel_sizes : dog_kennel_code , size_code | dog_kennel_treatment_types : dog_kennel_code , treatment_type_code | dog_kennel_owners : dog_kennel_code , owner_id | dog_kennel_professionals : dog_kennel_code , professional_id  SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs)",
    "| dog_kennel_breeds : dog_kennel_id , breed_code | dog_kennels : dog_kennel_id , name , capacity , address , city , state , zip_code , phone_number , email_address  SELECT COUNT(*)  FROM dogs  WHERE age < (SELECT AVG(age) FROM dogs)",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;",
    "SELECT COUNT(*)  FROM dogs  WHERE NOT EXISTS (SELECT *                    FROM treatments                    WHERE treatments.dog_id = dogs.dog_id)",
    "SELECT COUNT(*)  FROM dogs  WHERE NOT EXISTS (SELECT *                    FROM treatments                    WHERE treatments.dog_id = dogs.dog_id)",
    ", notes | dog_kennel_owners : dog_kennel_owner_id , dog_kennel_id , owner_id , start_date , end_date | dog_kennels : dog_kennel_id , dog_kennel_name , size_code , address_id , contact_id , capacity , daily_charge_amount , active_yn | dog_kennel_breeds : dog_kennel_breed_id , dog_kennel_id , breed_code , active_yn | dog_kennel_sizes : dog_kennel_size_id , dog_kennel_id , size_code , active_yn | dog_kennel_treatment_types : dog_kennel_treatment_type_id , dog_kennel_id , treatment_type_code , active_yn | dog_",
    "| dog_kennel_breeds : dog_kennel_id , breed_code | dog_kennel_sizes : dog_kennel_id , size_code | dog_kennel_charges : dog_kennel_id , charge_id , charge_amount | dog_kennels : dog_kennel_id , name , street , city , state , zip_code , capacity , contact_first_name , contact_last_name , contact_phone , contact_email | dog_kennel_breeds : dog_kennel_id , breed_code | dog_kennel_sizes : dog_kennel_id , size_code | dog_kennel_charges : dog_kennel_id , charge_id , charge_amount  SELECT COUNT(*)  FROM owners  WHERE owner_id NOT IN",
    "|  SELECT COUNT(*)  FROM professionals  LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id  WHERE treatments.treatment_id IS NULL",
    "SELECT COUNT(*)  FROM professionals  WHERE professional_id NOT IN  (SELECT professional_id  FROM treatments)",
    "| dog_kennel_breeds : dog_kennel_code , breed_code | dog_kennels : dog_kennel_code , name , street , city , state , zip_code , capacity , contact_first_name , contact_last_name , contact_phone , contact_email | dog_kennel_sizes : dog_kennel_code , size_code | dog_kennel_treatment_types : dog_kennel_code , treatment_type_code | dog_kennel_professionals : dog_kennel_code , professional_id | dog_kennel_charges : dog_kennel_code , charge_id  SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "| dog_kennel_breeds : dog_kennel_id , breed_code | dog_kennel_sizes : dog_kennel_id , size_code | dog_kennel_charges : dog_kennel_id , charge_id , charge_amount | dog_kennels : dog_kennel_id , name , street , city , state , zip_code , capacity , contact_first_name , contact_last_name , contact_email_address , contact_home_phone , contact_cell_number  SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1",
    "| dog_kennel_breeds : dog_kennel_id , breed_code , number_of_dogs | dog_kennels : dog_kennel_id , name , size_code , number_of_dogs , daily_charge_amount  SELECT AVG(age)  FROM dogs",
    "SELECT AVG(age)  FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "SELECT MAX(age) FROM dogs",
    "|  SELECT charge_type, charge_amount FROM charges",
    ", notes |  SELECT charge_type, charge_amount FROM charges",
    "SELECT charge_amount  FROM charges  ORDER BY charge_amount DESC  LIMIT 1",
    "SELECT charge_amount  FROM charges  ORDER BY charge_amount DESC  LIMIT 1",
    "| SELECT email_address, cell_number, home_phone FROM professionals;",
    "| SELECT email_address, cell_number, home_phone FROM professionals;",
    "| dog_breeds : dog_id , breed_code , size_code  SELECT DISTINCT b.breed_name, s.size_description FROM dog_breeds AS db JOIN breeds AS b ON db.breed_code = b.breed_code JOIN sizes AS s ON db.size_code = s.size_code;",
    "| dog_breeds : dog_id , breed_code , size_code  SELECT DISTINCT breed_name, size_description FROM dog_kennels JOIN breeds ON breeds.breed_code = dog_kennels.breed_code JOIN sizes ON sizes.size_code = dog_kennels.size_code",
    ", notes  SELECT first_name, treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    ", description_of_treatment |  SELECT first_name, description_of_treatment  FROM professionals  JOIN treatments ON treatments.professional_id = professionals.professional_id",
    ", release_year  SELECT COUNT(*) FROM singer",
    ", release_year | album : album_id , title , singer_id , release_year , sales_millions , number_of_songs | SELECT COUNT(*) FROM singer",
    ", release_year  SELECT name FROM singer ORDER BY net_worth_millions ASC",
    ", release_year | album : album_id , title , singer_id , release_year , sales SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "| album : album_id , title , singer_id , sales , release_year  SELECT birth_year, citizenship FROM singer;",
    "| album : album_id , title , singer_id , sales , release_year  SELECT birth_year, citizenship FROM singer;",
    "| album : album_id , title , singer_id , release_year , sales_millions  SELECT name FROM singer WHERE citizenship != \"France\"",
    "| album : album_id , title , singer_id , release_year , sales_millions  SELECT name FROM singer WHERE citizenship != 'French'",
    ", release_year  SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    ", release_year  SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    ", release_year  SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer)",
    "| album : album_id , title , singer_id , release_year , sales  SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer)",
    "| album : album_id , title , singer_id , release_year , sales_millions  SELECT citizenship, COUNT(singer_id) AS num_singers FROM singer GROUP BY citizenship",
    "| citizenship : singer_id , country  SELECT citizenship.country, count(singer.singer_id) as num_singers FROM singer JOIN citizenship ON singer.singer_id = citizenship.singer_id GROUP BY citizenship.country",
    "| album : album_id , title , singer_id , release_year , sales  SELECT citizenship, COUNT(singer_id) AS num_singers FROM singer GROUP BY citizenship ORDER BY num_singers DESC LIMIT 1",
    "| album : album_id , title , singer_id , release_year , sales_millions  SELECT citizenship, COUNT(singer_id) AS num_singers FROM singer GROUP BY citizenship ORDER BY num_singers DESC LIMIT 1",
    "| album : album_id , title , singer_id , release_year , sales  SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship",
    ", release_year | album : album_id , title , singer_id , release_year , sales_millions SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;",
    ", release_year  SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    ", release_year  SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    ", release_date |  SELECT DISTINCT name FROM singer WHERE singer_id IN (   SELECT singer_id   FROM song   WHERE sales > 300000 )",
    ", release_year | album : album_id , title , singer_id , sales , release_year  SELECT DISTINCT name FROM singer WHERE net_worth_millions > 300000",
    ", release_year | SELECT name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name HAVING COUNT(*) > 1",
    ", release_year  SELECT name FROM singer WHERE singer_id IN (   SELECT singer_id   FROM song   GROUP BY singer_id   HAVING COUNT(*) > 1 )",
    ", release_year | sales : song_id , sales_date , sales_country , sales_amount  SELECT singer.name, SUM(sales.sales_amount) FROM singer JOIN song ON singer.singer_id = song.singer_id JOIN sales ON song.song_id = sales.song_id GROUP BY singer.name",
    ", release_year | SELECT name, SUM(sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name;",
    ", release_year | SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    ", release_date , genre | album : album_id , title , singer_id , sales , release_date , genre  SELECT sname FROM singer WHERE singer_id NOT IN     (SELECT singer_id      FROM song)",
    "| album : album_id , title , singer_id , release_year , sales  SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955",
    "| album : album_id , title , singer_id , release_year , sales_millions  SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955",
    "SELECT COUNT(*) as \"Number of Features\" FROM other_available_features",
    "SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon');",
    "SELECT property_type_description FROM ref_property_types WHERE property_type_code IN     (SELECT property_type_code      FROM properties      WHERE code = '3BR-1BA-HOUSE')",
    "SELECT property_name FROM properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1"
]