[
    "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND concert.year = 2015;",
    "SELECT DISTINCT s.name, s.location FROM stadium s INNER JOIN concert c1 ON s.stadium_id = c1.stadium_id AND c1.year = 2014 INNER JOIN concert c2 ON s.stadium_id = c2.stadium_id AND c2.year = 2015",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2015 )",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND stadium.stadium_id IN (     SELECT concert.stadium_id     FROM concert     WHERE concert.year = 2015 )",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT name, country FROM singer WHERE song_name LIKE '%hey%'",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT * FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT * FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT song_name, name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)",
    "SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.stadium_id ORDER BY COUNT(concert.concert_id) DESC LIMIT 10",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014",
    "SELECT DISTINCT singer.name  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year = 2014",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "SELECT DISTINCT stadium.name, stadium.location FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)",
    "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT singer.name, COUNT(concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name",
    "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert)",
    "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "SELECT name, country, age FROM singer ORDER BY age DESC",
    "SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)",
    "SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000.",
    "SELECT song_name, song_release_year FROM singer  WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT song_name, song_release_year FROM singer  WHERE age = (SELECT MIN(age) FROM singer)",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(student.age) FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) FROM pets GROUP BY pettype",
    "SELECT petid, weight FROM pets WHERE pet_age > 1",
    "SELECT student.fname, student.age FROM student  WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog')  AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat')",
    "SELECT student.fname, pets.pet_age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT MIN(weight) FROM pets",
    "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT MIN(weight) FROM pets",
    "SELECT student.age, student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid",
    "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)",
    "SELECT pettype, SUM(weight) AS total_weight FROM pets GROUP BY pettype",
    "SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype",
    "SELECT DISTINCT countryid, car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country;",
    "SELECT car_makers.id, car_makers.maker, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.maker",
    "SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.fullname",
    "SELECT car_makers.id, car_makers.maker, COUNT(model_list.modelid) AS num_models FROM car_makers JOIN model_list ON car_makers.maker = model_list.maker GROUP BY car_makers.id, car_makers.maker",
    "SELECT DISTINCT continent FROM countries WHERE countryid NOT IN (     SELECT country     FROM car_makers     JOIN countries ON car_makers.country = countries.countryid )",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)",
    "SELECT DISTINCT c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country WHERE cm.id IS NULL",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL",
    "SELECT DISTINCT countries.countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.id IS NULL",
    "SELECT DISTINCT c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country WHERE cm.id IS NULL",
    "SELECT AVG(weight) FROM cars_data WHERE year = [current year]",
    "SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year",
    "SELECT AVG(weight) FROM cars_data GROUP BY year",
    "SELECT DISTINCT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'european' AND (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) >= 3;",
    "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 3) AND continent = 'Europe'",
    "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.maker) DESC  LIMIT 1",
    "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1;",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airlines'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airways'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airportname FROM airports WHERE city = 'Aberdeen'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airline, abbreviation FROM airlines WHERE country = 'USA'",
    "SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'",
    "SELECT country FROM airlines WHERE airline = 'Jetblue Airway'",
    "SELECT country FROM airlines WHERE airline = 'JetBlue Airways'",
    "SELECT airportname FROM airports WHERE airportcode = 'AKO'",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY SUM(evaluation.bonus) DESC LIMIT 1",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT s.manager_name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop) LIMIT 1",
    "SELECT e.name AS manager_name, s.district FROM shop s JOIN employee e ON s.manager_name = e.name WHERE s.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)",
    "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name",
    "SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL",
    "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT DISTINCT location FROM shop WHERE number_products < 3000 OR number_products > 10000",
    "SELECT name, age FROM employee ORDER BY age ASC",
    "SELECT employee.name, employee.age, shop.name, shop.manager_name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id ORDER BY employee.age ASC",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation)",
    "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1)",
    "SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'",
    "SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "SELECT document_id, document_name FROM documents WHERE document_name LIKE 'w%'",
    "SELECT document_name, template_id FROM documents WHERE document_name LIKE '%w%'",
    "SELECT documents.document_name, templates.template_type_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name LIKE '%w%' AND templates.template_details IS NOT NULL;",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT DISTINCT teacher.name FROM teacher LEFT JOIN course_teach ON teacher.teacher_id = course_teach.teacher_id LEFT JOIN course_arrange ON course_teach.course_id = course_arrange.course_id AND course_teach.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name",
    "SELECT name FROM teacher WHERE hometown <> 'little lever urban district'",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) = 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) = 2",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) > 1",
    "SELECT age, hometown FROM teacher",
    "SELECT teacher.age, teacher.hometown FROM teacher",
    "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
    "SELECT DISTINCT teacher.hometown FROM teacher WHERE teacher.hometown <> 'Little Lever Urban District'",
    "SELECT * FROM teacher WHERE hometown <> 'Little Lever Urban district'",
    "SELECT name FROM teacher ORDER BY age ASC",
    "SELECT name FROM teacher WHERE age >= 32 AND age <= 33",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT name FROM teacher WHERE age = 32 OR age = 33",
    "SELECT name FROM teacher WHERE age >= 32 AND age <= 33",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'math'",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'math'",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id",
    "SELECT teacher.name  FROM teacher  LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  WHERE course_arrange.course_id IS NULL",
    "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange WHERE course_arrange.course_id = 'course')",
    "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL",
    "SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)",
    "SELECT teacher.name  FROM teacher  LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  WHERE course_arrange.course_id IS NULL",
    "SELECT name FROM teacher WHERE age IN (32, 33)",
    "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(*) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT t.name  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  GROUP BY t.teacher_id  HAVING COUNT(DISTINCT ca.course_id) >= 2",
    "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2",
    "SELECT DISTINCT visitor.name FROM visitor JOIN visit v1 ON visitor.id = v1.visitor_id JOIN visit v2 ON visitor.id = v2.visitor_id JOIN museum m1 ON v1.museum_id = m1.museum_id JOIN museum m2 ON v2.museum_id = m2.museum_id WHERE m1.open_year < 2009 AND m2.open_year > 2011",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
    "SELECT visitor.name, visitor.age, MAX(visit.num_of_ticket)  FROM visit  JOIN visitor ON visit.visitor_id = visitor.id  GROUP BY visitor.id  ORDER BY MAX(visit.num_of_ticket) DESC  LIMIT 1;",
    "SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "select tourney_name from matches group by tourney_name having count(*) > 10",
    "SELECT winner_name FROM matches WHERE tourney_name LIKE '%Australian Open%' ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
    "SELECT winner_name FROM matches WHERE tourney_name = 'Australian open test' ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT first_name, last_name, birth_date FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
    "SELECT DISTINCT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year IN (2013, 2016)",
    "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_rank_points DESC LIMIT 1",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name, minutes FROM matches ORDER BY minutes DESC LIMIT 1",
    "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016)",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016",
    "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT DISTINCT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
    "SELECT winner_name, loser_name, score FROM matches WHERE LENGTH(score) = (SELECT MAX(LENGTH(score)) FROM matches)",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT AVG(loser_age), AVG(winner_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT AVG(winner_age), AVG(loser_age) FROM matches",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
    "SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
    "SELECT ship.id FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM(death.injured) DESC LIMIT 1",
    "SELECT id, name, result FROM battle_death.battle WHERE bulgarian_commander <> 'Boril'",
    "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "SELECT name, location, result FROM battle_death JOIN ship ON battle_death.id = ship.id",
    "SELECT transcript_id FROM transcripts WHERE COUNT(student_course_id) >= 2",
    "SELECT courses.course_id, courses.course_name FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id, courses.course_name HAVING COUNT(sections.section_id) < 2",
    "SELECT students.first_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%bachelor%'",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT degree_summary_name, COUNT(*) AS num_students FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_enrolled FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_enrolled DESC LIMIT 1;",
    "SELECT degree_summary_name, COUNT(*) AS enrollment_count FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_summary_name ORDER BY enrollment_count DESC LIMIT 1;",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS num_students FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
    "SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1",
    "SELECT MIN(transcript_date) FROM transcripts;   SELECT * FROM transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM transcripts);",
    "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_transcripts_tracking.transcripts ON student_enrolment.student_enrolment_id = transcripts.student_enrolment_id JOIN student_transcripts_tracking.transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN courses ON transcript_contents.course_id = courses.course_id ORDER BY students.date_left - students.date_first_registered DESC LIMIT 1",
    "SELECT MAX(transcript_date) FROM transcripts",
    "SELECT degree_programs.degree_summary_name, COUNT(*) AS enrollment_count FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY enrollment_count DESC LIMIT 1;",
    "SELECT degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT degree_summary_name  FROM degree_programs  WHERE degree_program_id = (     SELECT degree_program_id      FROM student_enrolment      GROUP BY degree_program_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT course_name, COUNT(*) AS enrollment_count FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY enrollment_count DESC LIMIT 1;",
    "SELECT course_name, COUNT(*) AS enrollment_count FROM student_enrolment_courses  JOIN courses ON student_enrolment_courses.course_id = courses.course_id  GROUP BY course_name  ORDER BY enrollment_count DESC  LIMIT 1",
    "SELECT course_id, COUNT(*) as num_sections FROM sections GROUP BY course_id HAVING num_sections <= 2",
    "SELECT course_id, COUNT(*) AS num_sections FROM sections GROUP BY course_id HAVING num_sections <= 2;",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT DISTINCT courses.course_name  FROM courses  INNER JOIN student_enrolment_courses  ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT DISTINCT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT departments.department_id, departments.department_name FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;",
    "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)",
    "SELECT section_name, section_description FROM sections",
    "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
    "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "SELECT section_name FROM sections ORDER BY section_name DESC",
    "SELECT semester_id, COUNT(DISTINCT student_id) * 100.0 / (SELECT COUNT(DISTINCT student_id) FROM student_enrolment) AS percentage FROM student_enrolment GROUP BY semester_id ORDER BY percentage DESC LIMIT 1;",
    "SELECT semester_id, COUNT(*) AS num_students_registered FROM student_enrolment GROUP BY semester_id ORDER BY num_students_registered DESC LIMIT 1;   SELECT student_enrolment.student_id FROM student_enrolment WHERE semester_id = (SELECT semester_id                      FROM student_enrolment                      GROUP BY semester_id                      ORDER BY COUNT(*) DESC                      LIMIT 1);",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT series_name FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
    "SELECT series_name FROM tv_series WHERE episode = 'A Love of a lifetime'",
    "SELECT series_name FROM tv_series WHERE episode = 'A Love of a Lifetime'",
    "SELECT series_name FROM tv_series WHERE episode = \"A love of a lifetime\"",
    "SELECT series_name FROM tv_series WHERE episode = 'A love of a lifetime'",
    "SELECT tv_series.series_name FROM tv_series WHERE tv_series.episode = 'A love of a lifetime'",
    "SELECT channel FROM cartoon WHERE title = 'rise of blue beetle'",
    "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' AND cartoon.title LIKE '%cartoon%'",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true AND series_name IN (SELECT series_name FROM tv_series)",
    "I'm sorry, but the serialized schema you provided does not contain the necessary tables to answer your question. Could you please provide the correct schema?",
    "SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;",
    "SELECT DISTINCT tv_channel.country, tv_channel.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  JOIN cartoon ON tv_series.id = cartoon.channel  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang')  GROUP BY tv_channel.country, tv_channel.series_name  HAVING COUNT(DISTINCT cartoon.directed_by) = 2",
    "SELECT air_date FROM tv_series WHERE series_name = 'a love of a lifetime'",
    "SELECT air_date FROM tv_series WHERE episode = \"A love of a lifetime\"",
    "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle!'",
    "SELECT channel FROM tv_series WHERE series_name = 'A love of a lifetime'",
    "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT * FROM poker_player WHERE earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 30000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT name FROM people WHERE nationality <> 'Russian'",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))",
    "SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE earnings < 1000 ORDER BY birth_date LIMIT 1",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "select distinct nationality from people where nationality != 'Russian'",
    "SELECT name FROM people WHERE nationality <> 'Russia'",
    "SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings ASC LIMIT 1)",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made DESC",
    "SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
    "SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT pp.people_id FROM poker_player pp)",
    "SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT people.name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL",
    "SELECT * FROM poker_player ORDER BY earnings DESC",
    "SELECT p.name FROM people p WHERE NOT EXISTS (SELECT * FROM poker_player pp WHERE pp.people_id = p.people_id)",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id",
    "SELECT name FROM people WHERE people_id IN (SELECT people_id FROM poker_player)",
    "SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC",
    "SELECT * FROM poker_player ORDER BY final_table_made DESC",
    "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'",
    "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
    "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage cl1 ON country.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON country.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French')",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English')",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3;",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'F')",
    "SELECT name AS country_name, population, headofstate  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT country.name FROM country JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS lang_count ON country.code = lang_count.countrycode",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) DESC LIMIT 1;",
    "SELECT name FROM country  WHERE code = (     SELECT countrycode FROM countrylanguage      GROUP BY countrycode      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT country.name FROM country JOIN (SELECT countrycode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY countrycode ORDER BY num_languages DESC LIMIT 1) AS lang_count ON country.code = lang_count.countrycode",
    "SELECT name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) DESC LIMIT 1;",
    "SELECT name FROM country WHERE indepyear >= 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'T'",
    "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.isofficial = 'T' AND countrylanguage.language != 'English'",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population ASC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name, population FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY population DESC LIMIT 3",
    "SELECT name FROM country ORDER BY (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = code) DESC LIMIT 1;",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY num_languages DESC LIMIT 1;",
    "SELECT country.name, COUNT(countrylanguage.language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages > 2;",
    "SELECT country.name, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (SELECT COUNT(*) FROM countrylanguage WHERE countrycode = country.code) > 2",
    "SELECT country.name, COUNT(countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) > 2",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')",
    "SELECT DISTINCT country.name FROM countrylanguage AS cl1, countrylanguage AS cl2, country WHERE cl1.countrycode = country.code AND cl2.countrycode = country.code AND cl1.language = 'English' AND cl2.language = 'French' AND cl1.isofficial = 'T' AND cl2.isofficial = 'T'",
    "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000",
    "SELECT name FROM country WHERE population = 80000 AND continent = 'Europe'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT DISTINCT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT city.name FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 8000",
    "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T'",
    "SELECT name FROM country WHERE language = 'English' AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'French')  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.language) = 2 AND MAX(CASE WHEN countrylanguage.language = 'English' THEN countrylanguage.isofficial ELSE 0 END) = 1 AND MAX(CASE WHEN countrylanguage.language = 'French' THEN countrylanguage.isofficial ELSE 0 END) = 1",
    "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')",
    "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'French') AND countrylanguage.isofficial = 'T'",
    "SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_spoken_numbers FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) >= 3;",
    "SELECT country.name, COUNT(countrylanguage.language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING num_languages >= 3;",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM country WHERE indepyear > 1950",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT name FROM conductor WHERE nationality != 'USA'",
    "SELECT name FROM conductor WHERE nationality <> 'USA' OR nationality IS NULL",
    "SELECT name FROM conductor WHERE nationality <> 'American'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT * FROM conductor WHERE nationality <> 'US'",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o1 ON c.conductor_id = o1.conductor_id  JOIN orchestra o2 ON c.conductor_id = o2.conductor_id AND o1.orchestra_id <> o2.orchestra_id",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT name FROM conductor WHERE nationality <> 'usa'",
    "SELECT name FROM conductor WHERE nationality <> 'America'",
    "SELECT name FROM conductor WHERE nationality <> 'US'",
    "SELECT name FROM conductor WHERE nationality <> 'USA'",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id ORDER BY performance.date DESC LIMIT 1",
    "SELECT conductor.name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008 OR orchestra.year_of_work > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded = 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
    "SELECT name FROM conductor ORDER BY year_of_work ASC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.* FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT DISTINCT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "SELECT conductor.name FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o1 ON c.conductor_id = o1.conductor_id  JOIN orchestra o2 ON c.conductor_id = o2.conductor_id AND o1.orchestra_id <> o2.orchestra_id",
    "SELECT DISTINCT c1.name  FROM conductor c1  JOIN conductor c2 ON c1.name = c2.name AND c1.conductor_id <> c2.conductor_id",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1",
    "SELECT name FROM conductor ORDER BY age ASC",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1",
    "SELECT * FROM conductor ORDER BY year_of_work DESC",
    "SELECT * FROM conductor ORDER BY year_of_work DESC",
    "SELECT name, year_of_work FROM conductor ORDER BY year_of_work DESC",
    "SELECT name FROM conductor ORDER BY year_of_work DESC",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id = (     SELECT likes.student_id      FROM likes      GROUP BY likes.student_id      ORDER BY COUNT(*) DESC      LIMIT 1 )",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(likes.liked_id) DESC LIMIT 1",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(likes.liked_id) DESC LIMIT 1",
    "SELECT highschooler.name FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(*) DESC LIMIT 1",
    "SELECT * FROM highschooler WHERE grade = 10",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  GROUP BY h.id  HAVING COUNT(f.friend_id) >= 3",
    "SELECT h.name  FROM highschooler h  WHERE h.grade = 'high' AND        (SELECT COUNT(*)         FROM friend f         WHERE f.student_id = h.id OR f.friend_id = h.id) >= 3",
    "SELECT highschooler.name, likes.liked_id  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS likes_count, COUNT(likes.liked_id)/COUNT(DISTINCT likes.student_id) AS likes_per_person FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY likes_per_person DESC",
    "SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) > 0;",
    "SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN friend ON likes.liked_id = friend.friend_id AND likes.student_id = friend.student_id WHERE highschooler.grade > 5 GROUP BY highschooler.id HAVING COUNT(DISTINCT friend.friend_id) >= 2",
    "SELECT DISTINCT h1.name  FROM highschooler h1  JOIN friend f ON h1.id = f.student_id  JOIN likes l ON h1.id = l.student_id  JOIN highschooler h2 ON l.liked_id = h2.id AND h1.id <> h2.id  JOIN friend f2 ON h2.id = f2.student_id AND f2.friend_id = h1.id",
    "SELECT DISTINCT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON f.friend_id = l.liked_id AND f.student_id = l.student_id",
    "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;",
    "SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f  WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id",
    "SELECT h2.name  FROM highschooler h1, highschooler h2, friend f  WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id",
    "SELECT id, name, grade FROM highschooler",
    "SELECT h.name  FROM highschooler h  JOIN friend f1 ON h.id = f1.student_id  JOIN friend f2 ON h.id = f2.student_id  WHERE h.grade > 5 AND f1.friend_id <> h.id AND f2.friend_id <> h.id  GROUP BY h.id  HAVING COUNT(DISTINCT f1.friend_id, f2.friend_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.friend_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f2.student_id) >= 2",
    "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN friend f2 ON h.id = f2.student_id AND f.friend_id <> f2.friend_id  JOIN likes l ON h.id = l.student_id  WHERE h.grade > 5  GROUP BY h.id  HAVING COUNT(DISTINCT f.friend_id) >= 2",
    "SELECT name FROM highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2)",
    "SELECT DISTINCT likes.student_id FROM likes GROUP BY likes.student_id HAVING COUNT(*) >= 2",
    "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2",
    "SELECT DISTINCT h1.name FROM highschooler h1, highschooler h2 WHERE h1.id <> h2.id AND h1.id IN (SELECT f1.friend_id FROM friend f1 WHERE f1.student_id = h2.id) AND h2.id IN (SELECT f2.friend_id FROM friend f2 WHERE f2.student_id = h1.id)",
    "SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id HAVING COUNT(friend.friend_id) > 0",
    "SELECT highschooler.name FROM highschooler  WHERE highschooler.id = (     SELECT friend.student_id FROM friend      GROUP BY friend.student_id      ORDER BY COUNT(friend.friend_id) DESC      LIMIT 1 )",
    "SELECT DISTINCT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;",
    "SELECT DISTINCT s1.name  FROM highschooler s1, likes l1, likes l2  WHERE s1.id = l1.student_id AND l1.liked_id = l2.liked_id AND l1.student_id <> l2.student_id",
    "SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2",
    "SELECT name, count(friend_id) as friend_count FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY name, grade HAVING grade = 'high' ORDER BY friend_count DESC",
    "SELECT id, name, grade FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id NOT IN      (SELECT friend.student_id       FROM friend       UNION       SELECT friend.friend_id       FROM friend)",
    "SELECT highschooler.name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL",
    "SELECT highschooler.name  FROM highschooler  WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE grade = 10",
    "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 3)",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code IS NOT NULL",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL",
    "SELECT TOP 1 d.breed_name, COUNT(t.treatment_id) AS treatment_times FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code GROUP BY d.breed_name ORDER BY COUNT(DISTINCT d.dog_id) ASC, treatment_times DESC",
    "SELECT d.name, d.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE d.abandoned_yn = 'N' AND d.breed_code IN (     SELECT breed_code     FROM dogs     GROUP BY breed_code     HAVING COUNT(*) = 1 ) ORDER BY d.date_of_treatment ASC",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'N'",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_type_code = 'treatment_type_code'",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id",
    "SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatment_type_code = 'treatment_type_code'",
    "SELECT first_name || ' ' || last_name AS owner_name, email_address FROM owners WHERE state LIKE 'North%'",
    "SELECT owner_id, name, dog_id FROM dogs WHERE dog_id IN (     SELECT dog_id     FROM dogs     GROUP BY owner_id     HAVING COUNT(*) > (         SELECT COUNT(*)         FROM dogs         GROUP BY owner_id         ORDER BY COUNT(*) DESC         LIMIT 1     ) )",
    "SELECT date_arrived, date_departed FROM dogs WHERE date_arrived IS NOT NULL AND date_departed IS NOT NULL",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs WHERE abandoned_yn = 'N'",
    "SELECT MAX(age) FROM dogs",
    "SELECT date_arrived, date_departed FROM dogs",
    "I'm sorry, but the schema you provided does not have any information about when dogs came and left. Can you please provide a schema that includes this information?",
    "SELECT date_arrived, date_departed FROM dogs",
    "SELECT dog_id, date_arrived, date_departed FROM dogs",
    "SELECT dog_id, date_arrived, date_departed FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "SELECT AVG(age) FROM dogs",
    "select avg(age) from dogs",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id  WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT MAX(age) FROM dogs",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT DISTINCT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
    "SELECT breed_code, COUNT(*) AS num_dogs FROM dogs GROUP BY breed_code ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT breed_name, COUNT(*) AS count FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY count DESC LIMIT 1",
    "SELECT breed_name, COUNT(*) AS num_dogs FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breed_name ORDER BY num_dogs DESC LIMIT 1;",
    "SELECT singer.name, song.sales FROM singer JOIN song ON singer.singer_id = song.singer_id",
    "SELECT SUM(sales) FROM song",
    "I'm sorry, your question is incomplete. Could you please provide more details or clarify your question?",
    "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "SELECT name FROM singer ORDER BY net_worth_millions ASC",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship != 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000)",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE citizenship != 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'French'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE citizenship <> 'France'",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
    "SELECT name FROM singer WHERE birth_year = 1949 OR birth_year = 1948",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.title) > 1",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;",
    "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
    "SELECT property_name FROM properties WHERE room_count > 1 AND (property_type_code = 'APT' OR property_type_code = 'HSE')",
    "SELECT property_name, property_address, room_count, apt_feature_1, apt_feature_2, apt_feature_3, hse_feature_1, hse_feature_2, hse_feature_3 FROM properties WHERE room_count > 1 AND (property_type_code = 'APT' OR property_type_code = 'HSE')",
    "SELECT feature_name FROM other_available_features WHERE feature_name = 'AirCon'"
]